--- /host/data/test/out/wt-status.c	2024-03-15 17:27:35.487088394 +0000
+++ /oss/git/wt-status.c	2024-03-05 20:45:27.646563340 +0000
@@ -1,5 +1,3 @@
-#include "acr.h"
-
 #include "cache.h"
 #include "wt-status.h"
 #include "object.h"
@@ -53,7 +51,7 @@
 {
 	struct strbuf sb = STRBUF_INIT;
 	struct strbuf linebuf = STRBUF_INIT;
-	const char *line = NULL, *eol = NULL;
+	const char *line, *eol;
 
 	strbuf_vaddf(&sb, fmt, ap);
 	if (!sb.len) {
@@ -151,7 +149,7 @@
 
 static void wt_longstatus_print_unmerged_header(struct wt_status *s)
 {
-	int i = 0;
+	int i;
 	int del_mod_conflict = 0;
 	int both_deleted = 0;
 	int not_deleted = 0;
@@ -328,8 +326,8 @@
 	struct strbuf onebuf = STRBUF_INIT;
 	static char *padding;
 	static int label_width;
-	const char *one = NULL, *how = NULL;
-	int len = 0;
+	const char *one, *how;
+	int len;
 
 	if (!padding) {
 		label_width = maxwidth(wt_status_unmerged_status_string, 1, 7);
@@ -353,16 +351,16 @@
 {
 	struct wt_status_change_data *d = it->util;
 	const char *c = color(change_type, s);
-	int status = 0;
-	char *one_name = NULL;
-	char *two_name = NULL;
-	const char *one = NULL, *two = NULL;
+	int status;
+	char *one_name;
+	char *two_name;
+	const char *one, *two;
 	struct strbuf onebuf = STRBUF_INIT, twobuf = STRBUF_INIT;
 	struct strbuf extra = STRBUF_INIT;
 	static char *padding;
 	static int label_width;
-	const char *what = NULL;
-	int len = 0;
+	const char *what;
+	int len;
 
 	if (!padding) {
 		/* If DIFF_STATUS_* uses outside the range [A..Z], we're in trouble */
@@ -444,15 +442,15 @@
 					 void *data)
 {
 	struct wt_status *s = data;
-	int i = 0;
+	int i;
 
 	if (!q->nr)
 		return;
 	s->workdir_dirty = 1;
 	for (i = 0; i < q->nr; i++) {
-		struct diff_filepair *p = NULL;
-		struct string_list_item *it = NULL;
-		struct wt_status_change_data *d = NULL;
+		struct diff_filepair *p;
+		struct string_list_item *it;
+		struct wt_status_change_data *d;
 
 		p = q->queue[i];
 		it = string_list_insert(&s->change, p->two->path);
@@ -508,8 +506,8 @@
 
 static int unmerged_mask(struct index_state *istate, const char *path)
 {
-	int pos = 0, mask = 0;
-	const struct cache_entry *ce = NULL;
+	int pos, mask;
+	const struct cache_entry *ce;
 
 	pos = index_name_pos(istate, path, strlen(path));
 	if (0 <= pos)
@@ -531,12 +529,12 @@
 					 void *data)
 {
 	struct wt_status *s = data;
-	int i = 0;
+	int i;
 
 	for (i = 0; i < q->nr; i++) {
-		struct diff_filepair *p = NULL;
-		struct string_list_item *it = NULL;
-		struct wt_status_change_data *d = NULL;
+		struct diff_filepair *p;
+		struct string_list_item *it;
+		struct wt_status_change_data *d;
 
 		p = q->queue[i];
 		it = string_list_insert(&s->change, p->two->path);
@@ -671,8 +669,8 @@
 			    struct strbuf *base, const char *path,
 			    unsigned int mode, void *context)
 {
-	struct string_list_item *it = NULL;
-	struct wt_status_change_data *d = NULL;
+	struct string_list_item *it;
+	struct wt_status_change_data *d;
 	struct wt_status *s = context;
 	struct strbuf full_name = STRBUF_INIT;
 
@@ -700,11 +698,11 @@
 static void wt_status_collect_changes_initial(struct wt_status *s)
 {
 	struct index_state *istate = s->repo->index;
-	int i = 0;
+	int i;
 
 	for (i = 0; i < istate->cache_nr; i++) {
-		struct string_list_item *it = NULL;
-		struct wt_status_change_data *d = NULL;
+		struct string_list_item *it;
+		struct wt_status_change_data *d;
 		const struct cache_entry *ce = istate->cache[i];
 
 		if (!ce_path_match(istate, ce, &s->pathspec, NULL))
@@ -759,7 +757,7 @@
 
 static void wt_status_collect_untracked(struct wt_status *s)
 {
-	int i = 0;
+	int i;
 	struct dir_struct dir = DIR_INIT;
 	uint64_t t_begin = getnanotime();
 	struct index_state *istate = s->repo->index;
@@ -803,10 +801,10 @@
 
 static int has_unmerged(struct wt_status *s)
 {
-	int i = 0;
+	int i;
 
 	for (i = 0; i < s->change.nr; i++) {
-		struct wt_status_change_data *d = NULL;
+		struct wt_status_change_data *d;
 		d = s->change.items[i].util;
 		if (d->stagemask)
 			return 1;
@@ -854,11 +852,11 @@
 static void wt_longstatus_print_unmerged(struct wt_status *s)
 {
 	int shown_header = 0;
-	int i = 0;
+	int i;
 
 	for (i = 0; i < s->change.nr; i++) {
-		struct wt_status_change_data *d = NULL;
-		struct string_list_item *it = NULL;
+		struct wt_status_change_data *d;
+		struct string_list_item *it;
 		it = &(s->change.items[i]);
 		d = it->util;
 		if (!d->stagemask)
@@ -877,11 +875,11 @@
 static void wt_longstatus_print_updated(struct wt_status *s)
 {
 	int shown_header = 0;
-	int i = 0;
+	int i;
 
 	for (i = 0; i < s->change.nr; i++) {
-		struct wt_status_change_data *d = NULL;
-		struct string_list_item *it = NULL;
+		struct wt_status_change_data *d;
+		struct string_list_item *it;
 		it = &(s->change.items[i]);
 		d = it->util;
 		if (!d->index_status ||
@@ -905,13 +903,13 @@
 static int wt_status_check_worktree_changes(struct wt_status *s,
 					     int *dirty_submodules)
 {
-	int i = 0;
+	int i;
 	int changes = 0;
 
 	*dirty_submodules = 0;
 
 	for (i = 0; i < s->change.nr; i++) {
-		struct wt_status_change_data *d = NULL;
+		struct wt_status_change_data *d;
 		d = s->change.items[i].util;
 		if (!d->worktree_status ||
 		    d->worktree_status == DIFF_STATUS_UNMERGED)
@@ -928,7 +926,7 @@
 
 static void wt_longstatus_print_changed(struct wt_status *s)
 {
-	int i = 0, dirty_submodules = 0;
+	int i, dirty_submodules;
 	int worktree_changes = wt_status_check_worktree_changes(s, &dirty_submodules);
 
 	if (!worktree_changes)
@@ -937,8 +935,8 @@
 	wt_longstatus_print_dirty_header(s, worktree_changes < 0, dirty_submodules);
 
 	for (i = 0; i < s->change.nr; i++) {
-		struct wt_status_change_data *d = NULL;
-		struct string_list_item *it = NULL;
+		struct wt_status_change_data *d;
+		struct string_list_item *it;
 		it = &(s->change.items[i]);
 		d = it->util;
 		if (!d->worktree_status ||
@@ -983,7 +981,7 @@
 	struct child_process sm_summary = CHILD_PROCESS_INIT;
 	struct strbuf cmd_stdout = STRBUF_INIT;
 	struct strbuf summary = STRBUF_INIT;
-	char *summary_content = NULL;
+	char *summary_content;
 
 	strvec_pushf(&sm_summary.env, "GIT_INDEX_FILE=%s", s->index_file);
 
@@ -1013,7 +1011,7 @@
 	strbuf_release(&cmd_stdout);
 
 	if (s->display_comment_prefix) {
-		size_t len = 0;
+		size_t len;
 		summary_content = strbuf_detach(&summary, &len);
 		strbuf_add_commented_lines(&summary, summary_content, len);
 		free(summary_content);
@@ -1028,7 +1026,7 @@
 				      const char *what,
 				      const char *how)
 {
-	int i = 0;
+	int i;
 	struct strbuf buf = STRBUF_INIT;
 	static struct string_list output = STRING_LIST_INIT_DUP;
 	struct column_options copts;
@@ -1039,8 +1037,8 @@
 	wt_longstatus_print_other_header(s, what, how);
 
 	for (i = 0; i < l->nr; i++) {
-		struct string_list_item *it = NULL;
-		const char *path = NULL;
+		struct string_list_item *it;
+		const char *path;
 		it = &(l->items[i]);
 		path = quote_path(it->string, s->prefix, &buf, 0);
 		if (column_active(s->colopts)) {
@@ -1074,7 +1072,7 @@
 
 size_t wt_status_locate_end(const char *s, size_t len)
 {
-	const char *p = NULL;
+	const char *p;
 	struct strbuf pattern = STRBUF_INIT;
 
 	strbuf_addf(&pattern, "\n%c %s", comment_line_char, cut_line);
@@ -1107,7 +1105,7 @@
 {
 	struct rev_info rev;
 	struct setup_revision_opt opt;
-	int dirty_submodules = 0;
+	int dirty_submodules;
 	const char *c = color(WT_STATUS_HEADER, s);
 
 	repo_init_revisions(s->repo, &rev, NULL);
@@ -1161,10 +1159,10 @@
 static void wt_longstatus_print_tracking(struct wt_status *s)
 {
 	struct strbuf sb = STRBUF_INIT;
-	const char *cp = NULL, *ep = NULL, *branch_name = NULL;
-	struct branch *branch = NULL;
+	const char *cp, *ep, *branch_name;
+	struct branch *branch;
 	char comment_line_string[3];
-	int i = 0;
+	int i;
 	uint64_t t_begin = 0;
 
 	assert(s->branch && !s->is_initial);
@@ -1231,7 +1229,7 @@
 static void show_am_in_progress(struct wt_status *s,
 				const char *color)
 {
-	int am_empty_patch = 0;
+	int am_empty_patch;
 
 	status_printf_ln(s, color,
 		_("You are in the middle of an am session."));
@@ -1275,7 +1273,7 @@
 static int split_commit_in_progress(struct wt_status *s)
 {
 	int split_in_progress = 0;
-	char *head = NULL, *orig_head = NULL, *rebase_amend = NULL, *rebase_orig_head = NULL;
+	char *head, *orig_head, *rebase_amend, *rebase_orig_head;
 
 	if ((!s->amend && !s->nowarn && !s->workdir_dirty) ||
 	    !s->branch || strcmp(s->branch, "HEAD"))
@@ -1312,8 +1310,8 @@
  */
 static void abbrev_oid_in_line(struct strbuf *line)
 {
-	struct strbuf **split = NULL;
-	int i = 0;
+	struct strbuf **split;
+	int i;
 
 	if (starts_with(line->buf, "exec ") ||
 	    starts_with(line->buf, "x ") ||
@@ -1372,7 +1370,7 @@
 				    const char *color)
 {
 	if (s->state.rebase_interactive_in_progress) {
-		int i = 0;
+		int i;
 		int nr_lines_to_show = 2;
 
 		struct string_list have_done = STRING_LIST_INIT_DUP;
@@ -1584,7 +1582,7 @@
 {
 	struct strbuf sb = STRBUF_INIT;
 	struct object_id oid;
-	const char *branch_name = NULL;
+	const char *branch_name;
 
 	if (strbuf_read_file(&sb, worktree_git_path(wt, "%s", path), 0) <= 0)
 		goto got_nothing;
@@ -1623,7 +1621,7 @@
 			   const char *message, void *cb_data)
 {
 	struct grab_1st_switch_cbdata *cb = cb_data;
-	const char *target = NULL, *end = NULL;
+	const char *target = NULL, *end;
 
 	if (!skip_prefix(message, "checkout: moving from ", &message))
 		return 0;
@@ -1647,7 +1645,7 @@
 					struct wt_status_state *state)
 {
 	struct grab_1st_switch_cbdata cb;
-	struct commit *commit = NULL;
+	struct commit *commit;
 	struct object_id oid;
 	char *ref = NULL;
 
@@ -1722,7 +1720,7 @@
 					    struct wt_status_state *state)
 {
 	int skip_worktree = 0;
-	int i = 0;
+	int i;
 
 	if (!core_apply_sparse_checkout || r->index->cache_nr == 0) {
 		/*
@@ -1754,7 +1752,7 @@
 {
 	struct stat st;
 	struct object_id oid;
-	enum replay_action action = 0;
+	enum replay_action action;
 
 	if (!stat(git_path_merge_head(r), &st)) {
 		wt_status_check_rebase(NULL, state);
@@ -1949,7 +1947,7 @@
 		fprintf(s->fp, " %s%c", it->string, 0);
 	} else {
 		struct strbuf onebuf = STRBUF_INIT;
-		const char *one = NULL;
+		const char *one;
 		one = quote_path(it->string, s->prefix, &onebuf, QUOTE_PATH_QUOTE_SP);
 		fprintf(s->fp, " %s\n", one);
 		strbuf_release(&onebuf);
@@ -1976,7 +1974,7 @@
 			fprintf(s->fp, "%s%c", d->rename_source, 0);
 	} else {
 		struct strbuf onebuf = STRBUF_INIT;
-		const char *one = NULL;
+		const char *one;
 
 		if (d->rename_source) {
 			one = quote_path(d->rename_source, s->prefix, &onebuf,
@@ -1997,7 +1995,7 @@
 		fprintf(s->fp, "%s %s%c", sign, it->string, 0);
 	} else {
 		struct strbuf onebuf = STRBUF_INIT;
-		const char *one = NULL;
+		const char *one;
 		one = quote_path(it->string, s->prefix, &onebuf, QUOTE_PATH_QUOTE_SP);
 		color_fprintf(s->fp, color(WT_STATUS_UNTRACKED, s), "%s", sign);
 		fprintf(s->fp, " %s\n", one);
@@ -2007,15 +2005,15 @@
 
 static void wt_shortstatus_print_tracking(struct wt_status *s)
 {
-	struct branch *branch = NULL;
+	struct branch *branch;
 	const char *header_color = color(WT_STATUS_HEADER, s);
 	const char *branch_color_local = color(WT_STATUS_LOCAL_BRANCH, s);
 	const char *branch_color_remote = color(WT_STATUS_REMOTE_BRANCH, s);
 
-	const char *base = NULL;
-	char *short_base = NULL;
-	const char *branch_name = NULL;
-	int num_ours = 0, num_theirs = 0, sti = 0;
+	const char *base;
+	char *short_base;
+	const char *branch_name;
+	int num_ours, num_theirs, sti;
 	int upstream_is_gone = 0;
 
 	color_fprintf(s->fp, color(WT_STATUS_HEADER, s), "## ");
@@ -2083,7 +2081,7 @@
 
 static void wt_shortstatus_print(struct wt_status *s)
 {
-	struct string_list_item *it = NULL;
+	struct string_list_item *it;
 
 	if (s->show_branch)
 		wt_shortstatus_print_tracking(s);
@@ -2147,10 +2145,10 @@
  */
 static void wt_porcelain_v2_print_tracking(struct wt_status *s)
 {
-	struct branch *branch = NULL;
-	const char *base = NULL;
-	const char *branch_name = NULL;
-	int ab_info = 0, nr_ahead = 0, nr_behind = 0;
+	struct branch *branch;
+	const char *base;
+	const char *branch_name;
+	int ab_info, nr_ahead, nr_behind;
 	char eol = s->null_termination ? '\0' : '\n';
 
 	fprintf(s->fp, "# branch.oid %s%c",
@@ -2300,7 +2298,7 @@
 	const char *path_from = NULL;
 	char key[3];
 	char submodule_token[5];
-	char sep_char = 0, eol_char = 0;
+	char sep_char, eol_char;
 
 	wt_porcelain_v2_fix_up_changed(it);
 	wt_porcelain_v2_submodule_state(d, submodule_token);
@@ -2359,15 +2357,15 @@
 {
 	struct wt_status_change_data *d = it->util;
 	struct index_state *istate = s->repo->index;
-	const struct cache_entry *ce = NULL;
+	const struct cache_entry *ce;
 	struct strbuf buf_index = STRBUF_INIT;
 	const char *path_index = NULL;
-	int pos = 0, stage = 0, sum = 0;
+	int pos, stage, sum;
 	struct {
 		int mode;
 		struct object_id oid;
 	} stages[3];
-	char *key = NULL;
+	char *key;
 	char submodule_token[5];
 	char unmerged_prefix = 'u';
 	char eol_char = s->null_termination ? '\0' : '\n';
@@ -2441,8 +2439,8 @@
 	char prefix)
 {
 	struct strbuf buf = STRBUF_INIT;
-	const char *path = NULL;
-	char eol_char = 0;
+	const char *path;
+	char eol_char;
 
 	if (s->null_termination) {
 		path = it->string;
@@ -2469,9 +2467,9 @@
  */
 static void wt_porcelain_v2_print(struct wt_status *s)
 {
-	struct wt_status_change_data *d = NULL;
-	struct string_list_item *it = NULL;
-	int i = 0;
+	struct wt_status_change_data *d;
+	struct string_list_item *it;
+	int i;
 
 	if (s->show_branch)
 		wt_porcelain_v2_print_tracking(s);
@@ -2541,7 +2539,7 @@
 int has_unstaged_changes(struct repository *r, int ignore_submodules)
 {
 	struct rev_info rev_info;
-	int result = 0;
+	int result;
 
 	repo_init_revisions(r, &rev_info, NULL);
 	if (ignore_submodules) {
@@ -2563,7 +2561,7 @@
 			    int ignore_submodules)
 {
 	struct rev_info rev_info;
-	int result = 0;
+	int result;
 
 	if (is_index_unborn(r->index))
 		return 0;
