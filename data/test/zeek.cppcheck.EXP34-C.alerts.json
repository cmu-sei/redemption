[
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "379",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'patricia==NULL' is redundant or there is possible null pointer dereference: patricia.",
    "satisfactory": "true",
    "verdict": "false",
    "repairable": "false",
    "rationale": "There's a check for if the `calloc` return value is null. If yes, an externally-defined function `out_of_memory` is called. That function calls `abort()`, which causes abnormal program termination unless SIGABRT is being caught by a signal handler passed to signal and the handler does not return. Thus, false positive.",
    "randomness": "first_five",
    "issue": ""
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "380",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'patricia==NULL' is redundant or there is possible null pointer dereference: patricia.",
    "satisfactory": "false",
    "verdict": "false",
    "repairable": "false",
    "rationale": "There's a check for if the `calloc` return value is null. If yes, an externally-defined function `out_of_memory` is called. That function calls `abort()`, which causes abnormal program termination unless SIGABRT is being caught by a signal handler passed to signal and the handler does not return. Thus, false positive.",
    "randomness": "random and first_five",
    "issue": "REM-346 and REM-206"
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "381",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'patricia==NULL' is redundant or there is possible null pointer dereference: patricia.",
    "satisfactory": "true",
    "verdict": "false",
    "repairable": "false",
    "rationale": "There's a check for if the `calloc` return value is null. If yes, an externally-defined function `out_of_memory` is called. That function calls `abort()`, which causes abnormal program termination unless SIGABRT is being caught by a signal handler passed to signal and the handler does not return. Thus, false positive.",
    "randomness": "first_five",
    "issue": ""
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "568",
    "column": "10",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'node' is redundant or there is possible null pointer dereference: node.",
    "satisfactory": "true",
    "verdict": "false",
    "repairable": "false",
    "rationale": "There's a check above if `node` (`patricia->head`) is null. If yes, then the function returned. So, we only reach line 568 on the first iteration of the `while` loop that starts on line 568 if `node` isn't null. There's also a null check on `node` on line 598, which breaks out of the while loop if `node == NULL`. Thus, false positive.",
    "randomness": "random and first_five",
    "issue": ""
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "665",
    "column": "10",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'node' is redundant or there is possible null pointer dereference: node.",
    "satisfactory": "true",
    "verdict": "false",
    "repairable": "false",
    "rationale": "The code line alerted for is `while (node->bit < bitlen) {`. On line 661, `node = patricia->head`. There's a check on line 658 if `node` (`patricia->head`) is null. If yes, then the function returned. So, we only reach line 665 on the first iteration of the `while` loop that starts on line 665 if `node` isn't null. There's also a null check on `node` on line 695, which breaks out of the while loop if `node == NULL`. Thus, false positive.",
    "randomness": "first_five",
    "issue": ""
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "755",
    "column": "5",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'node==NULL' is redundant or there is possible null pointer dereference: node."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "756",
    "column": "5",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'node==NULL' is redundant or there is possible null pointer dereference: node."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "757",
    "column": "5",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'node==NULL' is redundant or there is possible null pointer dereference: node."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "758",
    "column": "5",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'node==NULL' is redundant or there is possible null pointer dereference: node.",
    "comment": "This alert generates a false positive.  The dereferencing should be dominated by previous derefererences, and it is in the nulldom output.  But there are two expressions on this line, and the brain automatically ignores domination references when they occur more than once on a line."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "759",
    "column": "5",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'node==NULL' is redundant or there is possible null pointer dereference: node."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "867",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'new_node==NULL' is redundant or there is possible null pointer dereference: new_node."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "868",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'new_node==NULL' is redundant or there is possible null pointer dereference: new_node."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "869",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'new_node==NULL' is redundant or there is possible null pointer dereference: new_node."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "870",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'new_node==NULL' is redundant or there is possible null pointer dereference: new_node."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "871",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'new_node==NULL' is redundant or there is possible null pointer dereference: new_node."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "916",
    "column": "5",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'glue==NULL' is redundant or there is possible null pointer dereference: glue."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "917",
    "column": "5",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'glue==NULL' is redundant or there is possible null pointer dereference: glue."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "918",
    "column": "5",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'glue==NULL' is redundant or there is possible null pointer dereference: glue."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/patricia.c",
    "line": "919",
    "column": "5",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'glue==NULL' is redundant or there is possible null pointer dereference: glue."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "71844",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pIdxKey' is redundant or there is possible null pointer dereference: pIdxKey."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "71845",
    "column": "11",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pIdxKey' is redundant or there is possible null pointer dereference: pIdxKey."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "84675",
    "column": "7",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pIdxKey' is redundant or there is possible null pointer dereference: p."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "134032",
    "column": "4",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "134180",
    "column": "4",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "136375",
    "column": "11",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pColExpr!=0' is redundant or there is possible null pointer dereference: pColExpr."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "137928",
    "column": "27",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pSubst->pEList!=0' is redundant or there is possible null pointer dereference: pSubst->pEList."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "173057",
    "column": "10",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'zFilename' is redundant or there is possible null pointer dereference: zFilename."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "173107",
    "column": "20",
    "tool": "cppcheck",
    "checker": "nullPointerArithmeticRedundantCheck",
    "message": "Either the condition 'zFilename' is redundant or there is pointer arithmetic with NULL pointer."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "120197",
    "column": "12",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Null pointer dereference: (struct VTable*)0"
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "100154",
    "column": "10",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Possible null pointer dereference: p"
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "142743",
    "column": "14",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Possible null pointer dereference: pEList"
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "134032",
    "column": "4",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/3rdparty/sqlite3.c",
    "line": "229771",
    "column": "27",
    "tool": "cppcheck",
    "checker": "nullPointerArithmeticRedundantCheck",
    "message": "Either the condition 'pIter->aPoslist' is redundant or there is pointer arithmetic with NULL pointer."
  },
  {
    "rule": "EXP34-C",
    "file": "build/auxil/binpac/pac_scan.cc",
    "line": "2142",
    "column": "2",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Possible null pointer dereference: b"
  },
  {
    "rule": "EXP34-C",
    "file": "build/auxil/binpac/pac_scan.cc",
    "line": "2143",
    "column": "2",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Possible null pointer dereference: b"
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "71844",
    "column": "3",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pIdxKey' is redundant or there is possible null pointer dereference: pIdxKey.",
    "satisfactory": "false",
    "verdict": "complex",
    "repairable": "true",
    "rationale": "The alert is for this code line: `pIdxKey->errCode = 0`. The second parameter into the surrounding function `sqlite3BtreeIndexMoveto` is `UnpackedRecord *pIdxKey`. The function `sqlite3BtreeIndexMoveto` is defined twice and called 5 times in this file (and also defined twice in another file auxil/broker/3rdparty/sqlite3.c and called 5 times in that file. In this file: 1) line 75114 sets the value to 0 prior to function call; 2) prior to function call on line 91941, within the `else` lines 91905 through function call, there is no check if `r.pIdxKey` is null, and `&r` is the second parameter in this call to function `sqlite3BtreeIndexMoveto`. To reduce effort, we assume this is a true positive since analysis prior to this `else` clause might take too much effort.; 3) For the call to function `sqlite3BtreeIndexMoveto` on line 92360, the second argument is `pIdxKey`. However, just above that, pIdxKey gets dereferenced in a for-loop incrementor (on line 92353), so if pIdxKey was null then undefined behavior would have occurred prior to the function call. Also just above that on line 92347, pIdxKey->default_rc was also assigned to so undefined behavior also would have happened there if pIdxKey was null; 4) on line 93530 sqlite3BtreeIndexMoveto is called, and `&r` is the argument used for pIdxKey. It isn't dynamically allocated, as `UnpackedRecord r` is a declared variable (line 93515). Other fields of r are assigned to (see lines 93526-93529) above the function call on line 93530. If errCode was a dynamically allocated part of the UnpackedRecord `r` that was null, this could be a true positive. `UnpackedRecord` is defined in src/3rdparty/sqlite3.c as `struct UnpackedRecord` (line 17784) with fields that include `u8 errCode`. So, for case 4 of the function calls, I don't think the field could be null.; 5) on the function call on line 66988, just above that on line 66983 there's a check `if( pIdxKey==0 ) return SQLITE_NOMEM_BKPT;`, so it wouldn't reach the function call on 66988 if it was null. So, of the 5 calls analyzed above, calls 2 and 3 might be true positives and it would take too much manual effort to rule that out. So, we assume true positive. An automated fix might involve checking if the parameter is a null pointer prior to dereferencing it to access a field of it.",
    "randomness": "random",
    "issue": "REM-148 DONE REM-345 REM-128"
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "71845",
    "column": "11",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pIdxKey' is redundant or there is possible null pointer dereference: pIdxKey."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "84675",
    "column": "7",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pIdxKey' is redundant or there is possible null pointer dereference: p."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "134032",
    "column": "4",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "134180",
    "column": "4",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'ppStmt==0' is redundant or there is possible null pointer dereference: ppStmt.",
    "satisfactory": "false",
    "verdict": "complex",
    "repairable": "true",
    "rationale": "There's a check above (on line 134178) if ppStmt is null, which is only checked sometimes (`#ifdef SQLITE_ENABLE_API_ARMOR`). If it's checked and the answer is yes, then the function returns. So, if and only if that `#ifdef` is true, then we only reach line 134180 if `ppStmt` isn't null. However, if that `#ifdef` was false, then we can reach line 134180 without a check in this function if the parameter was null. `sqlite3Prepare16` is defined and then called 3 times in this file. (Same thing in another file auxil/broker/3rdparty/sqlite3.c, it is defined and then used 3 times in that file.) The 5th parameter of the function `sqlite3Prepare16` is `sqlite3_stmt **ppStmt`. For the function calls in this file: 1) line 134227 call uses `pptStmt` without checking (unless the check happens in the function call `sqlite3Prepare16` that its own passed-in parameter `sqlite3_stmt **ppStmt` was not null, and also does not check that `*ppStmt` was not null.; 2) line 134239 similarly uses `pptStmt` without the two prechecks mentioned in discussion of (1).; 3) The function call on line 134252 similarly uses `pptStmt` without the two prechecks mentioned in discussion of (1). Due to complexity, it would take too much manual effort to further analyze if that could happen, so we assume it is a true positive. This is similar to saying `assert(ppStmt != 0)`, but it is nonstandard so we do not expect ACR to recognize it.",
    "randomness": "random",
    "issue": "REM-148 and REM-128"
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "136375",
    "column": "11",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pColExpr!=0' is redundant or there is possible null pointer dereference: pColExpr."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "137928",
    "column": "27",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'pSubst->pEList!=0' is redundant or there is possible null pointer dereference: pSubst->pEList."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "173057",
    "column": "10",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'zFilename' is redundant or there is possible null pointer dereference: zFilename."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "173107",
    "column": "20",
    "tool": "cppcheck",
    "checker": "nullPointerArithmeticRedundantCheck",
    "message": "Either the condition 'zFilename' is redundant or there is pointer arithmetic with NULL pointer."
  },
  {
    "rule": "EXP34-C",
    "file": "src/3rdparty/sqlite3.c",
    "line": "120197",
    "column": "12",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Null pointer dereference: (struct VTable*)0"
  },
  {
    "rule": "EXP34-C",
    "file": "src/zeek/Dict.h",
    "line": "885",
    "column": "4",
    "tool": "cppcheck",
    "checker": "nullPointerDefaultArg",
    "message": "Possible null pointer dereference if the default parameter value is used: distances"
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/zeekctl/auxil/pysubnettree/patricia.c",
    "line": "589",
    "column": "12",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'node' is redundant or there is possible null pointer dereference: node."
  },
  {
    "rule": "EXP34-C",
    "file": "build/auxil/bifcl/bif_lex.cc",
    "line": "1668",
    "column": "2",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Possible null pointer dereference: b"
  },
  {
    "rule": "EXP34-C",
    "file": "build/auxil/bifcl/bif_lex.cc",
    "line": "1669",
    "column": "2",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Possible null pointer dereference: b"
  },
  {
    "rule": "EXP34-C",
    "file": "build/src/re-scan.cc",
    "line": "2169",
    "column": "2",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Possible null pointer dereference: b"
  },
  {
    "rule": "EXP34-C",
    "file": "build/src/re-scan.cc",
    "line": "2170",
    "column": "2",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Possible null pointer dereference: b",
    "satisfactory": "false",
    "verdict": "dependent",
    "repairable": "false",
    "rationale": "If a null dereference is possible on line 2170, then it is also possible on line 2169 and line 2169 should be repaired first. Therefore, this verdict is `dependent` on the verdict for an alert which *should* exist for code line 2169. Analysts should not only consider existing static analysis alerts, but also ones that either they can create or ones that should exist. See paper `Static Analysis Alert Audits: Lexicon & Rules`. Although ACR should not make a repair and currently does not, currently ACR does not implement logic to differentiate between the dependent code line and the one that should be repaired, so we mark this as unsatisfactory until adding that logic is implemented or decided against. Further analysis, which applies towards understanding if line 2170 (or 2169) could have a null dereference: The line of code that's alerted on is `b->yy_fill_buffer = 1;`. The first parameter into the surrounding function `yy_init_buffer` is `YY_BUFFER_STATE b`. On the line just above the alerted-about line, there's a function call `yy_flush_buffer(b)`. That function `yy_flush_buffer` is defined in two places in build/auxil/spicy/spicy/hilti/src/autogen/__scanner.cc and in build/auxil/spicy/spicy/spicy/src/autogen/__scanner.cc . For the first definition starting on line 2967, on line 2970-2971 there's a check if the parameter is null, and if so it immediately returns. For the second definition starting on line 3246, there's a similar null-check then (if null) an immediate return. However, if it was null, it would remain null, and then in function `yy_init_buffer` on line 2169 there would be a null dereference. To determine if a null could ever get passed in to `yy_init_buffer` would take too much manual effort, as a grep for `yy_init_buffer(` matches 18 places in the codebase. So, we assume a true positive. Additional info: This file gets generated as part of the build process, so it isn't present in the source tree. It's generated by flex from src/re-scan, but the exact output depends on the version of flex in the system. Currently in the project container, we are using flex v 2.6.4.",
    "randomness": "random",
    "issue": "REM-346 and REM-156"
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/spicy/spicy/3rdparty/justrx/src/tests/testregex.c",
    "line": "734",
    "column": "31",
    "tool": "cppcheck",
    "checker": "nullPointerRedundantCheck",
    "message": "Either the condition 'e' is redundant or there is possible null pointer dereference: ++s."
  },
  {
    "rule": "EXP34-C",
    "file": "auxil/broker/caf/libcaf_io/src/io/network/interfaces.cpp",
    "line": "105",
    "column": "47",
    "tool": "cppcheck",
    "checker": "nullPointer",
    "message": "Null pointer dereference"
  }
]
