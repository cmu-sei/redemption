--- /host/data/test/out/git.clang-tidy.EXP33-C/diffcore-break.c	2024-07-09 16:15:43.111787021 +0000
+++ /oss/git/diffcore-break.c	2024-06-22 00:27:47.000000000 +0000
@@ -47,8 +47,8 @@
 	 * The value we return is 1 if we want the pair to be broken,
 	 * or 0 if we do not.
 	 */
-	unsigned long delta_size = 0, max_size = 0;
-	unsigned long src_copied = 0, literal_added = 0, src_removed = 0;
+	unsigned long delta_size, max_size;
+	unsigned long src_copied, literal_added, src_removed;
 
 	struct diff_populate_filespec_options options = { 0 };
 
@@ -160,8 +160,8 @@
 	 * has score lower than merge_score will be merged back
 	 * together).
 	 */
-	int merge_score = 0;
-	int i = 0;
+	int merge_score;
+	int i;
 
 	/* See comment on DEFAULT_BREAK_SCORE and
 	 * DEFAULT_MERGE_SCORE in diffcore.h
@@ -178,7 +178,7 @@
 
 	for (i = 0; i < q->nr; i++) {
 		struct diff_filepair *p = q->queue[i];
-		int score = 0;
+		int score;
 
 		/*
 		 * We deal only with in-place edit of blobs.
@@ -191,8 +191,8 @@
 			if (should_break(r, p->one, p->two,
 					 break_score, &score)) {
 				/* Split this into delete and create */
-				struct diff_filespec *null_one = NULL, *null_two = NULL;
-				struct diff_filepair *dp = NULL;
+				struct diff_filespec *null_one, *null_two;
+				struct diff_filepair *dp;
 
 				/* Set score to 0 for the pair that
 				 * needs to be merged back together
@@ -272,7 +272,7 @@
 {
 	struct diff_queue_struct *q = &diff_queued_diff;
 	struct diff_queue_struct outq;
-	int i = 0, j = 0;
+	int i, j;
 
 	DIFF_QUEUE_CLEAR(&outq);
 
