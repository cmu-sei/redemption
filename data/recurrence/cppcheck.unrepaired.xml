<?xml version="1.0" encoding="UTF-8"?>
<results version="2">
    <cppcheck version="2.9"/>
    <errors>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;argc&apos; is always true" verbose="Condition &apos;argc&apos; is always true" cwe="571" file0="builtin/cat-file.c">
            <location file="builtin/cat-file.c" line="1025" column="13" info="Condition &apos;argc&apos; is always true"/>
            <location file="builtin/cat-file.c" line="1022" column="18" info="Assuming that condition &apos;argc!=2&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." verbose="Either the condition &apos;!branch&apos; is redundant or there is possible null pointer dereference: branch." cwe="476" file0="builtin/branch.c">
            <location file="builtin/branch.c" line="853" column="19" info="Null pointer dereference"/>
            <location file="builtin/branch.c" line="845" column="7" info="Assuming that condition &apos;!branch&apos; is not redundant"/>
            <symbol>branch</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;name&apos; shadows outer variable" verbose="Local variable &apos;name&apos; shadows outer variable" cwe="398" file0="builtin/branch.c">
            <location file="builtin/branch.c" line="294" column="9" info="Shadow variable"/>
            <location file="builtin/branch.c" line="209" column="8" info="Shadowed declaration"/>
            <symbol>name</symbol>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!msg&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!msg&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" file0="builtin/am.c">
            <location file="builtin/am.c" line="1371" column="27" info="Null pointer addition"/>
            <location file="builtin/am.c" line="1369" column="6" info="Assuming that condition &apos;!msg&apos; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;sb&apos; shadows outer variable" verbose="Local variable &apos;sb&apos; shadows outer variable" cwe="398" file0="builtin/am.c">
            <location file="builtin/am.c" line="1857" column="18" info="Shadow variable"/>
            <location file="builtin/am.c" line="1780" column="16" info="Shadowed declaration"/>
            <symbol>sb</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/add.c">
            <location file="builtin/add.c" line="321" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;full_path&apos; can be reduced." verbose="The scope of the variable &apos;full_path&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/check-ignore.c">
            <location file="builtin/check-ignore.c" line="74" column="14"/>
            <symbol>full_path</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pattern&apos; can be reduced." verbose="The scope of the variable &apos;pattern&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/check-ignore.c">
            <location file="builtin/check-ignore.c" line="77" column="23"/>
            <symbol>pattern</symbol>
        </error>
        <error id="resourceLeak" severity="error" msg="Resource leak: fp" verbose="Resource leak: fp" cwe="775" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="581" column="3"/>
            <symbol>fp</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;temporary_stdout_fd&apos; can be reduced." verbose="The scope of the variable &apos;temporary_stdout_fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="1188" column="6"/>
            <symbol>temporary_stdout_fd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;saved_stdout&apos; can be reduced." verbose="The scope of the variable &apos;saved_stdout&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="1188" column="27"/>
            <symbol>saved_stdout</symbol>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="173" column="56"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="182" column="60"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="183" column="60"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="267" column="51"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="308" column="42"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="318" column="32"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="322" column="31"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="483" column="48"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="485" column="52"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="911" column="62"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/bisect--helper.c">
            <location file="builtin/bisect--helper.c" line="1020" column="28"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="builtin/checkout.c">
            <location file="builtin/checkout.c" line="1389" column="3"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/checkout.c">
            <location file="builtin/checkout.c" line="1390" column="3"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;opts-&gt;checkout_index&lt;0&apos; is always true" verbose="Condition &apos;opts-&gt;checkout_index&lt;0&apos; is always true" cwe="571" file0="builtin/checkout.c">
            <location file="builtin/checkout.c" line="1682" column="28" info="Condition &apos;opts-&gt;checkout_index&lt;0&apos; is always true"/>
            <location file="builtin/checkout.c" line="1676" column="27" info="Assuming that condition &apos;opts-&gt;checkout_index&gt;=0&apos; is not redundant"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!tree&apos; is redundant or there is possible null pointer dereference: tree." verbose="Either the condition &apos;!tree&apos; is redundant or there is possible null pointer dereference: tree." cwe="476" file0="builtin/checkout.c">
            <location file="builtin/checkout.c" line="788" column="29" info="Null pointer dereference"/>
            <location file="builtin/checkout.c" line="784" column="7" info="Assuming that condition &apos;!tree&apos; is not redundant"/>
            <symbol>tree</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;rev_oid&apos; can be reduced." verbose="The scope of the variable &apos;rev_oid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/checkout.c">
            <location file="builtin/checkout.c" line="504" column="8"/>
            <symbol>rev_oid</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;rev&apos; shadows outer variable" verbose="Local variable &apos;rev&apos; shadows outer variable" cwe="398" file0="builtin/checkout.c">
            <location file="builtin/checkout.c" line="503" column="15" info="Shadow variable"/>
            <location file="builtin/checkout.c" line="451" column="19" info="Shadowed declaration"/>
            <symbol>rev</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;old_commit&apos; can be declared as pointer to const" verbose="Parameter &apos;old_commit&apos; can be declared as pointer to const" cwe="398" file0="builtin/checkout.c">
            <location file="builtin/checkout.c" line="717" column="25" info="Parameter &apos;old_commit&apos; can be declared as pointer to const"/>
            <symbol>old_commit</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argv&apos; is assigned a value that is never used." verbose="Variable &apos;argv&apos; is assigned a value that is never used." cwe="563" file0="builtin/checkout.c">
            <location file="builtin/checkout.c" line="1389" column="7"/>
            <symbol>argv</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" file0="builtin/checkout.c">
            <location file="builtin/checkout.c" line="1390" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!eof&apos; is always true" verbose="Condition &apos;!eof&apos; is always true" cwe="571" file0="builtin/clean.c">
            <location file="builtin/clean.c" line="778" column="7" info="Condition &apos;!eof&apos; is always true"/>
            <location file="builtin/clean.c" line="774" column="25" info="Assignment &apos;eof=0&apos;, assigned value is 0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;qname&apos; can be reduced." verbose="The scope of the variable &apos;qname&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/clean.c">
            <location file="builtin/clean.c" line="289" column="14"/>
            <symbol>qname</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ignore_list&apos; can be reduced." verbose="The scope of the variable &apos;ignore_list&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/clean.c">
            <location file="builtin/clean.c" line="672" column="18"/>
            <symbol>ignore_list</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;pl&apos; can be reduced." verbose="The scope of the variable &apos;pl&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/clean.c">
            <location file="builtin/clean.c" line="674" column="23"/>
            <symbol>pl</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/commit.c">
            <location file="builtin/commit.c" line="1537" column="2"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;current_head&apos; can be declared as pointer to const" verbose="Parameter &apos;current_head&apos; can be declared as pointer to const" cwe="398" file0="builtin/commit.c">
            <location file="builtin/commit.c" line="1257" column="26" info="Parameter &apos;current_head&apos; can be declared as pointer to const"/>
            <symbol>current_head</symbol>
        </error>
        <error id="clarifyCondition" severity="style" msg="Boolean result is used in bitwise operation. Clarify expression with parentheses." verbose="Suspicious expression. Boolean result is used in bitwise operation. The operator &apos;!&apos; and the comparison operators have higher precedence than bitwise operators. It is recommended that the expression is clarified with parentheses." cwe="398" file0="builtin/config.c">
            <location file="builtin/config.c" line="306" column="20"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;term&apos; shadows outer variable" verbose="Local variable &apos;term&apos; shadows outer variable" cwe="398" file0="builtin/config.c">
            <location file="builtin/config.c" line="190" column="13" info="Shadow variable"/>
            <location file="builtin/config.c" line="26" column="13" info="Shadowed declaration"/>
            <symbol>term</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;term&apos; shadows outer variable" verbose="Local variable &apos;term&apos; shadows outer variable" cwe="398" file0="builtin/config.c">
            <location file="builtin/config.c" line="203" column="13" info="Shadow variable"/>
            <location file="builtin/config.c" line="26" column="13" info="Shadowed declaration"/>
            <symbol>term</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/credential-cache--daemon.c">
            <location file="builtin/credential-cache--daemon.c" line="282" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/credential-cache--daemon.c">
            <location file="builtin/credential-cache--daemon.c" line="315" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/credential-cache.c">
            <location file="builtin/credential-cache.c" line="179" column="2"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." file0="builtin/describe.c">
            <location file="builtin/describe.c" line="610" column="4"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/diagnose.c">
            <location file="builtin/diagnose.c" line="32" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;line&apos; can be reduced." verbose="The scope of the variable &apos;line&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/diff-tree.c">
            <location file="builtin/diff-tree.c" line="110" column="7"/>
            <symbol>line</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="builtin/diff.c">
            <location file="builtin/diff.c" line="520" column="7" info="Shadow variable"/>
            <location file="builtin/diff.c" line="396" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/difftool.c">
            <location file="builtin/difftool.c" line="722" column="2"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;entry&apos; shadows outer variable" verbose="Local variable &apos;entry&apos; shadows outer variable" cwe="398" file0="builtin/difftool.c">
            <location file="builtin/difftool.c" line="478" column="31" info="Shadow variable"/>
            <location file="builtin/difftool.c" line="363" column="21" info="Shadowed declaration"/>
            <symbol>entry</symbol>
        </error>
        <error id="pointerOutOfBounds" severity="portability" msg="Undefined behaviour, pointer arithmetic &apos;tagger+strlen(tagger)&apos; is out of bounds." verbose="Undefined behaviour, pointer arithmetic &apos;tagger+strlen(tagger)&apos; is out of bounds." cwe="758" file0="builtin/fast-export.c">
            <location file="builtin/fast-export.c" line="784" column="23" info="Pointer arithmetic overflow"/>
            <location file="builtin/fast-export.c" line="780" column="13" info="Assignment &apos;tagger=&quot;tagger Unspecified Tagger &lt;unspecified-tagger&gt; 0 +0000&quot;&apos;, assigned value is &quot;tagger Unspecified Tagger &lt;unspecified-tagger&gt; 0 +0000&quot;"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!author&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!author&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" file0="builtin/fast-export.c">
            <location file="builtin/fast-export.c" line="626" column="8" info="Null pointer addition"/>
            <location file="builtin/fast-export.c" line="623" column="6" info="Assuming that condition &apos;!author&apos; is not redundant"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!committer&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!committer&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" file0="builtin/fast-export.c">
            <location file="builtin/fast-export.c" line="632" column="11" info="Null pointer addition"/>
            <location file="builtin/fast-export.c" line="629" column="6" info="Assuming that condition &apos;!committer&apos; is not redundant"/>
        </error>
        <error id="uselessAssignmentPtrArg" severity="warning" msg="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" verbose="Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" cwe="398" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="2504" column="4"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!c&apos; is redundant or there is possible null pointer dereference: c." verbose="Either the condition &apos;!c&apos; is redundant or there is possible null pointer dereference: c." cwe="476" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="1286" column="31" info="Null pointer dereference"/>
            <location file="builtin/fast-import.c" line="1283" column="7" info="Assuming that condition &apos;!c&apos; is not redundant"/>
            <symbol>c</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!buf&apos; is redundant or there is possible null pointer dereference: buf." verbose="Either the condition &apos;!buf&apos; is redundant or there is possible null pointer dereference: buf." cwe="476" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="2548" column="22" info="Null pointer dereference"/>
            <location file="builtin/fast-import.c" line="2546" column="6" info="Assuming that condition &apos;!buf&apos; is not redundant"/>
            <symbol>buf</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!f&apos; is redundant or there is possible null pointer dereference: f." verbose="Either the condition &apos;!f&apos; is redundant or there is possible null pointer dereference: f." cwe="476" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="3332" column="3" info="Null pointer dereference"/>
            <location file="builtin/fast-import.c" line="3330" column="6" info="Assuming that condition &apos;!f&apos; is not redundant"/>
            <symbol>f</symbol>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!buf&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!buf&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="1274" column="19" info="Null pointer addition"/>
            <location file="builtin/fast-import.c" line="1264" column="7" info="Assuming that condition &apos;!buf&apos; is not redundant"/>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;!f&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;!f&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="3333" column="3" info="Null pointer addition"/>
            <location file="builtin/fast-import.c" line="3330" column="6" info="Assuming that condition &apos;!f&apos; is not redundant"/>
        </error>
        <error id="redundantAssignment" severity="style" msg="Variable &apos;num&apos; is reassigned a value before the old one has been used." verbose="Variable &apos;num&apos; is reassigned a value before the old one has been used." cwe="563" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="1933" column="6" info="num is overwritten"/>
            <location file="builtin/fast-import.c" line="1920" column="6" info="num is assigned"/>
            <symbol>num</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;a&apos; can be reduced." verbose="The scope of the variable &apos;a&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="727" column="21"/>
            <symbol>a</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;e&apos; can be reduced." verbose="The scope of the variable &apos;e&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="2099" column="21"/>
            <symbol>e</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp_hex_oid_len&apos; can be reduced." verbose="The scope of the variable &apos;tmp_hex_oid_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="2100" column="18"/>
            <symbol>tmp_hex_oid_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;tmp_fullpath_len&apos; can be reduced." verbose="The scope of the variable &apos;tmp_fullpath_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="2100" column="35"/>
            <symbol>tmp_fullpath_len</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;top&apos; can be reduced." verbose="The scope of the variable &apos;top&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="3090" column="35"/>
            <symbol>top</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;checkpoint&apos; shadows outer function" verbose="Local variable &apos;checkpoint&apos; shadows outer function" cwe="398" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="1089" column="29" info="Shadow variable"/>
            <location file="builtin/fast-import.c" line="3198" column="13" info="Shadowed declaration"/>
            <symbol>checkpoint</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;from_mark&apos; is assigned a value that is never used." verbose="Variable &apos;from_mark&apos; is assigned a value that is never used." cwe="563" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="2799" column="22"/>
            <symbol>from_mark</symbol>
        </error>
        <error id="va_end_missing" severity="error" msg="va_list &apos;cp&apos; was opened but not closed by va_end()." verbose="va_list &apos;cp&apos; was opened but not closed by va_end()." cwe="664" file0="builtin/fast-import.c">
            <location file="builtin/fast-import.c" line="429" column="1"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;SIGUSR1&apos; since the value of &apos;SIGUSR1&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;SIGUSR1&apos; since the value of &apos;SIGUSR1&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="builtin/fast-import.c" line="452" column="0"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="builtin/fetch-pack.c">
            <location file="builtin/fetch-pack.c" line="242" column="7" info="Shadow variable"/>
            <location file="builtin/fetch-pack.c" line="45" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;list-&gt;nr==prev_nr&apos; is always true" verbose="Condition &apos;list-&gt;nr==prev_nr&apos; is always true" cwe="571" file0="builtin/fetch.c">
            <location file="builtin/fetch.c" line="1841" column="15" info="Condition &apos;list-&gt;nr==prev_nr&apos; is always true"/>
            <location file="builtin/fetch.c" line="1836" column="14" info="prev_nr is assigned &apos;list-&gt;nr&apos; here."/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!ref_map&apos; is redundant or there is possible null pointer dereference: ref_map." verbose="Either the condition &apos;!ref_map&apos; is redundant or there is possible null pointer dereference: ref_map." cwe="476" file0="builtin/fetch.c">
            <location file="builtin/fetch.c" line="623" column="4" info="Null pointer dereference"/>
            <location file="builtin/fetch.c" line="621" column="8" info="Assuming that condition &apos;!ref_map&apos; is not redundant"/>
            <symbol>ref_map</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;path&apos; can be reduced." verbose="The scope of the variable &apos;path&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/fetch.c">
            <location file="builtin/fetch.c" line="1436" column="14"/>
            <symbol>path</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/fetch.c">
            <location file="builtin/fetch.c" line="1941" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;obj&apos; can be reduced." verbose="The scope of the variable &apos;obj&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/fsck.c">
            <location file="builtin/fsck.c" line="470" column="17"/>
            <symbol>obj</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;total&apos; can be reduced." verbose="The scope of the variable &apos;total&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/fsck.c">
            <location file="builtin/fsck.c" line="894" column="13"/>
            <symbol>total</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/gc.c">
            <location file="builtin/gc.c" line="1498" column="27"/>
            <symbol>item</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/gc.c">
            <location file="builtin/gc.c" line="1570" column="27"/>
            <symbol>item</symbol>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If KHASH_INIT is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If KHASH_INIT is a macro then please configure it." file0="builtin/fsmonitor--daemon.c">
            <location file="builtin/fsmonitor--daemon.c" line="644" column="1"/>
        </error>
        <error id="syntaxError" severity="error" msg="syntax error" verbose="syntax error" file0="builtin/help.c">
            <location file="builtin/help.c" line="315" column="18"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hdr&apos; can be reduced." verbose="The scope of the variable &apos;hdr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/index-pack.c">
            <location file="builtin/index-pack.c" line="452" column="7"/>
            <symbol>hdr</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hdrlen&apos; can be reduced." verbose="The scope of the variable &apos;hdrlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/index-pack.c">
            <location file="builtin/index-pack.c" line="453" column="6"/>
            <symbol>hdrlen</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/index-pack.c">
            <location file="builtin/index-pack.c" line="1228" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;retain&apos; can be declared as pointer to const" verbose="Parameter &apos;retain&apos; can be declared as pointer to const" cwe="398" file0="builtin/index-pack.c">
            <location file="builtin/index-pack.c" line="409" column="47" info="Parameter &apos;retain&apos; can be declared as pointer to const"/>
            <symbol>retain</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;item&apos; can be reduced." verbose="The scope of the variable &apos;item&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/interpret-trailers.c">
            <location file="builtin/interpret-trailers.c" line="47" column="27"/>
            <symbol>item</symbol>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." file0="builtin/log.c">
            <location file="builtin/log.c" line="189" column="3"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pathspec&apos; shadows outer variable" verbose="Local variable &apos;pathspec&apos; shadows outer variable" cwe="398" file0="builtin/ls-files.c">
            <location file="builtin/ls-files.c" line="572" column="18" info="Shadow variable"/>
            <location file="builtin/ls-files.c" line="46" column="24" info="Shadowed declaration"/>
            <symbol>pathspec</symbol>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;name&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;name&apos;. The initialized value is overwritten before it is read." cwe="563" file0="builtin/ls-tree.c">
            <location file="builtin/ls-tree.c" line="102" column="8" info="name is overwritten"/>
            <location file="builtin/ls-tree.c" line="97" column="20" info="name is initialized"/>
            <symbol>name</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="builtin/ls-remote.c">
            <location file="builtin/ls-remote.c" line="90" column="7" info="Shadow variable"/>
            <location file="builtin/ls-remote.c" line="50" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ref&apos; shadows outer variable" verbose="Local variable &apos;ref&apos; shadows outer variable" cwe="398" file0="builtin/ls-remote.c">
            <location file="builtin/ls-remote.c" line="149" column="32" info="Shadow variable"/>
            <location file="builtin/ls-remote.c" line="55" column="20" info="Shadowed declaration"/>
            <symbol>ref</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;result&apos; shadows outer function" verbose="Local variable &apos;result&apos; shadows outer function" cwe="398" file0="builtin/merge-tree.c">
            <location file="builtin/merge-tree.c" line="415" column="22" info="Shadow variable"/>
            <location file="builtin/merge-tree.c" line="64" column="14" info="Shadowed declaration"/>
            <symbol>result</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;result&apos; shadows outer function" verbose="Local variable &apos;result&apos; shadows outer function" cwe="398" file0="builtin/merge-tree.c">
            <location file="builtin/merge-tree.c" line="535" column="8" info="Shadow variable"/>
            <location file="builtin/merge-tree.c" line="64" column="14" info="Shadowed declaration"/>
            <symbol>result</symbol>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." file0="builtin/merge.c">
            <location file="builtin/merge.c" line="805" column="3"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/mktag.c">
            <location file="builtin/mktag.c" line="83" column="2"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ce&apos; shadows outer variable" verbose="Local variable &apos;ce&apos; shadows outer variable" cwe="398" file0="builtin/mv.c">
            <location file="builtin/mv.c" line="256" column="30" info="Shadow variable"/>
            <location file="builtin/mv.c" line="181" column="22" info="Shadowed declaration"/>
            <symbol>ce</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;ce&apos; shadows outer variable" verbose="Local variable &apos;ce&apos; shadows outer variable" cwe="398" file0="builtin/mv.c">
            <location file="builtin/mv.c" line="334" column="31" info="Shadow variable"/>
            <location file="builtin/mv.c" line="181" column="22" info="Shadowed declaration"/>
            <symbol>ce</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;parents_to_queue_nr&apos; can be reduced." verbose="The scope of the variable &apos;parents_to_queue_nr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/name-rev.c">
            <location file="builtin/name-rev.c" line="189" column="9"/>
            <symbol>parents_to_queue_nr</symbol>
        </error>
        <error id="doubleFree" severity="error" msg="Memory pointed to by &apos;buf&apos; is freed twice." verbose="Memory pointed to by &apos;buf&apos; is freed twice." cwe="415" file0="builtin/notes.c">
            <location file="builtin/notes.c" line="269" column="2"/>
            <location file="builtin/notes.c" line="265" column="3"/>
            <symbol>buf</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;note&apos; can be reduced." verbose="The scope of the variable &apos;note&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/notes.c">
            <location file="builtin/notes.c" line="363" column="26"/>
            <symbol>note</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;show&apos; shadows outer function" verbose="Local variable &apos;show&apos; shadows outer function" cwe="398" file0="builtin/notes.c">
            <location file="builtin/notes.c" line="137" column="23" info="Shadow variable"/>
            <location file="builtin/notes.c" line="648" column="12" info="Shadowed declaration"/>
            <symbol>show</symbol>
        </error>
        <error id="uninitvar" severity="warning" msg="Uninitialized variable: partial" verbose="Uninitialized variable: partial" cwe="457" file0="builtin/notes.c">
            <location file="builtin/notes.c" line="726" column="6"/>
            <location file="builtin/notes.c" line="719" column="13" info="Assuming condition is true"/>
            <symbol>partial</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;in&apos; can be reduced." verbose="The scope of the variable &apos;in&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="413" column="17"/>
            <symbol>in</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dheader&apos; can be reduced." verbose="The scope of the variable &apos;dheader&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="443" column="9"/>
            <symbol>dheader</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;dheader&apos; can be reduced." verbose="The scope of the variable &apos;dheader&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="560" column="9"/>
            <symbol>dheader</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="1512" column="7"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;pos&apos; shadows outer variable" verbose="Local variable &apos;pos&apos; shadows outer variable" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="600" column="12" info="Shadow variable"/>
            <location file="builtin/pack-objects.c" line="555" column="11" info="Shadowed declaration"/>
            <symbol>pos</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;tree&apos; shadows outer argument" verbose="Local variable &apos;tree&apos; shadows outer argument" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="1744" column="29" info="Shadow variable"/>
            <location file="builtin/pack-objects.c" line="1719" column="48" info="Shadowed declaration"/>
            <symbol>tree</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;type&apos; shadows outer variable" verbose="Local variable &apos;type&apos; shadows outer variable" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="1954" column="20" info="Shadow variable"/>
            <location file="builtin/pack-objects.c" line="1941" column="19" info="Shadowed declaration"/>
            <symbol>type</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;p&apos; shadows outer variable" verbose="Local variable &apos;p&apos; shadows outer variable" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="3373" column="22" info="Shadow variable"/>
            <location file="builtin/pack-objects.c" line="3315" column="21" info="Shadowed declaration"/>
            <symbol>p</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;p&apos; shadows outer variable" verbose="Local variable &apos;p&apos; shadows outer variable" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="3386" column="22" info="Shadow variable"/>
            <location file="builtin/pack-objects.c" line="3315" column="21" info="Shadowed declaration"/>
            <symbol>p</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;p&apos; shadows outer variable" verbose="Local variable &apos;p&apos; shadows outer variable" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="3400" column="22" info="Shadow variable"/>
            <location file="builtin/pack-objects.c" line="3315" column="21" info="Shadowed declaration"/>
            <symbol>p</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;depth&apos; shadows outer variable" verbose="Local variable &apos;depth&apos; shadows outer variable" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="3685" column="12" info="Shadow variable"/>
            <location file="builtin/pack-objects.c" line="211" column="12" info="Shadowed declaration"/>
            <symbol>depth</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;delta&apos; can be declared as pointer to const" verbose="Parameter &apos;delta&apos; can be declared as pointer to const" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="91" column="26" info="Parameter &apos;delta&apos; can be declared as pointer to const"/>
            <symbol>delta</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;delta&apos; can be declared as pointer to const" verbose="Parameter &apos;delta&apos; can be declared as pointer to const" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="119" column="32" info="Parameter &apos;delta&apos; can be declared as pointer to const"/>
            <symbol>delta</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;delta&apos; can be declared as pointer to const" verbose="Parameter &apos;delta&apos; can be declared as pointer to const" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="129" column="27" info="Parameter &apos;delta&apos; can be declared as pointer to const"/>
            <symbol>delta</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;e&apos; can be declared as pointer to const" verbose="Parameter &apos;e&apos; can be declared as pointer to const" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="779" column="31" info="Parameter &apos;e&apos; can be declared as pointer to const"/>
            <symbol>e</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;e&apos; can be declared as pointer to const" verbose="Parameter &apos;e&apos; can be declared as pointer to const" cwe="398" file0="builtin/pack-objects.c">
            <location file="builtin/pack-objects.c" line="2422" column="31" info="Parameter &apos;e&apos; can be declared as pointer to const"/>
            <symbol>e</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;prev&apos; can be reduced." verbose="The scope of the variable &apos;prev&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/pack-redundant.c">
            <location file="builtin/pack-redundant.c" line="72" column="43"/>
            <symbol>prev</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hint&apos; can be reduced." verbose="The scope of the variable &apos;hint&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/pack-redundant.c">
            <location file="builtin/pack-redundant.c" line="449" column="21"/>
            <symbol>hint</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;oid&apos; can be reduced." verbose="The scope of the variable &apos;oid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/pack-redundant.c">
            <location file="builtin/pack-redundant.c" line="566" column="20"/>
            <symbol>oid</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;buf&apos; can be reduced." verbose="The scope of the variable &apos;buf&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/pack-redundant.c">
            <location file="builtin/pack-redundant.c" line="567" column="7"/>
            <symbol>buf</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/patch-id.c">
            <location file="builtin/patch-id.c" line="234" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;patchlen&apos; can be reduced." verbose="The scope of the variable &apos;patchlen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/patch-id.c">
            <location file="builtin/patch-id.c" line="176" column="6"/>
            <symbol>patchlen</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/pull.c">
            <location file="builtin/pull.c" line="506" column="3"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" file0="builtin/pull.c">
            <location file="builtin/pull.c" line="506" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!remote&apos; is redundant or there is possible null pointer dereference: remote." verbose="Either the condition &apos;!remote&apos; is redundant or there is possible null pointer dereference: remote." cwe="476" file0="builtin/push.c">
            <location file="builtin/push.c" line="671" column="6" info="Null pointer dereference"/>
            <location file="builtin/push.c" line="658" column="6" info="Assuming that condition &apos;!remote&apos; is not redundant"/>
            <symbol>remote</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/push.c">
            <location file="builtin/push.c" line="426" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;recurse_submodules&apos; shadows outer variable" verbose="Local variable &apos;recurse_submodules&apos; shadows outer variable" cwe="398" file0="builtin/push.c">
            <location file="builtin/push.c" line="465" column="7" info="Shadow variable"/>
            <location file="builtin/push.c" line="56" column="12" info="Shadowed declaration"/>
            <symbol>recurse_submodules</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="builtin/rebase.c">
            <location file="builtin/rebase.c" line="1425" column="7" info="Shadow variable"/>
            <location file="builtin/rebase.c" line="1158" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="builtin/rebase.c">
            <location file="builtin/rebase.c" line="1464" column="7" info="Shadow variable"/>
            <location file="builtin/rebase.c" line="1158" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="clarifyCalculation" severity="style" msg="Clarify calculation precedence for &apos;&amp;&apos; and &apos;?&apos;." verbose="Suspicious calculation. Please use parentheses to clarify the code. The code &apos;&apos;a&amp;b?c:d&apos;&apos; should be written as either &apos;&apos;(a&amp;b)?c:d&apos;&apos; or &apos;&apos;a&amp;(b?c:d)&apos;&apos;." cwe="783" file0="builtin/rebase.c">
            <location file="builtin/rebase.c" line="329" column="41"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;from&apos; can be declared as pointer to const" verbose="Parameter &apos;from&apos; can be declared as pointer to const" cwe="398" file0="builtin/rebase.c">
            <location file="builtin/rebase.c" line="856" column="45" info="Parameter &apos;from&apos; can be declared as pointer to const"/>
            <symbol>from</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!keepalive_active&apos; is always true" verbose="Condition &apos;!keepalive_active&apos; is always true" cwe="571" file0="builtin/receive-pack.c">
            <location file="builtin/receive-pack.c" line="507" column="47" info="Condition &apos;!keepalive_active&apos; is always true"/>
            <location file="builtin/receive-pack.c" line="504" column="10" info="Assuming condition is false"/>
            <location file="builtin/receive-pack.c" line="482" column="7" info="Assuming that condition &apos;keepalive_active&apos; is not redundant"/>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;bufp&apos; is always true" verbose="Condition &apos;bufp&apos; is always true" cwe="571" file0="builtin/receive-pack.c">
            <location file="builtin/receive-pack.c" line="904" column="6" info="Condition &apos;bufp&apos; is always true"/>
        </error>
        <error id="redundantInitialization" severity="style" msg="Redundant initialization for &apos;retval&apos;. The initialized value is overwritten before it is read." verbose="Redundant initialization for &apos;retval&apos;. The initialized value is overwritten before it is read." cwe="563" file0="builtin/receive-pack.c">
            <location file="builtin/receive-pack.c" line="692" column="10" info="retval is overwritten"/>
            <location file="builtin/receive-pack.c" line="619" column="21" info="retval is initialized"/>
            <symbol>retval</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;linelen&apos; can be reduced." verbose="The scope of the variable &apos;linelen&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/receive-pack.c">
            <location file="builtin/receive-pack.c" line="1164" column="8"/>
            <symbol>linelen</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;report&apos; shadows outer function" verbose="Local variable &apos;report&apos; shadows outer function" cwe="398" file0="builtin/receive-pack.c">
            <location file="builtin/receive-pack.c" line="974" column="26" info="Shadow variable"/>
            <location file="builtin/receive-pack.c" line="2385" column="13" info="Shadowed declaration"/>
            <symbol>report</symbol>
        </error>
        <error id="shadowFunction" severity="style" msg="Local variable &apos;report&apos; shadows outer function" verbose="Local variable &apos;report&apos; shadows outer function" cwe="398" file0="builtin/receive-pack.c">
            <location file="builtin/receive-pack.c" line="2413" column="26" info="Shadow variable"/>
            <location file="builtin/receive-pack.c" line="2385" column="13" info="Shadowed declaration"/>
            <symbol>report</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;do_all&apos; is always false" verbose="Condition &apos;do_all&apos; is always false" cwe="570" file0="builtin/reflog.c">
            <location file="builtin/reflog.c" line="307" column="6" info="Condition &apos;do_all&apos; is always false"/>
            <location file="builtin/reflog.c" line="276" column="0" info="Assignment &apos;do_all=0&apos;, assigned value is 0"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." file0="builtin/remote.c">
            <location file="builtin/remote.c" line="1451" column="2"/>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." file0="builtin/repack.c">
            <location file="builtin/repack.c" line="522" column="3"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/reset.c">
            <location file="builtin/reset.c" line="348" column="2"/>
        </error>
        <error id="invalidPrintfArgType_sint" severity="warning" msg="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." verbose="%d in format string (no. 1) requires &apos;int&apos; but the argument type is &apos;unsigned int&apos;." cwe="686" file0="builtin/rev-list.c">
            <location file="builtin/rev-list.c" line="461" column="2"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/revert.c">
            <location file="builtin/revert.c" line="182" column="77"/>
        </error>
        <error id="varFuncNullUB" severity="portability" msg="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour." verbose="Passing NULL after the last typed argument to a variadic function leads to undefined behaviour.\012The C99 standard, in section 7.15.1.1, states that if the type used by va_arg() is not compatible with the type of the actual next argument (as promoted according to the default argument promotions), the behavior is undefined.\012The value of the NULL macro is an implementation-defined null pointer constant (7.17), which can be any integer constant expression with the value 0, or such an expression casted to (void*) (6.3.2.3). This includes values like 0, 0L, or even 0LL.\012In practice on common architectures, this will cause real crashes if sizeof(int) != sizeof(void*), and NULL is defined to 0 or any other null pointer constant that promotes to int.\012To reproduce you might be able to use this little code example on 64bit platforms. If the output includes &quot;ERROR&quot;, the sentinel had only 4 out of 8 bytes initialized to zero and was not detected as the final argument to stop argument processing via va_arg(). Changing the 0 to (void*)0 or 0L will make the &quot;ERROR&quot; output go away.\012#include &lt;stdarg.h&gt;\012#include &lt;stdio.h&gt;\012\012void f(char *s, ...) {\012    va_list ap;\012    va_start(ap,s);\012    for (;;) {\012        char *p = va_arg(ap,char*);\012        printf(&quot;%018p, %s\n&quot;, p, (long)p &amp; 255 ? p : &quot;&quot;);\012        if(!p) break;\012    }\012    va_end(ap);\012}\012\012void g() {\012    char *s2 = &quot;x&quot;;\012    char *s3 = &quot;ERROR&quot;;\012\012    // changing 0 to 0L for the 7th argument (which is intended to act as sentinel) makes the error go away on x86_64\012    f(&quot;first&quot;, s2, s2, s2, s2, s2, 0, s3, (char*)0);\012}\012\012void h() {\012    int i;\012    volatile unsigned char a[1000];\012    for (i = 0; i&lt;sizeof(a); i++)\012        a[i] = -1;\012}\012\012int main() {\012    h();\012    g();\012    return 0;\012}" cwe="475" file0="builtin/revert.c">
            <location file="builtin/revert.c" line="196" column="29"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/rev-parse.c">
            <location file="builtin/rev-parse.c" line="525" column="2"/>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!gitdir&apos; is redundant or there is possible null pointer dereference: gitdir." verbose="Either the condition &apos;!gitdir&apos; is redundant or there is possible null pointer dereference: gitdir." cwe="476" file0="builtin/rev-parse.c">
            <location file="builtin/rev-parse.c" line="721" column="10" info="Null pointer dereference"/>
            <location file="builtin/rev-parse.c" line="719" column="9" info="Assuming that condition &apos;!gitdir&apos; is not redundant"/>
            <symbol>gitdir</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!arg&apos; is redundant or there is possible null pointer dereference: arg." verbose="Either the condition &apos;!arg&apos; is redundant or there is possible null pointer dereference: arg." cwe="476" file0="builtin/rev-parse.c">
            <location file="builtin/rev-parse.c" line="772" column="17" info="Null pointer dereference"/>
            <location file="builtin/rev-parse.c" line="770" column="9" info="Assuming that condition &apos;!arg&apos; is not redundant"/>
            <symbol>arg</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="builtin/rev-parse.c">
            <location file="builtin/rev-parse.c" line="709" column="9" info="Shadow variable"/>
            <location file="builtin/rev-parse.c" line="662" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;oid&apos; shadows outer variable" verbose="Local variable &apos;oid&apos; shadows outer variable" cwe="398" file0="builtin/rev-parse.c">
            <location file="builtin/rev-parse.c" line="1013" column="30" info="Shadow variable"/>
            <location file="builtin/rev-parse.c" line="666" column="19" info="Shadowed declaration"/>
            <symbol>oid</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;original&apos; can be reduced." verbose="The scope of the variable &apos;original&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/rm.c">
            <location file="builtin/rm.c" line="323" column="15"/>
            <symbol>original</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;count&apos; can be reduced." verbose="The scope of the variable &apos;count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/send-pack.c">
            <location file="builtin/send-pack.c" line="38" column="7"/>
            <symbol>count</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;!*av&apos; is always false" verbose="Condition &apos;!*av&apos; is always false" cwe="570" file0="builtin/show-branch.c">
            <location file="builtin/show-branch.c" line="739" column="8" info="Condition &apos;!*av&apos; is always false"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/show-branch.c">
            <location file="builtin/show-branch.c" line="385" column="6"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/show-branch.c">
            <location file="builtin/show-branch.c" line="874" column="8"/>
            <symbol>j</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;commit&apos; shadows outer variable" verbose="Local variable &apos;commit&apos; shadows outer variable" cwe="398" file0="builtin/show-branch.c">
            <location file="builtin/show-branch.c" line="919" column="18" info="Shadow variable"/>
            <location file="builtin/show-branch.c" line="624" column="33" info="Shadowed declaration"/>
            <symbol>commit</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;rev_mask&apos; can be declared as pointer to const" verbose="Parameter &apos;rev_mask&apos; can be declared as pointer to const" cwe="398" file0="builtin/show-branch.c">
            <location file="builtin/show-branch.c" line="518" column="22" info="Parameter &apos;rev_mask&apos; can be declared as pointer to const"/>
            <symbol>rev_mask</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hash_algo&apos; can be reduced." verbose="The scope of the variable &apos;hash_algo&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/show-index.c">
            <location file="builtin/show-index.c" line="19" column="6"/>
            <symbol>hash_algo</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" file0="builtin/show-ref.c">
            <location file="builtin/show-ref.c" line="183" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/sparse-checkout.c">
            <location file="builtin/sparse-checkout.c" line="455" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/sparse-checkout.c">
            <location file="builtin/sparse-checkout.c" line="863" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/sparse-checkout.c">
            <location file="builtin/sparse-checkout.c" line="900" column="2"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;default_patterns_nr&apos; can be reduced." verbose="The scope of the variable &apos;default_patterns_nr&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/sparse-checkout.c">
            <location file="builtin/sparse-checkout.c" line="791" column="6"/>
            <symbol>default_patterns_nr</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" file0="builtin/sparse-checkout.c">
            <location file="builtin/sparse-checkout.c" line="863" column="7"/>
            <symbol>argc</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/stash.c">
            <location file="builtin/stash.c" line="810" column="2"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/stash.c">
            <location file="builtin/stash.c" line="1739" column="4"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;cp&apos; shadows outer variable" verbose="Local variable &apos;cp&apos; shadows outer variable" cwe="398" file0="builtin/stash.c">
            <location file="builtin/stash.c" line="1677" column="25" info="Shadow variable"/>
            <location file="builtin/stash.c" line="1663" column="24" info="Shadowed declaration"/>
            <symbol>cp</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;argc&apos; is assigned a value that is never used." verbose="Variable &apos;argc&apos; is assigned a value that is never used." cwe="563" file0="builtin/stash.c">
            <location file="builtin/stash.c" line="1739" column="8"/>
            <symbol>argc</symbol>
        </error>
        <error id="unknownMacro" severity="error" msg="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." verbose="There is an unknown macro here somewhere. Configuration is required. If for_each_string_list_item is a macro then please configure it." file0="builtin/submodule--helper.c">
            <location file="builtin/submodule--helper.c" line="1679" column="4"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;subject_len&apos; can be reduced." verbose="The scope of the variable &apos;subject_len&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/tag.c">
            <location file="builtin/tag.c" line="351" column="6"/>
            <symbol>subject_len</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;buf&apos; shadows outer argument" verbose="Local variable &apos;buf&apos; shadows outer argument" cwe="398" file0="builtin/tag.c">
            <location file="builtin/tag.c" line="306" column="18" info="Shadow variable"/>
            <location file="builtin/tag.c" line="268" column="25" info="Shadowed declaration"/>
            <symbol>buf</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!obj_buf&apos; is redundant or there is possible null pointer dereference: obj_buf." verbose="Either the condition &apos;!obj_buf&apos; is redundant or there is possible null pointer dereference: obj_buf." cwe="476" file0="builtin/unpack-objects.c">
            <location file="builtin/unpack-objects.c" line="238" column="23" info="Null pointer dereference"/>
            <location file="builtin/unpack-objects.c" line="236" column="6" info="Assuming that condition &apos;!obj_buf&apos; is not redundant"/>
            <symbol>obj_buf</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!obj&apos; is redundant or there is possible null pointer dereference: obj." verbose="Either the condition &apos;!obj&apos; is redundant or there is possible null pointer dereference: obj." cwe="476" file0="builtin/unpack-objects.c">
            <location file="builtin/unpack-objects.c" line="300" column="3" info="Null pointer dereference"/>
            <location file="builtin/unpack-objects.c" line="297" column="7" info="Assuming that condition &apos;!obj&apos; is not redundant"/>
            <symbol>obj</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;!blob&apos; is redundant or there is possible null pointer dereference: blob." verbose="Either the condition &apos;!blob&apos; is redundant or there is possible null pointer dereference: blob." cwe="476" file0="builtin/unpack-objects.c">
            <location file="builtin/unpack-objects.c" line="411" column="3" info="Null pointer dereference"/>
            <location file="builtin/unpack-objects.c" line="409" column="7" info="Assuming that condition &apos;!blob&apos; is not redundant"/>
            <symbol>blob</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;mid&apos; can be reduced." verbose="The scope of the variable &apos;mid&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/unpack-objects.c">
            <location file="builtin/unpack-objects.c" line="460" column="16"/>
            <symbol>mid</symbol>
        </error>
        <error id="shadowArgument" severity="style" msg="Local variable &apos;type&apos; shadows outer argument" verbose="Local variable &apos;type&apos; shadows outer argument" cwe="398" file0="builtin/unpack-objects.c">
            <location file="builtin/unpack-objects.c" line="228" column="7" info="Shadow variable"/>
            <location file="builtin/unpack-objects.c" line="212" column="62" info="Shadowed declaration"/>
            <symbol>type</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;val&apos; can be reduced." verbose="The scope of the variable &apos;val&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="builtin/var.c">
            <location file="builtin/var.c" line="52" column="14"/>
            <symbol>val</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/write-tree.c">
            <location file="builtin/write-tree.c" line="38" column="2"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITATTRIBUTES=/usr/local/etc/gitattributes;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;O_NONBLOCK&apos; since the value of &apos;O_NONBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;O_NONBLOCK&apos; since the value of &apos;O_NONBLOCK&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="compat/nonblock.c" line="11" column="0"/>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;obj&apos; can be declared as pointer to const" verbose="Parameter &apos;obj&apos; can be declared as pointer to const" cwe="398" file0="compat/obstack.c">
            <location file="compat/obstack.c" line="315" column="48" info="Parameter &apos;obj&apos; can be declared as pointer to const"/>
            <symbol>obj</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;fooround::i&apos; is never used." verbose="union member &apos;fooround::i&apos; is never used." cwe="563" file0="compat/obstack.c">
            <location file="compat/obstack.c" line="61" column="13"/>
            <symbol>fooround::i</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;fooround::d&apos; is never used." verbose="union member &apos;fooround::d&apos; is never used." cwe="563" file0="compat/obstack.c">
            <location file="compat/obstack.c" line="62" column="15"/>
            <symbol>fooround::d</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="union member &apos;fooround::p&apos; is never used." verbose="union member &apos;fooround::p&apos; is never used." cwe="563" file0="compat/obstack.c">
            <location file="compat/obstack.c" line="63" column="9"/>
            <symbol>fooround::p</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fooalign::c&apos; is never used." verbose="struct member &apos;fooalign::c&apos; is never used." cwe="563" file0="compat/obstack.c">
            <location file="compat/obstack.c" line="67" column="8"/>
            <symbol>fooalign::c</symbol>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;fooalign::u&apos; is never used." verbose="struct member &apos;fooalign::u&apos; is never used." cwe="563" file0="compat/obstack.c">
            <location file="compat/obstack.c" line="68" column="18"/>
            <symbol>fooalign::u</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="compat/obstack.h" line="161" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="compat/obstack.c" line="171" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="compat/obstack.c" line="220" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="compat/obstack.c" line="263" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;__PTRDIFF_TYPE__&apos; since the value of &apos;__PTRDIFF_TYPE__&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="compat/obstack.c" line="290" column="0"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561" file0="compat/terminal.c">
            <location file="compat/terminal.c" line="50" column="2"/>
        </error>
        <error id="unreachableCode" severity="style" msg="Statements following return, break, continue, goto or throw will never be executed." verbose="Statements following return, break, continue, goto or throw will never be executed." cwe="561" file0="compat/terminal.c">
            <location file="compat/terminal.c" line="77" column="2"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;ETC_GITCONFIG=/usr/local/etc/gitconfig;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;literals&apos; can be reduced." verbose="The scope of the variable &apos;literals&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="ewah/ewah_bitmap.c">
            <location file="ewah/ewah_bitmap.c" line="126" column="9"/>
            <symbol>literals</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;can_add&apos; can be reduced." verbose="The scope of the variable &apos;can_add&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="ewah/ewah_bitmap.c">
            <location file="ewah/ewah_bitmap.c" line="126" column="19"/>
            <symbol>can_add</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;literals&apos; can be reduced." verbose="The scope of the variable &apos;literals&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="ewah/ewah_bitmap.c">
            <location file="ewah/ewah_bitmap.c" line="383" column="9"/>
            <symbol>literals</symbol>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="ewah/ewah_io.c">
            <location file="ewah/ewah_io.c" line="131" column="2"/>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;len&apos; is assigned a value that is never used." verbose="Variable &apos;len&apos; is assigned a value that is never used." cwe="563" file0="ewah/ewah_io.c">
            <location file="ewah/ewah_io.c" line="131" column="6"/>
            <symbol>len</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_EXEC_PATH=/usr/local/libexec/git-core;GIT_LOCALE_PATH=share/locale;BINDIR=bin;FALLBACK_RUNTIME_PREFIX=/usr/local;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_LOCALE_PATH=share/locale;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;PAGER_ENV=dummy;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;attempt_count&apos; can be reduced." verbose="The scope of the variable &apos;attempt_count&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="trace2/tr2_dst.c">
            <location file="trace2/tr2_dst.c" line="121" column="11"/>
            <symbol>attempt_count</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hash&apos; can be reduced." verbose="The scope of the variable &apos;hash&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="trace2/tr2_sid.c">
            <location file="trace2/tr2_sid.c" line="35" column="16"/>
            <symbol>hash</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;hex&apos; can be reduced." verbose="The scope of the variable &apos;hex&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="trace2/tr2_sid.c">
            <location file="trace2/tr2_sid.c" line="36" column="7"/>
            <symbol>hex</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;event_name&apos; can be reduced." verbose="The scope of the variable &apos;event_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="trace2/tr2_tgt_event.c">
            <location file="trace2/tr2_tgt_event.c" line="519" column="14"/>
            <symbol>event_name</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;event_name&apos; can be reduced." verbose="The scope of the variable &apos;event_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="trace2/tr2_tgt_event.c">
            <location file="trace2/tr2_tgt_event.c" line="544" column="14"/>
            <symbol>event_name</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;event_name&apos; can be reduced." verbose="The scope of the variable &apos;event_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="trace2/tr2_tgt_event.c">
            <location file="trace2/tr2_tgt_event.c" line="571" column="14"/>
            <symbol>event_name</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;event_name&apos; can be reduced." verbose="The scope of the variable &apos;event_name&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="trace2/tr2_tgt_event.c">
            <location file="trace2/tr2_tgt_event.c" line="599" column="14"/>
            <symbol>event_name</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;parent_names&apos; is redundant or there is possible null pointer dereference: parent_names++." verbose="Either the condition &apos;parent_names&apos; is redundant or there is possible null pointer dereference: parent_names++." cwe="476" file0="trace2/tr2_tgt_normal.c">
            <location file="trace2/tr2_tgt_normal.c" line="173" column="37" info="Null pointer dereference"/>
            <location file="trace2/tr2_tgt_normal.c" line="176" column="7" info="Assuming that condition &apos;parent_names&apos; is not redundant"/>
            <symbol>parent_names++</symbol>
        </error>
        <error id="nullPointerArithmeticRedundantCheck" severity="warning" msg="Either the condition &apos;parent_names&apos; is redundant or there is pointer arithmetic with NULL pointer." verbose="Either the condition &apos;parent_names&apos; is redundant or there is pointer arithmetic with NULL pointer." cwe="682" file0="trace2/tr2_tgt_normal.c">
            <location file="trace2/tr2_tgt_normal.c" line="173" column="37" info="Null pointer addition"/>
            <location file="trace2/tr2_tgt_normal.c" line="176" column="7" info="Assuming that condition &apos;parent_names&apos; is not redundant"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_VERSION=2.39.0;GIT_USER_AGENT=git/2.39.0;GIT_BUILT_FROM_COMMIT=c48035d29b4e524aed3a32f0403676f0d9128863;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;fd&apos; can be reduced." verbose="The scope of the variable &apos;fd&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="compat/simple-ipc/ipc-unix-socket.c">
            <location file="compat/simple-ipc/ipc-unix-socket.c" line="588" column="6"/>
            <symbol>fd</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;io&apos; can be reduced." verbose="The scope of the variable &apos;io&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="compat/simple-ipc/ipc-unix-socket.c">
            <location file="compat/simple-ipc/ipc-unix-socket.c" line="588" column="10"/>
            <symbol>io</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;result&apos; can be reduced." verbose="The scope of the variable &apos;result&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="compat/simple-ipc/ipc-unix-socket.c">
            <location file="compat/simple-ipc/ipc-unix-socket.c" line="643" column="6"/>
            <symbol>result</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;i&apos; can be reduced." verbose="The scope of the variable &apos;i&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="sha1dc/sha1.c">
            <location file="sha1dc/sha1.c" line="1717" column="11"/>
            <symbol>i</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;j&apos; can be reduced." verbose="The scope of the variable &apos;j&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="sha1dc/sha1.c">
            <location file="sha1dc/sha1.c" line="1717" column="14"/>
            <symbol>j</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ubc_dv_mask&apos; can be reduced." verbose="The scope of the variable &apos;ubc_dv_mask&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="sha1dc/sha1.c">
            <location file="sha1dc/sha1.c" line="1718" column="11"/>
            <symbol>ubc_dv_mask</symbol>
        </error>
        <error id="variableScope" severity="style" msg="The scope of the variable &apos;ihvtmp&apos; can be reduced." verbose="The scope of the variable &apos;ihvtmp&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:\012void f(int x)\012{\012    int i = 0;\012    if (x) {\012        // it&apos;s safe to move &apos;int i = 0;&apos; here\012        for (int n = 0; n &lt; 10; ++n) {\012            // it is possible but not safe to move &apos;int i = 0;&apos; here\012            do_something(&amp;i);\012        }\012    }\012}\012When you see this message it is always safe to reduce the variable scope 1 level." cwe="398" file0="sha1dc/sha1.c">
            <location file="sha1dc/sha1.c" line="1719" column="11"/>
            <symbol>ihvtmp</symbol>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="sha1dc/sha1.c" line="1910" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="sha1dc/sha1.h" line="107" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="sha1dc/ubc_check.h" line="49" column="0"/>
        </error>
        <error id="preprocessorErrorDirective" severity="error" msg="No header in #include" verbose="No header in #include">
            <location file="sha1dc/ubc_check.c" line="371" column="0"/>
        </error>
        <error id="unusedStructMember" severity="style" msg="struct member &apos;histindex::key_shift&apos; is never used." verbose="struct member &apos;histindex::key_shift&apos; is never used." cwe="563" file0="xdiff/xhistogram.c">
            <location file="xdiff/xhistogram.c" line="65" column="8"/>
            <symbol>histindex::key_shift</symbol>
        </error>
        <error id="nullPointerRedundantCheck" severity="warning" msg="Either the condition &apos;blockp&apos; is redundant or there is possible null pointer dereference: blockp." verbose="Either the condition &apos;blockp&apos; is redundant or there is possible null pointer dereference: blockp." cwe="476" file0="reftable/block.c">
            <location file="reftable/block.c" line="445" column="40" info="Null pointer dereference"/>
            <location file="reftable/block.c" line="446" column="6" info="Assuming that condition &apos;blockp&apos; is not redundant"/>
            <symbol>blockp</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;err&apos; shadows outer variable" verbose="Local variable &apos;err&apos; shadows outer variable" cwe="398" file0="reftable/merged.c">
            <location file="reftable/merged.c" line="112" column="7" info="Shadow variable"/>
            <location file="reftable/merged.c" line="90" column="6" info="Shadowed declaration"/>
            <symbol>err</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;i&apos; shadows outer variable" verbose="Local variable &apos;i&apos; shadows outer variable" cwe="398" file0="reftable/merged.c">
            <location file="reftable/merged.c" line="266" column="7" info="Shadow variable"/>
            <location file="reftable/merged.c" line="254" column="6" info="Shadowed declaration"/>
            <symbol>i</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n&apos; shadows outer variable" verbose="Local variable &apos;n&apos; shadows outer variable" cwe="398" file0="reftable/record.c">
            <location file="reftable/record.c" line="418" column="7" info="Shadow variable"/>
            <location file="reftable/record.c" line="377" column="6" info="Shadowed declaration"/>
            <symbol>n</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n&apos; shadows outer variable" verbose="Local variable &apos;n&apos; shadows outer variable" cwe="398" file0="reftable/record.c">
            <location file="reftable/record.c" line="551" column="7" info="Shadow variable"/>
            <location file="reftable/record.c" line="533" column="6" info="Shadowed declaration"/>
            <symbol>n</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n&apos; shadows outer variable" verbose="Local variable &apos;n&apos; shadows outer variable" cwe="398" file0="reftable/record.c">
            <location file="reftable/record.c" line="601" column="7" info="Shadow variable"/>
            <location file="reftable/record.c" line="568" column="6" info="Shadowed declaration"/>
            <symbol>n</symbol>
        </error>
        <error id="constParameter" severity="style" msg="Parameter &apos;src&apos; can be declared as pointer to const" verbose="Parameter &apos;src&apos; can be declared as pointer to const" cwe="398" file0="reftable/record.c">
            <location file="reftable/record.c" line="245" column="45" info="Parameter &apos;src&apos; can be declared as pointer to const"/>
            <symbol>src</symbol>
        </error>
        <error id="knownConditionTrueFalse" severity="style" msg="Condition &apos;sublock_file_fd&lt;0&apos; is always true" verbose="Condition &apos;sublock_file_fd&lt;0&apos; is always true" cwe="571" file0="reftable/stack.c">
            <location file="reftable/stack.c" line="949" column="30" info="Condition &apos;sublock_file_fd&lt;0&apos; is always true"/>
            <location file="reftable/stack.c" line="947" column="23" info="Assuming that condition &apos;sublock_file_fd&gt;=0&apos; is not redundant"/>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;err&apos; shadows outer variable" verbose="Local variable &apos;err&apos; shadows outer variable" cwe="398" file0="reftable/stack.c">
            <location file="reftable/stack.c" line="321" column="7" info="Shadow variable"/>
            <location file="reftable/stack.c" line="310" column="6" info="Shadowed declaration"/>
            <symbol>err</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;lock_file_fd&apos; is assigned a value that is never used." verbose="Variable &apos;lock_file_fd&apos; is assigned a value that is never used." cwe="563" file0="reftable/stack.c">
            <location file="reftable/stack.c" line="1073" column="16"/>
            <symbol>lock_file_fd</symbol>
        </error>
        <error id="shadowVariable" severity="style" msg="Local variable &apos;n&apos; shadows outer variable" verbose="Local variable &apos;n&apos; shadows outer variable" cwe="398" file0="reftable/writer.c">
            <location file="reftable/writer.c" line="53" column="7" info="Shadow variable"/>
            <location file="reftable/writer.c" line="50" column="6" info="Shadowed declaration"/>
            <symbol>n</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;n&apos; is assigned a value that is never used." verbose="Variable &apos;n&apos; is assigned a value that is never used." cwe="563" file0="reftable/writer.c">
            <location file="reftable/writer.c" line="65" column="4"/>
            <symbol>n</symbol>
        </error>
        <error id="unreadVariable" severity="style" msg="Variable &apos;i&apos; is assigned a value that is never used." verbose="Variable &apos;i&apos; is assigned a value that is never used." cwe="563" file0="reftable/writer.c">
            <location file="reftable/writer.c" line="386" column="8"/>
            <symbol>i</symbol>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;BIG_ENDIAN;BYTE_ORDER;LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;_MSC_VER;_M_ARM64;_M_IX86;_M_X64;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;__BIG_ENDIAN;__BYTE_ORDER;__LITTLE_ENDIAN;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;__GNUC__;__i386__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="ConfigurationNotChecked" severity="information" msg="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." verbose="Skipping configuration &apos;HAVE_SYSINFO=1;GIT_HOST_CPU=x86_64;HAVE_ALLOCA_H=1;USE_CURL_FOR_IMAP_SEND=1;SUPPORTS_SIMPLE_IPC=1;SHA1_DC=1;SHA1DC_NO_STANDARD_INCLUDES=1;SHA1DC_INIT_SAFE_HASH_DEFAULT=0;SHA1DC_CUSTOM_INCLUDE_SHA1_C=cache.h;SHA1DC_CUSTOM_INCLUDE_UBC_CHECK_C=git-compat-util.h;SHA256_BLK=1;HAVE_PATHS_H=1;HAVE_STRINGS_H=1;HAVE_DEV_TTY=1;HAVE_CLOCK_GETTIME=1;HAVE_CLOCK_MONOTONIC=1;HAVE_SYNC_FILE_RANGE=1;HAVE_GETDELIM=1;PROCFS_EXECUTABLE_PATH=/proc/self/exe;FREAD_READS_DIRECTORIES=1;SHELL_PATH=/bin/sh;GIT_HTML_PATH=share/doc/git;GIT_MAN_PATH=share/man;GIT_INFO_PATH=share/info;__GNUC__;__i386__;__x86_64__;__x86_64__;REG_STARTEND&apos; since the value of &apos;REG_STARTEND&apos; is unknown. Use -D if you want to check it. You can use -U to skip it explicitly.">
            <location file="git-compat-util.h" line="1336" column="0"/>
        </error>
        <error id="uselessAssignmentArg" severity="style" msg="Assignment of function parameter has no effect outside the function." verbose="Assignment of function parameter has no effect outside the function." cwe="398" file0="builtin/bugreport.c">
            <location file="builtin/bugreport.c" line="121" column="2"/>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCFinal&apos; is never used." verbose="The function &apos;SHA1DCFinal&apos; is never used." cwe="561">
            <location file="sha1dc/sha1.c" line="1868" column="0"/>
            <symbol>SHA1DCFinal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCInit&apos; is never used." verbose="The function &apos;SHA1DCInit&apos; is never used." cwe="561">
            <location file="sha1dc/sha1.c" line="1767" column="0"/>
            <symbol>SHA1DCInit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetCallback&apos; is never used." verbose="The function &apos;SHA1DCSetCallback&apos; is never used." cwe="561">
            <location file="sha1dc/sha1.c" line="1816" column="0"/>
            <symbol>SHA1DCSetCallback</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetDetectReducedRoundCollision&apos; is never used." verbose="The function &apos;SHA1DCSetDetectReducedRoundCollision&apos; is never used." cwe="561">
            <location file="sha1dc/sha1.c" line="1808" column="0"/>
            <symbol>SHA1DCSetDetectReducedRoundCollision</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetSafeHash&apos; is never used." verbose="The function &apos;SHA1DCSetSafeHash&apos; is never used." cwe="561">
            <location file="sha1dc/sha1.c" line="1783" column="0"/>
            <symbol>SHA1DCSetSafeHash</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetUseDetectColl&apos; is never used." verbose="The function &apos;SHA1DCSetUseDetectColl&apos; is never used." cwe="561">
            <location file="sha1dc/sha1.c" line="1800" column="0"/>
            <symbol>SHA1DCSetUseDetectColl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;SHA1DCSetUseUBC&apos; is never used." verbose="The function &apos;SHA1DCSetUseUBC&apos; is never used." cwe="561">
            <location file="sha1dc/sha1.c" line="1792" column="0"/>
            <symbol>SHA1DCSetUseUBC</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;_obstack_allocated_p&apos; is never used." verbose="The function &apos;_obstack_allocated_p&apos; is never used." cwe="561">
            <location file="compat/obstack.c" line="315" column="0"/>
            <symbol>_obstack_allocated_p</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bitmap_and_not&apos; is never used." verbose="The function &apos;bitmap_and_not&apos; is never used." cwe="561">
            <location file="ewah/bitmap.c" line="121" column="0"/>
            <symbol>bitmap_and_not</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bitmap_dup&apos; is never used." verbose="The function &apos;bitmap_dup&apos; is never used." cwe="561">
            <location file="ewah/bitmap.c" line="38" column="0"/>
            <symbol>bitmap_dup</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bitmap_equals&apos; is never used." verbose="The function &apos;bitmap_equals&apos; is never used." cwe="561">
            <location file="ewah/bitmap.c" line="172" column="0"/>
            <symbol>bitmap_equals</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bitmap_is_subset&apos; is never used." verbose="The function &apos;bitmap_is_subset&apos; is never used." cwe="561">
            <location file="ewah/bitmap.c" line="198" column="0"/>
            <symbol>bitmap_is_subset</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bitmap_or&apos; is never used." verbose="The function &apos;bitmap_or&apos; is never used." cwe="561">
            <location file="ewah/bitmap.c" line="132" column="0"/>
            <symbol>bitmap_or</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bitmap_or_ewah&apos; is never used." verbose="The function &apos;bitmap_or_ewah&apos; is never used." cwe="561">
            <location file="ewah/bitmap.c" line="141" column="0"/>
            <symbol>bitmap_or_ewah</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bitmap_popcount&apos; is never used." verbose="The function &apos;bitmap_popcount&apos; is never used." cwe="561">
            <location file="ewah/bitmap.c" line="162" column="0"/>
            <symbol>bitmap_popcount</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;bitmap_to_ewah&apos; is never used." verbose="The function &apos;bitmap_to_ewah&apos; is never used." cwe="561">
            <location file="ewah/bitmap.c" line="76" column="0"/>
            <symbol>bitmap_to_ewah</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;blk_SHA256_Final&apos; is never used." verbose="The function &apos;blk_SHA256_Final&apos; is never used." cwe="561">
            <location file="sha256/block/sha256.c" line="179" column="0"/>
            <symbol>blk_SHA256_Final</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;blk_SHA256_Init&apos; is never used." verbose="The function &apos;blk_SHA256_Init&apos; is never used." cwe="561">
            <location file="sha256/block/sha256.c" line="9" column="0"/>
            <symbol>blk_SHA256_Init</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;block_source_from_strbuf&apos; is never used." verbose="The function &apos;block_source_from_strbuf&apos; is never used." cwe="561">
            <location file="reftable/blocksource.c" line="50" column="0"/>
            <symbol>block_source_from_strbuf</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_add&apos; is never used." verbose="The function &apos;cmd_add&apos; is never used." cwe="561">
            <location file="builtin/add.c" line="493" column="0"/>
            <symbol>cmd_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_am&apos; is never used." verbose="The function &apos;cmd_am&apos; is never used." cwe="561">
            <location file="builtin/am.c" line="2314" column="0"/>
            <symbol>cmd_am</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_annotate&apos; is never used." verbose="The function &apos;cmd_annotate&apos; is never used." cwe="561">
            <location file="builtin/annotate.c" line="10" column="0"/>
            <symbol>cmd_annotate</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_apply&apos; is never used." verbose="The function &apos;cmd_apply&apos; is never used." cwe="561">
            <location file="builtin/apply.c" line="11" column="0"/>
            <symbol>cmd_apply</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_archive&apos; is never used." verbose="The function &apos;cmd_archive&apos; is never used." cwe="561">
            <location file="builtin/archive.c" line="81" column="0"/>
            <symbol>cmd_archive</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_bisect__helper&apos; is never used." verbose="The function &apos;cmd_bisect__helper&apos; is never used." cwe="561">
            <location file="builtin/bisect--helper.c" line="1393" column="0"/>
            <symbol>cmd_bisect__helper</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_branch&apos; is never used." verbose="The function &apos;cmd_branch&apos; is never used." cwe="561">
            <location file="builtin/branch.c" line="628" column="0"/>
            <symbol>cmd_branch</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_bugreport&apos; is never used." verbose="The function &apos;cmd_bugreport&apos; is never used." cwe="561">
            <location file="builtin/bugreport.c" line="96" column="0"/>
            <symbol>cmd_bugreport</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_bundle&apos; is never used." verbose="The function &apos;cmd_bundle&apos; is never used." cwe="561">
            <location file="builtin/bundle.c" line="207" column="0"/>
            <symbol>cmd_bundle</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_cat_file&apos; is never used." verbose="The function &apos;cmd_cat_file&apos; is never used." cwe="561">
            <location file="builtin/cat-file.c" line="881" column="0"/>
            <symbol>cmd_cat_file</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_check_attr&apos; is never used." verbose="The function &apos;cmd_check_attr&apos; is never used." cwe="561">
            <location file="builtin/check-attr.c" line="105" column="0"/>
            <symbol>cmd_check_attr</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_check_ignore&apos; is never used." verbose="The function &apos;cmd_check_ignore&apos; is never used." cwe="561">
            <location file="builtin/check-ignore.c" line="153" column="0"/>
            <symbol>cmd_check_ignore</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_check_mailmap&apos; is never used." verbose="The function &apos;cmd_check_mailmap&apos; is never used." cwe="561">
            <location file="builtin/check-mailmap.c" line="39" column="0"/>
            <symbol>cmd_check_mailmap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_check_ref_format&apos; is never used." verbose="The function &apos;cmd_check_ref_format&apos; is never used." cwe="561">
            <location file="builtin/check-ref-format.c" line="54" column="0"/>
            <symbol>cmd_check_ref_format</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_checkout&apos; is never used." verbose="The function &apos;cmd_checkout&apos; is never used." cwe="561">
            <location file="builtin/checkout.c" line="1825" column="0"/>
            <symbol>cmd_checkout</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_checkout__worker&apos; is never used." verbose="The function &apos;cmd_checkout__worker&apos; is never used." cwe="561">
            <location file="builtin/checkout--worker.c" line="114" column="0"/>
            <symbol>cmd_checkout__worker</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_checkout_index&apos; is never used." verbose="The function &apos;cmd_checkout_index&apos; is never used." cwe="561">
            <location file="builtin/checkout-index.c" line="206" column="0"/>
            <symbol>cmd_checkout_index</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_cherry_pick&apos; is never used." verbose="The function &apos;cmd_cherry_pick&apos; is never used." cwe="561">
            <location file="builtin/revert.c" line="256" column="0"/>
            <symbol>cmd_cherry_pick</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_clean&apos; is never used." verbose="The function &apos;cmd_clean&apos; is never used." cwe="561">
            <location file="builtin/clean.c" line="911" column="0"/>
            <symbol>cmd_clean</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_clone&apos; is never used." verbose="The function &apos;cmd_clone&apos; is never used." cwe="561">
            <location file="builtin/clone.c" line="890" column="0"/>
            <symbol>cmd_clone</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_column&apos; is never used." verbose="The function &apos;cmd_column&apos; is never used." cwe="561">
            <location file="builtin/column.c" line="20" column="0"/>
            <symbol>cmd_column</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_commit&apos; is never used." verbose="The function &apos;cmd_commit&apos; is never used." cwe="561">
            <location file="builtin/commit.c" line="1626" column="0"/>
            <symbol>cmd_commit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_commit_graph&apos; is never used." verbose="The function &apos;cmd_commit_graph&apos; is never used." cwe="561">
            <location file="builtin/commit-graph.c" line="308" column="0"/>
            <symbol>cmd_commit_graph</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_commit_tree&apos; is never used." verbose="The function &apos;cmd_commit_tree&apos; is never used." cwe="561">
            <location file="builtin/commit-tree.c" line="102" column="0"/>
            <symbol>cmd_commit_tree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_config&apos; is never used." verbose="The function &apos;cmd_config&apos; is never used." cwe="561">
            <location file="builtin/config.c" line="639" column="0"/>
            <symbol>cmd_config</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_count_objects&apos; is never used." verbose="The function &apos;cmd_count_objects&apos; is never used." cwe="561">
            <location file="builtin/count-objects.c" line="94" column="0"/>
            <symbol>cmd_count_objects</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_credential&apos; is never used." verbose="The function &apos;cmd_credential&apos; is never used." cwe="561">
            <location file="builtin/credential.c" line="9" column="0"/>
            <symbol>cmd_credential</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_credential_cache&apos; is never used." verbose="The function &apos;cmd_credential_cache&apos; is never used." cwe="561">
            <location file="builtin/credential-cache.c" line="128" column="0"/>
            <symbol>cmd_credential_cache</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_credential_cache_daemon&apos; is never used." verbose="The function &apos;cmd_credential_cache_daemon&apos; is never used." cwe="561">
            <location file="builtin/credential-cache--daemon.c" line="264" column="0"/>
            <symbol>cmd_credential_cache_daemon</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_credential_store&apos; is never used." verbose="The function &apos;cmd_credential_store&apos; is never used." cwe="561">
            <location file="builtin/credential-store.c" line="150" column="0"/>
            <symbol>cmd_credential_store</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_diagnose&apos; is never used." verbose="The function &apos;cmd_diagnose&apos; is never used." cwe="561">
            <location file="builtin/diagnose.c" line="11" column="0"/>
            <symbol>cmd_diagnose</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_diff&apos; is never used." verbose="The function &apos;cmd_diff&apos; is never used." cwe="561">
            <location file="builtin/diff.c" line="394" column="0"/>
            <symbol>cmd_diff</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_diff_files&apos; is never used." verbose="The function &apos;cmd_diff_files&apos; is never used." cwe="561">
            <location file="builtin/diff-files.c" line="20" column="0"/>
            <symbol>cmd_diff_files</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_diff_index&apos; is never used." verbose="The function &apos;cmd_diff_index&apos; is never used." cwe="561">
            <location file="builtin/diff-index.c" line="16" column="0"/>
            <symbol>cmd_diff_index</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_diff_tree&apos; is never used." verbose="The function &apos;cmd_diff_tree&apos; is never used." cwe="561">
            <location file="builtin/diff-tree.c" line="108" column="0"/>
            <symbol>cmd_diff_tree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_difftool&apos; is never used." verbose="The function &apos;cmd_difftool&apos; is never used." cwe="561">
            <location file="builtin/difftool.c" line="687" column="0"/>
            <symbol>cmd_difftool</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_env__helper&apos; is never used." verbose="The function &apos;cmd_env__helper&apos; is never used." cwe="561">
            <location file="builtin/env--helper.c" line="32" column="0"/>
            <symbol>cmd_env__helper</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_fast_export&apos; is never used." verbose="The function &apos;cmd_fast_export&apos; is never used." cwe="561">
            <location file="builtin/fast-export.c" line="1159" column="0"/>
            <symbol>cmd_fast_export</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_fast_import&apos; is never used." verbose="The function &apos;cmd_fast_import&apos; is never used." cwe="561">
            <location file="builtin/fast-import.c" line="3519" column="0"/>
            <symbol>cmd_fast_import</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_fetch&apos; is never used." verbose="The function &apos;cmd_fetch&apos; is never used." cwe="561">
            <location file="builtin/fetch.c" line="2109" column="0"/>
            <symbol>cmd_fetch</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_fetch_pack&apos; is never used." verbose="The function &apos;cmd_fetch_pack&apos; is never used." cwe="561">
            <location file="builtin/fetch-pack.c" line="43" column="0"/>
            <symbol>cmd_fetch_pack</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_fmt_merge_msg&apos; is never used." verbose="The function &apos;cmd_fmt_merge_msg&apos; is never used." cwe="561">
            <location file="builtin/fmt-merge-msg.c" line="11" column="0"/>
            <symbol>cmd_fmt_merge_msg</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_for_each_ref&apos; is never used." verbose="The function &apos;cmd_for_each_ref&apos; is never used." cwe="561">
            <location file="builtin/for-each-ref.c" line="17" column="0"/>
            <symbol>cmd_for_each_ref</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_for_each_repo&apos; is never used." verbose="The function &apos;cmd_for_each_repo&apos; is never used." cwe="561">
            <location file="builtin/for-each-repo.c" line="30" column="0"/>
            <symbol>cmd_for_each_repo</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_fsck&apos; is never used." verbose="The function &apos;cmd_fsck&apos; is never used." cwe="561">
            <location file="builtin/fsck.c" line="848" column="0"/>
            <symbol>cmd_fsck</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_fsmonitor__daemon&apos; is never used." verbose="The function &apos;cmd_fsmonitor__daemon&apos; is never used." cwe="561">
            <location file="builtin/fsmonitor--daemon.c" line="1575" column="0"/>
            <symbol>cmd_fsmonitor__daemon</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_gc&apos; is never used." verbose="The function &apos;cmd_gc&apos; is never used." cwe="561">
            <location file="builtin/gc.c" line="550" column="0"/>
            <symbol>cmd_gc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_get_tar_commit_id&apos; is never used." verbose="The function &apos;cmd_get_tar_commit_id&apos; is never used." cwe="561">
            <location file="builtin/get-tar-commit-id.c" line="17" column="0"/>
            <symbol>cmd_get_tar_commit_id</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_grep&apos; is never used." verbose="The function &apos;cmd_grep&apos; is never used." cwe="561">
            <location file="builtin/grep.c" line="870" column="0"/>
            <symbol>cmd_grep</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_hash_object&apos; is never used." verbose="The function &apos;cmd_hash_object&apos; is never used." cwe="561">
            <location file="builtin/hash-object.c" line="80" column="0"/>
            <symbol>cmd_hash_object</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_hook&apos; is never used." verbose="The function &apos;cmd_hook&apos; is never used." cwe="561">
            <location file="builtin/hook.c" line="68" column="0"/>
            <symbol>cmd_hook</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_index_pack&apos; is never used." verbose="The function &apos;cmd_index_pack&apos; is never used." cwe="561">
            <location file="builtin/index-pack.c" line="1714" column="0"/>
            <symbol>cmd_index_pack</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_init_db&apos; is never used." verbose="The function &apos;cmd_init_db&apos; is never used." cwe="561">
            <location file="builtin/init-db.c" line="531" column="0"/>
            <symbol>cmd_init_db</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_interpret_trailers&apos; is never used." verbose="The function &apos;cmd_interpret_trailers&apos; is never used." cwe="561">
            <location file="builtin/interpret-trailers.c" line="91" column="0"/>
            <symbol>cmd_interpret_trailers</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_ls_files&apos; is never used." verbose="The function &apos;cmd_ls_files&apos; is never used." cwe="561">
            <location file="builtin/ls-files.c" line="693" column="0"/>
            <symbol>cmd_ls_files</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_ls_remote&apos; is never used." verbose="The function &apos;cmd_ls_remote&apos; is never used." cwe="561">
            <location file="builtin/ls-remote.c" line="38" column="0"/>
            <symbol>cmd_ls_remote</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_mailinfo&apos; is never used." verbose="The function &apos;cmd_mailinfo&apos; is never used." cwe="561">
            <location file="builtin/mailinfo.c" line="50" column="0"/>
            <symbol>cmd_mailinfo</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_mailsplit&apos; is never used." verbose="The function &apos;cmd_mailsplit&apos; is never used." cwe="561">
            <location file="builtin/mailsplit.c" line="272" column="0"/>
            <symbol>cmd_mailsplit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_maintenance&apos; is never used." verbose="The function &apos;cmd_maintenance&apos; is never used." cwe="561">
            <location file="builtin/gc.c" line="2636" column="0"/>
            <symbol>cmd_maintenance</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_merge_base&apos; is never used." verbose="The function &apos;cmd_merge_base&apos; is never used." cwe="561">
            <location file="builtin/merge-base.c" line="135" column="0"/>
            <symbol>cmd_merge_base</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_merge_file&apos; is never used." verbose="The function &apos;cmd_merge_file&apos; is never used." cwe="561">
            <location file="builtin/merge-file.c" line="26" column="0"/>
            <symbol>cmd_merge_file</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_merge_index&apos; is never used." verbose="The function &apos;cmd_merge_index&apos; is never used." cwe="561">
            <location file="builtin/merge-index.c" line="73" column="0"/>
            <symbol>cmd_merge_index</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_merge_ours&apos; is never used." verbose="The function &apos;cmd_merge_ours&apos; is never used." cwe="561">
            <location file="builtin/merge-ours.c" line="17" column="0"/>
            <symbol>cmd_merge_ours</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_merge_recursive&apos; is never used." verbose="The function &apos;cmd_merge_recursive&apos; is never used." cwe="561">
            <location file="builtin/merge-recursive.c" line="23" column="0"/>
            <symbol>cmd_merge_recursive</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_merge_tree&apos; is never used." verbose="The function &apos;cmd_merge_tree&apos; is never used." cwe="561">
            <location file="builtin/merge-tree.c" line="485" column="0"/>
            <symbol>cmd_merge_tree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_mktag&apos; is never used." verbose="The function &apos;cmd_mktag&apos; is never used." cwe="561">
            <location file="builtin/mktag.c" line="71" column="0"/>
            <symbol>cmd_mktag</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_mktree&apos; is never used." verbose="The function &apos;cmd_mktree&apos; is never used." cwe="561">
            <location file="builtin/mktree.c" line="150" column="0"/>
            <symbol>cmd_mktree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_multi_pack_index&apos; is never used." verbose="The function &apos;cmd_multi_pack_index&apos; is never used." cwe="561">
            <location file="builtin/multi-pack-index.c" line="258" column="0"/>
            <symbol>cmd_multi_pack_index</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_mv&apos; is never used." verbose="The function &apos;cmd_mv&apos; is never used." cwe="561">
            <location file="builtin/mv.c" line="159" column="0"/>
            <symbol>cmd_mv</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_name_rev&apos; is never used." verbose="The function &apos;cmd_name_rev&apos; is never used." cwe="561">
            <location file="builtin/name-rev.c" line="567" column="0"/>
            <symbol>cmd_name_rev</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_notes&apos; is never used." verbose="The function &apos;cmd_notes&apos; is never used." cwe="561">
            <location file="builtin/notes.c" line="995" column="0"/>
            <symbol>cmd_notes</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_pack_objects&apos; is never used." verbose="The function &apos;cmd_pack_objects&apos; is never used." cwe="561">
            <location file="builtin/pack-objects.c" line="4167" column="0"/>
            <symbol>cmd_pack_objects</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_pack_redundant&apos; is never used." verbose="The function &apos;cmd_pack_redundant&apos; is never used." cwe="561">
            <location file="builtin/pack-redundant.c" line="560" column="0"/>
            <symbol>cmd_pack_redundant</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_pack_refs&apos; is never used." verbose="The function &apos;cmd_pack_refs&apos; is never used." cwe="561">
            <location file="builtin/pack-refs.c" line="12" column="0"/>
            <symbol>cmd_pack_refs</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_patch_id&apos; is never used." verbose="The function &apos;cmd_patch_id&apos; is never used." cwe="561">
            <location file="builtin/patch-id.c" line="213" column="0"/>
            <symbol>cmd_patch_id</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_prune&apos; is never used." verbose="The function &apos;cmd_prune&apos; is never used." cwe="561">
            <location file="builtin/prune.c" line="141" column="0"/>
            <symbol>cmd_prune</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_prune_packed&apos; is never used." verbose="The function &apos;cmd_prune_packed&apos; is never used." cwe="561">
            <location file="builtin/prune-packed.c" line="10" column="0"/>
            <symbol>cmd_prune_packed</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_pull&apos; is never used." verbose="The function &apos;cmd_pull&apos; is never used." cwe="561">
            <location file="builtin/pull.c" line="979" column="0"/>
            <symbol>cmd_pull</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_push&apos; is never used." verbose="The function &apos;cmd_push&apos; is never used." cwe="561">
            <location file="builtin/push.c" line="576" column="0"/>
            <symbol>cmd_push</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_range_diff&apos; is never used." verbose="The function &apos;cmd_range_diff&apos; is never used." cwe="561">
            <location file="builtin/range-diff.c" line="15" column="0"/>
            <symbol>cmd_range_diff</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_read_tree&apos; is never used." verbose="The function &apos;cmd_read_tree&apos; is never used." cwe="561">
            <location file="builtin/read-tree.c" line="108" column="0"/>
            <symbol>cmd_read_tree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_rebase&apos; is never used." verbose="The function &apos;cmd_rebase&apos; is never used." cwe="561">
            <location file="builtin/rebase.c" line="1022" column="0"/>
            <symbol>cmd_rebase</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_receive_pack&apos; is never used." verbose="The function &apos;cmd_receive_pack&apos; is never used." cwe="561">
            <location file="builtin/receive-pack.c" line="2464" column="0"/>
            <symbol>cmd_receive_pack</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_reflog&apos; is never used." verbose="The function &apos;cmd_reflog&apos; is never used." cwe="561">
            <location file="builtin/reflog.c" line="411" column="0"/>
            <symbol>cmd_reflog</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_remote_ext&apos; is never used." verbose="The function &apos;cmd_remote_ext&apos; is never used." cwe="561">
            <location file="builtin/remote-ext.c" line="196" column="0"/>
            <symbol>cmd_remote_ext</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_remote_fd&apos; is never used." verbose="The function &apos;cmd_remote_fd&apos; is never used." cwe="561">
            <location file="builtin/remote-fd.c" line="56" column="0"/>
            <symbol>cmd_remote_fd</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_replace&apos; is never used." verbose="The function &apos;cmd_replace&apos; is never used." cwe="561">
            <location file="builtin/replace.c" line="535" column="0"/>
            <symbol>cmd_replace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_rerere&apos; is never used." verbose="The function &apos;cmd_rerere&apos; is never used." cwe="561">
            <location file="builtin/rerere.c" line="51" column="0"/>
            <symbol>cmd_rerere</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_reset&apos; is never used." verbose="The function &apos;cmd_reset&apos; is never used." cwe="561">
            <location file="builtin/reset.c" line="313" column="0"/>
            <symbol>cmd_reset</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_restore&apos; is never used." verbose="The function &apos;cmd_restore&apos; is never used." cwe="561">
            <location file="builtin/checkout.c" line="1921" column="0"/>
            <symbol>cmd_restore</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_rev_list&apos; is never used." verbose="The function &apos;cmd_rev_list&apos; is never used." cwe="561">
            <location file="builtin/rev-list.c" line="505" column="0"/>
            <symbol>cmd_rev_list</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_rev_parse&apos; is never used." verbose="The function &apos;cmd_rev_parse&apos; is never used." cwe="561">
            <location file="builtin/rev-parse.c" line="660" column="0"/>
            <symbol>cmd_rev_parse</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_revert&apos; is never used." verbose="The function &apos;cmd_revert&apos; is never used." cwe="561">
            <location file="builtin/revert.c" line="240" column="0"/>
            <symbol>cmd_revert</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_rm&apos; is never used." verbose="The function &apos;cmd_rm&apos; is never used." cwe="561">
            <location file="builtin/rm.c" line="258" column="0"/>
            <symbol>cmd_rm</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_send_pack&apos; is never used." verbose="The function &apos;cmd_send_pack&apos; is never used." cwe="561">
            <location file="builtin/send-pack.c" line="156" column="0"/>
            <symbol>cmd_send_pack</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_shortlog&apos; is never used." verbose="The function &apos;cmd_shortlog&apos; is never used." cwe="561">
            <location file="builtin/shortlog.c" line="376" column="0"/>
            <symbol>cmd_shortlog</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_show_branch&apos; is never used." verbose="The function &apos;cmd_show_branch&apos; is never used." cwe="561">
            <location file="builtin/show-branch.c" line="622" column="0"/>
            <symbol>cmd_show_branch</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_show_index&apos; is never used." verbose="The function &apos;cmd_show_index&apos; is never used." cwe="561">
            <location file="builtin/show-index.c" line="11" column="0"/>
            <symbol>cmd_show_index</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_show_ref&apos; is never used." verbose="The function &apos;cmd_show_ref&apos; is never used." cwe="561">
            <location file="builtin/show-ref.c" line="179" column="0"/>
            <symbol>cmd_show_ref</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_sparse_checkout&apos; is never used." verbose="The function &apos;cmd_sparse_checkout&apos; is never used." cwe="561">
            <location file="builtin/sparse-checkout.c" line="925" column="0"/>
            <symbol>cmd_sparse_checkout</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_stash&apos; is never used." verbose="The function &apos;cmd_stash&apos; is never used." cwe="561">
            <location file="builtin/stash.c" line="1819" column="0"/>
            <symbol>cmd_stash</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_status&apos; is never used." verbose="The function &apos;cmd_status&apos; is never used." cwe="561">
            <location file="builtin/commit.c" line="1485" column="0"/>
            <symbol>cmd_status</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_stripspace&apos; is never used." verbose="The function &apos;cmd_stripspace&apos; is never used." cwe="561">
            <location file="builtin/stripspace.c" line="29" column="0"/>
            <symbol>cmd_stripspace</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_switch&apos; is never used." verbose="The function &apos;cmd_switch&apos; is never used." cwe="561">
            <location file="builtin/checkout.c" line="1879" column="0"/>
            <symbol>cmd_switch</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_symbolic_ref&apos; is never used." verbose="The function &apos;cmd_symbolic_ref&apos; is never used." cwe="561">
            <location file="builtin/symbolic-ref.c" line="40" column="0"/>
            <symbol>cmd_symbolic_ref</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_tag&apos; is never used." verbose="The function &apos;cmd_tag&apos; is never used." cwe="561">
            <location file="builtin/tag.c" line="424" column="0"/>
            <symbol>cmd_tag</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_unpack_file&apos; is never used." verbose="The function &apos;cmd_unpack_file&apos; is never used." cwe="561">
            <location file="builtin/unpack-file.c" line="25" column="0"/>
            <symbol>cmd_unpack_file</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_unpack_objects&apos; is never used." verbose="The function &apos;cmd_unpack_objects&apos; is never used." cwe="561">
            <location file="builtin/unpack-objects.c" line="601" column="0"/>
            <symbol>cmd_unpack_objects</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_update_index&apos; is never used." verbose="The function &apos;cmd_update_index&apos; is never used." cwe="561">
            <location file="builtin/update-index.c" line="983" column="0"/>
            <symbol>cmd_update_index</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_update_ref&apos; is never used." verbose="The function &apos;cmd_update_ref&apos; is never used." cwe="561">
            <location file="builtin/update-ref.c" line="498" column="0"/>
            <symbol>cmd_update_ref</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_update_server_info&apos; is never used." verbose="The function &apos;cmd_update_server_info&apos; is never used." cwe="561">
            <location file="builtin/update-server-info.c" line="11" column="0"/>
            <symbol>cmd_update_server_info</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_upload_archive&apos; is never used." verbose="The function &apos;cmd_upload_archive&apos; is never used." cwe="561">
            <location file="builtin/upload-archive.c" line="78" column="0"/>
            <symbol>cmd_upload_archive</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_upload_archive_writer&apos; is never used." verbose="The function &apos;cmd_upload_archive_writer&apos; is never used." cwe="561">
            <location file="builtin/upload-archive.c" line="20" column="0"/>
            <symbol>cmd_upload_archive_writer</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_upload_pack&apos; is never used." verbose="The function &apos;cmd_upload_pack&apos; is never used." cwe="561">
            <location file="builtin/upload-pack.c" line="16" column="0"/>
            <symbol>cmd_upload_pack</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_var&apos; is never used." verbose="The function &apos;cmd_var&apos; is never used." cwe="561">
            <location file="builtin/var.c" line="82" column="0"/>
            <symbol>cmd_var</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_verify_commit&apos; is never used." verbose="The function &apos;cmd_verify_commit&apos; is never used." cwe="561">
            <location file="builtin/verify-commit.c" line="63" column="0"/>
            <symbol>cmd_verify_commit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_verify_pack&apos; is never used." verbose="The function &apos;cmd_verify_pack&apos; is never used." cwe="561">
            <location file="builtin/verify-pack.c" line="63" column="0"/>
            <symbol>cmd_verify_pack</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_verify_tag&apos; is never used." verbose="The function &apos;cmd_verify_tag&apos; is never used." cwe="561">
            <location file="builtin/verify-tag.c" line="30" column="0"/>
            <symbol>cmd_verify_tag</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_worktree&apos; is never used." verbose="The function &apos;cmd_worktree&apos; is never used." cwe="561">
            <location file="builtin/worktree.c" line="1173" column="0"/>
            <symbol>cmd_worktree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;cmd_write_tree&apos; is never used." verbose="The function &apos;cmd_write_tree&apos; is never used." cwe="561">
            <location file="builtin/write-tree.c" line="19" column="0"/>
            <symbol>cmd_write_tree</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;do_for_each_repo_ref_iterator&apos; is never used." verbose="The function &apos;do_for_each_repo_ref_iterator&apos; is never used." cwe="561">
            <location file="refs/iterator.c" line="410" column="0"/>
            <symbol>do_for_each_repo_ref_iterator</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;empty_ref_iterator_begin&apos; is never used." verbose="The function &apos;empty_ref_iterator_begin&apos; is never used." cwe="561">
            <location file="refs/iterator.c" line="72" column="0"/>
            <symbol>empty_ref_iterator_begin</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;enable_pipe_nonblock&apos; is never used." verbose="The function &apos;enable_pipe_nonblock&apos; is never used." cwe="561">
            <location file="compat/nonblock.c" line="44" column="0"/>
            <symbol>enable_pipe_nonblock</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ewah_checksum&apos; is never used." verbose="The function &apos;ewah_checksum&apos; is never used." cwe="561">
            <location file="ewah/ewah_bitmap.c" line="467" column="0"/>
            <symbol>ewah_checksum</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ewah_each_bit&apos; is never used." verbose="The function &apos;ewah_each_bit&apos; is never used." cwe="561">
            <location file="ewah/ewah_bitmap.c" line="239" column="0"/>
            <symbol>ewah_each_bit</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ewah_pool_free&apos; is never used." verbose="The function &apos;ewah_pool_free&apos; is never used." cwe="561">
            <location file="ewah/ewah_bitmap.c" line="452" column="0"/>
            <symbol>ewah_pool_free</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ewah_pool_new&apos; is never used." verbose="The function &apos;ewah_pool_new&apos; is never used." cwe="561">
            <location file="ewah/ewah_bitmap.c" line="444" column="0"/>
            <symbol>ewah_pool_new</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ewah_read_mmap&apos; is never used." verbose="The function &apos;ewah_read_mmap&apos; is never used." cwe="561">
            <location file="ewah/ewah_io.c" line="89" column="0"/>
            <symbol>ewah_read_mmap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ewah_serialize_strbuf&apos; is never used." verbose="The function &apos;ewah_serialize_strbuf&apos; is never used." cwe="561">
            <location file="ewah/ewah_io.c" line="84" column="0"/>
            <symbol>ewah_serialize_strbuf</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ewah_set&apos; is never used." verbose="The function &apos;ewah_set&apos; is never used." cwe="561">
            <location file="ewah/ewah_bitmap.c" line="202" column="0"/>
            <symbol>ewah_set</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ewah_to_bitmap&apos; is never used." verbose="The function &apos;ewah_to_bitmap&apos; is never used." cwe="561">
            <location file="ewah/bitmap.c" line="103" column="0"/>
            <symbol>ewah_to_bitmap</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ewah_xor&apos; is never used." verbose="The function &apos;ewah_xor&apos; is never used." cwe="561">
            <location file="ewah/ewah_bitmap.c" line="376" column="0"/>
            <symbol>ewah_xor</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;git_terminal_prompt&apos; is never used." verbose="The function &apos;git_terminal_prompt&apos; is never used." cwe="561">
            <location file="compat/terminal.c" line="427" column="0"/>
            <symbol>git_terminal_prompt</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ipc_client_send_command&apos; is never used." verbose="The function &apos;ipc_client_send_command&apos; is never used." cwe="561">
            <location file="compat/simple-ipc/ipc-unix-socket.c" line="221" column="0"/>
            <symbol>ipc_client_send_command</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ipc_get_active_state&apos; is never used." verbose="The function &apos;ipc_get_active_state&apos; is never used." cwe="561">
            <location file="compat/simple-ipc/ipc-unix-socket.c" line="17" column="0"/>
            <symbol>ipc_get_active_state</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ipc_server_await&apos; is never used." verbose="The function &apos;ipc_server_await&apos; is never used." cwe="561">
            <location file="compat/simple-ipc/ipc-unix-socket.c" line="968" column="0"/>
            <symbol>ipc_server_await</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ipc_server_free&apos; is never used." verbose="The function &apos;ipc_server_free&apos; is never used." cwe="561">
            <location file="compat/simple-ipc/ipc-unix-socket.c" line="991" column="0"/>
            <symbol>ipc_server_free</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;ipc_server_run_async&apos; is never used." verbose="The function &apos;ipc_server_run_async&apos; is never used." cwe="561">
            <location file="compat/simple-ipc/ipc-unix-socket.c" line="826" column="0"/>
            <symbol>ipc_server_run_async</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;maybe_debug_wrap_ref_store&apos; is never used." verbose="The function &apos;maybe_debug_wrap_ref_store&apos; is never used." cwe="561">
            <location file="refs/debug.c" line="14" column="0"/>
            <symbol>maybe_debug_wrap_ref_store</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;overlay_ref_iterator_begin&apos; is never used." verbose="The function &apos;overlay_ref_iterator_begin&apos; is never used." cwe="561">
            <location file="refs/iterator.c" line="260" column="0"/>
            <symbol>overlay_ref_iterator_begin</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;prefix_ref_iterator_begin&apos; is never used." verbose="The function &apos;prefix_ref_iterator_begin&apos; is never used." cwe="561">
            <location file="refs/iterator.c" line="386" column="0"/>
            <symbol>prefix_ref_iterator_begin</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;read_key_without_echo&apos; is never used." verbose="The function &apos;read_key_without_echo&apos; is never used." cwe="561">
            <location file="compat/terminal.c" line="532" column="0"/>
            <symbol>read_key_without_echo</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_error_str&apos; is never used." verbose="The function &apos;reftable_error_str&apos; is never used." cwe="561">
            <location file="reftable/error.c" line="13" column="0"/>
            <symbol>reftable_error_str</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_reader_print_file&apos; is never used." verbose="The function &apos;reftable_reader_print_file&apos; is never used." cwe="561">
            <location file="reftable/reader.c" line="798" column="0"/>
            <symbol>reftable_reader_print_file</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_reader_refs_for&apos; is never used." verbose="The function &apos;reftable_reader_refs_for&apos; is never used." cwe="561">
            <location file="reftable/reader.c" line="741" column="0"/>
            <symbol>reftable_reader_refs_for</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_reader_seek_log&apos; is never used." verbose="The function &apos;reftable_reader_seek_log&apos; is never used." cwe="561">
            <location file="reftable/reader.c" line="624" column="0"/>
            <symbol>reftable_reader_seek_log</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_record_equal&apos; is never used." verbose="The function &apos;reftable_record_equal&apos; is never used." cwe="561">
            <location file="reftable/record.c" line="1159" column="0"/>
            <symbol>reftable_record_equal</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_record_print&apos; is never used." verbose="The function &apos;reftable_record_print&apos; is never used." cwe="561">
            <location file="reftable/record.c" line="1310" column="0"/>
            <symbol>reftable_record_print</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_set_alloc&apos; is never used." verbose="The function &apos;reftable_set_alloc&apos; is never used." cwe="561">
            <location file="reftable/publicbasics.c" line="47" column="0"/>
            <symbol>reftable_set_alloc</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_stack_add&apos; is never used." verbose="The function &apos;reftable_stack_add&apos; is never used." cwe="561">
            <location file="reftable/stack.c" line="415" column="0"/>
            <symbol>reftable_stack_add</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_stack_clean&apos; is never used." verbose="The function &apos;reftable_stack_clean&apos; is never used." cwe="561">
            <location file="reftable/stack.c" line="1376" column="0"/>
            <symbol>reftable_stack_clean</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_stack_compact_all&apos; is never used." verbose="The function &apos;reftable_stack_compact_all&apos; is never used." cwe="561">
            <location file="reftable/stack.c" line="1086" column="0"/>
            <symbol>reftable_stack_compact_all</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_stack_compaction_stats&apos; is never used." verbose="The function &apos;reftable_stack_compaction_stats&apos; is never used." cwe="561">
            <location file="reftable/stack.c" line="1209" column="0"/>
            <symbol>reftable_stack_compaction_stats</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_stack_print_directory&apos; is never used." verbose="The function &apos;reftable_stack_print_directory&apos; is never used." cwe="561">
            <location file="reftable/stack.c" line="1396" column="0"/>
            <symbol>reftable_stack_print_directory</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_stack_read_log&apos; is never used." verbose="The function &apos;reftable_stack_read_log&apos; is never used." cwe="561">
            <location file="reftable/stack.c" line="1222" column="0"/>
            <symbol>reftable_stack_read_log</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_stack_read_ref&apos; is never used." verbose="The function &apos;reftable_stack_read_ref&apos; is never used." cwe="561">
            <location file="reftable/stack.c" line="1214" column="0"/>
            <symbol>reftable_stack_read_ref</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_writer_add_logs&apos; is never used." verbose="The function &apos;reftable_writer_add_logs&apos; is never used." cwe="561">
            <location file="reftable/writer.c" line="365" column="0"/>
            <symbol>reftable_writer_add_logs</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_writer_add_refs&apos; is never used." verbose="The function &apos;reftable_writer_add_refs&apos; is never used." cwe="561">
            <location file="reftable/writer.c" line="296" column="0"/>
            <symbol>reftable_writer_add_refs</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;reftable_writer_stats&apos; is never used." verbose="The function &apos;reftable_writer_stats&apos; is never used." cwe="561">
            <location file="reftable/writer.c" line="704" column="0"/>
            <symbol>reftable_writer_stats</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;sha1_compression&apos; is never used." verbose="The function &apos;sha1_compression&apos; is never used." cwe="561">
            <location file="sha1dc/sha1.c" line="191" column="0"/>
            <symbol>sha1_compression</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_cfg_free_env_vars&apos; is never used." verbose="The function &apos;tr2_cfg_free_env_vars&apos; is never used." cwe="561">
            <location file="trace2/tr2_cfg.c" line="84" column="0"/>
            <symbol>tr2_cfg_free_env_vars</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_cfg_free_patterns&apos; is never used." verbose="The function &apos;tr2_cfg_free_patterns&apos; is never used." cwe="561">
            <location file="trace2/tr2_cfg.c" line="45" column="0"/>
            <symbol>tr2_cfg_free_patterns</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_cfg_list_config_fl&apos; is never used." verbose="The function &apos;tr2_cfg_list_config_fl&apos; is never used." cwe="561">
            <location file="trace2/tr2_cfg.c" line="117" column="0"/>
            <symbol>tr2_cfg_list_config_fl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_cfg_set_fl&apos; is never used." verbose="The function &apos;tr2_cfg_set_fl&apos; is never used." cwe="561">
            <location file="trace2/tr2_cfg.c" line="140" column="0"/>
            <symbol>tr2_cfg_set_fl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_cmd_name_append_hierarchy&apos; is never used." verbose="The function &apos;tr2_cmd_name_append_hierarchy&apos; is never used." cwe="561">
            <location file="trace2/tr2_cmd_name.c" line="8" column="0"/>
            <symbol>tr2_cmd_name_append_hierarchy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_cmd_name_get_hierarchy&apos; is never used." verbose="The function &apos;tr2_cmd_name_get_hierarchy&apos; is never used." cwe="561">
            <location file="trace2/tr2_cmd_name.c" line="22" column="0"/>
            <symbol>tr2_cmd_name_get_hierarchy</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_cmd_name_release&apos; is never used." verbose="The function &apos;tr2_cmd_name_release&apos; is never used." cwe="561">
            <location file="trace2/tr2_cmd_name.c" line="27" column="0"/>
            <symbol>tr2_cmd_name_release</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_counter_increment&apos; is never used." verbose="The function &apos;tr2_counter_increment&apos; is never used." cwe="561">
            <location file="trace2/tr2_ctr.c" line="34" column="0"/>
            <symbol>tr2_counter_increment</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_emit_final_counters&apos; is never used." verbose="The function &apos;tr2_emit_final_counters&apos; is never used." cwe="561">
            <location file="trace2/tr2_ctr.c" line="87" column="0"/>
            <symbol>tr2_emit_final_counters</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_emit_final_timers&apos; is never used." verbose="The function &apos;tr2_emit_final_timers&apos; is never used." cwe="561">
            <location file="trace2/tr2_tmr.c" line="168" column="0"/>
            <symbol>tr2_emit_final_timers</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_emit_per_thread_counters&apos; is never used." verbose="The function &apos;tr2_emit_per_thread_counters&apos; is never used." cwe="561">
            <location file="trace2/tr2_ctr.c" line="67" column="0"/>
            <symbol>tr2_emit_per_thread_counters</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_emit_per_thread_timers&apos; is never used." verbose="The function &apos;tr2_emit_per_thread_timers&apos; is never used." cwe="561">
            <location file="trace2/tr2_tmr.c" line="148" column="0"/>
            <symbol>tr2_emit_per_thread_timers</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_list_env_vars_fl&apos; is never used." verbose="The function &apos;tr2_list_env_vars_fl&apos; is never used." cwe="561">
            <location file="trace2/tr2_cfg.c" line="125" column="0"/>
            <symbol>tr2_list_env_vars_fl</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_sid_release&apos; is never used." verbose="The function &apos;tr2_sid_release&apos; is never used." cwe="561">
            <location file="trace2/tr2_sid.c" line="109" column="0"/>
            <symbol>tr2_sid_release</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_start_timer&apos; is never used." verbose="The function &apos;tr2_start_timer&apos; is never used." cwe="561">
            <location file="trace2/tr2_tmr.c" line="37" column="0"/>
            <symbol>tr2_start_timer</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_stop_timer&apos; is never used." verbose="The function &apos;tr2_stop_timer&apos; is never used." cwe="561">
            <location file="trace2/tr2_tmr.c" line="49" column="0"/>
            <symbol>tr2_stop_timer</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_sysenv_load&apos; is never used." verbose="The function &apos;tr2_sysenv_load&apos; is never used." cwe="561">
            <location file="trace2/tr2_sysenv.c" line="85" column="0"/>
            <symbol>tr2_sysenv_load</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_sysenv_release&apos; is never used." verbose="The function &apos;tr2_sysenv_release&apos; is never used." cwe="561">
            <location file="trace2/tr2_sysenv.c" line="126" column="0"/>
            <symbol>tr2_sysenv_release</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_update_final_counters&apos; is never used." verbose="The function &apos;tr2_update_final_counters&apos; is never used." cwe="561">
            <location file="trace2/tr2_ctr.c" line="46" column="0"/>
            <symbol>tr2_update_final_counters</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2_update_final_timers&apos; is never used." verbose="The function &apos;tr2_update_final_timers&apos; is never used." cwe="561">
            <location file="trace2/tr2_tmr.c" line="88" column="0"/>
            <symbol>tr2_update_final_timers</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2tls_absolute_elapsed&apos; is never used." verbose="The function &apos;tr2tls_absolute_elapsed&apos; is never used." cwe="561">
            <location file="trace2/tr2_tls.c" line="145" column="0"/>
            <symbol>tr2tls_absolute_elapsed</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2tls_init&apos; is never used." verbose="The function &apos;tr2tls_init&apos; is never used." cwe="561">
            <location file="trace2/tr2_tls.c" line="153" column="0"/>
            <symbol>tr2tls_init</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2tls_is_main_thread&apos; is never used." verbose="The function &apos;tr2tls_is_main_thread&apos; is never used." cwe="561">
            <location file="trace2/tr2_tls.c" line="84" column="0"/>
            <symbol>tr2tls_is_main_thread</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2tls_lock&apos; is never used." verbose="The function &apos;tr2tls_lock&apos; is never used." cwe="561">
            <location file="trace2/tr2_tls.c" line="185" column="0"/>
            <symbol>tr2tls_lock</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2tls_pop_unwind_self&apos; is never used." verbose="The function &apos;tr2tls_pop_unwind_self&apos; is never used." cwe="561">
            <location file="trace2/tr2_tls.c" line="123" column="0"/>
            <symbol>tr2tls_pop_unwind_self</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2tls_push_self&apos; is never used." verbose="The function &apos;tr2tls_push_self&apos; is never used." cwe="561">
            <location file="trace2/tr2_tls.c" line="105" column="0"/>
            <symbol>tr2tls_push_self</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2tls_region_elasped_self&apos; is never used." verbose="The function &apos;tr2tls_region_elasped_self&apos; is never used." cwe="561">
            <location file="trace2/tr2_tls.c" line="131" column="0"/>
            <symbol>tr2tls_region_elasped_self</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2tls_release&apos; is never used." verbose="The function &apos;tr2tls_release&apos; is never used." cwe="561">
            <location file="trace2/tr2_tls.c" line="164" column="0"/>
            <symbol>tr2tls_release</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;tr2tls_unlock&apos; is never used." verbose="The function &apos;tr2tls_unlock&apos; is never used." cwe="561">
            <location file="trace2/tr2_tls.c" line="190" column="0"/>
            <symbol>tr2tls_unlock</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;trace2_collect_process_info&apos; is never used." verbose="The function &apos;trace2_collect_process_info&apos; is never used." cwe="561">
            <location file="compat/linux/procinfo.c" line="151" column="0"/>
            <symbol>trace2_collect_process_info</symbol>
        </error>
        <error id="unusedFunction" severity="style" msg="The function &apos;xdl_diff&apos; is never used." verbose="The function &apos;xdl_diff&apos; is never used." cwe="561">
            <location file="xdiff/xdiffi.c" line="1054" column="0"/>
            <symbol>xdl_diff</symbol>
        </error>
        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>
    </errors>
</results>
