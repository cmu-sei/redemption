Checker	Path	Line	Column	Message
DCL02-C	git.c	27	1	Use visually distinct identifiers: git_usage_string
DCL02-C	git.c	35	1	Use visually distinct identifiers: git_more_info_string
STR11-C	git.c	27	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	git.c	35	1	Do not specify the dimension of a character array initialized with a string literal
INT01-C	git.c	49	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	git.c	59	2	Const-qualify immutable objects: token_len
EXP12-C	git.c	74	2	Do not ignore values returned by functions: setup_git_directory_gently
DCL00-C	git.c	78	3	Const-qualify immutable objects: len
INT01-C	git.c	105	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	git.c	106	3	Do not ignore values returned by functions: puts
EXP12-C	git.c	115	3	Do not ignore values returned by functions: setenv
DCL05-C	git.c	135	1	Use typedefs to improve code readability
EXP12-C	git.c	160	5	Do not ignore values returned by functions: puts
EXP12-C	git.c	165	4	Do not ignore values returned by functions: puts
EXP12-C	git.c	169	4	Do not ignore values returned by functions: puts
EXP12-C	git.c	173	4	Do not ignore values returned by functions: puts
EXP12-C	git.c	184	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	192	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	198	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	206	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	212	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	220	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	226	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	234	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	240	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	246	4	Do not ignore values returned by functions: setenv
MEM01-C	git.c	247	4	Store a new value in pointers immediately after free()
MEM30-C	git.c	247	4	Do not access freed memory
MEM34-C	git.c	247	4	Only free memory allocated dynamically
EXP12-C	git.c	248	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	270	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	274	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	278	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	282	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	286	4	Do not ignore values returned by functions: setenv
EXP12-C	git.c	290	4	Do not ignore values returned by functions: setenv
INT01-C	git.c	319	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	git.c	337	1	Use typedefs to improve code readability
DCL00-C	git.c	339	2	Const-qualify immutable objects: saved_errno
EXP12-C	git.c	356	4	Do not ignore values returned by functions: setup_git_directory_gently
EXP12-C	git.c	364	4	Do not ignore values returned by functions: strvec_push
INT01-C	git.c	388	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	git.c	388	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	git.c	401	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	git.c	403	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	git.c	403	3	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	git.c	425	42	Use bitwise operators only on unsigned operands
INT13-C	git.c	428	25	Use bitwise operators only on unsigned operands
INT13-C	git.c	432	16	Use bitwise operators only on unsigned operands
INT13-C	git.c	434	23	Use bitwise operators only on unsigned operands
MSC12-C	git.c	440	2	Detect and remove code that has no effect
EXP06-C	git.c	440	2	Operands to the sizeof operator should not contain side effects
EXP12-C	git.c	441	2	Do not ignore values returned by functions: precompose_argv_prefix
INT13-C	git.c	490	30	Use bitwise operators only on unsigned operands
INT13-C	git.c	491	28	Use bitwise operators only on unsigned operands
INT13-C	git.c	497	36	Use bitwise operators only on unsigned operands
INT13-C	git.c	502	48	Use bitwise operators only on unsigned operands
INT13-C	git.c	505	40	Use bitwise operators only on unsigned operands
INT13-C	git.c	507	30	Use bitwise operators only on unsigned operands
INT13-C	git.c	507	13	Use bitwise operators only on unsigned operands
INT13-C	git.c	509	13	Use bitwise operators only on unsigned operands
INT13-C	git.c	511	46	Use bitwise operators only on unsigned operands
INT13-C	git.c	512	34	Use bitwise operators only on unsigned operands
INT13-C	git.c	515	36	Use bitwise operators only on unsigned operands
INT13-C	git.c	518	43	Use bitwise operators only on unsigned operands
INT13-C	git.c	520	51	Use bitwise operators only on unsigned operands
INT13-C	git.c	527	61	Use bitwise operators only on unsigned operands
INT13-C	git.c	527	44	Use bitwise operators only on unsigned operands
INT13-C	git.c	528	44	Use bitwise operators only on unsigned operands
INT13-C	git.c	529	42	Use bitwise operators only on unsigned operands
INT13-C	git.c	533	46	Use bitwise operators only on unsigned operands
INT13-C	git.c	535	44	Use bitwise operators only on unsigned operands
INT13-C	git.c	542	69	Use bitwise operators only on unsigned operands
INT13-C	git.c	549	51	Use bitwise operators only on unsigned operands
INT13-C	git.c	560	34	Use bitwise operators only on unsigned operands
INT13-C	git.c	563	46	Use bitwise operators only on unsigned operands
INT13-C	git.c	564	44	Use bitwise operators only on unsigned operands
INT13-C	git.c	565	71	Use bitwise operators only on unsigned operands
INT13-C	git.c	565	54	Use bitwise operators only on unsigned operands
INT13-C	git.c	566	76	Use bitwise operators only on unsigned operands
INT13-C	git.c	566	59	Use bitwise operators only on unsigned operands
INT13-C	git.c	567	78	Use bitwise operators only on unsigned operands
INT13-C	git.c	567	61	Use bitwise operators only on unsigned operands
INT13-C	git.c	568	69	Use bitwise operators only on unsigned operands
INT13-C	git.c	568	52	Use bitwise operators only on unsigned operands
INT13-C	git.c	573	28	Use bitwise operators only on unsigned operands
INT13-C	git.c	577	52	Use bitwise operators only on unsigned operands
INT13-C	git.c	579	47	Use bitwise operators only on unsigned operands
INT13-C	git.c	583	32	Use bitwise operators only on unsigned operands
INT13-C	git.c	585	44	Use bitwise operators only on unsigned operands
INT13-C	git.c	586	42	Use bitwise operators only on unsigned operands
INT13-C	git.c	587	36	Use bitwise operators only on unsigned operands
INT13-C	git.c	597	38	Use bitwise operators only on unsigned operands
INT13-C	git.c	598	40	Use bitwise operators only on unsigned operands
INT13-C	git.c	600	36	Use bitwise operators only on unsigned operands
INT13-C	git.c	603	47	Use bitwise operators only on unsigned operands
INT13-C	git.c	608	54	Use bitwise operators only on unsigned operands
INT13-C	git.c	609	32	Use bitwise operators only on unsigned operands
INT13-C	git.c	610	34	Use bitwise operators only on unsigned operands
INT13-C	git.c	611	36	Use bitwise operators only on unsigned operands
INT13-C	git.c	613	58	Use bitwise operators only on unsigned operands
INT13-C	git.c	614	36	Use bitwise operators only on unsigned operands
INT13-C	git.c	616	30	Use bitwise operators only on unsigned operands
INT13-C	git.c	617	46	Use bitwise operators only on unsigned operands
INT13-C	git.c	618	52	Use bitwise operators only on unsigned operands
INT13-C	git.c	625	37	Use bitwise operators only on unsigned operands
INT01-C	git.c	638	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	git.c	654	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	git.c	658	3	Do not ignore values returned by functions: string_list_append
INT01-C	git.c	676	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	git.c	710	4	Do not ignore values returned by functions: strvec_push
EXP12-C	git.c	737	2	Do not ignore values returned by functions: strvec_pushf
DCL05-C	git.c	771	1	Use typedefs to improve code readability
EXP12-C	git.c	807	4	Do not ignore values returned by functions: strvec_push
EXP12-C	git.c	809	5	Do not ignore values returned by functions: strvec_push
INT01-C	git.c	834	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	git.c	840	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	git.c	840	31	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	git.c	847	3	Do not ignore values returned by functions: string_list_append
EXP12-C	git.c	899	2	Do not ignore values returned by functions: handle_options
DCL00-C	git.c	926	3	Const-qualify immutable objects: was_alias
DCL01-C	builtiadd.c	41	44	Do not reuse variable names in subscopes: pathspec
DCL01-C	builtiadd.c	41	69	Do not reuse variable names in subscopes: show_only
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: show_only
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: show_only
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: show_only
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: show_only
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: show_only
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: show_only
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: show_only
INT14-C	builtiadd.c	60	8	Avoid performing bitwise and arithmetic operations on the same data
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: show_only
DCL13-C	builtiadd.c	91	29	Declare function parameters that are pointers to values not changed by the function as const: opt
EXP36-C	builtiadd.c	94	38	Do not convert pointers into more strictly aligned pointer types
INT13-C	builtiadd.c	119	20	Use bitwise operators only on unsigned operands
DCL01-C	builtiadd.c	127	33	Do not reuse variable names in subscopes: pathspec
EXP12-C	builtiadd.c	132	2	Do not ignore values returned by functions: memset
EXP12-C	builtiadd.c	136	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	builtiadd.c	151	2	Do not ignore values returned by functions: run_diff_files
DCL01-C	builtiadd.c	158	61	Do not reuse variable names in subscopes: pathspec
INT13-C	builtiadd.c	175	10	Use bitwise operators only on unsigned operands
DCL01-C	builtiadd.c	182	71	Do not reuse variable names in subscopes: pathspec
DCL01-C	builtiadd.c	203	24	Do not reuse variable names in subscopes: verbose
DCL01-C	builtiadd.c	203	56	Do not reuse variable names in subscopes: pathspec
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
DCL00-C	builtiadd.c	209	2	Const-qualify immutable objects: flags
INT13-C	builtiadd.c	209	43	Use bitwise operators only on unsigned operands
EXP12-C	builtiadd.c	213	2	Do not ignore values returned by functions: refresh_index
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
EXP12-C	builtiadd.c	221	5	Do not ignore values returned by functions: string_list_append
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
DCL02-C	builtiadd.c	354	1	Use visually distinct identifiers: verbose
MEM01-C	builtiadd.c	235	2	Store a new value in pointers immediately after free()
MEM34-C	builtiadd.c	235	2	Only free memory allocated dynamically
MEM01-C	builtiadd.c	236	2	Store a new value in pointers immediately after free()
MEM34-C	builtiadd.c	236	2	Only free memory allocated dynamically
DCL01-C	builtiadd.c	242	27	Do not reuse variable names in subscopes: pathspec
EXP12-C	builtiadd.c	276	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiadd.c	281	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiadd.c	284	3	Do not ignore values returned by functions: strvec_push
DCL01-C	builtiadd.c	292	2	Do not reuse variable names in subscopes: pathspec
INT13-C	builtiadd.c	296	40	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	295	31	Use bitwise operators only on unsigned operands
EXP12-C	builtiadd.c	345	2	Do not ignore values returned by functions: unlink
MEM01-C	builtiadd.c	346	2	Store a new value in pointers immediately after free()
MEM34-C	builtiadd.c	346	2	Only free memory allocated dynamically
STR11-C	builtiadd.c	351	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtiadd.c	411	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builtiadd.c	439	2	Do not ignore values returned by functions: strbuf_strip_suffix
EXP12-C	builtiadd.c	470	4	Do not ignore values returned by functions: string_list_append
DCL01-C	builtiadd.c	496	2	Do not reuse variable names in subscopes: pathspec
DCL01-C	builtiadd.c	502	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtiadd.c	547	2	Do not ignore values returned by functions: repo_hold_locked_index
INT13-C	builtiadd.c	554	31	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	563	30	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	586	54	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	585	43	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	584	40	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	583	45	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	612	15	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	628	3	Use bitwise operators only on unsigned operands
EXP12-C	builtiadd.c	645	5	Do not ignore values returned by functions: string_list_append
INT13-C	builtiadd.c	654	50	Use bitwise operators only on unsigned operands
MEM01-C	builtiadd.c	673	3	Store a new value in pointers immediately after free()
MEM34-C	builtiadd.c	673	3	Only free memory allocated dynamically
MEM01-C	builtiadd.c	674	3	Store a new value in pointers immediately after free()
MEM34-C	builtiadd.c	674	3	Only free memory allocated dynamically
INT13-C	builtiadd.c	681	15	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	683	15	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	686	15	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	689	15	Use bitwise operators only on unsigned operands
INT13-C	builtiadd.c	694	23	Use bitwise operators only on unsigned operands
EXP12-C	builtiam.c	145	2	Do not ignore values returned by functions: memset
EXP12-C	builtiam.c	151	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	builtiam.c	155	2	Do not ignore values returned by functions: git_config_get_bool
EXP36-C	builtiam.c	184	46	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiam.c	192	22	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtiam.c	244	2	Const-qualify immutable objects: ap
EXP12-C	builtiam.c	246	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	builtiam.c	249	3	Do not ignore values returned by functions: _IO_putc
EXP12-C	builtiam.c	251	2	Do not ignore values returned by functions: __builtin_va_end
MSC12-C	builtiam.c	313	2	Detect and remove code that has no effect
MSC12-C	builtiam.c	314	2	Detect and remove code that has no effect
MSC12-C	builtiam.c	315	2	Detect and remove code that has no effect
MSC12-C	builtiam.c	357	2	Detect and remove code that has no effect
EXP12-C	builtiam.c	395	2	Do not ignore values returned by functions: read_commit_msg
EXP12-C	builtiam.c	402	2	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	405	2	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	408	2	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	411	2	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	415	3	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	422	2	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	430	2	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	433	2	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	441	2	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	447	2	Do not ignore values returned by functions: read_state_file
EXP12-C	builtiam.c	466	2	Do not ignore values returned by functions: remove_dir_recursively
MSC12-C	builtiam.c	477	2	Detect and remove code that has no effect
EXP12-C	builtiam.c	502	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiam.c	503	2	Do not ignore values returned by functions: strvec_push
MSC12-C	builtiam.c	530	2	Detect and remove code that has no effect
INT01-C	builtiam.c	542	42	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiam.c	542	38	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiam.c	661	2	Do not ignore values returned by functions: strbuf_getline
EXP12-C	builtiam.c	662	2	Do not ignore values returned by functions: strbuf_getline
INT01-C	builtiam.c	668	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiam.c	676	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiam.c	701	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiam.c	702	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtiam.c	703	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtiam.c	704	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiam.c	709	2	Do not ignore values returned by functions: strvec_push
INT01-C	builtiam.c	813	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiam.c	814	3	Do not ignore values returned by functions: fwrite
EXP12-C	builtiam.c	855	3	Do not ignore values returned by functions: strvec_push
MEM01-C	builtiam.c	860	2	Store a new value in pointers immediately after free()
MEM34-C	builtiam.c	860	2	Only free memory allocated dynamically
INT32-C	builtiam.c	918	11	Ensure that operations on signed integers do not result in overflow
INT01-C	builtiam.c	930	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiam.c	931	3	Do not ignore values returned by functions: fwrite
DCL01-C	builtiam.c	956	65	Do not reuse variable names in subscopes: patch_format
EXP12-C	builtiam.c	961	3	Do not ignore values returned by functions: git_config_get_bool
DCL01-C	builtiam.c	984	64	Do not reuse variable names in subscopes: patch_format
EXP12-C	builtiam.c	995	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtiam.c	1001	2	Do not ignore values returned by functions: delete_ref
EXP12-C	builtiam.c	1114	2	Do not ignore values returned by functions: unlink
EXP12-C	builtiam.c	1115	2	Do not ignore values returned by functions: unlink
EXP12-C	builtiam.c	1118	2	Do not ignore values returned by functions: unlink
EXP12-C	builtiam.c	1119	2	Do not ignore values returned by functions: delete_ref
EXP12-C	builtiam.c	1150	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiam.c	1154	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiam.c	1155	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiam.c	1162	3	Do not ignore values returned by functions: printf_ln
MSC12-C	builtiam.c	1288	2	Detect and remove code that has no effect
MSC12-C	builtiam.c	1291	2	Detect and remove code that has no effect
MSC12-C	builtiam.c	1294	2	Detect and remove code that has no effect
MSC12-C	builtiam.c	1297	2	Detect and remove code that has no effect
DCL01-C	builtiam.c	1335	68	Do not reuse variable names in subscopes: commit
MSC12-C	builtiam.c	1350	2	Detect and remove code that has no effect
MSC12-C	builtiam.c	1357	2	Detect and remove code that has no effect
MSC12-C	builtiam.c	1364	2	Detect and remove code that has no effect
MSC12-C	builtiam.c	1367	2	Detect and remove code that has no effect
DCL01-C	builtiam.c	1379	77	Do not reuse variable names in subscopes: commit
DCL01-C	builtiam.c	1381	2	Do not reuse variable names in subscopes: rev_info
EXP12-C	builtiam.c	1399	2	Do not ignore values returned by functions: log_tree_commit
DCL01-C	builtiam.c	1409	2	Do not reuse variable names in subscopes: tree
DCL01-C	builtiam.c	1411	2	Do not reuse variable names in subscopes: rev_info
DCL01-C	builtiam.c	1415	3	Do not reuse variable names in subscopes: commit
EXP12-C	builtiam.c	1432	2	Do not ignore values returned by functions: run_diff_index
DCL01-C	builtiam.c	1447	2	Do not reuse variable names in subscopes: commit
EXP12-C	builtiam.c	1461	2	Do not ignore values returned by functions: update_ref
DCL01-C	builtiam.c	1475	2	Do not reuse variable names in subscopes: apply_state
EXP12-C	builtiam.c	1483	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiam.c	1509	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiam.c	1523	3	Do not ignore values returned by functions: read_index_from
EXP12-C	builtiam.c	1537	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiam.c	1539	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtiam.c	1540	2	Do not ignore values returned by functions: strvec_push
DCL01-C	builtiam.c	1551	73	Do not reuse variable names in subscopes: index_path
EXP12-C	builtiam.c	1566	2	Do not ignore values returned by functions: read_index_from
DCL01-C	builtiam.c	1578	3	Do not reuse variable names in subscopes: rev_info
EXP12-C	builtiam.c	1586	3	Do not ignore values returned by functions: run_diff_index
EXP12-C	builtiam.c	1600	2	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtiam.c	1621	3	Do not ignore values returned by functions: repo_rerere
MEM34-C	builtiam.c	1622	3	Only free memory allocated dynamically
MEM34-C	builtiam.c	1626	2	Only free memory allocated dynamically
DCL01-C	builtiam.c	1637	2	Do not reuse variable names in subscopes: tree
DCL01-C	builtiam.c	1637	2	Do not reuse variable names in subscopes: commit
EXP12-C	builtiam.c	1651	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	builtiam.c	1683	2	Do not ignore values returned by functions: update_ref
MSC12-C	builtiam.c	1689	3	Detect and remove code that has no effect
EXP06-C	builtiam.c	1689	3	Operands to the sizeof operator should not contain side effects
EXP12-C	builtiam.c	1695	2	Do not ignore values returned by functions: run_hooks
MSC12-C	builtiam.c	1724	2	Detect and remove code that has no effect
EXP12-C	builtiam.c	1729	3	Do not ignore values returned by functions: puts
EXP12-C	builtiam.c	1730	3	Do not ignore values returned by functions: puts
EXP12-C	builtiam.c	1732	3	Do not ignore values returned by functions: puts
EXP12-C	builtiam.c	1765	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiam.c	1766	4	Do not ignore values returned by functions: run_command
EXP12-C	builtiam.c	1782	2	Do not ignore values returned by functions: unlink
MSC01-C	builtiam.c	1830	4	Strive for logical completeness
EXP12-C	builtiam.c	1841	5	Do not ignore values returned by functions: printf_ln
DCL02-C	builtiam.c	2186	2	Use visually distinct identifiers: sb
DCL01-C	builtiam.c	1857	4	Do not reuse variable names in subscopes: sb
DCL02-C	builtiam.c	2186	2	Use visually distinct identifiers: sb
DCL02-C	builtiam.c	2186	2	Use visually distinct identifiers: sb
EXP12-C	builtiam.c	1875	4	Do not ignore values returned by functions: printf_ln
MSC12-C	builtiam.c	1896	3	Detect and remove code that has no effect
EXP12-C	builtiam.c	1897	3	Do not ignore values returned by functions: copy_notes_for_rebase
EXP12-C	builtiam.c	1898	3	Do not ignore values returned by functions: run_post_rewrite_hook
EXP12-C	builtiam.c	1907	3	Do not ignore values returned by functions: run_auto_maintenance
EXP12-C	builtiam.c	1925	4	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiam.c	1927	4	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiam.c	1935	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiam.c	1947	2	Do not ignore values returned by functions: repo_rerere
DCL01-C	builtiam.c	1962	60	Do not reuse variable names in subscopes: remote
DCL01-C	builtiam.c	1964	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtiam.c	1971	2	Do not ignore values returned by functions: repo_hold_locked_index
EXP12-C	builtiam.c	1973	2	Do not ignore values returned by functions: refresh_index
EXP12-C	builtiam.c	1975	2	Do not ignore values returned by functions: memset
DCL01-C	builtiam.c	2002	36	Do not reuse variable names in subscopes: tree
DCL01-C	builtiam.c	2004	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtiam.c	2011	2	Do not ignore values returned by functions: repo_hold_locked_index
EXP12-C	builtiam.c	2013	2	Do not ignore values returned by functions: memset
DCL01-C	builtiam.c	2036	78	Do not reuse variable names in subscopes: remote
DCL01-C	builtiam.c	2039	2	Do not reuse variable names in subscopes: index
EXP12-C	builtiam.c	2049	2	Do not ignore values returned by functions: repo_read_index_unmerged
MSC12-C	builtiam.c	2100	3	Detect and remove code that has no effect
EXP06-C	builtiam.c	2100	3	Operands to the sizeof operator should not contain side effects
MEM01-C	builtiam.c	2180	2	Store a new value in pointers immediately after free()
MEM34-C	builtiam.c	2180	2	Only free memory allocated dynamically
EXP12-C	builtiam.c	2215	2	Do not ignore values returned by functions: write_in_full
EXP36-C	builtiam.c	2226	22	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiam.c	2268	22	Do not convert pointers into more strictly aligned pointer types
EXP11-C	builtiam.c	2269	31	Do not apply operators expecting one type to data of an incompatible type
INT01-C	builtiam.c	2284	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiam.c	2288	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	builtiam.c	2303	62	Declare function parameters that are pointers to values not changed by the function as const: cb
DCL01-C	builtiam.c	2319	2	Do not reuse variable names in subscopes: patch_format
DCL01-C	builtiam.c	2324	2	Do not reuse variable names in subscopes: usage
EXP12-C	builtiam.c	2450	2	Do not ignore values returned by functions: git_committer_info
EXP12-C	builtiannotate.c	18	3	Do not ignore values returned by functions: strvec_push
DCL00-C	builtiarchive.c	15	2	Const-qualify immutable objects: output_fd
DCL01-C	builtiarchive.c	25	23	Do not reuse variable names in subscopes: remote
DCL01-C	builtiarchive.c	29	2	Do not reuse variable names in subscopes: transport
EXP12-C	builtiarchive.c	37	2	Do not ignore values returned by functions: transport_connect
INT13-C	builtiarchive.c	71	5	Use bitwise operators only on unsigned operands
DCL01-C	builtiarchive.c	85	2	Do not reuse variable names in subscopes: remote
EXP12-C	builtiarchive.c	107	2	Do not ignore values returned by functions: setvbuf
STR11-C	builtibisect--helper.c	63	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtibisect--helper.c	64	1	Do not specify the dimension of a character array initialized with a string literal
DCL00-C	builtibisect--helper.c	76	2	Const-qualify immutable objects: matches
EXP12-C	builtibisect--helper.c	79	2	Do not ignore values returned by functions: __builtin_va_start
EXP11-C	builtibisect--helper.c	80	26	Do not apply operators expecting one type to data of an incompatible type
INT36-C	builtibisect--helper.c	80	26	Take care when converting from pointer to integer or integer to pointer
EXP12-C	builtibisect--helper.c	82	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	builtibisect--helper.c	113	3	Const-qualify immutable objects: saved_errno
DCL00-C	builtibisect--helper.c	126	2	Const-qualify immutable objects: args
EXP12-C	builtibisect--helper.c	128	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	builtibisect--helper.c	130	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	builtibisect--helper.c	139	2	Const-qualify immutable objects: args
EXP12-C	builtibisect--helper.c	141	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	builtibisect--helper.c	143	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	builtibisect--helper.c	150	2	Const-qualify immutable objects: fd
MEM01-C	builtibisect--helper.c	167	2	Store a new value in pointers immediately after free()
MEM34-C	builtibisect--helper.c	167	2	Only free memory allocated dynamically
DCL01-C	builtibisect--helper.c	204	37	Do not reuse variable names in subscopes: commit
MSC12-C	builtibisect--helper.c	228	4	Detect and remove code that has no effect
DCL01-C	builtibisect--helper.c	241	25	Do not reuse variable names in subscopes: commit
MEM34-C	builtibisect--helper.c	253	2	Only free memory allocated dynamically
DCL01-C	builtibisect--helper.c	261	2	Do not reuse variable names in subscopes: commit
STR11-C	builtibisect--helper.c	340	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtibisect--helper.c	344	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builtibisect--helper.c	396	2	Do not ignore values returned by functions: for_each_glob_ref_in
MEM01-C	builtibisect--helper.c	399	2	Store a new value in pointers immediately after free()
MEM34-C	builtibisect--helper.c	399	2	Only free memory allocated dynamically
MEM34-C	builtibisect--helper.c	400	2	Only free memory allocated dynamically
DCL00-C	builtibisect--helper.c	407	2	Const-qualify immutable objects: ap
EXP12-C	builtibisect--helper.c	409	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	builtibisect--helper.c	411	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	builtibisect--helper.c	414	2	Do not ignore values returned by functions: append_to_file
EXP12-C	builtibisect--helper.c	460	2	Do not ignore values returned by functions: strbuf_getline_lf
EXP12-C	builtibisect--helper.c	462	2	Do not ignore values returned by functions: strbuf_getline_lf
DCL01-C	builtibisect--helper.c	472	65	Do not reuse variable names in subscopes: option
EXP36-C	builtibisect--helper.c	523	37	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtibisect--helper.c	550	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	builtibisect--helper.c	551	2	Do not ignore values returned by functions: for_each_glob_ref_in
EXP12-C	builtibisect--helper.c	553	2	Do not ignore values returned by functions: for_each_glob_ref_in
MEM01-C	builtibisect--helper.c	557	2	Store a new value in pointers immediately after free()
MEM34-C	builtibisect--helper.c	557	2	Only free memory allocated dynamically
MEM34-C	builtibisect--helper.c	558	2	Only free memory allocated dynamically
DCL01-C	builtibisect--helper.c	567	2	Do not reuse variable names in subscopes: commit
DCL01-C	builtibisect--helper.c	607	2	Do not reuse variable names in subscopes: commit
EXP12-C	builtibisect--helper.c	613	2	Do not ignore values returned by functions: read_ref
MEM34-C	builtibisect--helper.c	622	2	Only free memory allocated dynamically
EXP12-C	builtibisect--helper.c	724	4	Do not ignore values returned by functions: string_list_append
INT01-C	builtibisect--helper.c	742	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtibisect--helper.c	744	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builtibisect--helper.c	747	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builtibisect--helper.c	764	3	Do not ignore values returned by functions: strbuf_read_file
INT01-C	builtibisect--helper.c	831	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtibisect--helper.c	875	2	Do not ignore values returned by functions: fprintf_ln
DCL01-C	builtibisect--helper.c	939	3	Do not reuse variable names in subscopes: commit
MSC12-C	builtibisect--helper.c	942	4	Detect and remove code that has no effect
INT01-C	builtibisect--helper.c	954	64	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtibisect--helper.c	959	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtibisect--helper.c	965	4	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	builtibisect--helper.c	966	4	Do not ignore values returned by functions: unlink_or_warn
EXP05-C	builtibisect--helper.c	1002	13	Do not cast away a const qualification
INT07-C	builtibisect--helper.c	1004	12	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtibisect--helper.c	1006	2	Do not ignore values returned by functions: get_terms
EXP12-C	builtibisect--helper.c	1013	3	Do not ignore values returned by functions: sq_dequote_to_strvec
EXP12-C	builtibisect--helper.c	1026	3	Do not ignore values returned by functions: sq_dequote_to_strvec
INT01-C	builtibisect--helper.c	1027	37	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtibisect--helper.c	1027	37	Ensure that return values are compared against the proper type
MSC12-C	builtibisect--helper.c	1031	2	Detect and remove code that has no effect
EXP12-C	builtibisect--helper.c	1070	2	Do not ignore values returned by functions: strvec_push
DCL01-C	builtibisect--helper.c	1077	4	Do not reuse variable names in subscopes: commit
EXP12-C	builtibisect--helper.c	1080	4	Do not ignore values returned by functions: setup_revisions
EXP12-C	builtibisect--helper.c	1091	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtibisect--helper.c	1112	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtibisect--helper.c	1114	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtibisect--helper.c	1119	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtibisect--helper.c	1129	2	Do not ignore values returned by functions: strbuf_read_file
EXP12-C	builtibisect--helper.c	1130	2	Do not ignore values returned by functions: sq_dequote_to_strvec
EXP36-C	builtibisect--helper.c	1140	9	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtibisect--helper.c	1150	2	Do not ignore values returned by functions: strvec_push
DCL00-C	builtibisect--helper.c	1161	2	Const-qualify immutable objects: no_checkout
EXP12-C	builtibisect--helper.c	1163	2	Do not ignore values returned by functions: for_each_glob_ref_in
MEM01-C	builtibisect--helper.c	1165	2	Store a new value in pointers immediately after free()
MEM34-C	builtibisect--helper.c	1165	2	Only free memory allocated dynamically
MSC12-C	builtibisect--helper.c	1197	3	Detect and remove code that has no effect
DCL00-C	builtibisect--helper.c	1212	4	Const-qualify immutable objects: rc
MSC12-C	builtibisect--helper.c	1215	5	Detect and remove code that has no effect
MSC12-C	builtibisect--helper.c	1221	5	Detect and remove code that has no effect
MSC12-C	builtibisect--helper.c	1229	4	Detect and remove code that has no effect
EXP12-C	builtibisect--helper.c	1250	3	Do not ignore values returned by functions: dup2
EXP12-C	builtibisect--helper.c	1255	3	Do not ignore values returned by functions: dup2
EXP12-C	builtibisect--helper.c	1259	3	Do not ignore values returned by functions: print_file_to_stdout
EXP12-C	builtibisect--helper.c	1319	2	Do not ignore values returned by functions: get_terms
EXP12-C	builtibisect--helper.c	1331	2	Do not ignore values returned by functions: get_terms
EXP12-C	builtibisect--helper.c	1363	2	Do not ignore values returned by functions: get_terms
EXP12-C	builtibisect--helper.c	1374	2	Do not ignore values returned by functions: get_terms
EXP12-C	builtibisect--helper.c	1387	2	Do not ignore values returned by functions: get_terms
INT32-C	builtibisect--helper.c	1428	9	Ensure that operations on signed integers do not result in overflow
STR11-C	builtiblame.c	32	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtiblame.c	33	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtiblame.c	85	2	Do not reuse variable names in subscopes: progress
DCL01-C	builtiblame.c	127	15	Do not reuse variable names in subscopes: time
EXP12-C	builtiblame.c	174	2	Do not ignore values returned by functions: map_user
DCL01-C	builtiblame.c	193	44	Do not reuse variable names in subscopes: commit
EXP12-C	builtiblame.c	291	3	Do not ignore values returned by functions: emit_one_suspect_detail
DCL01-C	builtiblame.c	299	44	Do not reuse variable names in subscopes: time
INT05-C	builtiblame.c	312	8	Use strtol() or a related function to convert a string token to an integer
DCL00-C	builtiblame.c	350	2	Const-qualify immutable objects: repeat
EXP12-C	builtiblame.c	356	2	Do not ignore values returned by functions: oid_to_hex_r
EXP12-C	builtiblame.c	374	3	Do not ignore values returned by functions: putchar
EXP12-C	builtiblame.c	377	4	Do not ignore values returned by functions: putchar
EXP12-C	builtiblame.c	401	2	Do not ignore values returned by functions: string_list_split
EXP36-C	builtiblame.c	402	2	Do not convert pointers into more strictly aligned pointer types
MSC01-C	builtiblame.c	405	3	Strive for logical completeness
EXP36-C	builtiblame.c	410	4	Do not convert pointers into more strictly aligned pointer types
ARR30-C	builtiblame.c	439	26	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	builtiblame.c	449	2	Const-qualify immutable objects: show_raw_time
EXP12-C	builtiblame.c	453	2	Do not ignore values returned by functions: oid_to_hex_r
EXP12-C	builtiblame.c	484	5	Do not ignore values returned by functions: putchar
EXP12-C	builtiblame.c	490	4	Do not ignore values returned by functions: putchar
EXP12-C	builtiblame.c	494	4	Do not ignore values returned by functions: putchar
EXP12-C	builtiblame.c	540	4	Do not ignore values returned by functions: putchar
DCL01-C	builtiblame.c	551	53	Do not reuse variable names in subscopes: option
DCL01-C	builtiblame.c	559	4	Do not reuse variable names in subscopes: commit
INT07-C	builtiblame.c	563	25	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builtiblame.c	606	2	Const-qualify immutable objects: len
DCL01-C	builtiblame.c	616	62	Do not reuse variable names in subscopes: option
DCL00-C	builtiblame.c	622	2	Const-qualify immutable objects: compute_auto_abbrev
DCL00-C	builtiblame.c	677	2	Const-qualify immutable objects: score
EXP36-C	builtiblame.c	699	24	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiblame.c	719	3	Do not ignore values returned by functions: string_list_insert
DCL01-C	builtiblame.c	764	53	Do not reuse variable names in subscopes: option
EXP36-C	builtiblame.c	766	19	Do not convert pointers into more strictly aligned pointer types
INT13-C	builtiblame.c	781	7	Use bitwise operators only on unsigned operands
DCL01-C	builtiblame.c	788	53	Do not reuse variable names in subscopes: option
EXP36-C	builtiblame.c	790	19	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtiblame.c	818	3	Const-qualify immutable objects: kind
DCL01-C	builtiblame.c	833	29	Do not reuse variable names in subscopes: ignore_revs_file_list
DCL02-C	builtiblame.c	833	29	Use visually distinct identifiers: ignore_revs_file_list
DCL02-C	builtiblame.c	833	29	Use visually distinct identifiers: ignore_revs_file_list
DCL02-C	builtiblame.c	833	29	Use visually distinct identifiers: ignore_revs_file_list
DCL02-C	builtiblame.c	833	29	Use visually distinct identifiers: ignore_revs_file_list
DCL02-C	builtiblame.c	833	29	Use visually distinct identifiers: ignore_revs_file_list
DCL02-C	builtiblame.c	833	29	Use visually distinct identifiers: ignore_revs_file_list
DCL02-C	builtiblame.c	833	29	Use visually distinct identifiers: ignore_revs_file_list
DCL02-C	builtiblame.c	833	29	Use visually distinct identifiers: ignore_revs_file_list
EXP12-C	builtiblame.c	851	3	Do not ignore values returned by functions: oidset_insert
DCL00-C	builtiblame.c	904	2	Const-qualify immutable objects: cmd_is_annotate
MSC01-C	builtiblame.c	927	3	Strive for logical completeness
INT13-C	builtiblame.c	952	11	Use bitwise operators only on unsigned operands
INT13-C	builtiblame.c	952	36	Use bitwise operators only on unsigned operands
MSC01-C	builtiblame.c	983	2	Strive for logical completeness
INT01-C	builtiblame.c	1022	64	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiblame.c	1025	19	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtiblame.c	1028	7	Use bitwise operators only on unsigned operands
EXP12-C	builtiblame.c	1081	2	Do not ignore values returned by functions: setup_revisions
INT01-C	builtiblame.c	1120	28	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiblame.c	1171	2	Do not ignore values returned by functions: read_mailmap
INT13-C	builtiblame.c	1192	17	Use bitwise operators only on unsigned operands
EXP05-C	builtiblame.c	1206	7	Do not cast away a const qualification
MEM34-C	builtiblame.c	1209	3	Only free memory allocated dynamically
INT01-C	builtibranch.c	78	1	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtibranch.c	87	3	Do not ignore values returned by functions: string_list_append
EXP36-C	builtibranch.c	87	22	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtibranch.c	98	3	Const-qualify immutable objects: slot
INT01-C	builtibranch.c	98	14	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtibranch.c	139	3	Do not reuse variable names in subscopes: branch
MEM34-C	builtibranch.c	173	2	Only free memory allocated dynamically
MSC12-C	builtibranch.c	183	3	Detect and remove code that has no effect
MSC12-C	builtibranch.c	187	3	Detect and remove code that has no effect
MEM34-C	builtibranch.c	246	3	Only free memory allocated dynamically
MSC12-C	builtibranch.c	252	5	Detect and remove code that has no effect
MSC12-C	builtibranch.c	266	4	Detect and remove code that has no effect
INT13-C	builtibranch.c	273	15	Use bitwise operators only on unsigned operands
MEM34-C	builtibranch.c	286	3	Only free memory allocated dynamically
DCL02-C	builtibranch.c	601	2	Use visually distinct identifiers: name
DCL01-C	builtibranch.c	294	3	Do not reuse variable names in subscopes: name
DCL02-C	builtibranch.c	601	2	Use visually distinct identifiers: name
DCL02-C	builtibranch.c	601	2	Use visually distinct identifiers: name
DCL02-C	builtibranch.c	601	2	Use visually distinct identifiers: name
MEM30-C	builtibranch.c	305	3	Do not access freed memory
MEM34-C	builtibranch.c	305	3	Only free memory allocated dynamically
MEM01-C	builtibranch.c	309	2	Store a new value in pointers immediately after free()
MEM34-C	builtibranch.c	309	2	Only free memory allocated dynamically
EXP12-C	builtibranch.c	323	3	Do not ignore values returned by functions: skip_prefix
EXP12-C	builtibranch.c	324	3	Do not ignore values returned by functions: skip_prefix
MEM30-C	builtibranch.c	328	4	Do not access freed memory
MEM34-C	builtibranch.c	328	4	Only free memory allocated dynamically
DCL01-C	builtibranch.c	363	2	Do not reuse variable names in subscopes: remote
DCL01-C	builtibranch.c	419	54	Do not reuse variable names in subscopes: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
EXP12-C	builtibranch.c	437	2	Do not ignore values returned by functions: memset
EXP12-C	builtibranch.c	439	2	Do not ignore values returned by functions: filter_refs
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
MSC12-C	builtibranch.c	459	4	Detect and remove code that has no effect
EXP06-C	builtibranch.c	459	4	Operands to the sizeof operator should not contain side effects
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
EXP12-C	builtibranch.c	461	4	Do not ignore values returned by functions: string_list_append
DCL02-C	builtibranch.c	419	54	Use visually distinct identifiers: output
EXP12-C	builtibranch.c	463	4	Do not ignore values returned by functions: fwrite
EXP12-C	builtibranch.c	464	4	Do not ignore values returned by functions: putchar
MEM34-C	builtibranch.c	471	2	Only free memory allocated dynamically
INT01-C	builtibranch.c	604	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtibranch.c	620	14	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtibranch.c	631	2	Do not reuse variable names in subscopes: rename
DCL01-C	builtibranch.c	631	2	Do not reuse variable names in subscopes: edit_description
EXP12-C	builtibranch.c	695	2	Do not ignore values returned by functions: memset
INT01-C	builtibranch.c	722	55	Use rsize_t or size_t for all integer values representing the size of an object
EXP30-C	builtibranch.c	738	2	Do not depend on order of evaluation for side effects
EXP12-C	builtibranch.c	746	2	Do not ignore values returned by functions: finalize_colopts
DCL01-C	builtibranch.c	834	3	Do not reuse variable names in subscopes: branch
DCL01-C	builtibranch.c	864	3	Do not reuse variable names in subscopes: branch
STR11-C	builtibugreport.c	70	2	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtibugreport.c	102	2	Do not reuse variable names in subscopes: tm
STR05-C	builtibugreport.c	105	2	Use pointers to const when referring to string literals
EXP12-C	builtibugreport.c	159	2	Do not ignore values returned by functions: get_bug_template
MEM01-C	builtibugreport.c	184	2	Store a new value in pointers immediately after free()
MEM34-C	builtibugreport.c	184	2	Only free memory allocated dynamically
DCL05-C	builtibundle.c	52	1	Use typedefs to improve code readability
DCL01-C	builtibundle.c	69	2	Do not reuse variable names in subscopes: progress
MEM34-C	builtibundle.c	107	2	Only free memory allocated dynamically
MEM01-C	builtibundle.c	141	2	Store a new value in pointers immediately after free()
MEM34-C	builtibundle.c	141	2	Only free memory allocated dynamically
MEM01-C	builtibundle.c	166	2	Store a new value in pointers immediately after free()
MEM34-C	builtibundle.c	166	2	Only free memory allocated dynamically
DCL01-C	builtibundle.c	175	2	Do not reuse variable names in subscopes: progress
MEM34-C	builtibundle.c	203	2	Only free memory allocated dynamically
DCL01-C	builticat-file.c	30	2	Do not reuse variable names in subscopes: batch_mode
INT01-C	builticat-file.c	51	46	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builticat-file.c	68	3	Do not reuse variable names in subscopes: strbuf
INT01-C	builticat-file.c	74	10	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builticat-file.c	192	3	Const-qualify immutable objects: exp_type_id
MEM34-C	builticat-file.c	203	5	Only free memory allocated dynamically
MEM01-C	builticat-file.c	238	2	Store a new value in pointers immediately after free()
MEM34-C	builticat-file.c	238	2	Only free memory allocated dynamically
DCL00-C	builticat-file.c	281	2	Const-qualify immutable objects: alen
EXP36-C	builticat-file.c	288	29	Do not convert pointers into more strictly aligned pointer types
INT01-C	builticat-file.c	341	36	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builticat-file.c	341	36	Ensure that return values are compared against the proper type
MSC12-C	builticat-file.c	351	2	Detect and remove code that has no effect
MEM34-C	builticat-file.c	382	4	Only free memory allocated dynamically
EXP12-C	builticat-file.c	384	4	Do not ignore values returned by functions: stream_blob
MEM34-C	builticat-file.c	408	3	Only free memory allocated dynamically
DCL00-C	builticat-file.c	472	2	Const-qualify immutable objects: flags
EXP36-C	builticat-file.c	526	32	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticat-file.c	537	19	Do not convert pointers into more strictly aligned pointer types
DCL13-C	builticat-file.c	542	25	Declare function parameters that are pointers to values not changed by the function as const: pack
EXP36-C	builticat-file.c	546	19	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticat-file.c	554	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builticat-file.c	651	2	Do not reuse variable names in subscopes: queued_cmd
INT01-C	builticat-file.c	673	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticat-file.c	701	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticat-file.c	701	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticat-file.c	701	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticat-file.c	701	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticat-file.c	701	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticat-file.c	701	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticat-file.c	701	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticat-file.c	701	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticat-file.c	701	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builticat-file.c	701	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	builticat-file.c	708	25	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	builticat-file.c	716	2	Store a new value in pointers immediately after free()
MEM34-C	builticat-file.c	716	2	Only free memory allocated dynamically
DCL00-C	builticat-file.c	728	2	Const-qualify immutable objects: retval
EXP12-C	builticat-file.c	735	2	Do not ignore values returned by functions: memset
EXP04-C	builticat-file.c	759	8	Do not perform byte-by-byte comparisons between structures
EXP12-C	builticat-file.c	776	4	Do not ignore values returned by functions: for_each_loose_object
EXP12-C	builticat-file.c	777	4	Do not ignore values returned by functions: for_each_packed_object
EXP12-C	builticat-file.c	784	4	Do not ignore values returned by functions: for_each_loose_object
EXP12-C	builticat-file.c	785	4	Do not ignore values returned by functions: for_each_packed_object
EXP12-C	builticat-file.c	787	4	Do not ignore values returned by functions: oid_array_for_each_unique
INT07-C	builticat-file.c	829	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticat-file.c	830	11	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	builticat-file.c	857	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builticat-file.c	890	2	Do not reuse variable names in subscopes: usage
DCL00-C	builticheck-attr.c	32	2	Const-qualify immutable objects: cnt
EXP12-C	builticheck-attr.c	51	4	Do not ignore values returned by functions: quote_c_style
MEM34-C	builticheck-attr.c	73	2	Only free memory allocated dynamically
MSC12-C	builticheck-attr.c	101	2	Detect and remove code that has no effect
EXP12-C	builticheck-attr.c	175	4	Do not ignore values returned by functions: attr_check_append
EXP12-C	builticheck-ignore.c	44	5	Do not ignore values returned by functions: quote_c_style
EXP12-C	builticheck-ignore.c	52	4	Do not ignore values returned by functions: quote_c_style
EXP12-C	builticheck-ignore.c	53	4	Do not ignore values returned by functions: fputc
DCL01-C	builticheck-ignore.c	78	2	Do not reuse variable names in subscopes: pathspec
INT13-C	builticheck-ignore.c	91	29	Use bitwise operators only on unsigned operands
INT13-C	builticheck-ignore.c	91	10	Use bitwise operators only on unsigned operands
INT13-C	builticheck-ignore.c	91	10	Use bitwise operators only on unsigned operands
INT13-C	builticheck-ignore.c	91	10	Use bitwise operators only on unsigned operands
INT13-C	builticheck-ignore.c	91	10	Use bitwise operators only on unsigned operands
INT13-C	builticheck-ignore.c	91	10	Use bitwise operators only on unsigned operands
INT13-C	builticheck-ignore.c	91	10	Use bitwise operators only on unsigned operands
INT13-C	builticheck-ignore.c	91	31	Use bitwise operators only on unsigned operands
INT13-C	builticheck-ignore.c	92	40	Use bitwise operators only on unsigned operands
MEM01-C	builticheck-ignore.c	121	2	Store a new value in pointers immediately after free()
MEM34-C	builticheck-ignore.c	121	2	Only free memory allocated dynamically
DCL01-C	builticheck-ignore.c	131	2	Do not reuse variable names in subscopes: pathspec
EXP36-C	builticheck-ignore.c	145	28	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builticheck-mailmap.c	32	2	Do not ignore values returned by functions: map_user
EXP12-C	builticheck-mailmap.c	50	2	Do not ignore values returned by functions: read_mailmap
STR11-C	builticheck-ref-format.c	10	1	Do not specify the dimension of a character array initialized with a string literal
INT07-C	builticheck-ref-format.c	25	2	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticheck-ref-format.c	35	6	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builticheck-ref-format.c	45	2	Do not ignore values returned by functions: setup_git_directory_gently
INT13-C	builticheck-ref-format.c	75	10	Use bitwise operators only on unsigned operands
ARR30-C	builticheck-ref-format.c	84	16	Do not form or use out-of-bounds pointers or array subscripts
MEM34-C	builticheck-ref-format.c	94	2	Only free memory allocated dynamically
INT01-C	builticheckout--worker.c	15	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	builticheckout--worker.c	19	18	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builticheckout--worker.c	19	18	Do not cast away a const qualification
INT01-C	builticheckout--worker.c	21	49	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticheckout--worker.c	21	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builticheckout--worker.c	41	2	Do not ignore values returned by functions: memset
INT01-C	builticheckout--worker.c	66	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	builticheckout--worker.c	75	7	Do not cast away a const qualification
DCL00-C	builticheckout--worker.c	85	3	Const-qualify immutable objects: len
INT01-C	builticheckout--worker.c	93	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticheckout--worker.c	93	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticheckout--worker.c	93	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticheckout--worker.c	93	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticheckout--worker.c	93	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticheckout--worker.c	93	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticheckout--worker.c	93	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticheckout--worker.c	93	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticheckout--worker.c	93	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builticheckout--worker.c	93	3	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builticheckout--worker.c	106	2	Only free memory allocated dynamically
ARR30-C	builticheckout-index.c	43	15	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	builticheckout-index.c	44	18	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	builticheckout-index.c	55	3	Do not ignore values returned by functions: putchar
INT07-C	builticheckout-index.c	61	16	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builticheckout-index.c	67	2	Const-qualify immutable objects: namelen
INT32-C	builticheckout-index.c	76	9	Ensure that operations on signed integers do not result in overflow
EXP12-C	builticheckout-index.c	129	3	Do not ignore values returned by functions: fputc
DCL00-C	builticheckout-index.c	197	3	Const-qualify immutable objects: ch
DCL01-C	builticheckout-index.c	209	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builticheckout-index.c	273	3	Do not ignore values returned by functions: repo_hold_locked_index
INT13-C	builticheckout-index.c	291	7	Use bitwise operators only on unsigned operands
MEM34-C	builticheckout-index.c	292	3	Only free memory allocated dynamically
INT13-C	builticheckout-index.c	313	8	Use bitwise operators only on unsigned operands
MEM34-C	builticheckout-index.c	314	4	Only free memory allocated dynamically
INT13-C	builticheckout-index.c	321	7	Use bitwise operators only on unsigned operands
INT13-C	builticheckout-index.c	324	7	Use bitwise operators only on unsigned operands
DCL01-C	builticheckout.c	73	2	Do not reuse variable names in subscopes: checkout_worktree
DCL01-C	builticheckout.c	84	2	Do not reuse variable names in subscopes: diff_options
DCL01-C	builticheckout.c	89	2	Do not reuse variable names in subscopes: pathspec
DCL01-C	builticheckout.c	97	2	Do not reuse variable names in subscopes: commit
DCL01-C	builticheckout.c	104	2	Do not reuse variable names in subscopes: checkout
DCL13-C	builticheckout.c	128	53	Declare function parameters that are pointers to values not changed by the function as const: context
INT01-C	builticheckout.c	141	45	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builticheckout.c	163	2	Do not ignore values returned by functions: add_index_entry
DCL01-C	builticheckout.c	168	40	Do not reuse variable names in subscopes: tree
DCL01-C	builticheckout.c	168	69	Do not reuse variable names in subscopes: pathspec
EXP12-C	builticheckout.c	170	2	Do not ignore values returned by functions: read_tree
EXP12-C	builticheckout.c	259	2	Do not ignore values returned by functions: memset
EXP12-C	builticheckout.c	278	2	Do not ignore values returned by functions: memset
EXP12-C	builticheckout.c	279	2	Do not ignore values returned by functions: git_config_get_bool
INT13-C	builticheckout.c	321	18	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	355	18	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	366	30	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	399	10	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	404	10	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	409	10	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	416	8	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	421	7	Use bitwise operators only on unsigned operands
DCL01-C	builticheckout.c	454	2	Do not reuse variable names in subscopes: lock_file
DCL02-C	builticheckout.c	1745	3	Use visually distinct identifiers: rev
DCL01-C	builticheckout.c	503	3	Do not reuse variable names in subscopes: rev
DCL02-C	builticheckout.c	1745	3	Use visually distinct identifiers: rev
DCL02-C	builticheckout.c	1745	3	Use visually distinct identifiers: rev
DCL02-C	builticheckout.c	1745	3	Use visually distinct identifiers: rev
DCL02-C	builticheckout.c	1745	3	Use visually distinct identifiers: rev
EXP12-C	builticheckout.c	531	2	Do not ignore values returned by functions: repo_hold_locked_index
MEM01-C	builticheckout.c	555	3	Store a new value in pointers immediately after free()
MEM01-C	builticheckout.c	558	2	Store a new value in pointers immediately after free()
INT13-C	builticheckout.c	574	10	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	576	10	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	576	33	Use bitwise operators only on unsigned operands
INT13-C	builticheckout.c	589	8	Use bitwise operators only on unsigned operands
EXP12-C	builticheckout.c	615	2	Do not ignore values returned by functions: read_ref_full
INT13-C	builticheckout.c	618	7	Use bitwise operators only on unsigned operands
EXP12-C	builticheckout.c	633	2	Do not ignore values returned by functions: run_diff_index
DCL01-C	builticheckout.c	637	68	Do not reuse variable names in subscopes: commit
DCL01-C	builticheckout.c	653	36	Do not reuse variable names in subscopes: tree
DCL01-C	builticheckout.c	654	13	Do not reuse variable names in subscopes: worktree
DCL01-C	builticheckout.c	658	2	Do not reuse variable names in subscopes: tree_desc
EXP12-C	builticheckout.c	660	2	Do not ignore values returned by functions: memset
EXP12-C	builticheckout.c	675	2	Do not ignore values returned by functions: parse_tree
DCL01-C	builticheckout.c	694	51	Do not reuse variable names in subscopes: branch
DCL13-C	builticheckout.c	717	25	Declare function parameters that are pointers to values not changed by the function as const: old_commit
EXP12-C	builticheckout.c	719	2	Do not ignore values returned by functions: memset
DCL01-C	builticheckout.c	741	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builticheckout.c	744	2	Do not ignore values returned by functions: repo_hold_locked_index
DCL01-C	builticheckout.c	761	3	Do not reuse variable names in subscopes: tree
EXP12-C	builticheckout.c	765	3	Do not ignore values returned by functions: refresh_index
MSC12-C	builticheckout.c	768	4	Detect and remove code that has no effect
EXP12-C	builticheckout.c	789	3	Do not ignore values returned by functions: parse_tree
EXP12-C	builticheckout.c	836	4	Do not ignore values returned by functions: add_files_to_cache
DCL01-C	builticheckout.c	886	2	Do not reuse variable names in subscopes: branch
MEM34-C	builticheckout.c	915	6	Only free memory allocated dynamically
MEM34-C	builticheckout.c	920	4	Only free memory allocated dynamically
EXP12-C	builticheckout.c	951	3	Do not ignore values returned by functions: update_ref
EXP36-C	builticheckout.c	996	18	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builticheckout.c	1000	67	Do not reuse variable names in subscopes: commit
DCL01-C	builticheckout.c	1011	45	Do not reuse variable names in subscopes: commit
DCL00-C	builticheckout.c	1023	3	Const-qualify immutable objects: more
DCL01-C	builticheckout.c	1072	2	Do not reuse variable names in subscopes: object
EXP12-C	builticheckout.c	1075	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	builticheckout.c	1080	2	Do not ignore values returned by functions: for_each_ref
EXP12-C	builticheckout.c	1109	2	Do not ignore values returned by functions: memset
EXP36-C	builticheckout.c	1163	31	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builticheckout.c	1214	2	Do not reuse variable names in subscopes: remote
DCL00-C	builticheckout.c	1334	3	Const-qualify immutable objects: could_be_checkout_paths
DCL01-C	builticheckout.c	1350	4	Do not reuse variable names in subscopes: remote
DCL01-C	builticheckout.c	1414	62	Do not reuse variable names in subscopes: branch_info
DCL01-C	builticheckout.c	1421	3	Do not reuse variable names in subscopes: ref
EXP12-C	builticheckout.c	1449	2	Do not ignore values returned by functions: memset
DCL01-C	builticheckout.c	1539	3	Do not reuse variable names in subscopes: head_ref
MEM34-C	builticheckout.c	1543	3	Only free memory allocated dynamically
DCL00-C	builticheckout.c	1571	2	Const-qualify immutable objects: newopts
DCL00-C	builticheckout.c	1595	2	Const-qualify immutable objects: newopts
DCL00-C	builticheckout.c	1617	2	Const-qualify immutable objects: newopts
INT07-C	builticheckout.c	1623	1	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builticheckout.c	1661	3	Do not ignore values returned by functions: git_xmerge_config
EXP12-C	builticheckout.c	1712	3	Do not ignore values returned by functions: skip_prefix
EXP12-C	builticheckout.c	1713	3	Do not ignore values returned by functions: skip_prefix
DCL00-C	builticheckout.c	1735	3	Const-qualify immutable objects: dwim_ok
DCL00-C	builticheckout.c	1740	3	Const-qualify immutable objects: n
EXP12-C	builticheckout.c	1843	2	Do not ignore values returned by functions: memset
MEM34-C	builticheckout.c	1875	2	Only free memory allocated dynamically
EXP12-C	builticheckout.c	1897	2	Do not ignore values returned by functions: memset
INT07-C	builticheckout.c	1912	12	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	builticheckout.c	1917	2	Only free memory allocated dynamically
EXP12-C	builticheckout.c	1940	2	Do not ignore values returned by functions: memset
MEM34-C	builticheckout.c	1956	2	Only free memory allocated dynamically
INT01-C	builticlean.c	100	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builticlean.c	116	3	Const-qualify immutable objects: slot
INT01-C	builticlean.c	116	14	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builticlean.c	147	40	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builticlean.c	149	2	Do not ignore values returned by functions: string_list_append
DCL01-C	builticlean.c	158	2	Do not reuse variable names in subscopes: realpath
DCL00-C	builticlean.c	161	2	Const-qualify immutable objects: original_len
EXP12-C	builticlean.c	169	4	Do not ignore values returned by functions: quote_path
DCL00-C	builticlean.c	183	4	Const-qualify immutable objects: saved_errno
EXP12-C	builticlean.c	184	4	Do not ignore values returned by functions: quote_path
EXP12-C	builticlean.c	207	5	Do not ignore values returned by functions: quote_path
EXP12-C	builticlean.c	208	5	Do not ignore values returned by functions: string_list_append
EXP12-C	builticlean.c	215	5	Do not ignore values returned by functions: quote_path
EXP12-C	builticlean.c	216	5	Do not ignore values returned by functions: string_list_append
DCL00-C	builticlean.c	218	5	Const-qualify immutable objects: saved_errno
EXP12-C	builticlean.c	219	5	Do not ignore values returned by functions: quote_path
EXP12-C	builticlean.c	233	2	Do not ignore values returned by functions: closedir
EXP12-C	builticlean.c	242	3	Do not ignore values returned by functions: strbuf_realpath
DCL00-C	builticlean.c	261	5	Const-qualify immutable objects: saved_errno
EXP12-C	builticlean.c	262	5	Do not ignore values returned by functions: quote_path
INT01-C	builticlean.c	273	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builticlean.c	294	3	Do not ignore values returned by functions: string_list_append
EXP12-C	builticlean.c	302	2	Do not ignore values returned by functions: memset
EXP12-C	builticlean.c	316	2	Do not ignore values returned by functions: memset
DCL01-C	builticlean.c	348	2	Do not reuse variable names in subscopes: menu_item
DCL01-C	builticlean.c	349	2	Do not reuse variable names in subscopes: string_list_item
EXP12-C	builticlean.c	375	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builticlean.c	386	4	Do not ignore values returned by functions: string_list_append
DCL01-C	builticlean.c	399	63	Do not reuse variable names in subscopes: menu_stuff
DCL01-C	builticlean.c	401	2	Do not reuse variable names in subscopes: menu_item
DCL01-C	builticlean.c	402	2	Do not reuse variable names in subscopes: string_list_item
DCL01-C	builticlean.c	469	44	Do not reuse variable names in subscopes: menu_stuff
INT07-C	builticlean.c	484	8	Use only explicitly signed or unsigned char type for numeric values
INT05-C	builticlean.c	525	13	Use strtol() or a related function to convert a string token to an integer
INT05-C	builticlean.c	528	13	Use strtol() or a related function to convert a string token to an integer
INT05-C	builticlean.c	533	11	Use strtol() or a related function to convert a string token to an integer
EXP36-C	builticlean.c	580	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builticlean.c	587	4	Do not ignore values returned by functions: printf_ln
EXP36-C	builticlean.c	636	19	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticlean.c	650	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builticlean.c	658	2	Store a new value in pointers immediately after free()
MEM34-C	builticlean.c	658	2	Only free memory allocated dynamically
INT07-C	builticlean.c	710	19	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builticlean.c	719	4	Do not ignore values returned by functions: printf_ln
DCL01-C	builticlean.c	733	2	Do not reuse variable names in subscopes: menu_opts
DCL01-C	builticlean.c	734	2	Do not reuse variable names in subscopes: menu_stuff
INT01-C	builticlean.c	749	23	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builticlean.c	751	23	Use only explicitly signed or unsigned char type for numeric values
ARR30-C	builticlean.c	751	11	Do not form or use out-of-bounds pointers or array subscripts
INT07-C	builticlean.c	758	23	Use only explicitly signed or unsigned char type for numeric values
ARR30-C	builticlean.c	758	11	Do not form or use out-of-bounds pointers or array subscripts
MEM34-C	builticlean.c	764	2	Only free memory allocated dynamically
EXP12-C	builticlean.c	783	5	Do not ignore values returned by functions: putchar
INT07-C	builticlean.c	788	18	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builticlean.c	811	2	Do not ignore values returned by functions: printf_ln
DCL01-C	builticlean.c	827	3	Do not reuse variable names in subscopes: menu_opts
DCL01-C	builticlean.c	828	3	Do not reuse variable names in subscopes: menu_stuff
EXP12-C	builticlean.c	848	3	Do not ignore values returned by functions: printf_ln
MEM34-C	builticlean.c	861	5	Only free memory allocated dynamically
EXP12-C	builticlean.c	864	6	Do not ignore values returned by functions: printf_ln
EXP12-C	builticlean.c	871	4	Do not ignore values returned by functions: quit_cmd
MEM34-C	builticlean.c	874	3	Only free memory allocated dynamically
ARR30-C	builticlean.c	890	63	Do not form or use out-of-bounds pointers or array subscripts
DCL01-C	builticlean.c	915	2	Do not reuse variable names in subscopes: config_set
DCL01-C	builticlean.c	919	2	Do not reuse variable names in subscopes: pathspec
INT01-C	builticlean.c	1019	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builticlean.c	1026	2	Do not ignore values returned by functions: fill_directory
EXP12-C	builticlean.c	1044	3	Do not ignore values returned by functions: string_list_append
INT01-C	builticlean.c	1049	33	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builticlean.c	1079	5	Const-qualify immutable objects: saved_errno
STR05-C	builticlone.c	65	1	Use pointers to const when referring to string literals
INT36-C	builticlone.c	92	8	Take care when converting from pointer to integer or integer to pointer
DCL01-C	builticlone.c	170	62	Do not reuse variable names in subscopes: is_bundle
DCL00-C	builticlone.c	174	2	Const-qualify immutable objects: baselen
INT01-C	builticlone.c	178	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builticlone.c	190	4	Const-qualify immutable objects: fd
INT01-C	builticlone.c	205	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builticlone.c	217	51	Do not reuse variable names in subscopes: is_bundle
EXP36-C	builticlone.c	233	18	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builticlone.c	251	2	Only free memory allocated dynamically
EXP12-C	builticlone.c	258	2	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builticlone.c	261	2	Do not ignore values returned by functions: for_each_string_list
MEM34-C	builticlone.c	296	3	Only free memory allocated dynamically
DCL01-C	builticlone.c	323	2	Do not reuse variable names in subscopes: realpath
EXP12-C	builticlone.c	361	4	Do not ignore values returned by functions: strbuf_realpath
EXP12-C	builticlone.c	384	3	Do not ignore values returned by functions: get_common_dir
EXP12-C	builticlone.c	391	3	Do not ignore values returned by functions: get_common_dir
EXP12-C	builticlone.c	392	3	Do not ignore values returned by functions: get_common_dir
STR11-C	builticlone.c	414	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builticlone.c	436	3	Do not ignore values returned by functions: remove_dir_recursively
EXP12-C	builticlone.c	441	3	Do not ignore values returned by functions: remove_dir_recursively
EXP12-C	builticlone.c	449	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	builticlone.c	450	2	Do not ignore values returned by functions: raise
DCL01-C	builticlone.c	453	75	Do not reuse variable names in subscopes: branch
DCL01-C	builticlone.c	455	2	Do not reuse variable names in subscopes: ref
DCL01-C	builticlone.c	474	19	Do not reuse variable names in subscopes: refspec
EXP12-C	builticlone.c	497	5	Do not ignore values returned by functions: get_fetch_map
EXP12-C	builticlone.c	501	4	Do not ignore values returned by functions: get_fetch_map
EXP12-C	builticlone.c	507	4	Do not ignore values returned by functions: get_fetch_map
DCL01-C	builticlone.c	544	2	Do not reuse variable names in subscopes: ref
EXP12-C	builticlone.c	554	3	Do not ignore values returned by functions: update_ref
EXP36-C	builticlone.c	561	20	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builticlone.c	562	2	Do not reuse variable names in subscopes: ref
DCL01-C	builticlone.c	582	29	Do not reuse variable names in subscopes: transport
DCL01-C	builticlone.c	604	3	Do not reuse variable names in subscopes: head_ref
DCL01-C	builticlone.c	615	66	Do not reuse variable names in subscopes: remote
EXP12-C	builticlone.c	624	4	Do not ignore values returned by functions: update_ref
EXP12-C	builticlone.c	626	4	Do not ignore values returned by functions: install_branch_config
EXP12-C	builticlone.c	632	3	Do not ignore values returned by functions: update_ref
EXP12-C	builticlone.c	640	3	Do not ignore values returned by functions: update_ref
MSC12-C	builticlone.c	668	3	Detect and remove code that has no effect
DCL01-C	builticlone.c	679	2	Do not reuse variable names in subscopes: lock_file
DCL01-C	builticlone.c	681	2	Do not reuse variable names in subscopes: tree
MEM34-C	builticlone.c	697	3	Only free memory allocated dynamically
EXP12-C	builticlone.c	706	2	Do not ignore values returned by functions: repo_hold_locked_index
EXP12-C	builticlone.c	708	2	Do not ignore values returned by functions: memset
EXP12-C	builticlone.c	722	2	Do not ignore values returned by functions: parse_tree
MEM01-C	builticlone.c	727	2	Store a new value in pointers immediately after free()
MEM34-C	builticlone.c	727	2	Only free memory allocated dynamically
INT13-C	builticlone.c	732	6	Use bitwise operators only on unsigned operands
INT01-C	builticlone.c	735	44	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builticlone.c	753	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builticlone.c	754	4	Do not ignore values returned by functions: strvec_push
DCL00-C	builticlone.c	794	2	Const-qualify immutable objects: apply_failed
INT01-C	builticlone.c	807	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builticlone.c	881	2	Only free memory allocated dynamically
DCL01-C	builticlone.c	892	2	Do not reuse variable names in subscopes: is_bundle
DCL01-C	builticlone.c	902	2	Do not reuse variable names in subscopes: ref
DCL01-C	builticlone.c	905	2	Do not reuse variable names in subscopes: transport
DCL01-C	builticlone.c	907	2	Do not reuse variable names in subscopes: remote
DCL01-C	builticlone.c	912	2	Do not reuse variable names in subscopes: transport_ls_refs_options
INT01-C	builticlone.c	930	35	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builticlone.c	951	3	Only free memory allocated dynamically
INT05-C	builticlone.c	960	22	Use strtol() or a related function to convert a string token to an integer
MEM01-C	builticlone.c	984	2	Store a new value in pointers immediately after free()
MEM34-C	builticlone.c	984	2	Only free memory allocated dynamically
EXP12-C	builticlone.c	1001	2	Do not ignore values returned by functions: atexit
INT01-C	builticlone.c	1036	35	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builticlone.c	1052	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builticlone.c	1065	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builticlone.c	1067	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builticlone.c	1070	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builticlone.c	1072	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builticlone.c	1077	2	Do not ignore values returned by functions: init_db
EXP05-C	builticlone.c	1081	8	Do not cast away a const qualification
DCL00-C	builticlone.c	1202	3	Const-qualify immutable objects: fd
DCL00-C	builticlone.c	1203	3	Const-qualify immutable objects: has_filter
EXP12-C	builticlone.c	1212	2	Do not ignore values returned by functions: transport_set_option
EXP12-C	builticlone.c	1238	3	Do not ignore values returned by functions: transport_set_option
EXP12-C	builticlone.c	1240	3	Do not ignore values returned by functions: transport_set_option
EXP12-C	builticlone.c	1259	2	Do not ignore values returned by functions: strvec_push
DCL00-C	builticlone.c	1275	3	Const-qualify immutable objects: hash_algo
DCL01-C	builticlone.c	1318	3	Do not reuse variable names in subscopes: branch
EXP12-C	builticlone.c	1376	2	Do not ignore values returned by functions: transport_disconnect
MEM01-C	builticlone.c	1386	2	Store a new value in pointers immediately after free()
MEM01-C	builticlone.c	1392	2	Store a new value in pointers immediately after free()
MEM34-C	builticlone.c	1392	2	Only free memory allocated dynamically
MEM01-C	builticlone.c	1393	2	Store a new value in pointers immediately after free()
MEM34-C	builticlone.c	1393	2	Only free memory allocated dynamically
MEM01-C	builticlone.c	1394	2	Store a new value in pointers immediately after free()
MEM34-C	builticlone.c	1394	2	Only free memory allocated dynamically
EXP05-C	builticolumn.c	40	29	Do not cast away a const qualification
EXP12-C	builticolumn.c	44	2	Do not ignore values returned by functions: memset
EXP12-C	builticolumn.c	53	2	Do not ignore values returned by functions: finalize_colopts
DCL01-C	builticommit-graph.c	45	2	Do not reuse variable names in subscopes: progress
EXP36-C	builticommit-graph.c	85	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticommit-graph.c	87	22	Do not convert pointers into more strictly aligned pointer types
INT13-C	builticommit-graph.c	92	9	Use bitwise operators only on unsigned operands
INT13-C	builticommit-graph.c	94	9	Use bitwise operators only on unsigned operands
MEM34-C	builticommit-graph.c	102	2	Only free memory allocated dynamically
MEM34-C	builticommit-graph.c	103	2	Only free memory allocated dynamically
EXP36-C	builticommit-graph.c	124	44	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builticommit-graph.c	142	69	Do not reuse variable names in subscopes: progress
EXP36-C	builticommit-graph.c	168	15	Do not convert pointers into more strictly aligned pointer types
DCL13-C	builticommit-graph.c	182	13	Declare function parameters that are pointers to values not changed by the function as const: cb
DCL01-C	builticommit-graph.c	201	2	Do not reuse variable names in subscopes: progress
EXP36-C	builticommit-graph.c	246	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticommit-graph.c	248	22	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builticommit-graph.c	302	2	Only free memory allocated dynamically
MEM34-C	builticommit-graph.c	325	2	Only free memory allocated dynamically
MSC12-C	builticommit-tree.c	32	4	Detect and remove code that has no effect
EXP12-C	builticommit-tree.c	37	2	Do not ignore values returned by functions: commit_list_insert
DCL00-C	builticommit-tree.c	42	2	Const-qualify immutable objects: status
EXP36-C	builticommit-tree.c	52	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticommit-tree.c	67	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticommit-tree.c	83	26	Do not convert pointers into more strictly aligned pointer types
STR11-C	builticommit.c	59	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builticommit.c	64	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builticommit.c	71	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builticommit.c	74	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builticommit.c	77	1	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	builticommit.c	149	18	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticommit.c	172	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticommit.c	188	26	Do not convert pointers into more strictly aligned pointer types
MSC01-C	builticommit.c	220	2	Strive for logical completeness
MSC01-C	builticommit.c	237	2	Strive for logical completeness
MEM34-C	builticommit.c	270	3	Only free memory allocated dynamically
MEM34-C	builticommit.c	289	2	Only free memory allocated dynamically
INT01-C	builticommit.c	296	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builticommit.c	314	2	Do not reuse variable names in subscopes: tree
EXP12-C	builticommit.c	323	2	Do not ignore values returned by functions: memset
EXP12-C	builticommit.c	334	2	Do not ignore values returned by functions: parse_tree
INT13-C	builticommit.c	346	46	Use bitwise operators only on unsigned operands
DCL01-C	builticommit.c	354	2	Do not reuse variable names in subscopes: pathspec
INT13-C	builticommit.c	359	17	Use bitwise operators only on unsigned operands
EXP12-C	builticommit.c	390	3	Do not ignore values returned by functions: repo_hold_locked_index
EXP05-C	builticommit.c	400	4	Do not cast away a const qualification
ENV30-C	builticommit.c	401	35	Do not modify the string returned by getenv()
EXP12-C	builticommit.c	402	3	Do not ignore values returned by functions: setenv
MEM34-C	builticommit.c	412	3	Only free memory allocated dynamically
EXP12-C	builticommit.c	415	3	Do not ignore values returned by functions: read_index_from
EXP12-C	builticommit.c	443	3	Do not ignore values returned by functions: repo_hold_locked_index
EXP12-C	builticommit.c	445	3	Do not ignore values returned by functions: add_files_to_cache
EXP12-C	builticommit.c	447	3	Do not ignore values returned by functions: update_main_cache_tree
EXP12-C	builticommit.c	465	3	Do not ignore values returned by functions: repo_hold_locked_index
INT13-C	builticommit.c	472	24	Use bitwise operators only on unsigned operands
EXP12-C	builticommit.c	516	2	Do not ignore values returned by functions: repo_hold_locked_index
EXP12-C	builticommit.c	518	2	Do not ignore values returned by functions: refresh_index
EXP12-C	builticommit.c	519	2	Do not ignore values returned by functions: update_main_cache_tree
EXP12-C	builticommit.c	523	2	Do not ignore values returned by functions: hold_lock_file_for_update
EXP12-C	builticommit.c	530	2	Do not ignore values returned by functions: refresh_index
EXP12-C	builticommit.c	537	2	Do not ignore values returned by functions: read_index_from
EXP12-C	builticommit.c	590	2	Do not ignore values returned by functions: setenv
DCL00-C	builticommit.c	600	3	Const-qualify immutable objects: t
ENV00-C	builticommit.c	620	25	Do not store the pointer to the string returned by getenv()
ENV30-C	builticommit.c	620	25	Do not modify the string returned by getenv()
ENV00-C	builticommit.c	621	26	Do not store the pointer to the string returned by getenv()
ENV30-C	builticommit.c	621	26	Do not modify the string returned by getenv()
ENV30-C	builticommit.c	622	25	Do not modify the string returned by getenv()
MEM01-C	builticommit.c	670	2	Store a new value in pointers immediately after free()
MEM34-C	builticommit.c	670	2	Only free memory allocated dynamically
MEM01-C	builticommit.c	671	2	Store a new value in pointers immediately after free()
MEM34-C	builticommit.c	671	2	Only free memory allocated dynamically
MEM34-C	builticommit.c	672	2	Only free memory allocated dynamically
STR11-C	builticommit.c	682	2	Do not specify the dimension of a character array initialized with a string literal
INT07-C	builticommit.c	693	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticommit.c	698	16	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	builticommit.c	710	49	Do not reuse variable names in subscopes: commit
EXP12-C	builticommit.c	716	2	Do not ignore values returned by functions: find_commit_subject
DCL01-C	builticommit.c	791	3	Do not reuse variable names in subscopes: commit
MEM01-C	builticommit.c	799	3	Store a new value in pointers immediately after free()
MEM34-C	builticommit.c	799	3	Only free memory allocated dynamically
EXP05-C	builticommit.c	965	5	Do not cast away a const qualification
EXP05-C	builticommit.c	966	5	Do not cast away a const qualification
EXP05-C	builticommit.c	980	5	Do not cast away a const qualification
EXP05-C	builticommit.c	981	5	Do not cast away a const qualification
EXP12-C	builticommit.c	1053	3	Do not ignore values returned by functions: run_status
EXP12-C	builticommit.c	1077	2	Do not ignore values returned by functions: read_index_from
MSC12-C	builticommit.c	1080	3	Detect and remove code that has no effect
EXP12-C	builticommit.c	1091	3	Do not ignore values returned by functions: strvec_pushf
DCL01-C	builticommit.c	1112	2	Do not reuse variable names in subscopes: commit
EXP12-C	builticommit.c	1123	2	Do not ignore values returned by functions: setup_revisions
EXP36-C	builticommit.c	1124	24	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builticommit.c	1126	2	Do not ignore values returned by functions: read_mailmap
DCL01-C	builticommit.c	1177	2	Do not reuse variable names in subscopes: commit
DCL01-C	builticommit.c	1191	2	Do not reuse variable names in subscopes: status_format
DCL01-C	builticommit.c	1255	30	Do not reuse variable names in subscopes: usage
DCL13-C	builticommit.c	1257	26	Declare function parameters that are pointers to values not changed by the function as const: current_head
INT07-C	builticommit.c	1337	7	Use only explicitly signed or unsigned char type for numeric values
INT01-C	builticommit.c	1387	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticommit.c	1387	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builticommit.c	1394	9	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builticommit.c	1399	24	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builticommit.c	1440	3	Const-qualify immutable objects: slot
EXP11-C	builticommit.c	1488	40	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	builticommit.c	1540	2	Do not ignore values returned by functions: finalize_colopts
EXP12-C	builticommit.c	1557	2	Do not ignore values returned by functions: repo_read_index
EXP12-C	builticommit.c	1558	2	Do not ignore values returned by functions: refresh_index
INT13-C	builticommit.c	1559	22	Use bitwise operators only on unsigned operands
EXP05-C	builticommit.c	1576	6	Do not cast away a const qualification
EXP36-C	builticommit.c	1599	24	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builticommit.c	1785	3	Do not ignore values returned by functions: commit_list_insert
DCL00-C	builticommit.c	1791	3	Const-qualify immutable objects: saved_errno
DCL00-C	builticommit.c	1812	3	Const-qualify immutable objects: len
EXP12-C	builticommit.c	1845	2	Do not ignore values returned by functions: unlink
EXP12-C	builticommit.c	1846	2	Do not ignore values returned by functions: unlink
EXP12-C	builticommit.c	1847	2	Do not ignore values returned by functions: unlink
EXP12-C	builticommit.c	1848	2	Do not ignore values returned by functions: unlink
EXP12-C	builticommit.c	1857	2	Do not ignore values returned by functions: repo_rerere
EXP12-C	builticommit.c	1858	2	Do not ignore values returned by functions: run_auto_maintenance
EXP12-C	builticommit.c	1859	2	Do not ignore values returned by functions: run_commit_hook
EXP12-C	builticommit.c	1875	2	Do not ignore values returned by functions: apply_autostash
INT07-C	builticonfig.c	24	1	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticonfig.c	25	1	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticonfig.c	26	1	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	builticonfig.c	112	15	Do not convert pointers into more strictly aligned pointer types
MSC12-C	builticonfig.c	121	3	Detect and remove code that has no effect
DCL02-C	builticonfig.c	203	2	Use visually distinct identifiers: term
DCL01-C	builticonfig.c	190	2	Do not reuse variable names in subscopes: term
INT07-C	builticonfig.c	190	2	Use only explicitly signed or unsigned char type for numeric values
DCL02-C	builticonfig.c	203	2	Use visually distinct identifiers: term
DCL02-C	builticonfig.c	203	2	Use visually distinct identifiers: term
DCL01-C	builticonfig.c	203	2	Do not reuse variable names in subscopes: term
INT07-C	builticonfig.c	203	2	Use only explicitly signed or unsigned char type for numeric values
DCL13-C	builticonfig.c	211	13	Declare function parameters that are pointers to values not changed by the function as const: cb
EXP12-C	builticonfig.c	220	3	Do not ignore values returned by functions: fwrite
DCL00-C	builticonfig.c	262	4	Const-qualify immutable objects: v
EXP05-C	builticonfig.c	272	9	Do not cast away a const qualification
INT01-C	builticonfig.c	288	33	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builticonfig.c	297	31	Do not convert pointers into more strictly aligned pointer types
INT13-C	builticonfig.c	306	20	Use bitwise operators only on unsigned operands
EXP36-C	builticonfig.c	309	2	Do not convert pointers into more strictly aligned pointer types
INT07-C	builticonfig.c	334	8	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticonfig.c	335	22	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticonfig.c	336	8	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	builticonfig.c	340	4	Detect and remove code that has no effect
MSC12-C	builticonfig.c	362	4	Detect and remove code that has no effect
EXP12-C	builticonfig.c	369	2	Do not ignore values returned by functions: config_with_options
EXP36-C	builticonfig.c	374	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builticonfig.c	393	2	Store a new value in pointers immediately after free()
MEM01-C	builticonfig.c	396	3	Store a new value in pointers immediately after free()
MEM01-C	builticonfig.c	400	3	Store a new value in pointers immediately after free()
DCL01-C	builticonfig.c	406	42	Do not reuse variable names in subscopes: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL00-C	builticonfig.c	433	3	Const-qualify immutable objects: v
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL02-C	builticonfig.c	406	42	Use visually distinct identifiers: key
DCL13-C	builticonfig.c	463	11	Declare function parameters that are pointers to values not changed by the function as const: cb
INT07-C	builticonfig.c	479	18	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builticonfig.c	480	2	Do not ignore values returned by functions: config_with_options
DCL13-C	builticonfig.c	495	15	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	builticonfig.c	512	2	Do not ignore values returned by functions: config_with_options
EXP36-C	builticonfig.c	554	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticonfig.c	556	57	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticonfig.c	559	20	Do not convert pointers into more strictly aligned pointer types
INT07-C	builticonfig.c	568	26	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticonfig.c	570	26	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticonfig.c	593	17	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builticonfig.c	601	2	Do not ignore values returned by functions: config_with_options
EXP36-C	builticonfig.c	607	58	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builticonfig.c	610	3	Do not ignore values returned by functions: format_config
EXP12-C	builticonfig.c	612	3	Do not ignore values returned by functions: fwrite
EXP05-C	builticonfig.c	621	7	Do not cast away a const qualification
DCL00-C	builticonfig.c	641	2	Const-qualify immutable objects: nongit
MSC12-C	builticonfig.c	654	3	Detect and remove code that has no effect
MEM01-C	builticonfig.c	693	4	Store a new value in pointers immediately after free()
MEM34-C	builticonfig.c	693	4	Only free memory allocated dynamically
MEM01-C	builticonfig.c	696	4	Store a new value in pointers immediately after free()
MEM34-C	builticonfig.c	696	4	Only free memory allocated dynamically
INT07-C	builticonfig.c	739	8	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticonfig.c	740	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builticonfig.c	741	13	Use only explicitly signed or unsigned char type for numeric values
INT13-C	builticonfig.c	744	15	Use bitwise operators only on unsigned operands
INT13-C	builticonfig.c	744	34	Use bitwise operators only on unsigned operands
MSC12-C	builticonfig.c	745	3	Detect and remove code that has no effect
INT13-C	builticonfig.c	749	6	Use bitwise operators only on unsigned operands
MSC12-C	builticonfig.c	750	3	Detect and remove code that has no effect
MSC12-C	builticonfig.c	763	3	Detect and remove code that has no effect
INT13-C	builticonfig.c	767	31	Use bitwise operators only on unsigned operands
INT13-C	builticonfig.c	768	47	Use bitwise operators only on unsigned operands
INT13-C	builticonfig.c	768	29	Use bitwise operators only on unsigned operands
INT13-C	builticonfig.c	768	14	Use bitwise operators only on unsigned operands
MSC12-C	builticonfig.c	769	3	Detect and remove code that has no effect
INT13-C	builticonfig.c	774	33	Use bitwise operators only on unsigned operands
MSC12-C	builticonfig.c	775	3	Detect and remove code that has no effect
MSC01-C	builticonfig.c	783	3	Strive for logical completeness
MSC12-C	builticonfig.c	808	4	Detect and remove code that has no effect
INT13-C	builticonfig.c	812	9	Use bitwise operators only on unsigned operands
INT13-C	builticonfig.c	815	14	Use bitwise operators only on unsigned operands
INT13-C	builticonfig.c	815	16	Use bitwise operators only on unsigned operands
INT13-C	builticonfig.c	815	16	Use bitwise operators only on unsigned operands
INT13-C	builticonfig.c	815	16	Use bitwise operators only on unsigned operands
DCL00-C	builticonfig.c	845	4	Const-qualify immutable objects: fd
EXP12-C	builticonfig.c	848	5	Do not ignore values returned by functions: write_str_in_full
MEM01-C	builticonfig.c	849	5	Store a new value in pointers immediately after free()
MEM34-C	builticonfig.c	849	5	Only free memory allocated dynamically
EXP12-C	builticonfig.c	855	3	Do not ignore values returned by functions: launch_editor
MEM34-C	builticonfig.c	856	3	Only free memory allocated dynamically
INT13-C	builticonfig.c	896	20	Use bitwise operators only on unsigned operands
INT13-C	builticonfig.c	934	20	Use bitwise operators only on unsigned operands
DCL13-C	builticount-objects.c	60	77	Declare function parameters that are pointers to values not changed by the function as const: data
DCL01-C	builticount-objects.c	75	36	Do not reuse variable names in subscopes: __xpg_basename
DCL13-C	builticount-objects.c	75	70	Declare function parameters that are pointers to values not changed by the function as const: data
DCL13-C	builticount-objects.c	81	64	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	builticount-objects.c	84	2	Do not ignore values returned by functions: quote_c_style
EXP12-C	builticount-objects.c	85	2	Do not ignore values returned by functions: putchar
EXP12-C	builticount-objects.c	115	2	Do not ignore values returned by functions: for_each_loose_file_in_objdir
INT01-C	builticount-objects.c	132	30	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builticount-objects.c	157	3	Do not ignore values returned by functions: foreach_alt_odb
EXP36-C	builticredential-cache--daemon.c	23	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builticredential-cache--daemon.c	28	2	Do not ignore values returned by functions: memset
MSC05-C	builticredential-cache--daemon.c	29	29	Do not manipulate time_t typed values directly
DCL00-C	builticredential-cache--daemon.c	56	2	Const-qualify immutable objects: now
EXP12-C	builticredential-cache--daemon.c	102	2	Do not ignore values returned by functions: strbuf_getline_lf
EXP12-C	builticredential-cache--daemon.c	107	2	Do not ignore values returned by functions: strbuf_getline_lf
INT05-C	builticredential-cache--daemon.c	110	13	Use strtol() or a related function to convert a string token to an integer
STR11-C	builticredential-cache--daemon.c	226	1	Do not specify the dimension of a character array initialized with a string literal
MEM34-C	builticredential-cache--daemon.c	261	2	Only free memory allocated dynamically
DCL01-C	builticredential-cache--daemon.c	269	2	Do not reuse variable names in subscopes: usage
EXP12-C	builticredential-cache--daemon.c	280	2	Do not ignore values returned by functions: git_config_get_bool
EXP36-C	builticredential-cache--daemon.c	282	52	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builticredential-cache--daemon.c	286	22	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builticredential-cache.c	28	34	Do not reuse variable names in subscopes: error
DCL01-C	builticredential-cache.c	33	42	Do not reuse variable names in subscopes: error
DCL01-C	builticredential-cache.c	40	37	Do not reuse variable names in subscopes: socket
DCL00-C	builticredential-cache.c	43	2	Const-qualify immutable objects: fd
EXP12-C	builticredential-cache.c	50	2	Do not ignore values returned by functions: shutdown
DCL01-C	builticredential-cache.c	68	38	Do not reuse variable names in subscopes: socket
DCL01-C	builticredential-cache.c	70	2	Do not reuse variable names in subscopes: daemon
DCL01-C	builticredential-cache.c	91	34	Do not reuse variable names in subscopes: socket
DCL01-C	builticredential-cache.c	118	2	Do not reuse variable names in subscopes: socket
MEM34-C	builticredential-cache.c	124	2	Only free memory allocated dynamically
DCL01-C	builticredential-cache.c	133	2	Do not reuse variable names in subscopes: usage
DCL05-C	builticredential-store.c	10	1	Use typedefs to improve code readability
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
DCL02-C	builticredential-store.c	143	2	Use visually distinct identifiers: fn
EXP12-C	builticredential-store.c	64	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	builticredential-store.c	69	2	Do not ignore values returned by functions: parse_credential_file
DCL01-C	builticredential-store.c	152	2	Do not reuse variable names in subscopes: usage
EXP12-C	builticredential-store.c	166	2	Do not ignore values returned by functions: umask
EXP12-C	builticredential-store.c	174	3	Do not ignore values returned by functions: string_list_append
STR11-C	builticredential.c	6	1	Do not specify the dimension of a character array initialized with a string literal
INT01-C	builtidescribe.c	23	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	builtidescribe.c	23	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	builtidescribe.c	23	1	Use typedefs to improve code readability
EXP36-C	builtidescribe.c	23	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtidescribe.c	23	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtidescribe.c	23	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtidescribe.c	55	2	Do not reuse variable names in subscopes: tag
EXP11-C	builtidescribe.c	74	8	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtidescribe.c	74	8	Do not cast away a const qualification
EXP11-C	builtidescribe.c	75	8	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtidescribe.c	75	8	Do not cast away a const qualification
EXP36-C	builtidescribe.c	77	37	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtidescribe.c	89	24	Do not reuse variable names in subscopes: tag
DCL01-C	builtidescribe.c	125	2	Do not reuse variable names in subscopes: tag
EXP36-C	builtidescribe.c	128	15	Do not convert pointers into more strictly aligned pointer types
DCL13-C	builtidescribe.c	145	30	Declare function parameters that are pointers to values not changed by the function as const: cb_data
EXP05-C	builtidescribe.c	232	27	Do not cast away a const qualification
EXP05-C	builtidescribe.c	233	27	Do not cast away a const qualification
EXP12-C	builtidescribe.c	264	4	Do not ignore values returned by functions: repo_parse_commit
DCL02-C	builtidescribe.c	337	3	Use visually distinct identifiers: n
DCL00-C	builtidescribe.c	337	3	Const-qualify immutable objects: n
DCL01-C	builtidescribe.c	337	3	Do not reuse variable names in subscopes: n
DCL02-C	builtidescribe.c	337	3	Use visually distinct identifiers: n
EXP30-C	builtidescribe.c	340	3	Do not depend on order of evaluation for side effects
EXP36-C	builtidescribe.c	340	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtidescribe.c	340	3	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtidescribe.c	337	3	Use visually distinct identifiers: n
DCL02-C	builtidescribe.c	337	3	Use visually distinct identifiers: n
EXP12-C	builtidescribe.c	352	2	Do not ignore values returned by functions: commit_list_insert
INT34-C	builtidescribe.c	368	25	Do not shift a negative number of bits or more bits than exist in the operand
EXP12-C	builtidescribe.c	406	4	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	builtidescribe.c	438	3	Do not ignore values returned by functions: commit_list_insert_by_date
INT01-C	builtidescribe.c	448	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtidescribe.c	484	43	Do not reuse variable names in subscopes: commit
EXP36-C	builtidescribe.c	486	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtidescribe.c	492	36	Do not convert pointers into more strictly aligned pointer types
DCL13-C	builtidescribe.c	503	64	Declare function parameters that are pointers to values not changed by the function as const: dst
EXP12-C	builtidescribe.c	545	2	Do not ignore values returned by functions: puts
EXP12-C	builtidescribe.c	609	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtidescribe.c	611	5	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtidescribe.c	613	5	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtidescribe.c	623	2	Do not ignore values returned by functions: for_each_rawref
EXP12-C	builtidescribe.c	656	4	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtidescribe.c	657	4	Do not ignore values returned by functions: refresh_index
INT13-C	builtidescribe.c	657	43	Use bitwise operators only on unsigned operands
DCL01-C	builtidiagnose.c	15	2	Do not reuse variable names in subscopes: tm
STR05-C	builtidiagnose.c	18	2	Use pointers to const when referring to string literals
MEM01-C	builtidiagnose.c	59	2	Store a new value in pointers immediately after free()
MEM34-C	builtidiagnose.c	59	2	Only free memory allocated dynamically
STR11-C	builtidiff-files.c	15	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtidiff-index.c	10	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtidiff-index.c	19	2	Do not reuse variable names in subscopes: option
DCL01-C	builtidiff-tree.c	15	2	Do not reuse variable names in subscopes: commit
DCL01-C	builtidiff-tree.c	22	45	Do not reuse variable names in subscopes: commit
EXP12-C	builtidiff-tree.c	57	2	Do not ignore values returned by functions: log_tree_diff_flush
DCL00-C	builtidiff-tree.c	63	2	Const-qualify immutable objects: len
INT07-C	builtidiff-tree.c	70	14	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	builtidiff-tree.c	80	2	Detect and remove code that has no effect
STR11-C	builtidiff-tree.c	85	1	Do not specify the dimension of a character array initialized with a string literal
DCL13-C	builtidiff-tree.c	98	82	Declare function parameters that are pointers to values not changed by the function as const: opt
EXP12-C	builtidiff-tree.c	128	2	Do not ignore values returned by functions: memset
EXP12-C	builtidiff-tree.c	134	2	Do not ignore values returned by functions: memset
MSC01-C	builtidiff-tree.c	170	2	Strive for logical completeness
EXP12-C	builtidiff-tree.c	177	3	Do not ignore values returned by functions: diff_tree_commit_oid
INT01-C	builtidiff-tree.c	188	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtidiff-tree.c	188	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtidiff-tree.c	191	3	Do not ignore values returned by functions: log_tree_diff_flush
EXP12-C	builtidiff-tree.c	214	5	Do not ignore values returned by functions: diff_tree_stdin
STR11-C	builtidiff.c	27	1	Do not specify the dimension of a character array initialized with a string literal
INT01-C	builtidiff.c	58	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtidiff.c	58	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtidiff.c	59	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtidiff.c	59	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtidiff.c	60	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtidiff.c	60	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtidiff.c	73	2	Do not ignore values returned by functions: diff_queue
DCL05-C	builtidiff.c	76	1	Use typedefs to improve code readability
DCL01-C	builtidiff.c	78	36	Do not reuse variable names in subscopes: blob
INT13-C	builtidiff.c	87	2	Use bitwise operators only on unsigned operands
INT13-C	builtidiff.c	87	2	Use bitwise operators only on unsigned operands
INT13-C	builtidiff.c	87	2	Use bitwise operators only on unsigned operands
INT13-C	builtidiff.c	87	2	Use bitwise operators only on unsigned operands
DCL05-C	builtidiff.c	111	1	Use typedefs to improve code readability
DCL01-C	builtidiff.c	113	38	Do not reuse variable names in subscopes: blob
DCL01-C	builtidiff.c	139	2	Do not reuse variable names in subscopes: option
EXP12-C	builtidiff.c	207	2	Do not ignore values returned by functions: log_tree_diff_flush
DCL01-C	builtidiff.c	240	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtidiff.c	247	2	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtidiff.c	248	2	Do not ignore values returned by functions: refresh_index
INT13-C	builtidiff.c	248	41	Use bitwise operators only on unsigned operands
MSC01-C	builtidiff.c	340	3	Strive for logical completeness
DCL01-C	builtidiff.c	401	2	Do not reuse variable names in subscopes: blob
DCL02-C	builtidiff.c	520	3	Use visually distinct identifiers: i
DCL01-C	builtidiff.c	520	3	Do not reuse variable names in subscopes: i
DCL02-C	builtidiff.c	520	3	Use visually distinct identifiers: i
DCL02-C	builtidiff.c	520	3	Use visually distinct identifiers: i
DCL02-C	builtidiff.c	520	3	Use visually distinct identifiers: i
DCL02-C	builtidiff.c	520	3	Use visually distinct identifiers: i
DCL02-C	builtidiff.c	520	3	Use visually distinct identifiers: i
DCL02-C	builtidiff.c	520	3	Use visually distinct identifiers: i
DCL02-C	builtidiff.c	520	3	Use visually distinct identifiers: i
DCL01-C	builtidiff.c	529	6	Do not reuse variable names in subscopes: tree
DCL00-C	builtidiff.c	544	3	Const-qualify immutable objects: flags
ARR30-C	builtidiff.c	565	8	Do not form or use out-of-bounds pointers or array subscripts
INT07-C	builtidifftool.c	77	11	Use only explicitly signed or unsigned char type for numeric values
INT01-C	builtidifftool.c	89	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtidifftool.c	89	36	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtidifftool.c	109	3	Const-qualify immutable objects: fd
FIO42-C	builtidifftool.c	109	12	Close files when they are no longer needed
EXP11-C	builtidifftool.c	138	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtidifftool.c	138	6	Do not cast away a const qualification
EXP11-C	builtidifftool.c	139	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtidifftool.c	139	6	Do not cast away a const qualification
EXP11-C	builtidifftool.c	161	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtidifftool.c	161	6	Do not cast away a const qualification
EXP11-C	builtidifftool.c	162	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtidifftool.c	162	6	Do not cast away a const qualification
DCL00-C	builtidifftool.c	172	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtidifftool.c	172	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	builtidifftool.c	172	2	Do not cast away a const qualification
EXP36-C	builtidifftool.c	174	13	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtidifftool.c	176	3	Only free memory allocated dynamically
INT07-C	builtidifftool.c	179	28	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtidifftool.c	182	2	Do not ignore values returned by functions: gitstrlcpy
EXP11-C	builtidifftool.c	197	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtidifftool.c	197	6	Do not cast away a const qualification
EXP11-C	builtidifftool.c	198	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtidifftool.c	198	6	Do not cast away a const qualification
DCL01-C	builtidifftool.c	203	63	Do not reuse variable names in subscopes: index_path
EXP12-C	builtidifftool.c	223	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtidifftool.c	225	2	Do not ignore values returned by functions: run_command
EXP12-C	builtidifftool.c	236	2	Do not ignore values returned by functions: strvec_pushf
DCL00-C	builtidifftool.c	242	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtidifftool.c	242	3	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtidifftool.c	287	3	Do not reuse variable names in subscopes: link
EXP12-C	builtidifftool.c	324	2	Do not ignore values returned by functions: ensure_leading_directories
EXP12-C	builtidifftool.c	325	2	Do not ignore values returned by functions: unlink
INT01-C	builtidifftool.c	385	52	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtidifftool.c	387	2	Do not ignore values returned by functions: mkdir
EXP12-C	builtidifftool.c	388	2	Do not ignore values returned by functions: mkdir
EXP12-C	builtidifftool.c	390	2	Do not ignore values returned by functions: memset
EXP12-C	builtidifftool.c	392	2	Do not ignore values returned by functions: memset
EXP12-C	builtidifftool.c	396	2	Do not ignore values returned by functions: memset
MEM30-C	builtidifftool.c	461	4	Do not access freed memory
MEM34-C	builtidifftool.c	461	4	Only free memory allocated dynamically
MEM30-C	builtidifftool.c	467	4	Do not access freed memory
MEM34-C	builtidifftool.c	467	4	Only free memory allocated dynamically
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL01-C	builtidifftool.c	478	4	Do not reuse variable names in subscopes: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL00-C	builtidifftool.c	481	4	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtidifftool.c	481	4	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
MEM01-C	builtidifftool.c	485	5	Store a new value in pointers immediately after free()
MEM30-C	builtidifftool.c	485	5	Do not access freed memory
MEM34-C	builtidifftool.c	485	5	Only free memory allocated dynamically
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
EXP12-C	builtidifftool.c	507	5	Do not ignore values returned by functions: add_index_entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
DCL02-C	builtidifftool.c	478	4	Use visually distinct identifiers: entry
EXP30-C	builtidifftool.c	552	2	Do not depend on order of evaluation for side effects
EXP36-C	builtidifftool.c	552	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtidifftool.c	552	2	Do not convert pointers into more strictly aligned pointer types
EXP30-C	builtidifftool.c	562	2	Do not depend on order of evaluation for side effects
EXP36-C	builtidifftool.c	562	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtidifftool.c	562	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtidifftool.c	572	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtidifftool.c	574	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtidifftool.c	576	3	Do not ignore values returned by functions: setenv
EXP12-C	builtidifftool.c	647	3	Do not ignore values returned by functions: remove_dir_recursively
MEM01-C	builtidifftool.c	656	2	Store a new value in pointers immediately after free()
MEM34-C	builtidifftool.c	656	2	Only free memory allocated dynamically
MEM01-C	builtidifftool.c	657	2	Store a new value in pointers immediately after free()
MEM34-C	builtidifftool.c	657	2	Only free memory allocated dynamically
EXP12-C	builtidifftool.c	734	3	Do not ignore values returned by functions: setenv
EXP12-C	builtidifftool.c	735	3	Do not ignore values returned by functions: setenv
EXP12-C	builtidifftool.c	759	2	Do not ignore values returned by functions: setenv
EXP12-C	builtidifftool.c	768	2	Do not ignore values returned by functions: strvec_push
DCL01-C	builtienv--helper.c	18	2	Do not reuse variable names in subscopes: cmdmode
EXP36-C	builtienv--helper.c	18	29	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtienv--helper.c	40	2	Do not reuse variable names in subscopes: cmdmode
MSC12-C	builtienv--helper.c	67	5	Detect and remove code that has no effect
MSC12-C	builtienv--helper.c	82	5	Detect and remove code that has no effect
EXP11-C	builtifast-export.c	129	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtifast-export.c	129	6	Do not cast away a const qualification
EXP36-C	builtifast-export.c	131	44	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtifast-export.c	132	3	Const-qualify immutable objects: equal
EXP11-C	builtifast-export.c	137	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtifast-export.c	137	6	Do not cast away a const qualification
DCL05-C	builtifast-export.c	146	1	Use typedefs to improve code readability
EXP36-C	builtifast-export.c	163	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-export.c	169	9	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtifast-export.c	173	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtifast-export.c	173	3	Do not convert pointers into more strictly aligned pointer types
EXP05-C	builtifast-export.c	173	3	Do not cast away a const qualification
EXP12-C	builtifast-export.c	176	3	Do not ignore values returned by functions: hashmap_put
DCL05-C	builtifast-export.c	188	1	Use typedefs to improve code readability
DCL00-C	builtifast-export.c	194	3	Const-qualify immutable objects: len
INT36-C	builtifast-export.c	205	17	Take care when converting from pointer to integer or integer to pointer
DCL13-C	builtifast-export.c	208	43	Declare function parameters that are pointers to values not changed by the function as const: mark
DCL01-C	builtifast-export.c	213	47	Do not reuse variable names in subscopes: object
EXP12-C	builtifast-export.c	215	2	Do not ignore values returned by functions: add_decoration
DCL01-C	builtifast-export.c	218	52	Do not reuse variable names in subscopes: object
DCL01-C	builtifast-export.c	223	43	Do not reuse variable names in subscopes: object
DCL01-C	builtifast-export.c	225	2	Do not reuse variable names in subscopes: decoration
INT33-C	builtifast-export.c	252	17	Ensure that division and remainder operations do not result in divide-by-zero errors
INT01-C	builtifast-export.c	272	8	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtifast-export.c	281	2	Do not reuse variable names in subscopes: object
EXP11-C	builtifast-export.c	296	12	Do not apply operators expecting one type to data of an incompatible type
INT01-C	builtifast-export.c	318	43	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtifast-export.c	318	43	Ensure that return values are compared against the proper type
MEM34-C	builtifast-export.c	326	3	Only free memory allocated dynamically
EXP05-C	builtifast-export.c	331	36	Do not cast away a const qualification
EXP05-C	builtifast-export.c	332	36	Do not cast away a const qualification
DCL00-C	builtifast-export.c	361	2	Const-qualify immutable objects: need_quote
DCL13-C	builtifast-export.c	370	45	Declare function parameters that are pointers to values not changed by the function as const: data
DCL13-C	builtifast-export.c	392	38	Declare function parameters that are pointers to values not changed by the function as const: data
DCL00-C	builtifast-export.c	407	2	Const-qualify immutable objects: len
DCL13-C	builtifast-export.c	412	29	Declare function parameters that are pointers to values not changed by the function as const: options
EXP36-C	builtifast-export.c	415	32	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifast-export.c	431	4	Do not ignore values returned by functions: string_list_insert
EXP12-C	builtifast-export.c	432	4	Do not ignore values returned by functions: putchar
EXP12-C	builtifast-export.c	447	5	Do not ignore values returned by functions: putchar
EXP12-C	builtifast-export.c	449	5	Do not ignore values returned by functions: string_list_insert
EXP12-C	builtifast-export.c	450	5	Do not ignore values returned by functions: putchar
DCL01-C	builtifast-export.c	471	5	Do not reuse variable names in subscopes: object
EXP12-C	builtifast-export.c	477	4	Do not ignore values returned by functions: string_list_insert
EXP12-C	builtifast-export.c	478	4	Do not ignore values returned by functions: putchar
DCL01-C	builtifast-export.c	493	2	Do not reuse variable names in subscopes: eol
INT07-C	builtifast-export.c	501	7	Use only explicitly signed or unsigned char type for numeric values
DCL13-C	builtifast-export.c	505	44	Declare function parameters that are pointers to values not changed by the function as const: data
INT01-C	builtifast-export.c	530	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	builtifast-export.c	551	36	Declare function parameters that are pointers to values not changed by the function as const: data
DCL05-C	builtifast-export.c	565	1	Use typedefs to improve code readability
INT01-C	builtifast-export.c	576	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	builtifast-export.c	582	3	Do not cast away a const qualification
DCL01-C	builtifast-export.c	606	42	Do not reuse variable names in subscopes: commit
DCL00-C	builtifast-export.c	609	2	Const-qualify immutable objects: saved_output_format
MSC01-C	builtifast-export.c	674	3	Strive for logical completeness
EXP05-C	builtifast-export.c	692	9	Do not cast away a const qualification
EXP05-C	builtifast-export.c	693	9	Do not cast away a const qualification
MEM01-C	builtifast-export.c	701	2	Store a new value in pointers immediately after free()
MEM34-C	builtifast-export.c	701	2	Only free memory allocated dynamically
DCL00-C	builtifast-export.c	706	3	Const-qualify immutable objects: mark
EXP12-C	builtifast-export.c	726	2	Do not ignore values returned by functions: log_tree_diff_flush
DCL13-C	builtifast-export.c	735	34	Declare function parameters that are pointers to values not changed by the function as const: data
DCL01-C	builtifast-export.c	744	54	Do not reuse variable names in subscopes: tag
MSC01-C	builtifast-export.c	807	4	Strive for logical completeness
MSC01-C	builtifast-export.c	832	3	Strive for logical completeness
MEM34-C	builtifast-export.c	839	4	Only free memory allocated dynamically
MEM34-C	builtifast-export.c	849	6	Only free memory allocated dynamically
EXP12-C	builtifast-export.c	864	2	Do not ignore values returned by functions: skip_prefix
EXP05-C	builtifast-export.c	878	9	Do not cast away a const qualification
MEM34-C	builtifast-export.c	881	2	Only free memory allocated dynamically
DCL01-C	builtifast-export.c	890	3	Do not reuse variable names in subscopes: tag
EXP11-C	builtifast-export.c	890	21	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	builtifast-export.c	894	4	Do not ignore values returned by functions: parse_object
EXP11-C	builtifast-export.c	896	10	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	builtifast-export.c	914	3	Do not reuse variable names in subscopes: commit
MEM34-C	builtifast-export.c	927	5	Only free memory allocated dynamically
DCL01-C	builtifast-export.c	969	2	Do not reuse variable names in subscopes: commit
INT01-C	builtifast-export.c	972	22	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtifast-export.c	974	3	Do not reuse variable names in subscopes: object
EXP36-C	builtifast-export.c	974	43	Do not convert pointers into more strictly aligned pointer types
MSC01-C	builtifast-export.c	977	3	Strive for logical completeness
INT13-C	builtifast-export.c	1054	4	Use bitwise operators only on unsigned operands
INT13-C	builtifast-export.c	1055	4	Use bitwise operators only on unsigned operands
DCL01-C	builtifast-export.c	1074	3	Do not reuse variable names in subscopes: object
DCL01-C	builtifast-export.c	1075	3	Do not reuse variable names in subscopes: commit
INT07-C	builtifast-export.c	1081	13	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	builtifast-export.c	1119	3	Do not reuse variable names in subscopes: refspec
EXP36-C	builtifast-export.c	1136	27	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifast-export.c	1154	2	Do not ignore values returned by functions: anonymize_str
EXP05-C	builtifast-export.c	1154	50	Do not cast away a const qualification
DCL01-C	builtifast-export.c	1162	2	Do not reuse variable names in subscopes: commit
EXP36-C	builtifast-export.c	1213	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-export.c	1223	52	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-export.c	1227	23	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtifast-export.c	1235	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtifast-import.c	44	2	Do not reuse variable names in subscopes: pack_id
EXP36-C	builtifast-import.c	54	32	Do not convert pointers into more strictly aligned pointer types
EXP11-C	builtifast-import.c	57	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtifast-import.c	57	7	Do not cast away a const qualification
EXP11-C	builtifast-import.c	61	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtifast-import.c	61	7	Do not cast away a const qualification
DCL01-C	builtifast-import.c	96	2	Do not reuse variable names in subscopes: tree
DCL01-C	builtifast-import.c	125	2	Do not reuse variable names in subscopes: pack_id
DCL01-C	builtifast-import.c	132	2	Do not reuse variable names in subscopes: pack_id
INT01-C	builtifast-import.c	181	29	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtifast-import.c	273	46	Use bitwise operators only on unsigned operands
DCL01-C	builtifast-import.c	283	49	Do not reuse variable names in subscopes: object
EXP36-C	builtifast-import.c	284	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	285	12	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifast-import.c	301	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	313	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	315	2	Do not ignore values returned by functions: fputc
MSC12-C	builtifast-import.c	327	3	Detect and remove code that has no effect
MEM34-C	builtifast-import.c	328	3	Only free memory allocated dynamically
EXP12-C	builtifast-import.c	338	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	342	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	344	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	353	3	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	356	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	362	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	369	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	379	3	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	384	4	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	386	4	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	390	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	398	2	Do not ignore values returned by functions: fputc
MEM34-C	builtifast-import.c	402	2	Only free memory allocated dynamically
DCL00-C	builtifast-import.c	411	2	Const-qualify immutable objects: cp
DCL00-C	builtifast-import.c	413	2	Const-qualify immutable objects: die_message_fn
EXP12-C	builtifast-import.c	415	2	Do not ignore values returned by functions: __builtin_va_copy
EXP12-C	builtifast-import.c	448	2	Do not ignore values returned by functions: memset
EXP12-C	builtifast-import.c	450	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	builtifast-import.c	452	2	Do not ignore values returned by functions: sigaction
EXP36-C	builtifast-import.c	461	13	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtifast-import.c	462	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	462	9	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtifast-import.c	491	2	Const-qualify immutable objects: hash
EXP30-C	builtifast-import.c	512	2	Do not depend on order of evaluation for side effects
EXP36-C	builtifast-import.c	512	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	512	2	Do not convert pointers into more strictly aligned pointer types
INT14-C	builtifast-import.c	514	15	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	builtifast-import.c	522	16	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	builtifast-import.c	527	15	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	builtifast-import.c	533	15	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtifast-import.c	542	16	Use bitwise operators only on unsigned operands
EXP36-C	builtifast-import.c	543	22	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtifast-import.c	549	3	Const-qualify immutable objects: i
INT13-C	builtifast-import.c	549	23	Use bitwise operators only on unsigned operands
INT14-C	builtifast-import.c	550	9	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	builtifast-import.c	550	14	Use bitwise operators only on unsigned operands
EXP36-C	builtifast-import.c	552	37	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtifast-import.c	564	2	Const-qualify immutable objects: orig_idnum
INT13-C	builtifast-import.c	566	13	Use bitwise operators only on unsigned operands
DCL00-C	builtifast-import.c	568	4	Const-qualify immutable objects: i
INT13-C	builtifast-import.c	568	24	Use bitwise operators only on unsigned operands
INT14-C	builtifast-import.c	569	10	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	builtifast-import.c	569	15	Use bitwise operators only on unsigned operands
DCL00-C	builtifast-import.c	582	2	Const-qualify immutable objects: hc
INT33-C	builtifast-import.c	582	35	Ensure that division and remainder operations do not result in divide-by-zero errors
EXP36-C	builtifast-import.c	589	20	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtifast-import.c	589	59	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtifast-import.c	592	18	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builtifast-import.c	601	2	Const-qualify immutable objects: hc
INT33-C	builtifast-import.c	601	47	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL00-C	builtifast-import.c	612	2	Const-qualify immutable objects: hc
INT33-C	builtifast-import.c	612	47	Ensure that division and remainder operations do not result in divide-by-zero errors
EXP36-C	builtifast-import.c	620	21	Do not convert pointers into more strictly aligned pointer types
INT14-C	builtifast-import.c	627	13	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	builtifast-import.c	635	6	Avoid performing bitwise and arithmetic operations on the same data
DCL00-C	builtifast-import.c	643	2	Const-qualify immutable objects: hc
INT14-C	builtifast-import.c	655	7	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	builtifast-import.c	656	21	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtifast-import.c	656	47	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	656	71	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	builtifast-import.c	660	6	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	builtifast-import.c	669	33	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	builtifast-import.c	670	2	Const-qualify immutable objects: hc
INT01-C	builtifast-import.c	690	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	690	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	701	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	701	26	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtifast-import.c	702	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	705	14	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	708	13	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	711	6	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	712	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	720	12	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtifast-import.c	756	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtifast-import.c	756	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	767	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtifast-import.c	773	2	Do not reuse variable names in subscopes: tmpfile
EXP36-C	builtifast-import.c	779	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtifast-import.c	791	2	Only free memory allocated dynamically
EXP12-C	builtifast-import.c	801	2	Do not ignore values returned by functions: odb_pack_name
EXP12-C	builtifast-import.c	809	2	Do not ignore values returned by functions: odb_pack_name
EXP12-C	builtifast-import.c	813	2	Do not ignore values returned by functions: odb_pack_name
EXP05-C	builtifast-import.c	816	7	Do not cast away a const qualification
EXP12-C	builtifast-import.c	827	3	Do not ignore values returned by functions: odb_pack_name
EXP12-C	builtifast-import.c	828	3	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	builtifast-import.c	843	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtifast-import.c	868	3	Do not ignore values returned by functions: finalize_hashfile
MEM01-C	builtifast-import.c	889	3	Store a new value in pointers immediately after free()
MEM34-C	builtifast-import.c	889	3	Only free memory allocated dynamically
EXP12-C	builtifast-import.c	906	4	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	915	3	Do not ignore values returned by functions: unlink_or_warn
INT14-C	builtifast-import.c	965	14	Avoid performing bitwise and arithmetic operations on the same data
EXP11-C	builtifast-import.c	986	15	Do not apply operators expecting one type to data of an incompatible type
INT01-C	builtifast-import.c	987	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	997	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	997	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	998	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	998	19	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtifast-import.c	1006	4	Only free memory allocated dynamically
EXP11-C	builtifast-import.c	1009	16	Do not apply operators expecting one type to data of an incompatible type
INT01-C	builtifast-import.c	1010	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1029	30	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtifast-import.c	1039	18	Use bitwise operators only on unsigned operands
INT14-C	builtifast-import.c	1041	15	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	builtifast-import.c	1041	21	Use bitwise operators only on unsigned operands
INT13-C	builtifast-import.c	1041	30	Use bitwise operators only on unsigned operands
INT01-C	builtifast-import.c	1042	47	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1043	28	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	builtifast-import.c	1057	2	Store a new value in pointers immediately after free()
MEM34-C	builtifast-import.c	1057	2	Only free memory allocated dynamically
MEM01-C	builtifast-import.c	1058	2	Store a new value in pointers immediately after free()
MEM34-C	builtifast-import.c	1058	2	Only free memory allocated dynamically
DCL01-C	builtifast-import.c	1071	55	Do not reuse variable names in subscopes: checkpoint
DCL00-C	builtifast-import.c	1080	2	Const-qualify immutable objects: in_sz
DCL00-C	builtifast-import.c	1080	2	Const-qualify immutable objects: out_sz
DCL01-C	builtifast-import.c	1089	2	Do not reuse variable names in subscopes: checkpoint
INT01-C	builtifast-import.c	1094	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1094	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1095	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1095	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1113	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1113	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtifast-import.c	1117	4	Const-qualify immutable objects: cnt
INT01-C	builtifast-import.c	1117	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtifast-import.c	1118	4	Const-qualify immutable objects: n
INT01-C	builtifast-import.c	1124	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1125	8	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtifast-import.c	1131	4	Const-qualify immutable objects: n
INT01-C	builtifast-import.c	1133	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1135	16	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	builtifast-import.c	1165	14	Avoid performing bitwise and arithmetic operations on the same data
MEM01-C	builtifast-import.c	1180	2	Store a new value in pointers immediately after free()
MEM34-C	builtifast-import.c	1180	2	Only free memory allocated dynamically
MEM34-C	builtifast-import.c	1181	2	Only free memory allocated dynamically
INT01-C	builtifast-import.c	1208	50	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	1226	28	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	builtifast-import.c	1239	8	Avoid performing bitwise and arithmetic operations on the same data
EXP05-C	builtifast-import.c	1288	32	Do not cast away a const qualification
EXP05-C	builtifast-import.c	1289	32	Do not cast away a const qualification
MEM34-C	builtifast-import.c	1292	2	Only free memory allocated dynamically
EXP05-C	builtifast-import.c	1297	27	Do not cast away a const qualification
EXP05-C	builtifast-import.c	1298	27	Do not cast away a const qualification
EXP05-C	builtifast-import.c	1306	27	Do not cast away a const qualification
EXP05-C	builtifast-import.c	1307	27	Do not cast away a const qualification
INT01-C	builtifast-import.c	1325	11	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtifast-import.c	1335	39	Use bitwise operators only on unsigned operands
EXP12-C	builtifast-import.c	1370	2	Do not ignore values returned by functions: store_object
EXP12-C	builtifast-import.c	1481	3	Do not ignore values returned by functions: tree_content_set
INT07-C	builtifast-import.c	1517	16	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	builtifast-import.c	1642	3	Detect and remove code that has no effect
INT13-C	builtifast-import.c	1658	12	Use bitwise operators only on unsigned operands
INT13-C	builtifast-import.c	1672	11	Use bitwise operators only on unsigned operands
INT13-C	builtifast-import.c	1681	12	Use bitwise operators only on unsigned operands
INT13-C	builtifast-import.c	1686	11	Use bitwise operators only on unsigned operands
INT13-C	builtifast-import.c	1703	11	Use bitwise operators only on unsigned operands
INT13-C	builtifast-import.c	1709	11	Use bitwise operators only on unsigned operands
DCL00-C	builtifast-import.c	1716	3	Const-qualify immutable objects: saved_errno
INT13-C	builtifast-import.c	1718	11	Use bitwise operators only on unsigned operands
INT13-C	builtifast-import.c	1725	11	Use bitwise operators only on unsigned operands
DCL00-C	builtifast-import.c	1736	3	Const-qualify immutable objects: type
INT14-C	builtifast-import.c	1742	14	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	builtifast-import.c	1750	31	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifast-import.c	1762	3	Do not ignore values returned by functions: memset
INT07-C	builtifast-import.c	1767	8	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builtifast-import.c	1842	2	Const-qualify immutable objects: term_char
EXP12-C	builtifast-import.c	1852	3	Do not ignore values returned by functions: read_next_command
DCL00-C	builtifast-import.c	1875	3	Const-qualify immutable objects: term_len
INT01-C	builtifast-import.c	1875	37	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtifast-import.c	1886	3	Only free memory allocated dynamically
DCL00-C	builtifast-import.c	1889	3	Const-qualify immutable objects: len
DCL00-C	builtifast-import.c	1890	3	Const-qualify immutable objects: length
INT01-C	builtifast-import.c	1896	14	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtifast-import.c	1900	4	Const-qualify immutable objects: s
MSC01-C	builtifast-import.c	1972	2	Strive for logical completeness
EXP12-C	builtifast-import.c	2018	2	Do not ignore values returned by functions: read_next_command
INT01-C	builtifast-import.c	2080	13	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtifast-import.c	2085	13	Use only explicitly signed or unsigned char type for numeric values
INT01-C	builtifast-import.c	2088	54	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtifast-import.c	2089	37	Use only explicitly signed or unsigned char type for numeric values
INT01-C	builtifast-import.c	2089	9	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtifast-import.c	2104	2	Do not reuse variable names in subscopes: realpath
INT07-C	builtifast-import.c	2133	33	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtifast-import.c	2137	30	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtifast-import.c	2156	4	Do not ignore values returned by functions: tree_content_set
EXP12-C	builtifast-import.c	2192	2	Do not ignore values returned by functions: memset
EXP36-C	builtifast-import.c	2206	14	Do not convert pointers into more strictly aligned pointer types
MSC12-C	builtifast-import.c	2224	2	Detect and remove code that has no effect
EXP36-C	builtifast-import.c	2290	17	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifast-import.c	2312	3	Do not ignore values returned by functions: tree_content_remove
DCL00-C	builtifast-import.c	2347	3	Const-qualify immutable objects: expected
DCL00-C	builtifast-import.c	2349	3	Const-qualify immutable objects: type
EXP12-C	builtifast-import.c	2366	2	Do not ignore values returned by functions: tree_content_set
EXP12-C	builtifast-import.c	2380	2	Do not ignore values returned by functions: tree_content_remove
DCL01-C	builtifast-import.c	2383	65	Do not reuse variable names in subscopes: rename
EXP12-C	builtifast-import.c	2415	2	Do not ignore values returned by functions: memset
EXP12-C	builtifast-import.c	2429	2	Do not ignore values returned by functions: tree_content_set
EXP36-C	builtifast-import.c	2464	17	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtifast-import.c	2484	3	Const-qualify immutable objects: commit_mark
EXP36-C	builtifast-import.c	2485	45	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtifast-import.c	2495	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	2495	43	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtifast-import.c	2497	3	Only free memory allocated dynamically
EXP12-C	builtifast-import.c	2506	3	Do not ignore values returned by functions: read_next_command
DCL00-C	builtifast-import.c	2513	3	Const-qualify immutable objects: type
EXP12-C	builtifast-import.c	2532	2	Do not ignore values returned by functions: tree_content_set
INT01-C	builtifast-import.c	2546	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	2546	42	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtifast-import.c	2568	3	Only free memory allocated dynamically
DCL00-C	builtifast-import.c	2588	3	Const-qualify immutable objects: idnum
EXP36-C	builtifast-import.c	2589	38	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtifast-import.c	2598	5	Only free memory allocated dynamically
EXP12-C	builtifast-import.c	2615	2	Do not ignore values returned by functions: read_next_command
EXP36-C	builtifast-import.c	2647	14	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtifast-import.c	2652	4	Const-qualify immutable objects: idnum
EXP36-C	builtifast-import.c	2653	39	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtifast-import.c	2663	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	2663	44	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtifast-import.c	2665	4	Only free memory allocated dynamically
EXP12-C	builtifast-import.c	2674	3	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	2695	2	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	2700	3	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	2704	3	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	2710	3	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	2712	2	Do not ignore values returned by functions: parse_data
EXP12-C	builtifast-import.c	2713	2	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	2714	2	Do not ignore values returned by functions: parse_from
INT01-C	builtifast-import.c	2726	25	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtifast-import.c	2770	3	Only free memory allocated dynamically
MEM01-C	builtifast-import.c	2783	2	Store a new value in pointers immediately after free()
MEM34-C	builtifast-import.c	2783	2	Only free memory allocated dynamically
MEM01-C	builtifast-import.c	2784	2	Store a new value in pointers immediately after free()
MEM34-C	builtifast-import.c	2784	2	Only free memory allocated dynamically
MEM01-C	builtifast-import.c	2785	2	Store a new value in pointers immediately after free()
MEM34-C	builtifast-import.c	2785	2	Only free memory allocated dynamically
EXP36-C	builtifast-import.c	2804	20	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifast-import.c	2805	2	Do not ignore values returned by functions: memset
EXP12-C	builtifast-import.c	2812	2	Do not ignore values returned by functions: read_next_command
EXP36-C	builtifast-import.c	2827	17	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifast-import.c	2840	2	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	2848	3	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	2853	2	Do not ignore values returned by functions: parse_data
MEM01-C	builtifast-import.c	2868	2	Store a new value in pointers immediately after free()
MEM34-C	builtifast-import.c	2868	2	Only free memory allocated dynamically
INT14-C	builtifast-import.c	2871	14	Avoid performing bitwise and arithmetic operations on the same data
EXP12-C	builtifast-import.c	2893	2	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	2894	2	Do not ignore values returned by functions: parse_from
INT01-C	builtifast-import.c	2921	22	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtifast-import.c	2953	3	Only free memory allocated dynamically
MEM34-C	builtifast-import.c	2973	3	Only free memory allocated dynamically
EXP36-C	builtifast-import.c	2985	16	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifast-import.c	2989	2	Do not ignore values returned by functions: xsnprintf
INT01-C	builtifast-import.c	2990	46	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtifast-import.c	3000	17	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtifast-import.c	3023	3	Const-qualify immutable objects: type
INT14-C	builtifast-import.c	3030	15	Avoid performing bitwise and arithmetic operations on the same data
MSC01-C	builtifast-import.c	3053	2	Strive for logical completeness
INT01-C	builtifast-import.c	3055	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	3060	20	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtifast-import.c	3065	2	Only free memory allocated dynamically
DCL01-C	builtifast-import.c	3069	54	Do not reuse variable names in subscopes: object
EXP36-C	builtifast-import.c	3071	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	3072	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	3072	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	3101	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	3101	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	3111	16	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifast-import.c	3142	3	Do not ignore values returned by functions: quote_c_style
INT13-C	builtifast-import.c	3148	10	Use bitwise operators only on unsigned operands
EXP12-C	builtifast-import.c	3149	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	builtifast-import.c	3183	2	Do not ignore values returned by functions: tree_content_get
EXP12-C	builtifast-import.c	3217	2	Do not ignore values returned by functions: fwrite
EXP12-C	builtifast-import.c	3218	2	Do not ignore values returned by functions: fputc
EXP12-C	builtifast-import.c	3229	2	Do not ignore values returned by functions: read_next_command
EXP12-C	builtifast-import.c	3237	2	Do not ignore values returned by functions: memset
MSC12-C	builtifast-import.c	3241	2	Detect and remove code that has no effect
DCL01-C	builtifast-import.c	3252	45	Do not reuse variable names in subscopes: marks
DCL02-C	builtifast-import.c	3304	45	Use visually distinct identifiers: marks
DCL02-C	builtifast-import.c	3304	45	Use visually distinct identifiers: marks
DCL02-C	builtifast-import.c	3304	45	Use visually distinct identifiers: marks
DCL02-C	builtifast-import.c	3304	45	Use visually distinct identifiers: marks
DCL02-C	builtifast-import.c	3304	45	Use visually distinct identifiers: marks
DCL02-C	builtifast-import.c	3304	45	Use visually distinct identifiers: marks
DCL00-C	builtifast-import.c	3286	2	Const-qualify immutable objects: rv
DCL01-C	builtifast-import.c	3304	45	Do not reuse variable names in subscopes: marks
DCL02-C	builtifast-import.c	3304	45	Use visually distinct identifiers: marks
DCL02-C	builtifast-import.c	3304	45	Use visually distinct identifiers: marks
DCL00-C	builtifast-import.c	3311	2	Const-qualify immutable objects: n
INT07-C	builtifast-import.c	3332	5	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	builtifast-import.c	3334	2	Do not convert pointers into more strictly aligned pointer types
INT14-C	builtifast-import.c	3462	14	Avoid performing bitwise and arithmetic operations on the same data
STR11-C	builtifast-import.c	3481	1	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	builtifast-import.c	3531	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	3532	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	3533	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	3534	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifast-import.c	3555	26	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtifast-import.c	3555	50	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	3619	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	3621	19	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtifast-import.c	3633	100	Use bitwise operators only on unsigned operands
INT01-C	builtifast-import.c	3635	146	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	3635	104	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	3635	117	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	3636	112	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifast-import.c	3637	72	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	builtifetch-pack.c	9	1	Do not specify the dimension of a character array initialized with a string literal
DCL05-C	builtifetch-pack.c	14	1	Use typedefs to improve code readability
DCL01-C	builtifetch-pack.c	17	2	Do not reuse variable names in subscopes: ref
EXP36-C	builtifetch-pack.c	39	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtifetch-pack.c	46	2	Do not reuse variable names in subscopes: ref
EXP12-C	builtifetch-pack.c	64	2	Do not ignore values returned by functions: memset
EXP12-C	builtifetch-pack.c	121	4	Do not ignore values returned by functions: string_list_append
ARR30-C	builtifetch-pack.c	184	60	Do not form or use out-of-bounds pointers or array subscripts
MSC01-C	builtifetch-pack.c	226	2	Strive for logical completeness
EXP12-C	builtifetch-pack.c	228	3	Do not ignore values returned by functions: get_remote_refs
EXP12-C	builtifetch-pack.c	233	3	Do not ignore values returned by functions: get_remote_heads
DCL02-C	builtifetch-pack.c	242	3	Use visually distinct identifiers: i
DCL01-C	builtifetch-pack.c	242	3	Do not reuse variable names in subscopes: i
DCL02-C	builtifetch-pack.c	242	3	Use visually distinct identifiers: i
INT01-C	builtifetch-pack.c	246	17	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtifetch-pack.c	268	6	Use bitwise operators only on unsigned operands
DCL00-C	builtifetch.c	108	3	Const-qualify immutable objects: r
EXP12-C	builtifetch.c	248	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	builtifetch.c	249	2	Do not ignore values returned by functions: raise
DCL05-C	builtifetch.c	252	1	Use typedefs to improve code readability
DCL01-C	builtifetch.c	254	29	Do not reuse variable names in subscopes: branch
DCL01-C	builtifetch.c	261	3	Do not reuse variable names in subscopes: refspec
EXP12-C	builtifetch.c	282	3	Do not ignore values returned by functions: memset
EXP12-C	builtifetch.c	284	3	Do not ignore values returned by functions: get_fetch_map
EXP12-C	builtifetch.c	294	3	Do not ignore values returned by functions: oidset_insert
EXP11-C	builtifetch.c	313	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtifetch.c	313	7	Do not cast away a const qualification
EXP11-C	builtifetch.c	314	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtifetch.c	314	7	Do not cast away a const qualification
DCL00-C	builtifetch.c	323	2	Const-qualify immutable objects: len
DCL00-C	builtifetch.c	325	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtifetch.c	325	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifetch.c	336	32	Do not convert pointers into more strictly aligned pointer types
MSC12-C	builtifetch.c	338	2	Detect and remove code that has no effect
EXP36-C	builtifetch.c	363	32	Do not convert pointers into more strictly aligned pointer types
DCL05-C	builtifetch.c	368	1	Use typedefs to improve code readability
DCL01-C	builtifetch.c	378	2	Do not reuse variable names in subscopes: ref
EXP12-C	builtifetch.c	386	2	Do not ignore values returned by functions: for_each_ref
EXP12-C	builtifetch.c	437	3	Do not ignore values returned by functions: string_list_insert
DCL00-C	builtifetch.c	457	3	Const-qualify immutable objects: hash
MEM34-C	builtifetch.c	527	3	Only free memory allocated dynamically
DCL01-C	builtifetch.c	531	47	Do not reuse variable names in subscopes: remote
DCL01-C	builtifetch.c	534	15	Do not reuse variable names in subscopes: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
EXP12-C	builtifetch.c	555	4	Do not ignore values returned by functions: get_fetch_map
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
EXP12-C	builtifetch.c	589	4	Do not ignore values returned by functions: get_fetch_map
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL01-C	builtifetch.c	594	3	Do not reuse variable names in subscopes: branch
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
EXP12-C	builtifetch.c	601	5	Do not ignore values returned by functions: get_fetch_map
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL00-C	builtifetch.c	657	4	Const-qualify immutable objects: hash
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
EXP12-C	builtifetch.c	661	5	Do not ignore values returned by functions: for_each_ref
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL02-C	builtifetch.c	534	15	Use visually distinct identifiers: tags
DCL01-C	builtifetch.c	684	16	Do not reuse variable names in subscopes: ref
ENV30-C	builtifetch.c	689	14	Do not modify the string returned by getenv()
MEM34-C	builtifetch.c	739	2	Only free memory allocated dynamically
DCL01-C	builtifetch.c	746	51	Do not reuse variable names in subscopes: ref
EXP12-C	builtifetch.c	790	2	Do not ignore values returned by functions: git_config_get_string_tmp
DCL01-C	builtifetch.c	810	19	Do not reuse variable names in subscopes: remote
DCL01-C	builtifetch.c	843	18	Do not reuse variable names in subscopes: remote
DCL01-C	builtifetch.c	865	40	Do not reuse variable names in subscopes: error
DCL01-C	builtifetch.c	866	19	Do not reuse variable names in subscopes: remote
INT01-C	builtifetch.c	874	25	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtifetch.c	885	41	Do not reuse variable names in subscopes: ref
DCL01-C	builtifetch.c	887	20	Do not reuse variable names in subscopes: remote
DCL00-C	builtifetch.c	966	3	Const-qualify immutable objects: t_before
EXP36-C	builtifetch.c	1007	20	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtifetch.c	1008	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtifetch.c	1023	47	Do not reuse variable names in subscopes: fetch_head
DCL01-C	builtifetch.c	1039	50	Do not reuse variable names in subscopes: fetch_head
DCL01-C	builtifetch.c	1041	33	Do not reuse variable names in subscopes: fetch_head_status
EXP12-C	builtifetch.c	1080	3	Do not ignore values returned by functions: strbuf_write
DCL01-C	builtifetch.c	1085	50	Do not reuse variable names in subscopes: fetch_head
EXP12-C	builtifetch.c	1089	2	Do not ignore values returned by functions: strbuf_write
DCL01-C	builtifetch.c	1092	49	Do not reuse variable names in subscopes: fetch_head
STR11-C	builtifetch.c	1101	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtifetch.c	1105	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtifetch.c	1113	29	Do not reuse variable names in subscopes: fetch_head
DCL01-C	builtifetch.c	1152	4	Do not reuse variable names in subscopes: ref
DCL01-C	builtifetch.c	1171	5	Do not reuse variable names in subscopes: commit
INT13-C	builtifetch.c	1242	8	Use bitwise operators only on unsigned operands
MEM01-C	builtifetch.c	1244	5	Store a new value in pointers immediately after free()
MEM30-C	builtifetch.c	1244	5	Do not access freed memory
MEM34-C	builtifetch.c	1244	5	Only free memory allocated dynamically
MEM34-C	builtifetch.c	1283	2	Only free memory allocated dynamically
DCL01-C	builtifetch.c	1330	53	Do not reuse variable names in subscopes: transport
DCL01-C	builtifetch.c	1333	26	Do not reuse variable names in subscopes: fetch_head
DCL01-C	builtifetch.c	1370	2	Do not reuse variable names in subscopes: ref
EXP12-C	builtifetch.c	1402	5	Do not ignore values returned by functions: string_list_append
DCL00-C	builtifetch.c	1410	3	Const-qualify immutable objects: summary_width
MEM01-C	builtifetch.c	1429	2	Store a new value in pointers immediately after free()
MEM34-C	builtifetch.c	1429	2	Only free memory allocated dynamically
DCL01-C	builtifetch.c	1457	42	Do not reuse variable names in subscopes: transport
DCL00-C	builtifetch.c	1459	2	Const-qualify immutable objects: r
EXP36-C	builtifetch.c	1473	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifetch.c	1481	34	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtifetch.c	1484	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtifetch.c	1497	3	Do not ignore values returned by functions: for_each_glob_ref
INT01-C	builtifetch.c	1498	14	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtifetch.c	1505	59	Do not reuse variable names in subscopes: remote
DCL01-C	builtifetch.c	1505	71	Do not reuse variable names in subscopes: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL01-C	builtifetch.c	1507	2	Do not reuse variable names in subscopes: transport
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
INT01-C	builtifetch.c	1520	13	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL02-C	builtifetch.c	1505	71	Use visually distinct identifiers: deepen
DCL01-C	builtifetch.c	1544	44	Do not reuse variable names in subscopes: transport
DCL01-C	builtifetch.c	1547	24	Do not reuse variable names in subscopes: fetch_head
INT01-C	builtifetch.c	1559	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtifetch.c	1565	2	Do not ignore values returned by functions: transport_set_option
EXP12-C	builtifetch.c	1566	2	Do not ignore values returned by functions: transport_set_option
EXP12-C	builtifetch.c	1567	2	Do not ignore values returned by functions: transport_set_option
EXP12-C	builtifetch.c	1571	3	Do not ignore values returned by functions: transport_disconnect
DCL01-C	builtifetch.c	1578	39	Do not reuse variable names in subscopes: transport
DCL01-C	builtifetch.c	1586	2	Do not reuse variable names in subscopes: transport_ls_refs_options
DCL01-C	builtifetch.c	1589	2	Do not reuse variable names in subscopes: fetch_head
DCL01-C	builtifetch.c	1623	3	Do not reuse variable names in subscopes: branch
EXP12-C	builtifetch.c	1632	5	Do not ignore values returned by functions: strvec_push
MSC12-C	builtifetch.c	1727	4	Detect and remove code that has no effect
DCL01-C	builtifetch.c	1737	3	Do not reuse variable names in subscopes: branch
EXP12-C	builtifetch.c	1764	5	Do not ignore values returned by functions: skip_prefix
EXP12-C	builtifetch.c	1792	3	Do not ignore values returned by functions: ref_transaction_abort
DCL01-C	builtifetch.c	1802	52	Do not reuse variable names in subscopes: remote
EXP36-C	builtifetch.c	1804	29	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtifetch.c	1817	32	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtifetch.c	1822	4	Const-qualify immutable objects: wordlen
INT01-C	builtifetch.c	1824	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtifetch.c	1827	21	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtifetch.c	1836	2	Const-qualify immutable objects: prev_nr
INT01-C	builtifetch.c	1841	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtifetch.c	1841	15	Ensure that return values are compared against the proper type
DCL01-C	builtifetch.c	1842	3	Do not reuse variable names in subscopes: remote
EXP12-C	builtifetch.c	1845	3	Do not ignore values returned by functions: string_list_append
DCL13-C	builtifetch.c	1892	71	Declare function parameters that are pointers to values not changed by the function as const: out
EXP36-C	builtifetch.c	1895	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtifetch.c	1896	2	Do not reuse variable names in subscopes: remote
INT01-C	builtifetch.c	1898	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtifetch.c	1905	2	Do not ignore values returned by functions: strvec_push
DCL13-C	builtifetch.c	1914	49	Declare function parameters that are pointers to values not changed by the function as const: out
EXP36-C	builtifetch.c	1916	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtifetch.c	1917	2	Do not reuse variable names in subscopes: remote
EXP36-C	builtifetch.c	1927	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtifetch.c	1928	2	Do not reuse variable names in subscopes: remote
DCL00-C	builtifetch.c	1945	3	Const-qualify immutable objects: errcode
INT01-C	builtifetch.c	1954	36	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtifetch.c	1954	36	Ensure that return values are compared against the proper type
EXP12-C	builtifetch.c	1968	3	Do not ignore values returned by functions: strvec_push
INT01-C	builtifetch.c	1973	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtifetch.c	1978	4	Do not ignore values returned by functions: strvec_push
MSC12-C	builtifetch.c	1983	5	Detect and remove code that has no effect
DCL01-C	builtifetch.c	1996	59	Do not reuse variable names in subscopes: remote
DCL01-C	builtifetch.c	2033	37	Do not reuse variable names in subscopes: remote
DCL00-C	builtifetch.c	2040	2	Const-qualify immutable objects: remote_via_config
ARR30-C	builtifetch.c	2082	10	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	builtifetch.c	2082	19	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	builtifetch.c	2099	2	Do not ignore values returned by functions: atexit
EXP12-C	builtifetch.c	2100	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	builtifetch.c	2102	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	builtifetch.c	2104	2	Do not ignore values returned by functions: transport_disconnect
DCL01-C	builtifetch.c	2113	2	Do not reuse variable names in subscopes: remote
MEM30-C	builtifetch.c	2126	3	Do not access freed memory
MEM34-C	builtifetch.c	2126	3	Only free memory allocated dynamically
INT05-C	builtifetch.c	2188	15	Use strtol() or a related function to convert a string token to an integer
INT01-C	builtifetch.c	2190	28	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	builtifetch.c	2202	3	Detect and remove code that has no effect
INT01-C	builtifetch.c	2205	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtifetch.c	2205	15	Ensure that return values are compared against the proper type
MSC12-C	builtifetch.c	2218	3	Detect and remove code that has no effect
INT01-C	builtifetch.c	2219	15	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtifetch.c	2329	23	Use bitwise operators only on unsigned operands
EXP12-C	builtifetch.c	2331	3	Do not ignore values returned by functions: write_commit_graph_reachable
EXP12-C	builtifetch.c	2353	3	Do not ignore values returned by functions: run_auto_maintenance
EXP12-C	builtifmt-merge-msg.c	58	2	Do not ignore values returned by functions: memset
EXP12-C	builtifmt-merge-msg.c	67	2	Do not ignore values returned by functions: write_in_full
EXP12-C	builtifor-each-ref.c	55	2	Do not ignore values returned by functions: memset
EXP12-C	builtifor-each-ref.c	56	2	Do not ignore values returned by functions: memset
EXP12-C	builtifor-each-ref.c	62	2	Do not ignore values returned by functions: parse_options
MSC12-C	builtifor-each-ref.c	64	3	Detect and remove code that has no effect
INT13-C	builtifor-each-ref.c	67	6	Use bitwise operators only on unsigned operands
MSC12-C	builtifor-each-ref.c	68	3	Detect and remove code that has no effect
EXP12-C	builtifor-each-ref.c	80	2	Do not ignore values returned by functions: filter_refs
EXP12-C	builtifor-each-ref.c	90	3	Do not ignore values returned by functions: fwrite
EXP12-C	builtifor-each-ref.c	91	3	Do not ignore values returned by functions: putchar
EXP12-C	builtifor-each-repo.c	23	3	Do not ignore values returned by functions: strvec_push
MEM34-C	builtifor-each-repo.c	25	2	Only free memory allocated dynamically
INT01-C	builtifor-each-repo.c	58	27	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtifsck.c	79	2	Do not ignore values returned by functions: fprintf_ln
DCL13-C	builtifsck.c	85	49	Declare function parameters that are pointers to values not changed by the function as const: o
DCL01-C	builtifsck.c	87	24	Do not reuse variable names in subscopes: object_type
EXP12-C	builtifsck.c	95	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtifsck.c	101	3	Do not ignore values returned by functions: fprintf_ln
DCL13-C	builtifsck.c	114	43	Declare function parameters that are pointers to values not changed by the function as const: options
EXP36-C	builtifsck.c	116	26	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifsck.c	125	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtifsck.c	128	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtifsck.c	153	4	Do not ignore values returned by functions: printf_ln
EXP12-C	builtifsck.c	170	2	Do not ignore values returned by functions: mark_object
DCL00-C	builtifsck.c	175	2	Const-qualify immutable objects: result
DCL01-C	builtifsck.c	178	3	Do not reuse variable names in subscopes: tree
EXP11-C	builtifsck.c	178	23	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	builtifsck.c	186	2	Do not reuse variable names in subscopes: progress
INT13-C	builtifsck.c	192	10	Use bitwise operators only on unsigned operands
DCL01-C	builtifsck.c	199	59	Do not reuse variable names in subscopes: object_type
DCL13-C	builtifsck.c	200	14	Declare function parameters that are pointers to values not changed by the function as const: data
DCL13-C	builtifsck.c	200	41	Declare function parameters that are pointers to values not changed by the function as const: options
DCL00-C	builtifsck.c	223	3	Const-qualify immutable objects: type
EXP12-C	builtifsck.c	230	2	Do not ignore values returned by functions: fsck_walk
DCL13-C	builtifsck.c	237	16	Declare function parameters that are pointers to values not changed by the function as const: data
DCL13-C	builtifsck.c	244	30	Declare function parameters that are pointers to values not changed by the function as const: pack
DCL13-C	builtifsck.c	246	17	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	builtifsck.c	267	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtifsck.c	294	3	Do not ignore values returned by functions: printf_ln
MSC12-C	builtifsck.c	324	5	Detect and remove code that has no effect
MEM34-C	builtifsck.c	325	5	Only free memory allocated dynamically
MEM34-C	builtifsck.c	337	4	Only free memory allocated dynamically
EXP12-C	builtifsck.c	365	2	Do not ignore values returned by functions: traverse_reachable
EXP12-C	builtifsck.c	383	3	Do not ignore values returned by functions: for_each_loose_object
EXP12-C	builtifsck.c	384	3	Do not ignore values returned by functions: for_each_packed_object
DCL01-C	builtifsck.c	420	3	Do not reuse variable names in subscopes: commit
EXP11-C	builtifsck.c	420	27	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	builtifsck.c	428	3	Do not reuse variable names in subscopes: tag
EXP11-C	builtifsck.c	428	21	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	builtifsck.c	431	4	Do not ignore values returned by functions: printf_ln
INT13-C	builtifsck.c	460	16	Use bitwise operators only on unsigned operands
MSC12-C	builtifsck.c	482	4	Detect and remove code that has no effect
EXP36-C	builtifsck.c	511	22	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtifsck.c	512	2	Do not ignore values returned by functions: for_each_reflog_ent
DCL13-C	builtifsck.c	518	30	Declare function parameters that are pointers to values not changed by the function as const: cb_data
MSC12-C	builtifsck.c	532	3	Detect and remove code that has no effect
MSC12-C	builtifsck.c	539	3	Detect and remove code that has no effect
EXP12-C	builtifsck.c	561	2	Do not ignore values returned by functions: for_each_rawref
DCL01-C	builtifsck.c	566	3	Do not reuse variable names in subscopes: ref
EXP12-C	builtifsck.c	569	3	Do not ignore values returned by functions: fsck_head_link
EXP12-C	builtifsck.c	593	3	Do not ignore values returned by functions: fprintf_ln
DCL01-C	builtifsck.c	600	2	Do not reuse variable names in subscopes: progress
EXP36-C	builtifsck.c	606	38	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtifsck.c	635	3	Only free memory allocated dynamically
MSC12-C	builtifsck.c	647	3	Detect and remove code that has no effect
MEM34-C	builtifsck.c	650	4	Only free memory allocated dynamically
INT13-C	builtifsck.c	654	16	Use bitwise operators only on unsigned operands
MEM34-C	builtifsck.c	660	3	Only free memory allocated dynamically
DCL01-C	builtifsck.c	664	35	Do not reuse variable names in subscopes: __xpg_basename
DCL13-C	builtifsck.c	664	69	Declare function parameters that are pointers to values not changed by the function as const: data
EXP36-C	builtifsck.c	673	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtifsck.c	674	2	Do not reuse variable names in subscopes: progress
DCL01-C	builtifsck.c	681	2	Do not reuse variable names in subscopes: progress
EXP12-C	builtifsck.c	693	2	Do not ignore values returned by functions: for_each_loose_file_in_objdir
EXP12-C	builtifsck.c	728	3	Do not ignore values returned by functions: fprintf_ln
MSC12-C	builtifsck.c	746	4	Detect and remove code that has no effect
INT13-C	builtifsck.c	755	8	Use bitwise operators only on unsigned operands
INT13-C	builtifsck.c	758	7	Use bitwise operators only on unsigned operands
EXP36-C	builtifsck.c	772	38	Do not convert pointers into more strictly aligned pointer types
MSC12-C	builtifsck.c	785	5	Detect and remove code that has no effect
DCL13-C	builtifsck.c	807	18	Declare function parameters that are pointers to values not changed by the function as const: data
DCL13-C	builtifsck.c	814	25	Declare function parameters that are pointers to values not changed by the function as const: pack
DCL13-C	builtifsck.c	816	12	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	builtifsck.c	885	3	Do not ignore values returned by functions: for_each_loose_object
EXP12-C	builtifsck.c	886	3	Do not ignore values returned by functions: for_each_packed_object
DCL01-C	builtifsck.c	895	4	Do not reuse variable names in subscopes: progress
MSC12-C	builtifsck.c	933	5	Detect and remove code that has no effect
MSC12-C	builtifsck.c	944	3	Detect and remove code that has no effect
EXP12-C	builtifsck.c	961	3	Do not ignore values returned by functions: repo_read_index
DCL01-C	builtifsck.c	966	4	Do not reuse variable names in subscopes: blob
EXP12-C	builtifsck.c	984	3	Do not ignore values returned by functions: fsck_resolve_undo
INT01-C	builtigc.c	72	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtigc.c	73	3	Do not ignore values returned by functions: unlink_or_warn
DCL00-C	builtigc.c	93	3	Const-qualify immutable objects: saved_errno
EXP12-C	builtigc.c	98	3	Do not ignore values returned by functions: commit_lock_file
EXP12-C	builtigc.c	102	3	Do not ignore values returned by functions: commit_lock_file
EXP12-C	builtigc.c	105	3	Do not ignore values returned by functions: unlink
EXP12-C	builtigc.c	119	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	builtigc.c	120	2	Do not ignore values returned by functions: raise
EXP12-C	builtigc.c	151	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	builtigc.c	152	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	builtigc.c	153	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	builtigc.c	154	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	builtigc.c	155	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	builtigc.c	156	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	builtigc.c	157	2	Do not ignore values returned by functions: git_config_get_expiry
EXP12-C	builtigc.c	158	2	Do not ignore values returned by functions: git_config_get_expiry
EXP12-C	builtigc.c	159	2	Do not ignore values returned by functions: git_config_get_expiry
EXP12-C	builtigc.c	161	2	Do not ignore values returned by functions: git_config_get_ulong
EXP12-C	builtigc.c	162	2	Do not ignore values returned by functions: git_config_get_ulong
DCL13-C	builtigc.c	168	81	Declare function parameters that are pointers to values not changed by the function as const: opts
INT01-C	builtigc.c	190	52	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	198	47	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtigc.c	198	47	Ensure that return values are compared against the proper type
EXP12-C	builtigc.c	206	2	Do not ignore values returned by functions: closedir
DCL00-C	builtigc.c	287	2	Const-qualify immutable objects: nr_objects
INT01-C	builtigc.c	299	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	299	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	301	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	301	37	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	306	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	306	30	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	311	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	311	30	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	313	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	313	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	315	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	322	7	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	builtigc.c	327	63	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	builtigc.c	329	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtigc.c	338	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	342	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	353	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	375	4	Do not ignore values returned by functions: find_base_packs
INT01-C	builtigc.c	376	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtigc.c	379	5	Do not ignore values returned by functions: find_base_packs
EXP12-C	builtigc.c	439	3	Do not ignore values returned by functions: memset
MSC05-C	builtigc.c	452	29	Do not manipulate time_t typed values directly
MSC05-C	builtigc.c	452	15	Do not manipulate time_t typed values directly
FIO30-C	builtigc.c	453	4	Exclude user input from format strings
MEM34-C	builtigc.c	462	4	Only free memory allocated dynamically
EXP12-C	builtigc.c	469	2	Do not ignore values returned by functions: write_in_full
EXP12-C	builtigc.c	471	2	Do not ignore values returned by functions: commit_lock_file
MEM34-C	builtigc.c	473	2	Only free memory allocated dynamically
MEM34-C	builtigc.c	522	2	Only free memory allocated dynamically
EXP05-C	builtigc.c	567	28	Do not cast away a const qualification
EXP12-C	builtigc.c	610	3	Do not ignore values returned by functions: strvec_push
DCL00-C	builtigc.c	633	4	Const-qualify immutable objects: ret
EXP12-C	builtigc.c	660	4	Do not ignore values returned by functions: find_base_packs
EXP12-C	builtigc.c	676	3	Do not ignore values returned by functions: hold_lock_file_for_update
EXP12-C	builtigc.c	679	3	Do not ignore values returned by functions: dup2
EXP12-C	builtigc.c	681	3	Do not ignore values returned by functions: atexit
EXP12-C	builtigc.c	699	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	715	3	Do not ignore values returned by functions: strvec_push
INT01-C	builtigc.c	729	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtigc.c	777	40	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtigc.c	813	2	Do not reuse variable names in subscopes: commit
EXP12-C	builtigc.c	832	2	Do not ignore values returned by functions: commit_list_append
EXP12-C	builtigc.c	853	4	Do not ignore values returned by functions: commit_list_append
EXP12-C	builtigc.c	868	2	Do not ignore values returned by functions: git_config_get_int
MSC12-C	builtigc.c	904	3	Detect and remove code that has no effect
DCL01-C	builtigc.c	911	40	Do not reuse variable names in subscopes: remote
EXP36-C	builtigc.c	913	38	Do not convert pointers into more strictly aligned pointer types
MSC12-C	builtigc.c	934	3	Detect and remove code that has no effect
EXP12-C	builtigc.c	946	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	963	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	993	2	Do not ignore values returned by functions: git_config_get_int
DCL13-C	builtigc.c	1008	11	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	builtigc.c	1042	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	1045	2	Do not ignore values returned by functions: strvec_pushf
MSC12-C	builtigc.c	1050	3	Detect and remove code that has no effect
EXP12-C	builtigc.c	1058	2	Do not ignore values returned by functions: for_each_loose_file_in_objdir
MSC12-C	builtigc.c	1067	3	Detect and remove code that has no effect
EXP12-C	builtigc.c	1089	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	builtigc.c	1189	2	Do not ignore values returned by functions: strvec_pushf
EXP36-C	builtigc.c	1283	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtigc.c	1284	37	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtigc.c	1308	3	Only free memory allocated dynamically
MEM01-C	builtigc.c	1311	2	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	1311	2	Only free memory allocated dynamically
MSC12-C	builtigc.c	1336	4	Detect and remove code that has no effect
MEM01-C	builtigc.c	1394	4	Store a new value in pointers immediately after free()
MEM30-C	builtigc.c	1394	4	Do not access freed memory
MEM34-C	builtigc.c	1394	4	Only free memory allocated dynamically
MSC12-C	builtigc.c	1418	3	Detect and remove code that has no effect
MSC12-C	builtigc.c	1423	3	Detect and remove code that has no effect
EXP12-C	builtigc.c	1449	2	Do not ignore values returned by functions: memset
EXP12-C	builtigc.c	1478	2	Do not ignore values returned by functions: strbuf_realpath
MEM01-C	builtigc.c	1512	3	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	1512	3	Only free memory allocated dynamically
MEM01-C	builtigc.c	1539	3	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	1539	3	Only free memory allocated dynamically
MEM01-C	builtigc.c	1540	3	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	1540	3	Only free memory allocated dynamically
MEM34-C	builtigc.c	1547	2	Only free memory allocated dynamically
EXP12-C	builtigc.c	1582	3	Do not ignore values returned by functions: git_configset_add_file
INT13-C	builtigc.c	1607	31	Use bitwise operators only on unsigned operands
MEM01-C	builtigc.c	1608	3	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	1608	3	Only free memory allocated dynamically
MEM01-C	builtigc.c	1609	3	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	1609	3	Only free memory allocated dynamically
MEM34-C	builtigc.c	1620	2	Only free memory allocated dynamically
ENV30-C	builtigc.c	1679	34	Do not modify the string returned by getenv()
EXP12-C	builtigc.c	1689	2	Do not ignore values returned by functions: string_list_split_in_place
MEM34-C	builtigc.c	1707	2	Only free memory allocated dynamically
EXP12-C	builtigc.c	1758	2	Do not ignore values returned by functions: get_schedule_cmd
MEM34-C	builtigc.c	1771	2	Only free memory allocated dynamically
DCL00-C	builtigc.c	1780	2	Const-qualify immutable objects: result
EXP12-C	builtigc.c	1781	2	Do not ignore values returned by functions: unlink
MEM01-C	builtigc.c	1782	2	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	1782	2	Only free memory allocated dynamically
MEM34-C	builtigc.c	1783	2	Only free memory allocated dynamically
EXP12-C	builtigc.c	1824	2	Do not ignore values returned by functions: get_schedule_cmd
INT01-C	builtigc.c	1894	41	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigc.c	1895	53	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtigc.c	1905	3	Do not ignore values returned by functions: launchctl_boot_plist
MEM01-C	builtigc.c	1910	2	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	1910	2	Only free memory allocated dynamically
MEM01-C	builtigc.c	1911	2	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	1911	2	Only free memory allocated dynamically
EXP12-C	builtigc.c	1962	2	Do not ignore values returned by functions: get_schedule_cmd
MEM34-C	builtigc.c	1965	2	Only free memory allocated dynamically
EXP12-C	builtigc.c	1988	2	Do not ignore values returned by functions: get_schedule_cmd
EXP12-C	builtigc.c	2080	2	Do not ignore values returned by functions: close_tempfile_gently
MEM34-C	builtigc.c	2090	2	Only free memory allocated dynamically
EXP12-C	builtigc.c	2117	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	2126	2	Do not ignore values returned by functions: finish_command
EXP12-C	builtigc.c	2163	2	Do not ignore values returned by functions: get_schedule_cmd
EXP12-C	builtigc.c	2165	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	2174	2	Do not ignore values returned by functions: finish_command
FIO07-C	builtigc.c	2192	2	Prefer fseek() to rewind()
FIO30-C	builtigc.c	2218	3	Exclude user input from format strings
FIO30-C	builtigc.c	2219	3	Exclude user input from format strings
FIO30-C	builtigc.c	2220	3	Exclude user input from format strings
EXP12-C	builtigc.c	2229	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtigc.c	2298	2	Do not ignore values returned by functions: get_schedule_cmd
EXP12-C	builtigc.c	2302	2	Do not ignore values returned by functions: strvec_pushf
MEM34-C	builtigc.c	2325	2	Only free memory allocated dynamically
MEM34-C	builtigc.c	2331	2	Only free memory allocated dynamically
MSC12-C	builtigc.c	2351	3	Detect and remove code that has no effect
MSC12-C	builtigc.c	2372	3	Detect and remove code that has no effect
MSC12-C	builtigc.c	2377	3	Detect and remove code that has no effect
MEM34-C	builtigc.c	2380	2	Only free memory allocated dynamically
MSC12-C	builtigc.c	2407	3	Detect and remove code that has no effect
MSC12-C	builtigc.c	2412	3	Detect and remove code that has no effect
MEM34-C	builtigc.c	2415	2	Only free memory allocated dynamically
MEM01-C	builtigc.c	2419	2	Store a new value in pointers immediately after free()
MEM34-C	builtigc.c	2419	2	Only free memory allocated dynamically
EXP12-C	builtigc.c	2420	2	Do not ignore values returned by functions: systemd_timer_delete_unit_templates
DCL00-C	builtigc.c	2428	2	Const-qualify immutable objects: ret
DCL01-C	builtigc.c	2503	2	Do not reuse variable names in subscopes: scheduler
EXP36-C	builtigc.c	2503	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtigc.c	2514	2	Do not reuse variable names in subscopes: scheduler
DCL01-C	builtigc.c	2517	56	Do not reuse variable names in subscopes: scheduler
DCL01-C	builtigc.c	2541	47	Do not reuse variable names in subscopes: scheduler
ARR30-C	builtigc.c	2548	19	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	builtigc.c	2550	19	Do not form or use out-of-bounds pointers or array subscripts
MEM34-C	builtigc.c	2562	3	Only free memory allocated dynamically
INT01-C	builtigc.c	2566	18	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtigc.c	2580	2	Only free memory allocated dynamically
INT01-C	builtigc.c	2609	27	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	builtiget-tar-commit-id.c	10	1	Do not specify the dimension of a character array initialized with a string literal
EXP11-C	builtiget-tar-commit-id.c	20	32	Do not apply operators expecting one type to data of an incompatible type
INT01-C	builtigrep.c	105	24	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtigrep.c	106	3	Do not ignore values returned by functions: pthread_cond_wait
INT07-C	builtigrep.c	110	22	Use only explicitly signed or unsigned char type for numeric values
INT01-C	builtigrep.c	112	30	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtigrep.c	114	2	Do not ignore values returned by functions: pthread_cond_signal
EXP12-C	builtigrep.c	124	3	Do not ignore values returned by functions: pthread_cond_wait
ARR30-C	builtigrep.c	130	14	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	builtigrep.c	131	35	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtigrep.c	142	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtigrep.c	144	29	Use only explicitly signed or unsigned char type for numeric values
INT01-C	builtigrep.c	145	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigrep.c	179	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtigrep.c	191	25	Do not convert pointers into more strictly aligned pointer types
INT13-C	builtigrep.c	199	7	Use bitwise operators only on unsigned operands
MEM34-C	builtigrep.c	204	2	Only free memory allocated dynamically
INT36-C	builtigrep.c	206	9	Take care when converting from pointer to integer or integer to pointer
EXP36-C	builtigrep.c	211	27	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtigrep.c	219	2	Do not ignore values returned by functions: pthread_mutex_init
EXP12-C	builtigrep.c	220	2	Do not ignore values returned by functions: pthread_mutex_init
EXP12-C	builtigrep.c	221	2	Do not ignore values returned by functions: pthread_cond_init
EXP12-C	builtigrep.c	222	2	Do not ignore values returned by functions: pthread_cond_init
EXP12-C	builtigrep.c	223	2	Do not ignore values returned by functions: pthread_cond_init
INT01-C	builtigrep.c	227	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtigrep.c	231	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtigrep.c	263	2	Do not ignore values returned by functions: pthread_cond_broadcast
EXP12-C	builtigrep.c	268	3	Do not ignore values returned by functions: pthread_join
INT13-C	builtigrep.c	269	7	Use bitwise operators only on unsigned operands
MEM01-C	builtigrep.c	272	2	Store a new value in pointers immediately after free()
EXP12-C	builtigrep.c	274	2	Do not ignore values returned by functions: pthread_mutex_destroy
EXP12-C	builtigrep.c	275	2	Do not ignore values returned by functions: pthread_mutex_destroy
EXP12-C	builtigrep.c	276	2	Do not ignore values returned by functions: pthread_cond_destroy
EXP12-C	builtigrep.c	277	2	Do not ignore values returned by functions: pthread_cond_destroy
EXP12-C	builtigrep.c	278	2	Do not ignore values returned by functions: pthread_cond_destroy
EXP36-C	builtigrep.c	401	37	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtigrep.c	403	10	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtigrep.c	403	10	Ensure that return values are compared against the proper type
EXP05-C	builtigrep.c	403	19	Do not cast away a const qualification
EXP12-C	builtigrep.c	405	2	Do not ignore values returned by functions: string_list_append_nodup
EXP36-C	builtigrep.c	410	37	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtigrep.c	414	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtigrep.c	415	3	Do not ignore values returned by functions: strvec_push
DCL01-C	builtigrep.c	431	29	Do not reuse variable names in subscopes: pathspec
EXP36-C	builtigrep.c	443	19	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtigrep.c	445	3	Only free memory allocated dynamically
INT01-C	builtigrep.c	448	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigrep.c	448	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigrep.c	448	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigrep.c	448	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigrep.c	448	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigrep.c	448	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigrep.c	448	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigrep.c	448	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtigrep.c	448	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtigrep.c	448	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtigrep.c	503	3	Do not reuse variable names in subscopes: object_type
DCL01-C	builtigrep.c	504	3	Do not reuse variable names in subscopes: tree
MEM34-C	builtigrep.c	525	3	Only free memory allocated dynamically
DCL01-C	builtigrep.c	534	32	Do not reuse variable names in subscopes: pathspec
DCL01-C	builtigrep.c	559	4	Do not reuse variable names in subscopes: tree
INT13-C	builtigrep.c	566	8	Use bitwise operators only on unsigned operands
MEM34-C	builtigrep.c	569	4	Only free memory allocated dynamically
INT13-C	builtigrep.c	582	9	Use bitwise operators only on unsigned operands
INT13-C	builtigrep.c	585	9	Use bitwise operators only on unsigned operands
INT13-C	builtigrep.c	589	8	Use bitwise operators only on unsigned operands
DCL01-C	builtigrep.c	610	67	Do not reuse variable names in subscopes: pathspec
DCL01-C	builtigrep.c	611	26	Do not reuse variable names in subscopes: tree
DCL00-C	builtigrep.c	618	2	Const-qualify immutable objects: old_baselen
DCL00-C	builtigrep.c	627	3	Const-qualify immutable objects: te_len
INT13-C	builtigrep.c	645	8	Use bitwise operators only on unsigned operands
INT14-C	builtigrep.c	645	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	builtigrep.c	660	8	Use bitwise operators only on unsigned operands
MEM34-C	builtigrep.c	662	4	Only free memory allocated dynamically
INT13-C	builtigrep.c	664	8	Use bitwise operators only on unsigned operands
INT14-C	builtigrep.c	664	8	Avoid performing bitwise and arithmetic operations on the same data
DCL01-C	builtigrep.c	679	69	Do not reuse variable names in subscopes: pathspec
DCL01-C	builtigrep.c	685	3	Do not reuse variable names in subscopes: tree
MEM34-C	builtigrep.c	707	3	Only free memory allocated dynamically
DCL01-C	builtigrep.c	713	70	Do not reuse variable names in subscopes: pathspec
EXP12-C	builtigrep.c	733	5	Do not ignore values returned by functions: oid_to_hex_r
DCL01-C	builtigrep.c	756	72	Do not reuse variable names in subscopes: pathspec
EXP12-C	builtigrep.c	767	2	Do not ignore values returned by functions: fill_directory
INT13-C	builtigrep.c	769	7	Use bitwise operators only on unsigned operands
DCL01-C	builtigrep.c	780	2	Do not reuse variable names in subscopes: grep_opt
EXP36-C	builtigrep.c	780	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtigrep.c	799	2	Do not reuse variable names in subscopes: grep_opt
EXP36-C	builtigrep.c	799	33	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtigrep.c	813	14	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtigrep.c	813	14	Ensure that return values are compared against the proper type
DCL01-C	builtigrep.c	827	2	Do not reuse variable names in subscopes: grep_opt
EXP36-C	builtigrep.c	827	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtigrep.c	836	2	Do not reuse variable names in subscopes: grep_opt
EXP36-C	builtigrep.c	836	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtigrep.c	845	2	Do not reuse variable names in subscopes: grep_opt
EXP36-C	builtigrep.c	845	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtigrep.c	854	2	Do not reuse variable names in subscopes: grep_opt
EXP36-C	builtigrep.c	854	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtigrep.c	864	2	Do not reuse variable names in subscopes: grep_opt
EXP36-C	builtigrep.c	864	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtigrep.c	879	2	Do not reuse variable names in subscopes: pathspec
EXP05-C	builtigrep.c	996	10	Do not cast away a const qualification
EXP12-C	builtigrep.c	1030	3	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	builtigrep.c	1067	3	Do not ignore values returned by functions: string_list_append
DCL01-C	builtigrep.c	1098	3	Do not reuse variable names in subscopes: object
INT13-C	builtigrep.c	1137	30	Use bitwise operators only on unsigned operands
DCL00-C	builtigrep.c	1200	3	Const-qualify immutable objects: len
EXP12-C	builtigrep.c	1213	4	Do not ignore values returned by functions: string_list_append_nodup
DCL00-C	builtigrep.c	1226	3	Const-qualify immutable objects: use_exclude
INT13-C	builtigrep.c	1243	7	Use bitwise operators only on unsigned operands
MSC12-C	builtihash-object.c	142	3	Detect and remove code that has no effect
MEM34-C	builtihash-object.c	157	3	Only free memory allocated dynamically
MEM34-C	builtihash-object.c	163	2	Only free memory allocated dynamically
INT01-C	builtihelp.c	154	16	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	builtihelp.c	160	3	Strive for logical completeness
EXP12-C	builtihelp.c	162	4	Do not ignore values returned by functions: puts
EXP12-C	builtihelp.c	174	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builtihelp.c	188	3	Do not ignore values returned by functions: string_list_append
EXP12-C	builtihelp.c	195	3	Do not ignore values returned by functions: puts
EXP12-C	builtihelp.c	239	2	Do not ignore values returned by functions: strbuf_read
EXP12-C	builtihelp.c	246	2	Do not ignore values returned by functions: finish_command
INT05-C	builtihelp.c	254	12	Use strtol() or a related function to convert a string token to an integer
EXP12-C	builtihelp.c	275	3	Do not ignore values returned by functions: execlp
EXP05-C	builtihelp.c	293	24	Do not cast away a const qualification
EXP12-C	builtihelp.c	297	3	Do not ignore values returned by functions: execlp
EXP12-C	builtihelp.c	307	2	Do not ignore values returned by functions: execlp
EXP12-C	builtihelp.c	315	2	Do not ignore values returned by functions: execl
DCL00-C	builtihelp.c	326	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtihelp.c	326	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtihelp.c	341	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtihelp.c	341	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtihelp.c	464	2	Store a new value in pointers immediately after free()
MEM34-C	builtihelp.c	464	2	Only free memory allocated dynamically
EXP12-C	builtihelp.c	465	2	Do not ignore values returned by functions: setenv
EXP12-C	builtihelp.c	504	2	Do not ignore values returned by functions: setenv
EXP12-C	builtihelp.c	505	2	Do not ignore values returned by functions: execlp
MEM34-C	builtihelp.c	529	2	Only free memory allocated dynamically
EXP12-C	builtihelp.c	534	2	Do not ignore values returned by functions: execl_git_cmd
EXP12-C	builtihelp.c	567	4	Do not ignore values returned by functions: printf_ln
MEM01-C	builtihelp.c	568	4	Store a new value in pointers immediately after free()
MEM30-C	builtihelp.c	568	4	Do not access freed memory
MEM34-C	builtihelp.c	568	4	Only free memory allocated dynamically
EXP12-C	builtihelp.c	578	3	Do not ignore values returned by functions: fprintf_ln
MEM01-C	builtihelp.c	583	3	Store a new value in pointers immediately after free()
MEM34-C	builtihelp.c	583	3	Only free memory allocated dynamically
MSC01-C	builtihelp.c	646	2	Strive for logical completeness
EXP12-C	builtihelp.c	697	2	Do not ignore values returned by functions: setup_git_directory_gently
MSC01-C	builtihelp.c	708	2	Strive for logical completeness
EXP12-C	builtihook.c	52	3	Do not ignore values returned by functions: strvec_push
STR11-C	builtiindex-pack.c	19	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builtiindex-pack.c	183	2	Do not ignore values returned by functions: init_recursive_mutex
EXP12-C	builtiindex-pack.c	184	2	Do not ignore values returned by functions: pthread_mutex_init
EXP12-C	builtiindex-pack.c	185	2	Do not ignore values returned by functions: pthread_mutex_init
EXP12-C	builtiindex-pack.c	188	2	Do not ignore values returned by functions: pthread_key_create
EXP36-C	builtiindex-pack.c	189	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiindex-pack.c	203	2	Do not ignore values returned by functions: pthread_mutex_destroy
EXP12-C	builtiindex-pack.c	204	2	Do not ignore values returned by functions: pthread_mutex_destroy
EXP12-C	builtiindex-pack.c	205	2	Do not ignore values returned by functions: pthread_mutex_destroy
EXP12-C	builtiindex-pack.c	210	2	Do not ignore values returned by functions: pthread_key_delete
MEM01-C	builtiindex-pack.c	211	2	Store a new value in pointers immediately after free()
DCL13-C	builtiindex-pack.c	215	14	Declare function parameters that are pointers to values not changed by the function as const: data
DCL13-C	builtiindex-pack.c	215	41	Declare function parameters that are pointers to values not changed by the function as const: options
DCL00-C	builtiindex-pack.c	239	3	Const-qualify immutable objects: type
INT01-C	builtiindex-pack.c	293	10	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtiindex-pack.c	300	3	Const-qualify immutable objects: ret
INT01-C	builtiindex-pack.c	301	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiindex-pack.c	323	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiindex-pack.c	323	6	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtiindex-pack.c	358	32	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtiindex-pack.c	374	2	Const-qualify immutable objects: params
EXP12-C	builtiindex-pack.c	377	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	builtiindex-pack.c	379	2	Do not ignore values returned by functions: __builtin_va_end
EXP36-C	builtiindex-pack.c	388	30	Do not convert pointers into more strictly aligned pointer types
EXP06-C	builtiindex-pack.c	389	3	Operands to the sizeof operator should not contain side effects
INT01-C	builtiindex-pack.c	405	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	builtiindex-pack.c	409	47	Declare function parameters that are pointers to values not changed by the function as const: retain
EXP11-C	builtiindex-pack.c	417	25	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	builtiindex-pack.c	428	25	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	builtiindex-pack.c	466	2	Do not ignore values returned by functions: memset
INT01-C	builtiindex-pack.c	481	21	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	builtiindex-pack.c	516	8	Avoid performing bitwise and arithmetic operations on the same data
INT34-C	builtiindex-pack.c	516	22	Do not shift a negative number of bits or more bits than exist in the operand
INT13-C	builtiindex-pack.c	533	24	Use bitwise operators only on unsigned operands
INT01-C	builtiindex-pack.c	533	24	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	builtiindex-pack.c	538	16	Avoid performing bitwise and arithmetic operations on the same data
DCL05-C	builtiindex-pack.c	559	1	Use typedefs to improve code readability
EXP12-C	builtiindex-pack.c	572	2	Do not ignore values returned by functions: memset
MEM01-C	builtiindex-pack.c	597	6	Store a new value in pointers immediately after free()
MEM34-C	builtiindex-pack.c	597	6	Only free memory allocated dynamically
MEM34-C	builtiindex-pack.c	598	6	Only free memory allocated dynamically
MEM01-C	builtiindex-pack.c	612	2	Store a new value in pointers immediately after free()
MEM34-C	builtiindex-pack.c	612	2	Only free memory allocated dynamically
MEM34-C	builtiindex-pack.c	614	3	Only free memory allocated dynamically
DCL00-C	builtiindex-pack.c	628	2	Const-qualify immutable objects: cmp
INT32-C	builtiindex-pack.c	656	9	Ensure that operations on signed integers do not result in overflow
DCL00-C	builtiindex-pack.c	664	2	Const-qualify immutable objects: end
DCL00-C	builtiindex-pack.c	684	2	Const-qualify immutable objects: cmp
INT32-C	builtiindex-pack.c	710	9	Ensure that operations on signed integers do not result in overflow
DCL00-C	builtiindex-pack.c	718	2	Const-qualify immutable objects: end
EXP36-C	builtiindex-pack.c	743	30	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtiindex-pack.c	752	3	Const-qualify immutable objects: len
EXP12-C	builtiindex-pack.c	777	2	Do not ignore values returned by functions: memset
EXP12-C	builtiindex-pack.c	786	2	Do not ignore values returned by functions: unpack_data
EXP12-C	builtiindex-pack.c	787	2	Do not ignore values returned by functions: close_istream
MSC12-C	builtiindex-pack.c	799	2	Detect and remove code that has no effect
EXP06-C	builtiindex-pack.c	799	2	Operands to the sizeof operator should not contain side effects
MEM34-C	builtiindex-pack.c	833	3	Only free memory allocated dynamically
DCL01-C	builtiindex-pack.c	839	4	Do not reuse variable names in subscopes: blob
EXP05-C	builtiindex-pack.c	845	35	Do not cast away a const qualification
EXP05-C	builtiindex-pack.c	850	16	Do not cast away a const qualification
MSC12-C	builtiindex-pack.c	852	4	Detect and remove code that has no effect
EXP06-C	builtiindex-pack.c	852	4	Operands to the sizeof operator should not contain side effects
EXP11-C	builtiindex-pack.c	870	25	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	builtiindex-pack.c	875	5	Do not reuse variable names in subscopes: commit
EXP11-C	builtiindex-pack.c	875	29	Do not apply operators expecting one type to data of an incompatible type
MEM34-C	builtiindex-pack.c	884	2	Only free memory allocated dynamically
EXP36-C	builtiindex-pack.c	906	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtiindex-pack.c	913	20	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	builtiindex-pack.c	926	4	Store a new value in pointers immediately after free()
MEM34-C	builtiindex-pack.c	926	4	Only free memory allocated dynamically
INT01-C	builtiindex-pack.c	929	20	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtiindex-pack.c	932	3	Only free memory allocated dynamically
EXP36-C	builtiindex-pack.c	940	34	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtiindex-pack.c	960	3	Const-qualify immutable objects: i
DCL00-C	builtiindex-pack.c	961	3	Const-qualify immutable objects: j
MSC12-C	builtiindex-pack.c	970	2	Detect and remove code that has no effect
MEM01-C	builtiindex-pack.c	973	2	Store a new value in pointers immediately after free()
MEM34-C	builtiindex-pack.c	973	2	Only free memory allocated dynamically
EXP36-C	builtiindex-pack.c	994	42	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiindex-pack.c	995	42	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiindex-pack.c	1004	42	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiindex-pack.c	1005	42	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiindex-pack.c	1013	19	Do not convert pointers into more strictly aligned pointer types
EXP11-C	builtiindex-pack.c	1041	13	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	builtiindex-pack.c	1045	5	Const-qualify immutable objects: offset
MSC12-C	builtiindex-pack.c	1055	5	Detect and remove code that has no effect
EXP12-C	builtiindex-pack.c	1080	4	Do not ignore values returned by functions: get_base_data
INT01-C	builtiindex-pack.c	1113	20	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtiindex-pack.c	1134	5	Only free memory allocated dynamically
MEM34-C	builtiindex-pack.c	1138	4	Only free memory allocated dynamically
EXP36-C	builtiindex-pack.c	1174	4	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtiindex-pack.c	1185	3	Store a new value in pointers immediately after free()
MEM34-C	builtiindex-pack.c	1185	3	Only free memory allocated dynamically
INT01-C	builtiindex-pack.c	1242	44	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtiindex-pack.c	1246	4	Const-qualify immutable objects: ret
EXP12-C	builtiindex-pack.c	1253	4	Do not ignore values returned by functions: pthread_join
EXP12-C	builtiindex-pack.c	1257	2	Do not ignore values returned by functions: threaded_second_pass
DCL01-C	builtiindex-pack.c	1266	58	Do not reuse variable names in subscopes: curr_pack
DCL02-C	builtiindex-pack.c	1266	58	Use visually distinct identifiers: curr_pack
DCL02-C	builtiindex-pack.c	1266	58	Use visually distinct identifiers: curr_pack
DCL02-C	builtiindex-pack.c	1266	58	Use visually distinct identifiers: curr_pack
DCL02-C	builtiindex-pack.c	1266	58	Use visually distinct identifiers: curr_pack
DCL02-C	builtiindex-pack.c	1266	58	Use visually distinct identifiers: curr_pack
DCL02-C	builtiindex-pack.c	1266	58	Use visually distinct identifiers: curr_pack
DCL00-C	builtiindex-pack.c	1279	3	Const-qualify immutable objects: nr_unresolved
DCL00-C	builtiindex-pack.c	1280	3	Const-qualify immutable objects: nr_objects_initial
DCL02-C	builtiindex-pack.c	1266	58	Use visually distinct identifiers: curr_pack
EXP36-C	builtiindex-pack.c	1283	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiindex-pack.c	1284	3	Do not ignore values returned by functions: memset
INT01-C	builtiindex-pack.c	1285	24	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiindex-pack.c	1294	3	Do not ignore values returned by functions: finalize_hashfile
INT01-C	builtiindex-pack.c	1298	32	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtiindex-pack.c	1266	58	Use visually distinct identifiers: curr_pack
DCL02-C	builtiindex-pack.c	1266	58	Use visually distinct identifiers: curr_pack
INT01-C	builtiindex-pack.c	1322	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiindex-pack.c	1324	39	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	builtiindex-pack.c	1345	15	Avoid performing bitwise and arithmetic operations on the same data
EXP05-C	builtiindex-pack.c	1366	31	Do not cast away a const qualification
EXP05-C	builtiindex-pack.c	1367	31	Do not cast away a const qualification
EXP36-C	builtiindex-pack.c	1386	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiindex-pack.c	1430	3	Do not ignore values returned by functions: append_obj_to_pack
MEM01-C	builtiindex-pack.c	1431	3	Store a new value in pointers immediately after free()
MEM34-C	builtiindex-pack.c	1431	3	Only free memory allocated dynamically
EXP12-C	builtiindex-pack.c	1432	3	Do not ignore values returned by functions: threaded_second_pass
MEM34-C	builtiindex-pack.c	1436	2	Only free memory allocated dynamically
INT01-C	builtiindex-pack.c	1444	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtiindex-pack.c	1459	2	Const-qualify immutable objects: msg_len
EXP12-C	builtiindex-pack.c	1497	3	Do not ignore values returned by functions: chmod
EXP36-C	builtiindex-pack.c	1573	33	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtiindex-pack.c	1603	2	Const-qualify immutable objects: a
EXP05-C	builtiindex-pack.c	1603	17	Do not cast away a const qualification
DCL00-C	builtiindex-pack.c	1604	2	Const-qualify immutable objects: b
EXP05-C	builtiindex-pack.c	1604	17	Do not cast away a const qualification
EXP05-C	builtiindex-pack.c	1616	11	Do not cast away a const qualification
EXP36-C	builtiindex-pack.c	1616	61	Do not convert pointers into more strictly aligned pointer types
EXP05-C	builtiindex-pack.c	1616	30	Do not cast away a const qualification
EXP36-C	builtiindex-pack.c	1636	3	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtiindex-pack.c	1666	2	Only free memory allocated dynamically
DCL00-C	builtiindex-pack.c	1671	2	Const-qualify immutable objects: baseobjects
EXP36-C	builtiindex-pack.c	1675	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiindex-pack.c	1694	3	Do not ignore values returned by functions: putchar
EXP12-C	builtiindex-pack.c	1705	3	Do not ignore values returned by functions: printf_ln
MEM34-C	builtiindex-pack.c	1711	2	Only free memory allocated dynamically
EXP11-C	builtiindex-pack.c	1798	11	Do not apply operators expecting one type to data of an incompatible type
INT07-C	builtiindex-pack.c	1828	12	Use only explicitly signed or unsigned char type for numeric values
INT13-C	builtiindex-pack.c	1862	16	Use bitwise operators only on unsigned operands
EXP36-C	builtiindex-pack.c	1902	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiindex-pack.c	1904	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiindex-pack.c	1905	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtiindex-pack.c	1911	2	Store a new value in pointers immediately after free()
MEM01-C	builtiindex-pack.c	1912	2	Store a new value in pointers immediately after free()
EXP36-C	builtiindex-pack.c	1919	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtiindex-pack.c	1927	2	Store a new value in pointers immediately after free()
MEM34-C	builtiindex-pack.c	1927	2	Only free memory allocated dynamically
MEM01-C	builtiindex-pack.c	1942	2	Store a new value in pointers immediately after free()
MEM01-C	builtiindex-pack.c	1946	3	Store a new value in pointers immediately after free()
EXP05-C	builtiindex-pack.c	1946	8	Do not cast away a const qualification
MEM01-C	builtiindex-pack.c	1948	3	Store a new value in pointers immediately after free()
MEM34-C	builtiindex-pack.c	1948	3	Only free memory allocated dynamically
EXP05-C	builtiindex-pack.c	1948	8	Do not cast away a const qualification
MEM01-C	builtiindex-pack.c	1950	3	Store a new value in pointers immediately after free()
MEM34-C	builtiindex-pack.c	1950	3	Only free memory allocated dynamically
EXP05-C	builtiindex-pack.c	1950	8	Do not cast away a const qualification
DCL00-C	builtiinit-db.c	32	2	Const-qualify immutable objects: path_baselen
DCL00-C	builtiinit-db.c	33	2	Const-qualify immutable objects: template_baselen
EXP12-C	builtiinit-db.c	72	4	Do not ignore values returned by functions: closedir
MEM34-C	builtiinit-db.c	113	3	Only free memory allocated dynamically
EXP12-C	builtiinit-db.c	129	2	Do not ignore values returned by functions: read_repository_format
EXP12-C	builtiinit-db.c	148	2	Do not ignore values returned by functions: closedir
MEM01-C	builtiinit-db.c	150	2	Store a new value in pointers immediately after free()
MEM34-C	builtiinit-db.c	150	2	Only free memory allocated dynamically
EXP12-C	builtiinit-db.c	179	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	builtiinit-db.c	215	2	Do not ignore values returned by functions: git_config_get_pathname
EXP05-C	builtiinit-db.c	217	7	Do not cast away a const qualification
EXP12-C	builtiinit-db.c	235	3	Do not ignore values returned by functions: adjust_shared_perm
EXP12-C	builtiinit-db.c	243	2	Do not ignore values returned by functions: adjust_shared_perm
POS30-C	builtiinit-db.c	254	8	Use the readlink() function properly
INT01-C	builtiinit-db.c	254	41	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtiinit-db.c	256	3	Do not reuse variable names in subscopes: ref
MEM34-C	builtiinit-db.c	268	3	Only free memory allocated dynamically
DCL00-C	builtiinit-db.c	377	3	Const-qualify immutable objects: env_algo
DCL00-C	builtiinit-db.c	389	2	Const-qualify immutable objects: exist_ok
MEM34-C	builtiinit-db.c	473	2	Only free memory allocated dynamically
MEM01-C	builtiinit-db.c	491	2	Store a new value in pointers immediately after free()
MEM34-C	builtiinit-db.c	491	2	Only free memory allocated dynamically
EXP12-C	builtiinit-db.c	610	3	Do not ignore values returned by functions: setenv
MEM34-C	builtiinit-db.c	611	3	Only free memory allocated dynamically
ENV00-C	builtiinit-db.c	627	28	Do not store the pointer to the string returned by getenv()
EXP12-C	builtiinit-db.c	656	4	Do not ignore values returned by functions: strbuf_strip_suffix
MEM34-C	builtiinit-db.c	673	4	Only free memory allocated dynamically
EXP11-C	builtiinterpret-trailers.c	50	10	Do not apply operators expecting one type to data of an incompatible type
MEM01-C	builtiinterpret-trailers.c	52	3	Store a new value in pointers immediately after free()
MEM34-C	builtiinterpret-trailers.c	52	3	Only free memory allocated dynamically
EXP36-C	builtiinterpret-trailers.c	59	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiinterpret-trailers.c	70	16	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiinterpret-trailers.c	82	41	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtilog.c	135	57	Do not reuse variable names in subscopes: option
EXP36-C	builtilog.c	137	46	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtilog.c	145	2	Do not ignore values returned by functions: string_list_append
DCL01-C	builtilog.c	179	69	Do not reuse variable names in subscopes: decoration_filter
EXP12-C	builtilog.c	190	4	Do not ignore values returned by functions: string_list_append
MEM01-C	builtilog.c	203	2	Store a new value in pointers immediately after free()
MEM34-C	builtilog.c	203	2	Only free memory allocated dynamically
INT01-C	builtilog.c	207	49	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtilog.c	206	49	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtilog.c	205	37	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtilog.c	215	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtilog.c	219	3	Do not ignore values returned by functions: string_list_append
DCL01-C	builtilog.c	229	2	Do not reuse variable names in subscopes: decoration_filter
DCL01-C	builtilog.c	234	2	Do not reuse variable names in subscopes: revision_sources
EXP12-C	builtilog.c	277	2	Do not ignore values returned by functions: memset
EXP36-C	builtilog.c	295	25	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtilog.c	297	3	Do not ignore values returned by functions: read_mailmap
DCL01-C	builtilog.c	365	3	Do not reuse variable names in subscopes: commit
DCL00-C	builtilog.c	366	3	Const-qualify immutable objects: flags
DCL00-C	builtilog.c	390	2	Const-qualify immutable objects: no_free
DCL01-C	builtilog.c	395	3	Do not reuse variable names in subscopes: commit
MSC01-C	builtilog.c	396	3	Strive for logical completeness
DCL00-C	builtilog.c	399	5	Const-qualify immutable objects: n
EXP12-C	builtilog.c	403	4	Do not ignore values returned by functions: log_tree_commit
EXP12-C	builtilog.c	435	2	Do not ignore values returned by functions: setitimer
DCL01-C	builtilog.c	438	30	Do not reuse variable names in subscopes: signal
EXP12-C	builtilog.c	454	2	Do not ignore values returned by functions: memset
EXP12-C	builtilog.c	456	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	builtilog.c	458	2	Do not ignore values returned by functions: sigaction
EXP12-C	builtilog.c	469	2	Do not ignore values returned by functions: setitimer
DCL00-C	builtilog.c	474	2	Const-qualify immutable objects: n
EXP12-C	builtilog.c	475	2	Do not ignore values returned by functions: signal
DCL01-C	builtilog.c	481	2	Do not reuse variable names in subscopes: commit
EXP12-C	builtilog.c	532	3	Do not ignore values returned by functions: tmp_objdir_destroy
EXP12-C	builtilog.c	621	2	Do not ignore values returned by functions: memset
MSC12-C	builtilog.c	683	2	Detect and remove code that has no effect
MEM34-C	builtilog.c	696	2	Only free memory allocated dynamically
DCL13-C	builtilog.c	701	23	Declare function parameters that are pointers to values not changed by the function as const: base
EXP36-C	builtilog.c	705	15	Do not convert pointers into more strictly aligned pointer types
DCL13-C	builtilog.c	711	39	Declare function parameters that are pointers to values not changed by the function as const: opt
EXP12-C	builtilog.c	737	2	Do not ignore values returned by functions: memset
EXP12-C	builtilog.c	746	2	Do not ignore values returned by functions: memset
EXP11-C	builtilog.c	763	20	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	builtilog.c	791	4	Do not ignore values returned by functions: read_tree
EXP12-C	builtilog.c	842	2	Do not ignore values returned by functions: memset
DCL13-C	builtilog.c	855	38	Declare function parameters that are pointers to values not changed by the function as const: opt
EXP12-C	builtilog.c	877	2	Do not ignore values returned by functions: memset
INT07-C	builtilog.c	914	20	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtilog.c	984	3	Do not ignore values returned by functions: string_list_append
EXP12-C	builtilog.c	990	3	Do not ignore values returned by functions: string_list_append
EXP30-C	builtilog.c	1003	3	Do not depend on order of evaluation for side effects
DCL00-C	builtilog.c	1052	3	Const-qualify immutable objects: b
MEM01-C	builtilog.c	1053	3	Store a new value in pointers immediately after free()
DCL00-C	builtilog.c	1067	3	Const-qualify immutable objects: b
DCL01-C	builtilog.c	1087	42	Do not reuse variable names in subscopes: commit
MSC12-C	builtilog.c	1108	3	Detect and remove code that has no effect
DCL01-C	builtilog.c	1120	2	Do not reuse variable names in subscopes: commit
EXP12-C	builtilog.c	1137	2	Do not ignore values returned by functions: init_patch_ids
EXP12-C	builtilog.c	1150	3	Do not ignore values returned by functions: add_commit_patch_id
INT01-C	builtilog.c	1175	33	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtilog.c	1177	2	Do not ignore values returned by functions: _IO_putc
DCL01-C	builtilog.c	1185	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtilog.c	1186	2	Do not reuse variable names in subscopes: branch
MEM34-C	builtilog.c	1204	2	Only free memory allocated dynamically
INT01-C	builtilog.c	1251	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtilog.c	1266	2	Do not ignore values returned by functions: strvec_pushf
EXP36-C	builtilog.c	1266	15	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtilog.c	1273	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtilog.c	1277	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtilog.c	1279	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtilog.c	1347	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtilog.c	1370	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtilog.c	1372	3	Do not ignore values returned by functions: show_range_diff
INT07-C	builtilog.c	1383	19	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	builtilog.c	1399	63	Do not reuse variable names in subscopes: output_directory
DCL02-C	builtilog.c	1399	63	Use visually distinct identifiers: output_directory
DCL02-C	builtilog.c	1399	63	Use visually distinct identifiers: output_directory
DCL02-C	builtilog.c	1399	63	Use visually distinct identifiers: output_directory
DCL02-C	builtilog.c	1399	63	Use visually distinct identifiers: output_directory
DCL02-C	builtilog.c	1399	63	Use visually distinct identifiers: output_directory
DCL02-C	builtilog.c	1399	63	Use visually distinct identifiers: output_directory
DCL02-C	builtilog.c	1399	63	Use visually distinct identifiers: output_directory
DCL02-C	builtilog.c	1485	2	Use visually distinct identifiers: thread
DCL01-C	builtilog.c	1485	2	Do not reuse variable names in subscopes: thread
DCL02-C	builtilog.c	1485	2	Use visually distinct identifiers: thread
DCL02-C	builtilog.c	1485	2	Use visually distinct identifiers: thread
DCL02-C	builtilog.c	1485	2	Use visually distinct identifiers: thread
DCL02-C	builtilog.c	1559	2	Use visually distinct identifiers: from
DCL01-C	builtilog.c	1559	2	Do not reuse variable names in subscopes: from
EXP36-C	builtilog.c	1559	19	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtilog.c	1559	2	Use visually distinct identifiers: from
DCL02-C	builtilog.c	1559	2	Use visually distinct identifiers: from
EXP36-C	builtilog.c	1574	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtilog.c	1592	2	Do not reuse variable names in subscopes: patch_id
DCL01-C	builtilog.c	1635	4	Do not reuse variable names in subscopes: commit
EXP36-C	builtilog.c	1667	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtilog.c	1684	6	Only free memory allocated dynamically
MEM34-C	builtilog.c	1701	4	Only free memory allocated dynamically
MEM34-C	builtilog.c	1711	5	Only free memory allocated dynamically
MEM34-C	builtilog.c	1717	2	Only free memory allocated dynamically
INT01-C	builtilog.c	1721	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	builtilog.c	1721	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	builtilog.c	1721	1	Use typedefs to improve code readability
EXP36-C	builtilog.c	1721	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtilog.c	1721	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtilog.c	1721	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtilog.c	1728	2	Do not reuse variable names in subscopes: commit
DCL01-C	builtilog.c	1731	2	Do not reuse variable names in subscopes: commit_base
DCL01-C	builtilog.c	1763	3	Do not reuse variable names in subscopes: patch_id
EXP36-C	builtilog.c	1768	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtilog.c	1820	2	Const-qualify immutable objects: prev_is_range
DCL01-C	builtilog.c	1839	2	Do not reuse variable names in subscopes: commit
DCL01-C	builtilog.c	1866	2	Do not reuse variable names in subscopes: progress
EXP12-C	builtilog.c	1984	2	Do not ignore values returned by functions: memset
INT01-C	builtilog.c	2006	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtilog.c	2021	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtilog.c	2028	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtilog.c	2032	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtilog.c	2039	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtilog.c	2043	13	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtilog.c	2162	4	Do not reuse variable names in subscopes: ref
EXP36-C	builtilog.c	2202	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtilog.c	2223	50	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtilog.c	2413	3	Use visually distinct identifiers: buf
DCL01-C	builtilog.c	2254	3	Do not reuse variable names in subscopes: buf
DCL02-C	builtilog.c	2413	3	Use visually distinct identifiers: buf
EXP12-C	builtilog.c	2261	2	Do not ignore values returned by functions: memset
EXP36-C	builtilog.c	2270	32	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtilog.c	2275	3	Do not ignore values returned by functions: string_list_append
INT01-C	builtilog.c	2327	36	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	builtilog.c	2365	2	Store a new value in pointers immediately after free()
MEM34-C	builtilog.c	2365	2	Only free memory allocated dynamically
MEM01-C	builtilog.c	2366	2	Store a new value in pointers immediately after free()
MEM34-C	builtilog.c	2366	2	Only free memory allocated dynamically
MEM01-C	builtilog.c	2379	2	Store a new value in pointers immediately after free()
MEM34-C	builtilog.c	2379	2	Only free memory allocated dynamically
DCL01-C	builtilog.c	2390	3	Do not reuse variable names in subscopes: commit
DCL01-C	builtilog.c	2406	52	Do not reuse variable names in subscopes: commit
DCL01-C	builtilog.c	2426	2	Do not reuse variable names in subscopes: commit
EXP12-C	builtilog.c	2487	3	Do not ignore values returned by functions: commit_list_insert
INT07-C	builtilog.c	2491	3	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtilog.c	2495	9	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtilog.c	2500	2	Do not ignore values returned by functions: free_patch_ids
INT07-C	builtils-files.c	109	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtils-files.c	111	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtils-files.c	113	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtils-files.c	115	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtils-files.c	116	14	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builtils-files.c	141	2	Const-qualify immutable objects: len
INT32-C	builtils-files.c	187	11	Ensure that operations on signed integers do not result in overflow
ARR30-C	builtils-files.c	197	11	Do not form or use out-of-bounds pointers or array subscripts
EXP36-C	builtils-files.c	246	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtils-files.c	290	16	Do not reuse variable names in subscopes: format
DCL02-C	builtils-files.c	290	16	Use visually distinct identifiers: format
DCL02-C	builtils-files.c	290	16	Use visually distinct identifiers: format
EXP12-C	builtils-files.c	300	2	Do not ignore values returned by functions: fwrite
INT01-C	builtils-files.c	308	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtils-files.c	350	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtils-files.c	395	3	Do not ignore values returned by functions: fill_directory
DCL01-C	builtils-files.c	468	16	Do not reuse variable names in subscopes: prefix
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
INT32-C	builtils-files.c	477	9	Ensure that operations on signed integers do not result in overflow
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL00-C	builtils-files.c	481	3	Const-qualify immutable objects: next
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
INT01-C	builtils-files.c	489	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtils-files.c	489	2	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtils-files.c	493	46	Do not reuse variable names in subscopes: common_prefix
INT01-C	builtils-files.c	525	48	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtils-files.c	529	29	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtils-files.c	540	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtils-files.c	554	31	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtils-files.c	568	42	Do not reuse variable names in subscopes: prefix
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL01-C	builtils-files.c	570	2	Do not reuse variable names in subscopes: tree
DCL01-C	builtils-files.c	572	2	Do not reuse variable names in subscopes: pathspec
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
INT13-C	builtils-files.c	597	29	Use bitwise operators only on unsigned operands
INT13-C	builtils-files.c	597	29	Use bitwise operators only on unsigned operands
INT13-C	builtils-files.c	597	29	Use bitwise operators only on unsigned operands
INT13-C	builtils-files.c	597	29	Use bitwise operators only on unsigned operands
INT13-C	builtils-files.c	597	29	Use bitwise operators only on unsigned operands
INT13-C	builtils-files.c	597	29	Use bitwise operators only on unsigned operands
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
DCL02-C	builtils-files.c	572	2	Use visually distinct identifiers: pathspec
DCL02-C	builtils-files.c	568	42	Use visually distinct identifiers: prefix
EXP36-C	builtils-files.c	656	40	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtils-files.c	661	2	Do not ignore values returned by functions: string_list_append
EXP36-C	builtils-files.c	669	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtils-files.c	682	30	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtils-files.c	787	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtils-files.c	889	2	Only free memory allocated dynamically
MEM34-C	builtils-remote.c	30	4	Only free memory allocated dynamically
MEM34-C	builtils-remote.c	34	2	Only free memory allocated dynamically
DCL01-C	builtils-remote.c	53	2	Do not reuse variable names in subscopes: remote
DCL01-C	builtils-remote.c	54	2	Do not reuse variable names in subscopes: transport
DCL01-C	builtils-remote.c	55	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtils-remote.c	56	2	Do not reuse variable names in subscopes: ref_array
EXP12-C	builtils-remote.c	81	2	Do not ignore values returned by functions: memset
DCL02-C	builtils-remote.c	90	3	Use visually distinct identifiers: i
DCL01-C	builtils-remote.c	90	3	Do not reuse variable names in subscopes: i
EXP36-C	builtils-remote.c	91	3	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtils-remote.c	90	3	Use visually distinct identifiers: i
DCL02-C	builtils-remote.c	90	3	Use visually distinct identifiers: i
DCL00-C	builtils-remote.c	124	3	Const-qualify immutable objects: hash_algo
DCL02-C	builtils-remote.c	149	3	Use visually distinct identifiers: ref
DCL01-C	builtils-remote.c	149	3	Do not reuse variable names in subscopes: ref
DCL02-C	builtils-remote.c	149	3	Use visually distinct identifiers: ref
EXP36-C	builtils-tree.c	70	32	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtils-tree.c	103	3	Do not ignore values returned by functions: quote_c_style
INT07-C	builtils-tree.c	135	17	Use only explicitly signed or unsigned char type for numeric values
DCL13-C	builtils-tree.c	145	48	Declare function parameters that are pointers to values not changed by the function as const: context
DCL00-C	builtils-tree.c	150	2	Const-qualify immutable objects: type
INT13-C	builtils-tree.c	162	50	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	164	38	Use bitwise operators only on unsigned operands
EXP12-C	builtils-tree.c	170	2	Do not ignore values returned by functions: fwrite
DCL00-C	builtils-tree.c	180	2	Const-qualify immutable objects: type
INT13-C	builtils-tree.c	191	18	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	196	20	Use bitwise operators only on unsigned operands
DCL13-C	builtils-tree.c	216	15	Declare function parameters that are pointers to values not changed by the function as const: context
DCL13-C	builtils-tree.c	234	12	Declare function parameters that are pointers to values not changed by the function as const: context
EXP12-C	builtils-tree.c	253	3	Do not ignore values returned by functions: xsnprintf
DCL13-C	builtils-tree.c	264	17	Declare function parameters that are pointers to values not changed by the function as const: context
DCL13-C	builtils-tree.c	285	14	Declare function parameters that are pointers to values not changed by the function as const: context
DCL01-C	builtils-tree.c	335	2	Do not reuse variable names in subscopes: tree
INT13-C	builtils-tree.c	389	35	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	390	14	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	407	47	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	407	28	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	407	28	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	407	28	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	407	28	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	407	28	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	407	28	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	408	7	Use bitwise operators only on unsigned operands
INT13-C	builtils-tree.c	408	26	Use bitwise operators only on unsigned operands
EXP36-C	builtimailinfo.c	31	45	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtimailinfo.c	45	46	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtimailinfo.c	111	2	Store a new value in pointers immediately after free()
MEM34-C	builtimailinfo.c	111	2	Only free memory allocated dynamically
MEM34-C	builtimailinfo.c	112	2	Only free memory allocated dynamically
STR11-C	builtimailsplit.c	12	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtimailsplit.c	50	43	Do not reuse variable names in subscopes: buf
DCL02-C	builtimailsplit.c	50	43	Use visually distinct identifiers: buf
DCL02-C	builtimailsplit.c	50	43	Use visually distinct identifiers: buf
DCL00-C	builtimailsplit.c	52	2	Const-qualify immutable objects: min
DCL02-C	builtimailsplit.c	50	43	Use visually distinct identifiers: buf
INT01-C	builtimailsplit.c	59	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimailsplit.c	85	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimailsplit.c	85	49	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimailsplit.c	86	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimailsplit.c	87	31	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtimailsplit.c	121	3	Only free memory allocated dynamically
MSC12-C	builtimailsplit.c	126	4	Detect and remove code that has no effect
MEM34-C	builtimailsplit.c	133	4	Only free memory allocated dynamically
EXP12-C	builtimailsplit.c	135	4	Do not ignore values returned by functions: string_list_insert
EXP12-C	builtimailsplit.c	138	3	Do not ignore values returned by functions: closedir
MEM34-C	builtimailsplit.c	144	2	Only free memory allocated dynamically
INT01-C	builtimailsplit.c	183	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtimailsplit.c	186	3	Only free memory allocated dynamically
MSC12-C	builtimailsplit.c	191	4	Detect and remove code that has no effect
MSC12-C	builtimailsplit.c	196	4	Detect and remove code that has no effect
EXP12-C	builtimailsplit.c	201	3	Do not ignore values returned by functions: split_one
MEM01-C	builtimailsplit.c	202	3	Store a new value in pointers immediately after free()
MEM34-C	builtimailsplit.c	202	3	Only free memory allocated dynamically
MEM01-C	builtimailsplit.c	212	2	Store a new value in pointers immediately after free()
MEM34-C	builtimailsplit.c	212	2	Only free memory allocated dynamically
MSC12-C	builtimailsplit.c	230	3	Detect and remove code that has no effect
EXP12-C	builtimailsplit.c	247	2	Do not ignore values returned by functions: ungetc
MSC12-C	builtimailsplit.c	252	4	Detect and remove code that has no effect
MEM30-C	builtimailsplit.c	261	3	Do not access freed memory
MEM34-C	builtimailsplit.c	261	3	Only free memory allocated dynamically
MSC12-C	builtimailsplit.c	341	5	Detect and remove code that has no effect
MSC12-C	builtimailsplit.c	350	4	Detect and remove code that has no effect
MSC12-C	builtimailsplit.c	360	4	Detect and remove code that has no effect
EXP12-C	builtimerge-base.c	60	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	builtimerge-base.c	81	3	Do not ignore values returned by functions: commit_list_insert
EXP36-C	builtimerge-base.c	187	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtimerge-base.c	191	2	Only free memory allocated dynamically
MEM01-C	builtimerge-file.c	88	3	Store a new value in pointers immediately after free()
MEM34-C	builtimerge-file.c	88	3	Only free memory allocated dynamically
INT01-C	builtimerge-file.c	108	43	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtimerge-file.c	108	43	Ensure that return values are compared against the proper type
MEM34-C	builtimerge-file.c	113	3	Only free memory allocated dynamically
DCL00-C	builtimerge-index.c	22	3	Const-qualify immutable objects: stage
EXP12-C	builtimerge-index.c	27	3	Do not ignore values returned by functions: oid_to_hex_r
EXP12-C	builtimerge-index.c	28	3	Do not ignore values returned by functions: xsnprintf
DCL00-C	builtimerge-index.c	50	2	Const-qualify immutable objects: pos
INT32-C	builtimerge-index.c	57	15	Ensure that operations on signed integers do not result in overflow
EXP12-C	builtimerge-index.c	80	2	Do not ignore values returned by functions: signal
EXP12-C	builtimerge-index.c	85	2	Do not ignore values returned by functions: repo_read_index
STR11-C	builtimerge-ours.c	14	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtimerge-recursive.c	8	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builtimerge-recursive.c	18	2	Do not ignore values returned by functions: xsnprintf
INT01-C	builtimerge-recursive.c	50	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtimerge-recursive.c	51	35	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtimerge-recursive.c	61	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge-recursive.c	62	10	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	builtimerge-recursive.c	86	2	Store a new value in pointers immediately after free()
MEM34-C	builtimerge-recursive.c	86	2	Only free memory allocated dynamically
MEM01-C	builtimerge-recursive.c	87	2	Store a new value in pointers immediately after free()
MEM34-C	builtimerge-recursive.c	87	2	Only free memory allocated dynamically
DCL01-C	builtimerge-tree.c	20	2	Do not reuse variable names in subscopes: link
DCL01-C	builtimerge-tree.c	23	2	Do not reuse variable names in subscopes: mode
DCL01-C	builtimerge-tree.c	25	2	Do not reuse variable names in subscopes: blob
MSC01-C	builtimerge-tree.c	40	2	Strive for logical completeness
DCL13-C	builtimerge-tree.c	101	28	Declare function parameters that are pointers to values not changed by the function as const: priv_
EXP12-C	builtimerge-tree.c	117	2	Do not ignore values returned by functions: memset
EXP12-C	builtimerge-tree.c	119	2	Do not ignore values returned by functions: memset
DCL01-C	builtimerge-tree.c	140	3	Do not reuse variable names in subscopes: link
DCL01-C	builtimerge-tree.c	173	65	Do not reuse variable names in subscopes: mode
EXP36-C	builtimerge-tree.c	175	34	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtimerge-tree.c	191	99	Do not reuse variable names in subscopes: result
INT14-C	builtimerge-tree.c	228	7	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	builtimerge-tree.c	229	7	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	builtimerge-tree.c	230	7	Avoid performing bitwise and arithmetic operations on the same data
MEM01-C	builtimerge-tree.c	235	2	Store a new value in pointers immediately after free()
MEM34-C	builtimerge-tree.c	235	2	Only free memory allocated dynamically
MEM01-C	builtimerge-tree.c	236	2	Store a new value in pointers immediately after free()
MEM34-C	builtimerge-tree.c	236	2	Only free memory allocated dynamically
MEM01-C	builtimerge-tree.c	237	2	Store a new value in pointers immediately after free()
MEM34-C	builtimerge-tree.c	237	2	Only free memory allocated dynamically
MEM34-C	builtimerge-tree.c	238	2	Only free memory allocated dynamically
DCL01-C	builtimerge-tree.c	245	2	Do not reuse variable names in subscopes: link
INT34-C	builtimerge-tree.c	271	18	Do not shift a negative number of bits or more bits than exist in the operand
EXP12-C	builtimerge-tree.c	356	2	Do not ignore values returned by functions: traverse_trees
MEM01-C	builtimerge-tree.c	386	2	Store a new value in pointers immediately after free()
MEM34-C	builtimerge-tree.c	386	2	Only free memory allocated dynamically
MEM01-C	builtimerge-tree.c	387	2	Store a new value in pointers immediately after free()
MEM34-C	builtimerge-tree.c	387	2	Only free memory allocated dynamically
MEM01-C	builtimerge-tree.c	388	2	Store a new value in pointers immediately after free()
MEM34-C	builtimerge-tree.c	388	2	Only free memory allocated dynamically
DCL01-C	builtimerge-tree.c	401	2	Do not reuse variable names in subscopes: mode
DCL01-C	builtimerge-tree.c	415	2	Do not reuse variable names in subscopes: result
INT01-C	builtimerge-tree.c	460	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtimerge-tree.c	462	52	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtimerge-tree.c	475	3	Do not ignore values returned by functions: putchar
DCL01-C	builtimerge-tree.c	535	4	Do not reuse variable names in subscopes: result
INT13-C	builtimerge.c	95	34	Use bitwise operators only on unsigned operands
INT13-C	builtimerge.c	97	34	Use bitwise operators only on unsigned operands
INT13-C	builtimerge.c	98	34	Use bitwise operators only on unsigned operands
EXP36-C	builtimerge.c	117	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtimerge.c	134	26	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtimerge.c	178	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtimerge.c	186	3	Do not ignore values returned by functions: memset
INT01-C	builtimerge.c	191	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtimerge.c	215	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtimerge.c	223	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	223	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	223	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	223	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	223	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	223	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	223	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	223	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	223	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtimerge.c	223	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtimerge.c	243	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	243	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	243	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	243	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	243	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	243	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	243	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	243	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	243	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtimerge.c	243	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtimerge.c	316	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtimerge.c	321	2	Do not ignore values returned by functions: refresh_index
INT01-C	builtimerge.c	339	35	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtimerge.c	383	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtimerge.c	390	2	Do not ignore values returned by functions: run_command
DCL01-C	builtimerge.c	410	43	Do not reuse variable names in subscopes: commit
EXP12-C	builtimerge.c	429	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	builtimerge.c	470	4	Do not ignore values returned by functions: update_ref
EXP12-C	builtimerge.c	476	4	Do not ignore values returned by functions: run_auto_maintenance
INT13-C	builtimerge.c	484	22	Use bitwise operators only on unsigned operands
EXP12-C	builtimerge.c	494	2	Do not ignore values returned by functions: run_hooks_l
DCL01-C	builtimerge.c	502	36	Do not reuse variable names in subscopes: remote
INT07-C	builtimerge.c	552	18	Use only explicitly signed or unsigned char type for numeric values
INT13-C	builtimerge.c	553	18	Use bitwise operators only on unsigned operands
INT01-C	builtimerge.c	567	39	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	builtimerge.c	592	2	Store a new value in pointers immediately after free()
MEM34-C	builtimerge.c	592	2	Only free memory allocated dynamically
EXP36-C	builtimerge.c	607	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtimerge.c	608	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	608	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtimerge.c	611	2	Do not ignore values returned by functions: parse_options
MEM34-C	builtimerge.c	613	2	Only free memory allocated dynamically
DCL00-C	builtimerge.c	641	3	Const-qualify immutable objects: boolval
EXP12-C	builtimerge.c	678	2	Do not ignore values returned by functions: memset
EXP12-C	builtimerge.c	699	3	Do not ignore values returned by functions: parse_tree
DCL01-C	builtimerge.c	713	43	Do not reuse variable names in subscopes: strategy
MSC12-C	builtimerge.c	734	4	Detect and remove code that has no effect
INT01-C	builtimerge.c	745	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtimerge.c	753	4	Do not ignore values returned by functions: commit_list_insert
EXP12-C	builtimerge.c	755	3	Do not ignore values returned by functions: repo_hold_locked_index
INT13-C	builtimerge.c	768	24	Use bitwise operators only on unsigned operands
DCL13-C	builtimerge.c	779	30	Declare function parameters that are pointers to values not changed by the function as const: opt
EXP36-C	builtimerge.c	781	15	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtimerge.c	804	3	Do not ignore values returned by functions: string_list_split
INT01-C	builtimerge.c	810	18	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	builtimerge.c	835	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtimerge.c	840	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtimerge.c	843	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builtimerge.c	867	2	Do not ignore values returned by functions: read_index_from
EXP12-C	builtimerge.c	982	2	Do not ignore values returned by functions: repo_rerere
EXP12-C	builtimerge.c	995	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	builtimerge.c	1000	2	Do not ignore values returned by functions: run_diff_files
DCL05-C	builtimerge.c	1016	1	Use typedefs to improve code readability
DCL02-C	builtimerge.c	1018	2	Use visually distinct identifiers: branch
DCL01-C	builtimerge.c	1018	2	Do not reuse variable names in subscopes: branch
DCL02-C	builtimerge.c	1018	2	Use visually distinct identifiers: branch
DCL02-C	builtimerge.c	1018	2	Use visually distinct identifiers: branch
DCL02-C	builtimerge.c	1018	2	Use visually distinct identifiers: branch
EXP36-C	builtimerge.c	1029	16	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtimerge.c	1018	2	Use visually distinct identifiers: branch
DCL02-C	builtimerge.c	1018	2	Use visually distinct identifiers: branch
DCL02-C	builtimerge.c	1018	2	Use visually distinct identifiers: branch
STR11-C	builtimerge.c	1078	2	Do not specify the dimension of a character array initialized with a string literal
DCL00-C	builtimerge.c	1087	3	Const-qualify immutable objects: v
DCL13-C	builtimerge.c	1102	58	Declare function parameters that are pointers to values not changed by the function as const: head_commit
DCL01-C	builtimerge.c	1124	3	Do not reuse variable names in subscopes: commit
DCL01-C	builtimerge.c	1133	78	Do not reuse variable names in subscopes: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
EXP12-C	builtimerge.c	1137	2	Do not ignore values returned by functions: memset
EXP12-C	builtimerge.c	1143	2	Do not ignore values returned by functions: fmt_merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
INT01-C	builtimerge.c	1145	43	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimerge.c	1166	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtimerge.c	1169	3	Do not reuse variable names in subscopes: commit
DCL00-C	builtimerge.c	1183	4	Const-qualify immutable objects: saved
INT07-C	builtimerge.c	1184	34	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtimerge.c	1190	10	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	builtimerge.c	1204	24	Do not reuse variable names in subscopes: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL01-C	builtimerge.c	1222	4	Do not reuse variable names in subscopes: commit
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL02-C	builtimerge.c	1204	24	Use visually distinct identifiers: merge_msg
DCL01-C	builtimerge.c	1244	51	Do not reuse variable names in subscopes: commit
MEM34-C	builtimerge.c	1277	2	Only free memory allocated dynamically
DCL00-C	builtimerge.c	1292	2	Const-qualify immutable objects: orig_argc
ENV30-C	builtimerge.c	1309	28	Do not modify the string returned by getenv()
DCL00-C	builtimerge.c	1333	3	Const-qualify immutable objects: nargc
DCL00-C	builtimerge.c	1369	3	Const-qualify immutable objects: nargc
EXP12-C	builtimerge.c	1469	3	Do not ignore values returned by functions: update_ref
EXP12-C	builtimerge.c	1496	2	Do not ignore values returned by functions: setenv
DCL01-C	builtimerge.c	1500	3	Do not reuse variable names in subscopes: commit
EXP12-C	builtimerge.c	1503	3	Do not ignore values returned by functions: setenv
ENV30-C	builtimerge.c	1511	28	Do not modify the string returned by getenv()
INT01-C	builtimerge.c	1524	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtimerge.c	1537	3	Do not ignore values returned by functions: commit_list_insert
MEM34-C	builtimerge.c	1539	3	Only free memory allocated dynamically
EXP12-C	builtimerge.c	1542	2	Do not ignore values returned by functions: update_ref
DCL01-C	builtimerge.c	1564	3	Do not reuse variable names in subscopes: commit
EXP12-C	builtimerge.c	1590	4	Do not ignore values returned by functions: apply_autostash
EXP12-C	builtimerge.c	1610	3	Do not ignore values returned by functions: refresh_index
MSC12-C	builtimerge.c	1621	5	Detect and remove code that has no effect
EXP12-C	builtimerge.c	1628	4	Do not ignore values returned by functions: git_committer_info
EXP12-C	builtimerge.c	1674	2	Do not ignore values returned by functions: git_committer_info
INT01-C	builtimerge.c	1691	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
DCL01-C	builtimerge.c	1692	3	Do not reuse variable names in subscopes: ret
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
INT01-C	builtimerge.c	1697	25	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtimerge.c	1697	25	Ensure that return values are compared against the proper type
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
INT01-C	builtimerge.c	1724	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
DCL02-C	builtimerge.c	1692	3	Use visually distinct identifiers: ret
INT01-C	builtimerge.c	1750	25	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtimerge.c	1756	3	Do not ignore values returned by functions: apply_autostash
EXP12-C	builtimerge.c	1766	3	Do not ignore values returned by functions: try_merge_strategy
MEM34-C	builtimerge.c	1791	2	Only free memory allocated dynamically
DCL13-C	builtimktag.c	17	55	Declare function parameters that are pointers to values not changed by the function as const: o
DCL01-C	builtimktag.c	19	23	Do not reuse variable names in subscopes: object_type
EXP12-C	builtimktag.c	27	4	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtimktag.c	38	3	Do not ignore values returned by functions: fprintf_ln
MEM34-C	builtimktag.c	66	2	Only free memory allocated dynamically
EXP12-C	builtimktag.c	106	2	Do not ignore values returned by functions: puts
DCL00-C	builtimktree.c	23	2	Const-qualify immutable objects: len
DCL00-C	builtimktree.c	27	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtimktree.c	27	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtimktree.c	32	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	builtimktree.c	38	23	Do not cast away a const qualification
EXP05-C	builtimktree.c	39	23	Do not cast away a const qualification
INT01-C	builtimktree.c	52	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtimktree.c	61	2	Do not ignore values returned by functions: write_object_file
INT07-C	builtimktree.c	100	9	Use only explicitly signed or unsigned char type for numeric values
EXP05-C	builtimktree.c	102	9	Do not cast away a const qualification
MEM34-C	builtimktree.c	147	2	Only free memory allocated dynamically
DCL01-C	builtimktree.c	160	2	Do not reuse variable names in subscopes: option
EXP36-C	builtimktree.c	167	45	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtimktree.c	193	4	Do not ignore values returned by functions: puts
EXP36-C	builtimulti-pack-index.c	59	20	Do not convert pointers into more strictly aligned pointer types
DCL13-C	builtimulti-pack-index.c	82	17	Declare function parameters that are pointers to values not changed by the function as const: cb
INT13-C	builtimulti-pack-index.c	88	18	Use bitwise operators only on unsigned operands
INT13-C	builtimulti-pack-index.c	95	18	Use bitwise operators only on unsigned operands
INT13-C	builtimulti-pack-index.c	123	3	Use bitwise operators only on unsigned operands
MEM34-C	builtimulti-pack-index.c	151	2	Only free memory allocated dynamically
MEM34-C	builtimulti-pack-index.c	194	2	Only free memory allocated dynamically
MEM34-C	builtimulti-pack-index.c	221	2	Only free memory allocated dynamically
MEM34-C	builtimulti-pack-index.c	252	2	Only free memory allocated dynamically
MEM34-C	builtimulti-pack-index.c	281	2	Only free memory allocated dynamically
DCL01-C	builtimv.c	34	24	Do not reuse variable names in subscopes: pathspec
DCL00-C	builtimv.c	39	2	Const-qualify immutable objects: prefixlen
EXP36-C	builtimv.c	40	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtimv.c	44	3	Const-qualify immutable objects: length
MEM01-C	builtimv.c	54	4	Store a new value in pointers immediately after free()
MEM34-C	builtimv.c	54	4	Only free memory allocated dynamically
EXP05-C	builtimv.c	64	8	Do not cast away a const qualification
INT01-C	builtimv.c	74	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimv.c	74	22	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtimv.c	77	21	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtimv.c	78	19	Use only explicitly signed or unsigned char type for numeric values
EXP11-C	builtimv.c	99	24	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	builtimv.c	107	2	Const-qualify immutable objects: len_w_slash
EXP05-C	builtimv.c	120	8	Do not cast away a const qualification
DCL00-C	builtimv.c	137	2	Const-qualify immutable objects: length
INT32-C	builtimv.c	143	9	Ensure that operations on signed integers do not result in overflow
ARR30-C	builtimv.c	146	23	Do not form or use out-of-bounds pointers or array subscripts
EXP05-C	builtimv.c	155	8	Do not cast away a const qualification
DCL01-C	builtimv.c	180	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtimv.c	192	2	Do not ignore values returned by functions: repo_hold_locked_index
EXP36-C	builtimv.c	197	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtimv.c	209	29	Do not convert pointers into more strictly aligned pointer types
EXP05-C	builtimv.c	239	8	Do not cast away a const qualification
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL01-C	builtimv.c	256	4	Do not reuse variable names in subscopes: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
EXP12-C	builtimv.c	277	5	Do not ignore values returned by functions: string_list_append
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
DCL02-C	builtimv.c	334	5	Use visually distinct identifiers: ce
EXP36-C	builtimv.c	321	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtimv.c	325	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtimv.c	326	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtimv.c	327	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtimv.c	328	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtimv.c	339	5	Do not ignore values returned by functions: memset
INT14-C	builtimv.c	340	21	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	builtimv.c	375	34	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtimv.c	381	38	Use bitwise operators only on unsigned operands
EXP12-C	builtimv.c	400	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builtimv.c	405	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builtimv.c	412	3	Do not ignore values returned by functions: string_list_insert
DCL00-C	builtimv.c	422	4	Const-qualify immutable objects: n
INT01-C	builtimv.c	423	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimv.c	423	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimv.c	424	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimv.c	424	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimv.c	425	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimv.c	425	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimv.c	426	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtimv.c	426	4	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtimv.c	440	3	Const-qualify immutable objects: mode
INT13-C	builtimv.c	452	32	Use bitwise operators only on unsigned operands
INT13-C	builtimv.c	452	23	Use bitwise operators only on unsigned operands
INT13-C	builtimv.c	453	39	Use bitwise operators only on unsigned operands
INT13-C	builtimv.c	468	33	Use bitwise operators only on unsigned operands
MSC12-C	builtimv.c	472	3	Detect and remove code that has no effect
DCL00-C	builtimv.c	492	5	Const-qualify immutable objects: dst_pos
INT13-C	builtimv.c	495	25	Use bitwise operators only on unsigned operands
INT13-C	builtimv.c	499	46	Use bitwise operators only on unsigned operands
DCL00-C	builtimv.c	503	5	Const-qualify immutable objects: dst_pos
EXP12-C	builtimv.c	511	6	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	builtimv.c	519	6	Do not ignore values returned by functions: string_list_append
EXP12-C	builtimv.c	520	6	Do not ignore values returned by functions: safe_create_leading_directories
MEM34-C	builtimv.c	521	6	Only free memory allocated dynamically
EXP12-C	builtimv.c	522	6	Do not ignore values returned by functions: rename
EXP12-C	builtimv.c	540	4	Do not ignore values returned by functions: remove_dir_recursively
MEM01-C	builtimv.c	546	2	Store a new value in pointers immediately after free()
MEM34-C	builtimv.c	546	2	Only free memory allocated dynamically
INT13-C	builtimv.c	555	23	Use bitwise operators only on unsigned operands
MEM01-C	builtimv.c	562	2	Store a new value in pointers immediately after free()
MEM34-C	builtimv.c	562	2	Only free memory allocated dynamically
MEM34-C	builtimv.c	563	2	Only free memory allocated dynamically
INT01-C	builtiname-rev.c	28	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	builtiname-rev.c	28	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	builtiname-rev.c	28	1	Use typedefs to improve code readability
EXP36-C	builtiname-rev.c	28	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiname-rev.c	28	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtiname-rev.c	28	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtiname-rev.c	42	46	Do not reuse variable names in subscopes: commit
DCL00-C	builtiname-rev.c	49	3	Const-qualify immutable objects: generation
DCL01-C	builtiname-rev.c	73	51	Do not reuse variable names in subscopes: commit
DCL01-C	builtiname-rev.c	90	66	Do not reuse variable names in subscopes: commit
DCL00-C	builtiname-rev.c	108	2	Const-qualify immutable objects: name_distance
DCL00-C	builtiname-rev.c	109	2	Const-qualify immutable objects: new_distance
DCL01-C	builtiname-rev.c	142	62	Do not reuse variable names in subscopes: commit
EXP12-C	builtiname-rev.c	166	2	Do not ignore values returned by functions: strip_suffix
INT01-C	builtiname-rev.c	170	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	169	44	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	169	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	168	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	175	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	174	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtiname-rev.c	187	2	Do not reuse variable names in subscopes: commit
EXP12-C	builtiname-rev.c	192	2	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	builtiname-rev.c	205	2	Do not ignore values returned by functions: memset
EXP36-C	builtiname-rev.c	208	33	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiname-rev.c	222	4	Do not ignore values returned by functions: repo_parse_commit
INT01-C	builtiname-rev.c	244	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	244	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	244	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	244	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	244	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	244	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	244	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	244	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiname-rev.c	244	5	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtiname-rev.c	244	5	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtiname-rev.c	259	2	Only free memory allocated dynamically
DCL01-C	builtiname-rev.c	298	3	Do not reuse variable names in subscopes: commit
DCL01-C	builtiname-rev.c	309	49	Do not reuse variable names in subscopes: commit
EXP36-C	builtiname-rev.c	314	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiname-rev.c	327	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiname-rev.c	327	45	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiname-rev.c	333	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiname-rev.c	333	45	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiname-rev.c	351	31	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiname-rev.c	355	2	Do not reuse variable names in subscopes: commit
EXP11-C	builtiname-rev.c	405	19	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	builtiname-rev.c	413	12	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	builtiname-rev.c	444	40	Do not convert pointers into more strictly aligned pointer types
EXP11-C	builtiname-rev.c	475	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	builtiname-rev.c	475	6	Do not cast away a const qualification
EXP12-C	builtiname-rev.c	485	3	Do not ignore values returned by functions: strbuf_strip_suffix
DCL00-C	builtiname-rev.c	535	4	Const-qualify immutable objects: c
DCL00-C	builtiname-rev.c	536	4	Const-qualify immutable objects: p_len
INT07-C	builtiname-rev.c	540	11	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	builtiname-rev.c	607	3	Detect and remove code that has no effect
DCL01-C	builtiname-rev.c	615	3	Do not reuse variable names in subscopes: object
DCL01-C	builtiname-rev.c	616	3	Do not reuse variable names in subscopes: commit
EXP11-C	builtiname-rev.c	630	14	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	builtiname-rev.c	648	13	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	builtiname-rev.c	655	2	Do not ignore values returned by functions: for_each_ref
STR11-C	builtinotes.c	96	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builtinotes.c	109	3	Do not ignore values returned by functions: unlink_or_warn
DCL13-C	builtinotes.c	116	43	Declare function parameters that are pointers to values not changed by the function as const: note_path
DCL13-C	builtinotes.c	117	9	Declare function parameters that are pointers to values not changed by the function as const: cb_data
MEM01-C	builtinotes.c	131	3	Store a new value in pointers immediately after free()
MEM34-C	builtinotes.c	131	3	Only free memory allocated dynamically
DCL01-C	builtinotes.c	135	68	Do not reuse variable names in subscopes: object
DCL01-C	builtinotes.c	137	2	Do not reuse variable names in subscopes: show
DCL01-C	builtinotes.c	165	55	Do not reuse variable names in subscopes: object
DCL00-C	builtinotes.c	203	3	Const-qualify immutable objects: status
EXP36-C	builtinotes.c	214	27	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtinotes.c	218	35	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtinotes.c	230	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtinotes.c	249	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtinotes.c	251	2	Do not reuse variable names in subscopes: object
MEM01-C	builtinotes.c	265	3	Store a new value in pointers immediately after free()
MEM30-C	builtinotes.c	265	3	Do not access freed memory
MEM31-C	builtinotes.c	265	3	Free dynamically allocated memory when no longer needed
MEM34-C	builtinotes.c	265	3	Only free memory allocated dynamically
MEM01-C	builtinotes.c	269	2	Store a new value in pointers immediately after free()
MEM34-C	builtinotes.c	269	2	Only free memory allocated dynamically
EXP36-C	builtinotes.c	277	27	Do not convert pointers into more strictly aligned pointer types
MSC12-C	builtinotes.c	322	4	Detect and remove code that has no effect
DCL01-C	builtinotes.c	344	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtinotes.c	362	2	Do not reuse variable names in subscopes: object
MSC12-C	builtinotes.c	374	3	Detect and remove code that has no effect
EXP12-C	builtinotes.c	384	4	Do not ignore values returned by functions: puts
DCL01-C	builtinotes.c	403	2	Do not reuse variable names in subscopes: object
MSC12-C	builtinotes.c	429	3	Detect and remove code that has no effect
INT01-C	builtinotes.c	466	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtinotes.c	475	3	Do not ignore values returned by functions: remove_note
DCL01-C	builtinotes.c	490	2	Do not reuse variable names in subscopes: object
MSC12-C	builtinotes.c	507	4	Detect and remove code that has no effect
MSC12-C	builtinotes.c	515	3	Detect and remove code that has no effect
MSC12-C	builtinotes.c	519	3	Detect and remove code that has no effect
DCL01-C	builtinotes.c	567	2	Do not reuse variable names in subscopes: object
DCL01-C	builtinotes.c	570	2	Do not reuse variable names in subscopes: usage
MSC12-C	builtinotes.c	596	3	Detect and remove code that has no effect
MEM34-C	builtinotes.c	626	3	Only free memory allocated dynamically
INT01-C	builtinotes.c	629	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtinotes.c	637	3	Do not ignore values returned by functions: remove_note
MEM01-C	builtinotes.c	642	2	Store a new value in pointers immediately after free()
MEM34-C	builtinotes.c	642	2	Only free memory allocated dynamically
DCL01-C	builtinotes.c	652	2	Do not reuse variable names in subscopes: object
MSC12-C	builtinotes.c	663	3	Detect and remove code that has no effect
EXP36-C	builtinotes.c	731	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtinotes.c	743	2	Do not ignore values returned by functions: memset
EXP12-C	builtinotes.c	747	2	Do not ignore values returned by functions: update_ref
MEM34-C	builtinotes.c	754	2	Only free memory allocated dynamically
MEM34-C	builtinotes.c	768	2	Only free memory allocated dynamically
MSC12-C	builtinotes.c	805	3	Detect and remove code that has no effect
MSC12-C	builtinotes.c	810	3	Detect and remove code that has no effect
MSC12-C	builtinotes.c	813	3	Detect and remove code that has no effect
MSC12-C	builtinotes.c	834	4	Detect and remove code that has no effect
INT01-C	builtinotes.c	855	51	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtinotes.c	867	3	Do not ignore values returned by functions: update_ref
INT13-C	builtinotes.c	932	11	Use bitwise operators only on unsigned operands
INT13-C	builtinotes.c	940	11	Use bitwise operators only on unsigned operands
MSC12-C	builtinotes.c	965	3	Detect and remove code that has no effect
INT13-C	builtinotes.c	971	53	Use bitwise operators only on unsigned operands
MSC12-C	builtinotes.c	987	3	Detect and remove code that has no effect
EXP12-C	builtinotes.c	991	2	Do not ignore values returned by functions: puts
MSC12-C	builtinotes.c	1020	4	Detect and remove code that has no effect
EXP12-C	builtinotes.c	1030	3	Do not ignore values returned by functions: setenv
EXP36-C	builtipack-objects.c	161	4	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtipack-objects.c	275	52	Do not reuse variable names in subscopes: commit
EXP36-C	builtipack-objects.c	279	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtipack-objects.c	308	2	Store a new value in pointers immediately after free()
MEM34-C	builtipack-objects.c	308	2	Only free memory allocated dynamically
MEM34-C	builtipack-objects.c	309	2	Only free memory allocated dynamically
MEM34-C	builtipack-objects.c	334	2	Only free memory allocated dynamically
INT01-C	builtipack-objects.c	360	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtipack-objects.c	391	2	Do not ignore values returned by functions: memset
INT01-C	builtipack-objects.c	397	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	502	34	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtipack-objects.c	503	22	Use bitwise operators only on unsigned operands
INT14-C	builtipack-objects.c	505	19	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	builtipack-objects.c	505	25	Use bitwise operators only on unsigned operands
INT13-C	builtipack-objects.c	505	34	Use bitwise operators only on unsigned operands
INT01-C	builtipack-objects.c	506	23	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtipack-objects.c	509	4	Only free memory allocated dynamically
INT01-C	builtipack-objects.c	513	47	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	514	29	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtipack-objects.c	523	4	Only free memory allocated dynamically
MEM34-C	builtipack-objects.c	533	4	Only free memory allocated dynamically
EXP12-C	builtipack-objects.c	540	3	Do not ignore values returned by functions: close_istream
MEM34-C	builtipack-objects.c	543	3	Only free memory allocated dynamically
DCL00-C	builtipack-objects.c	563	2	Const-qualify immutable objects: entry_size
MSC12-C	builtipack-objects.c	581	3	Detect and remove code that has no effect
MSC12-C	builtipack-objects.c	592	3	Detect and remove code that has no effect
DCL02-C	builtipack-objects.c	3764	21	Use visually distinct identifiers: pos
DCL01-C	builtipack-objects.c	600	3	Do not reuse variable names in subscopes: pos
INT01-C	builtipack-objects.c	600	34	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtipack-objects.c	601	22	Use bitwise operators only on unsigned operands
DCL02-C	builtipack-objects.c	3764	21	Use visually distinct identifiers: pos
INT14-C	builtipack-objects.c	603	19	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	builtipack-objects.c	603	25	Use bitwise operators only on unsigned operands
INT13-C	builtipack-objects.c	603	34	Use bitwise operators only on unsigned operands
DCL02-C	builtipack-objects.c	3764	21	Use visually distinct identifiers: pos
INT01-C	builtipack-objects.c	604	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtipack-objects.c	3764	21	Use visually distinct identifiers: pos
INT01-C	builtipack-objects.c	609	47	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	610	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	756	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	756	6	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	builtipack-objects.c	763	33	Declare function parameters that are pointers to values not changed by the function as const: cb_data
EXP12-C	builtipack-objects.c	845	17	Do not ignore values returned by functions: oe_delta
EXP12-C	builtipack-objects.c	930	2	Do not ignore values returned by functions: for_each_tag_ref
EXP36-C	builtipack-objects.c	935	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtipack-objects.c	971	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtipack-objects.c	988	3	Const-qualify immutable objects: mi
MSC12-C	builtipack-objects.c	1001	2	Detect and remove code that has no effect
INT01-C	builtipack-objects.c	1013	48	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	builtipack-objects.c	1019	2	Detect and remove code that has no effect
MSC12-C	builtipack-objects.c	1029	3	Detect and remove code that has no effect
EXP12-C	builtipack-objects.c	1042	4	Do not ignore values returned by functions: nth_packed_object_id
INT01-C	builtipack-objects.c	1064	27	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtipack-objects.c	1065	24	Use bitwise operators only on unsigned operands
INT14-C	builtipack-objects.c	1067	21	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	builtipack-objects.c	1067	27	Use bitwise operators only on unsigned operands
INT13-C	builtipack-objects.c	1067	36	Use bitwise operators only on unsigned operands
INT01-C	builtipack-objects.c	1069	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	1095	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	1095	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	1097	4	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtipack-objects.c	1120	3	Const-qualify immutable objects: word
DCL00-C	builtipack-objects.c	1121	3	Const-qualify immutable objects: pos
INT01-C	builtipack-objects.c	1121	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	1121	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	1123	29	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtipack-objects.c	1124	14	Use bitwise operators only on unsigned operands
INT14-C	builtipack-objects.c	1127	11	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	builtipack-objects.c	1127	14	Use bitwise operators only on unsigned operands
INT34-C	builtipack-objects.c	1127	14	Do not shift a negative number of bits or more bits than exist in the operand
INT01-C	builtipack-objects.c	1133	30	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtipack-objects.c	1149	14	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtipack-objects.c	1153	3	Do not ignore values returned by functions: write_in_full
EXP12-C	builtipack-objects.c	1154	3	Do not ignore values returned by functions: write_in_full
EXP12-C	builtipack-objects.c	1155	3	Do not ignore values returned by functions: write_in_full
EXP12-C	builtipack-objects.c	1156	3	Do not ignore values returned by functions: write_in_full
STR11-C	builtipack-objects.c	1160	1	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	builtipack-objects.c	1175	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	builtipack-objects.c	1190	4	Detect and remove code that has no effect
EXP12-C	builtipack-objects.c	1211	4	Do not ignore values returned by functions: finalize_hashfile
EXP12-C	builtipack-objects.c	1214	4	Do not ignore values returned by functions: finalize_hashfile
DCL00-C	builtipack-objects.c	1222	4	Const-qualify immutable objects: fd
MSC05-C	builtipack-objects.c	1247	15	Do not manipulate time_t typed values directly
MSC05-C	builtipack-objects.c	1252	19	Do not manipulate time_t typed values directly
DCL00-C	builtipack-objects.c	1275	5	Const-qualify immutable objects: tmpname_len
MEM01-C	builtipack-objects.c	1292	4	Store a new value in pointers immediately after free()
MEM30-C	builtipack-objects.c	1292	4	Do not access freed memory
MEM34-C	builtipack-objects.c	1292	4	Only free memory allocated dynamically
MEM01-C	builtipack-objects.c	1294	4	Store a new value in pointers immediately after free()
MEM30-C	builtipack-objects.c	1294	4	Do not access freed memory
MEM34-C	builtipack-objects.c	1294	4	Only free memory allocated dynamically
EXP12-C	builtipack-objects.c	1295	4	Do not ignore values returned by functions: puts
MEM01-C	builtipack-objects.c	1305	2	Store a new value in pointers immediately after free()
MEM01-C	builtipack-objects.c	1306	2	Store a new value in pointers immediately after free()
MEM34-C	builtipack-objects.c	1306	2	Only free memory allocated dynamically
EXP11-C	builtipack-objects.c	1500	26	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	builtipack-objects.c	1511	14	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtipack-objects.c	1516	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtipack-objects.c	1521	6	Do not ignore values returned by functions: oidset_insert
DCL01-C	builtipack-objects.c	1535	11	Do not reuse variable names in subscopes: no_try_delta
STR11-C	builtipack-objects.c	1558	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builtipack-objects.c	1583	2	Do not ignore values returned by functions: create_object_entry
EXP12-C	builtipack-objects.c	1602	2	Do not ignore values returned by functions: create_object_entry
DCL01-C	builtipack-objects.c	1608	2	Do not reuse variable names in subscopes: ref
INT01-C	builtipack-objects.c	1617	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	1621	18	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtipack-objects.c	1670	3	Only free memory allocated dynamically
EXP36-C	builtipack-objects.c	1684	17	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtipack-objects.c	1708	2	Store a new value in pointers immediately after free()
INT07-C	builtipack-objects.c	1714	22	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	builtipack-objects.c	1719	48	Do not reuse variable names in subscopes: tree
EXP12-C	builtipack-objects.c	1737	4	Do not ignore values returned by functions: add_object_entry
DCL02-C	builtipack-objects.c	1810	4	Use visually distinct identifiers: tree
DCL01-C	builtipack-objects.c	1744	4	Do not reuse variable names in subscopes: tree
DCL00-C	builtipack-objects.c	1746	4	Const-qualify immutable objects: downlen
DCL02-C	builtipack-objects.c	1810	4	Use visually distinct identifiers: tree
DCL00-C	builtipack-objects.c	1767	3	Const-qualify immutable objects: mi
INT32-C	builtipack-objects.c	1775	9	Ensure that operations on signed integers do not result in overflow
INT32-C	builtipack-objects.c	1783	8	Ensure that operations on signed integers do not result in overflow
EXP36-C	builtipack-objects.c	1784	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtipack-objects.c	1789	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	1789	3	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	builtipack-objects.c	1791	18	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	builtipack-objects.c	1799	2	Const-qualify immutable objects: hash
EXP12-C	builtipack-objects.c	1807	4	Do not ignore values returned by functions: add_object_entry
DCL01-C	builtipack-objects.c	1810	4	Do not reuse variable names in subscopes: tree
MEM34-C	builtipack-objects.c	1834	4	Only free memory allocated dynamically
EXP36-C	builtipack-objects.c	1839	2	Do not convert pointers into more strictly aligned pointer types
MEM30-C	builtipack-objects.c	1859	3	Do not access freed memory
MEM34-C	builtipack-objects.c	1859	3	Only free memory allocated dynamically
INT01-C	builtipack-objects.c	1862	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL00-C	builtipack-objects.c	1952	3	Const-qualify immutable objects: ofs
DCL01-C	builtipack-objects.c	1952	3	Do not reuse variable names in subscopes: ofs
DCL01-C	builtipack-objects.c	1954	3	Do not reuse variable names in subscopes: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
INT01-C	builtipack-objects.c	1996	38	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
INT13-C	builtipack-objects.c	2006	17	Use bitwise operators only on unsigned operands
INT01-C	builtipack-objects.c	2006	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
MSC12-C	builtipack-objects.c	2007	6	Detect and remove code that has no effect
INT14-C	builtipack-objects.c	2012	9	Avoid performing bitwise and arithmetic operations on the same data
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
MSC12-C	builtipack-objects.c	2016	5	Detect and remove code that has no effect
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
DCL02-C	builtipack-objects.c	3801	2	Use visually distinct identifiers: type
EXP05-C	builtipack-objects.c	2102	34	Do not cast away a const qualification
EXP05-C	builtipack-objects.c	2103	34	Do not cast away a const qualification
EXP36-C	builtipack-objects.c	2300	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtipack-objects.c	2322	2	Only free memory allocated dynamically
EXP05-C	builtipack-objects.c	2336	34	Do not cast away a const qualification
EXP05-C	builtipack-objects.c	2337	34	Do not cast away a const qualification
DCL01-C	builtipack-objects.c	2370	2	Do not reuse variable names in subscopes: index
DCL01-C	builtipack-objects.c	2371	2	Do not reuse variable names in subscopes: depth
EXP36-C	builtipack-objects.c	2426	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtipack-objects.c	2506	25	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtipack-objects.c	2586	4	Only free memory allocated dynamically
MEM01-C	builtipack-objects.c	2608	3	Store a new value in pointers immediately after free()
MEM34-C	builtipack-objects.c	2608	3	Only free memory allocated dynamically
DCL01-C	builtipack-objects.c	2646	8	Do not reuse variable names in subscopes: window
DCL01-C	builtipack-objects.c	2646	20	Do not reuse variable names in subscopes: depth
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
EXP36-C	builtipack-objects.c	2652	2	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
INT33-C	builtipack-objects.c	2678	49	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
INT33-C	builtipack-objects.c	2762	42	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL00-C	builtipack-objects.c	2765	5	Const-qualify immutable objects: src
INT33-C	builtipack-objects.c	2765	25	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
MEM34-C	builtipack-objects.c	2784	2	Only free memory allocated dynamically
DCL01-C	builtipack-objects.c	2808	2	Do not reuse variable names in subscopes: window
DCL01-C	builtipack-objects.c	2809	2	Do not reuse variable names in subscopes: depth
EXP12-C	builtipack-objects.c	2824	2	Do not ignore values returned by functions: pthread_mutex_init
EXP12-C	builtipack-objects.c	2825	2	Do not ignore values returned by functions: pthread_mutex_init
EXP12-C	builtipack-objects.c	2826	2	Do not ignore values returned by functions: pthread_cond_init
EXP12-C	builtipack-objects.c	2831	2	Do not ignore values returned by functions: pthread_cond_destroy
EXP12-C	builtipack-objects.c	2832	2	Do not ignore values returned by functions: pthread_mutex_destroy
EXP12-C	builtipack-objects.c	2833	2	Do not ignore values returned by functions: pthread_mutex_destroy
EXP36-C	builtipack-objects.c	2838	29	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtipack-objects.c	2849	3	Do not ignore values returned by functions: pthread_cond_signal
DCL01-C	builtipack-objects.c	2874	11	Do not reuse variable names in subscopes: window
DCL01-C	builtipack-objects.c	2874	23	Do not reuse variable names in subscopes: depth
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
EXP36-C	builtipack-objects.c	2889	2	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
EXP12-C	builtipack-objects.c	2923	3	Do not ignore values returned by functions: pthread_mutex_init
EXP12-C	builtipack-objects.c	2924	3	Do not ignore values returned by functions: pthread_cond_init
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
EXP12-C	builtipack-objects.c	2952	4	Do not ignore values returned by functions: pthread_cond_wait
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
EXP12-C	builtipack-objects.c	2988	3	Do not ignore values returned by functions: pthread_cond_signal
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
EXP12-C	builtipack-objects.c	2992	4	Do not ignore values returned by functions: pthread_join
EXP12-C	builtipack-objects.c	2993	4	Do not ignore values returned by functions: pthread_cond_destroy
EXP12-C	builtipack-objects.c	2994	4	Do not ignore values returned by functions: pthread_mutex_destroy
MEM34-C	builtipack-objects.c	2999	2	Only free memory allocated dynamically
DCL01-C	builtipack-objects.c	3011	2	Do not reuse variable names in subscopes: tag
EXP12-C	builtipack-objects.c	3029	3	Do not ignore values returned by functions: add_object_entry
EXP11-C	builtipack-objects.c	3034	9	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	builtipack-objects.c	3038	36	Do not reuse variable names in subscopes: tag
DCL13-C	builtipack-objects.c	3039	33	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL01-C	builtipack-objects.c	3048	30	Do not reuse variable names in subscopes: window
DCL01-C	builtipack-objects.c	3048	42	Do not reuse variable names in subscopes: depth
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
EXP36-C	builtipack-objects.c	3072	2	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3048	30	Use visually distinct identifiers: window
MEM34-C	builtipack-objects.c	3121	2	Only free memory allocated dynamically
INT13-C	builtipack-objects.c	3148	25	Use bitwise operators only on unsigned operands
INT13-C	builtipack-objects.c	3150	25	Use bitwise operators only on unsigned operands
INT13-C	builtipack-objects.c	3155	25	Use bitwise operators only on unsigned operands
INT13-C	builtipack-objects.c	3157	25	Use bitwise operators only on unsigned operands
EXP36-C	builtipack-objects.c	3194	44	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtipack-objects.c	3214	3	Do not ignore values returned by functions: oidmap_put
EXP36-C	builtipack-objects.c	3241	27	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtipack-objects.c	3259	2	Do not ignore values returned by functions: create_object_entry
DCL13-C	builtipack-objects.c	3264	50	Declare function parameters that are pointers to values not changed by the function as const: commit
DCL01-C	builtipack-objects.c	3264	50	Do not reuse variable names in subscopes: commit
DCL13-C	builtipack-objects.c	3264	64	Declare function parameters that are pointers to values not changed by the function as const: _data
DCL01-C	builtipack-objects.c	3269	50	Do not reuse variable names in subscopes: object
DCL13-C	builtipack-objects.c	3270	13	Declare function parameters that are pointers to values not changed by the function as const: _data
EXP36-C	builtipack-objects.c	3293	61	Do not convert pointers into more strictly aligned pointer types
EXP05-C	builtipack-objects.c	3293	26	Do not cast away a const qualification
EXP36-C	builtipack-objects.c	3294	61	Do not convert pointers into more strictly aligned pointer types
EXP05-C	builtipack-objects.c	3294	26	Do not cast away a const qualification
MSC05-C	builtipack-objects.c	3300	15	Do not manipulate time_t typed values directly
MSC05-C	builtipack-objects.c	3302	20	Do not manipulate time_t typed values directly
DCL02-C	builtipack-objects.c	4450	3	Use visually distinct identifiers: p
DCL01-C	builtipack-objects.c	3373	3	Do not reuse variable names in subscopes: p
EXP36-C	builtipack-objects.c	3373	30	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtipack-objects.c	4450	3	Use visually distinct identifiers: p
DCL02-C	builtipack-objects.c	4450	3	Use visually distinct identifiers: p
DCL02-C	builtipack-objects.c	4450	3	Use visually distinct identifiers: p
DCL01-C	builtipack-objects.c	3386	3	Do not reuse variable names in subscopes: p
EXP36-C	builtipack-objects.c	3386	30	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtipack-objects.c	4450	3	Use visually distinct identifiers: p
DCL02-C	builtipack-objects.c	4450	3	Use visually distinct identifiers: p
DCL01-C	builtipack-objects.c	3400	3	Do not reuse variable names in subscopes: p
EXP36-C	builtipack-objects.c	3400	30	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtipack-objects.c	3401	3	Do not ignore values returned by functions: for_each_object_in_pack
DCL13-C	builtipack-objects.c	3468	75	Declare function parameters that are pointers to values not changed by the function as const: data
DCL01-C	builtipack-objects.c	3483	46	Do not reuse variable names in subscopes: commit
DCL13-C	builtipack-objects.c	3488	62	Declare function parameters that are pointers to values not changed by the function as const: data
DCL01-C	builtipack-objects.c	3493	47	Do not reuse variable names in subscopes: commit
DCL01-C	builtipack-objects.c	3498	50	Do not reuse variable names in subscopes: object
EXP36-C	builtipack-objects.c	3510	30	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtipack-objects.c	3663	3	Do not ignore values returned by functions: add_object_entry
DCL01-C	builtipack-objects.c	3667	40	Do not reuse variable names in subscopes: commit
DCL13-C	builtipack-objects.c	3667	54	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	builtipack-objects.c	3669	2	Do not ignore values returned by functions: add_object_entry
DCL13-C	builtipack-objects.c	3678	69	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	builtipack-objects.c	3681	2	Do not ignore values returned by functions: add_object_entry
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL01-C	builtipack-objects.c	3685	3	Do not reuse variable names in subscopes: depth
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
DCL02-C	builtipack-objects.c	3685	3	Use visually distinct identifiers: depth
MSC12-C	builtipack-objects.c	3701	2	Detect and remove code that has no effect
MSC12-C	builtipack-objects.c	3715	2	Detect and remove code that has no effect
MSC12-C	builtipack-objects.c	3730	2	Detect and remove code that has no effect
MSC12-C	builtipack-objects.c	3731	2	Detect and remove code that has no effect
DCL01-C	builtipack-objects.c	3757	38	Do not reuse variable names in subscopes: commit
DCL13-C	builtipack-objects.c	3765	18	Declare function parameters that are pointers to values not changed by the function as const: _data
EXP12-C	builtipack-objects.c	3783	3	Do not ignore values returned by functions: add_object_entry
DCL13-C	builtipack-objects.c	3799	14	Declare function parameters that are pointers to values not changed by the function as const: data
DCL00-C	builtipack-objects.c	3801	2	Const-qualify immutable objects: type
EXP12-C	builtipack-objects.c	3819	3	Do not ignore values returned by functions: add_object_entry
EXP12-C	builtipack-objects.c	3831	2	Do not ignore values returned by functions: for_each_loose_file_in_objdir
EXP11-C	builtipack-objects.c	3838	41	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	builtipack-objects.c	3838	41	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtipack-objects.c	3897	4	Do not ignore values returned by functions: nth_packed_object_id
MSC12-C	builtipack-objects.c	3938	3	Detect and remove code that has no effect
DCL13-C	builtipack-objects.c	3951	12	Declare function parameters that are pointers to values not changed by the function as const: data
DCL01-C	builtipack-objects.c	3956	49	Do not reuse variable names in subscopes: commit
DCL13-C	builtipack-objects.c	3956	63	Declare function parameters that are pointers to values not changed by the function as const: data
DCL13-C	builtipack-objects.c	3964	16	Declare function parameters that are pointers to values not changed by the function as const: data
DCL01-C	builtipack-objects.c	3967	2	Do not reuse variable names in subscopes: object
EXP12-C	builtipack-objects.c	3989	3	Do not ignore values returned by functions: for_each_ref_in
EXP12-C	builtipack-objects.c	4003	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	builtipack-objects.c	4006	2	Do not ignore values returned by functions: is_repository_shallow
INT07-C	builtipack-objects.c	4014	16	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtipack-objects.c	4027	5	Do not ignore values returned by functions: register_shallow
INT01-C	builtipack-objects.c	4093	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-objects.c	4097	9	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtipack-objects.c	4118	9	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	builtipack-objects.c	4159	32	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtipack-objects.c	4301	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtipack-objects.c	4308	22	Do not convert pointers into more strictly aligned pointer types
INT14-C	builtipack-objects.c	4315	9	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	builtipack-objects.c	4320	30	Avoid performing bitwise and arithmetic operations on the same data
EXP12-C	builtipack-objects.c	4325	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipack-objects.c	4328	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipack-objects.c	4336	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipack-objects.c	4340	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipack-objects.c	4344	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipack-objects.c	4348	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipack-objects.c	4354	3	Do not ignore values returned by functions: strvec_push
STR11-C	builtipack-redundant.c	16	1	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	builtipack-redundant.c	55	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtipack-redundant.c	64	17	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtipack-redundant.c	76	31	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtipack-redundant.c	76	31	Ensure that return values are compared against the proper type
INT01-C	builtipack-redundant.c	110	18	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtipack-redundant.c	110	18	Ensure that return values are compared against the proper type
DCL13-C	builtipack-redundant.c	127	52	Declare function parameters that are pointers to values not changed by the function as const: hint
DCL00-C	builtipack-redundant.c	133	3	Const-qualify immutable objects: cmp
EXP36-C	builtipack-redundant.c	199	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtipack-redundant.c	231	15	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtipack-redundant.c	256	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	256	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	257	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	257	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	294	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	294	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	295	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	295	34	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtipack-redundant.c	297	3	Const-qualify immutable objects: cmp
INT01-C	builtipack-redundant.c	338	7	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	builtipack-redundant.c	346	29	Do not cast away a const qualification
EXP05-C	builtipack-redundant.c	347	29	Do not cast away a const qualification
INT01-C	builtipack-redundant.c	372	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtipack-redundant.c	376	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtipack-redundant.c	383	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	383	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	385	8	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtipack-redundant.c	388	2	Only free memory allocated dynamically
INT01-C	builtipack-redundant.c	416	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtipack-redundant.c	416	20	Ensure that return values are compared against the proper type
MEM34-C	builtipack-redundant.c	417	3	Only free memory allocated dynamically
INT01-C	builtipack-redundant.c	434	43	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtipack-redundant.c	434	43	Ensure that return values are compared against the proper type
EXP12-C	builtipack-redundant.c	437	3	Do not ignore values returned by functions: pack_list_insert
INT01-C	builtipack-redundant.c	439	65	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	522	30	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	523	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipack-redundant.c	523	30	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtipack-redundant.c	524	3	Do not ignore values returned by functions: llist_insert_back
INT01-C	builtipack-redundant.c	539	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtipack-redundant.c	555	3	Do not ignore values returned by functions: add_pack
EXP36-C	builtipack-redundant.c	626	17	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtipack-redundant.c	629	4	Do not ignore values returned by functions: llist_insert_sorted_unique
INT07-C	builtipatch-id.c	21	11	Use only explicitly signed or unsigned char type for numeric values
STR11-C	builtipatch-id.c	28	2	Do not specify the dimension of a character array initialized with a string literal
INT05-C	builtipatch-id.c	36	15	Use strtol() or a related function to convert a string token to an integer
INT05-C	builtipatch-id.c	49	14	Use strtol() or a related function to convert a string token to an integer
INT01-C	builtipatch-id.c	80	38	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtipatch-id.c	116	28	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtipatch-id.c	117	6	Do not ignore values returned by functions: gitstrlcpy
EXP12-C	builtipatch-id.c	118	6	Do not ignore values returned by functions: gitstrlcpy
EXP12-C	builtipatch-id.c	139	5	Do not ignore values returned by functions: scan_hunk_header
EXP36-C	builtipatch-id.c	199	31	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiprune.c	36	4	Do not ignore values returned by functions: remove_dir_recursively
DCL01-C	builtiprune.c	51	2	Do not reuse variable names in subscopes: progress
EXP36-C	builtiprune.c	77	26	Do not convert pointers into more strictly aligned pointer types
MSC12-C	builtiprune.c	85	3	Detect and remove code that has no effect
DCL00-C	builtiprune.c	91	3	Const-qualify immutable objects: type
DCL01-C	builtiprune.c	101	36	Do not reuse variable names in subscopes: __xpg_basename
DCL13-C	builtiprune.c	101	70	Declare function parameters that are pointers to values not changed by the function as const: data
DCL13-C	builtiprune.c	110	66	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	builtiprune.c	138	2	Do not ignore values returned by functions: closedir
DCL01-C	builtiprune.c	172	4	Do not reuse variable names in subscopes: object
EXP12-C	builtiprune.c	187	2	Do not ignore values returned by functions: for_each_loose_file_in_objdir
MEM01-C	builtiprune.c	194	2	Store a new value in pointers immediately after free()
MEM34-C	builtiprune.c	194	2	Only free memory allocated dynamically
DCL00-C	builtipull.c	40	2	Const-qualify immutable objects: v
EXP36-C	builtipull.c	57	31	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtipull.c	264	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipull.c	267	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipull.c	294	2	Do not ignore values returned by functions: setenv
MSC01-C	builtipull.c	312	2	Strive for logical completeness
DCL00-C	builtipull.c	341	4	Const-qualify immutable objects: ret
MEM34-C	builtipull.c	342	4	Only free memory allocated dynamically
MEM34-C	builtipull.c	346	3	Only free memory allocated dynamically
DCL01-C	builtipull.c	410	43	Do not reuse variable names in subscopes: remote
EXP36-C	builtipull.c	412	29	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtipull.c	446	2	Do not reuse variable names in subscopes: remote
EXP12-C	builtipull.c	453	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtipull.c	456	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtipull.c	461	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtipull.c	466	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtipull.c	468	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtipull.c	476	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtipull.c	481	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtipull.c	483	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtipull.c	485	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtipull.c	487	3	Do not ignore values returned by functions: fprintf_ln
DCL05-C	builtipull.c	501	1	Use typedefs to improve code readability
EXP12-C	builtipull.c	542	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipull.c	545	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipull.c	548	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipull.c	580	3	Do not ignore values returned by functions: strvec_push
DCL01-C	builtipull.c	596	3	Do not reuse variable names in subscopes: commit
EXP12-C	builtipull.c	696	2	Do not ignore values returned by functions: strvec_push
DCL01-C	builtipull.c	708	52	Do not reuse variable names in subscopes: remote
MSC12-C	builtipull.c	723	2	Detect and remove code that has no effect
DCL01-C	builtipull.c	737	52	Do not reuse variable names in subscopes: remote
DCL01-C	builtipull.c	737	72	Do not reuse variable names in subscopes: refspec
DCL01-C	builtipull.c	774	15	Do not reuse variable names in subscopes: refspec
EXP12-C	builtipull.c	824	2	Do not ignore values returned by functions: commit_list_insert
EXP12-C	builtipull.c	826	2	Do not ignore values returned by functions: commit_list_insert
EXP12-C	builtipull.c	881	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipull.c	907	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipull.c	908	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtipull.c	910	2	Do not ignore values returned by functions: strvec_push
INT01-C	builtipull.c	924	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtipull.c	929	2	Do not ignore values returned by functions: commit_list_insert
INT01-C	builtipull.c	948	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtipull.c	954	3	Do not ignore values returned by functions: commit_list_insert
INT01-C	builtipull.c	1097	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtipull.c	1102	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtipull.c	1127	3	Do not ignore values returned by functions: get_rebase_newbase_and_upstream
DCL01-C	builtipush.c	65	51	Do not reuse variable names in subscopes: refspec
DCL01-C	builtipush.c	65	72	Do not reuse variable names in subscopes: ref
DCL01-C	builtipush.c	66	22	Do not reuse variable names in subscopes: remote
EXP12-C	builtipush.c	79	3	Do not ignore values returned by functions: memset
DCL01-C	builtipush.c	91	3	Do not reuse variable names in subscopes: branch
DCL01-C	builtipush.c	104	2	Do not reuse variable names in subscopes: remote
DCL01-C	builtipush.c	109	3	Do not reuse variable names in subscopes: ref
DCL05-C	builtipush.c	134	1	Use typedefs to improve code readability
DCL01-C	builtipush.c	134	46	Do not reuse variable names in subscopes: remote
DCL01-C	builtipush.c	144	53	Do not reuse variable names in subscopes: branch
DCL01-C	builtipush.c	145	25	Do not reuse variable names in subscopes: remote
EXP12-C	builtipush.c	159	2	Do not ignore values returned by functions: skip_prefix
STR11-C	builtipush.c	191	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtipush.c	198	63	Do not reuse variable names in subscopes: branch
INT13-C	builtipush.c	200	38	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	207	15	Use bitwise operators only on unsigned operands
DCL01-C	builtipush.c	231	68	Do not reuse variable names in subscopes: remote
DCL01-C	builtipush.c	233	2	Do not reuse variable names in subscopes: branch
INT13-C	builtipush.c	285	14	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	286	10	Use bitwise operators only on unsigned operands
STR11-C	builtipush.c	291	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtipush.c	297	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtipush.c	303	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtipush.c	310	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtipush.c	313	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtipush.c	318	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtipush.c	366	48	Do not reuse variable names in subscopes: transport
DCL01-C	builtipush.c	366	75	Do not reuse variable names in subscopes: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
EXP12-C	builtipush.c	379	2	Do not ignore values returned by functions: transport_set_option
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
MSC12-C	builtipush.c	396	3	Detect and remove code that has no effect
INT13-C	builtipush.c	400	6	Use bitwise operators only on unsigned operands
MEM01-C	builtipush.c	401	2	Store a new value in pointers immediately after free()
MEM34-C	builtipush.c	401	2	Only free memory allocated dynamically
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL02-C	builtipush.c	366	75	Use visually distinct identifiers: rs
DCL01-C	builtipush.c	424	21	Do not reuse variable names in subscopes: remote
INT13-C	builtipush.c	432	9	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	434	35	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	437	22	Use bitwise operators only on unsigned operands
DCL01-C	builtipush.c	444	4	Do not reuse variable names in subscopes: transport
INT13-C	builtipush.c	446	14	Use bitwise operators only on unsigned operands
DCL01-C	builtipush.c	452	3	Do not reuse variable names in subscopes: transport
INT13-C	builtipush.c	454	13	Use bitwise operators only on unsigned operands
DCL02-C	builtipush.c	465	2	Use visually distinct identifiers: recurse_submodules
DCL01-C	builtipush.c	465	2	Do not reuse variable names in subscopes: recurse_submodules
EXP36-C	builtipush.c	465	31	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtipush.c	465	2	Use visually distinct identifiers: recurse_submodules
DCL02-C	builtipush.c	465	2	Use visually distinct identifiers: recurse_submodules
DCL02-C	builtipush.c	465	2	Use visually distinct identifiers: recurse_submodules
DCL02-C	builtipush.c	465	2	Use visually distinct identifiers: recurse_submodules
DCL02-C	builtipush.c	465	2	Use visually distinct identifiers: recurse_submodules
DCL02-C	builtipush.c	465	2	Use visually distinct identifiers: recurse_submodules
DCL02-C	builtipush.c	465	2	Use visually distinct identifiers: recurse_submodules
MSC01-C	builtipush.c	485	2	Strive for logical completeness
INT13-C	builtipush.c	487	10	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	487	13	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	487	42	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	490	10	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	491	10	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	491	13	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	494	10	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	495	10	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	495	13	Use bitwise operators only on unsigned operands
EXP36-C	builtipush.c	504	15	Do not convert pointers into more strictly aligned pointer types
INT13-C	builtipush.c	513	11	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	515	11	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	515	14	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	519	11	Use bitwise operators only on unsigned operands
DCL00-C	builtipush.c	543	3	Const-qualify immutable objects: val
DCL00-C	builtipush.c	559	3	Const-qualify immutable objects: slot
INT13-C	builtipush.c	567	11	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	569	11	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	569	14	Use bitwise operators only on unsigned operands
DCL01-C	builtipush.c	586	2	Do not reuse variable names in subscopes: remote
INT13-C	builtipush.c	592	3	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	637	36	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	637	58	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	643	9	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	645	9	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	647	9	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	672	9	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	672	34	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	674	12	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	680	12	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	686	13	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	686	45	Use bitwise operators only on unsigned operands
INT13-C	builtipush.c	689	36	Use bitwise operators only on unsigned operands
DCL01-C	builtirange-diff.c	25	2	Do not reuse variable names in subscopes: range_diff_options
EXP05-C	builtirange-diff.c	129	12	Do not cast away a const qualification
MEM34-C	builtirange-diff.c	145	2	Only free memory allocated dynamically
DCL01-C	builtiread-tree.c	29	2	Do not reuse variable names in subscopes: tree
EXP12-C	builtiread-tree.c	94	3	Do not ignore values returned by functions: xsnprintf
DCL01-C	builtiread-tree.c	115	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtiread-tree.c	155	2	Do not ignore values returned by functions: memset
EXP12-C	builtiread-tree.c	179	2	Do not ignore values returned by functions: repo_hold_locked_index
DCL01-C	builtiread-tree.c	258	3	Do not reuse variable names in subscopes: tree
EXP12-C	builtiread-tree.c	259	3	Do not ignore values returned by functions: parse_tree
DCL01-C	builtirebase.c	106	2	Do not reuse variable names in subscopes: action
DCL01-C	builtirebase.c	183	2	Do not reuse variable names in subscopes: todo_list
DCL05-C	builtirebase.c	202	1	Use typedefs to improve code readability
DCL13-C	builtirebase.c	202	47	Declare function parameters that are pointers to values not changed by the function as const: upstream
DCL13-C	builtirebase.c	202	72	Declare function parameters that are pointers to values not changed by the function as const: onto
EXP12-C	builtirebase.c	236	2	Do not ignore values returned by functions: delete_reflog
EXP12-C	builtirebase.c	249	3	Do not ignore values returned by functions: string_list_split
DCL01-C	builtirebase.c	262	2	Do not reuse variable names in subscopes: todo_list
MEM01-C	builtirebase.c	273	3	Store a new value in pointers immediately after free()
MEM34-C	builtirebase.c	273	3	Only free memory allocated dynamically
MEM34-C	builtirebase.c	274	3	Only free memory allocated dynamically
MEM01-C	builtirebase.c	308	2	Store a new value in pointers immediately after free()
MEM34-C	builtirebase.c	308	2	Only free memory allocated dynamically
MEM01-C	builtirebase.c	309	2	Store a new value in pointers immediately after free()
MEM34-C	builtirebase.c	309	2	Only free memory allocated dynamically
EXP12-C	builtirebase.c	321	2	Do not ignore values returned by functions: git_config_get_bool
DCL01-C	builtirebase.c	346	3	Do not reuse variable names in subscopes: replay_opts
EXP36-C	builtirebase.c	374	35	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtirebase.c	389	66	Do not reuse variable names in subscopes: option
EXP12-C	builtirebase.c	551	2	Do not ignore values returned by functions: delete_ref
EXP12-C	builtirebase.c	552	2	Do not ignore values returned by functions: unlink
EXP12-C	builtirebase.c	553	2	Do not ignore values returned by functions: apply_autostash
EXP12-C	builtirebase.c	558	2	Do not ignore values returned by functions: run_auto_maintenance
INT13-C	builtirebase.c	558	55	Use bitwise operators only on unsigned operands
EXP12-C	builtirebase.c	619	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirebase.c	620	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtirebase.c	623	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirebase.c	624	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtirebase.c	634	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirebase.c	635	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtirebase.c	643	3	Do not ignore values returned by functions: strvec_push
MEM01-C	builtirebase.c	660	3	Store a new value in pointers immediately after free()
MEM34-C	builtirebase.c	660	3	Only free memory allocated dynamically
EXP12-C	builtirebase.c	674	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirebase.c	682	3	Do not ignore values returned by functions: unlink
MEM01-C	builtirebase.c	683	3	Store a new value in pointers immediately after free()
MEM34-C	builtirebase.c	683	3	Only free memory allocated dynamically
EXP12-C	builtirebase.c	689	3	Do not ignore values returned by functions: reset_head
MSC12-C	builtirebase.c	690	3	Detect and remove code that has no effect
MEM01-C	builtirebase.c	706	3	Store a new value in pointers immediately after free()
MEM34-C	builtirebase.c	706	3	Only free memory allocated dynamically
EXP12-C	builtirebase.c	712	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirebase.c	713	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtirebase.c	714	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirebase.c	722	2	Do not ignore values returned by functions: unlink
MEM01-C	builtirebase.c	723	2	Store a new value in pointers immediately after free()
MEM34-C	builtirebase.c	723	2	Only free memory allocated dynamically
EXP12-C	builtirebase.c	741	3	Do not ignore values returned by functions: setenv
EXP12-C	builtirebase.c	743	4	Do not ignore values returned by functions: setenv
EXP12-C	builtirebase.c	769	3	Do not ignore values returned by functions: apply_autostash
EXP12-C	builtirebase.c	771	3	Do not ignore values returned by functions: remove_dir_recursively
EXP36-C	builtirebase.c	781	32	Do not convert pointers into more strictly aligned pointer types
DCL13-C	builtirebase.c	856	45	Declare function parameters that are pointers to values not changed by the function as const: from
EXP12-C	builtirebase.c	859	3	Do not ignore values returned by functions: repo_parse_commit
EXP36-C	builtirebase.c	918	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtirebase.c	931	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtirebase.c	946	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtirebase.c	971	38	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtirebase.c	972	2	Const-qualify immutable objects: value
DCL01-C	builtirebase.c	995	3	Do not reuse variable names in subscopes: remote
INT13-C	builtirebase.c	1052	3	Use bitwise operators only on unsigned operands
INT13-C	builtirebase.c	1052	3	Use bitwise operators only on unsigned operands
INT13-C	builtirebase.c	1055	3	Use bitwise operators only on unsigned operands
INT13-C	builtirebase.c	1055	3	Use bitwise operators only on unsigned operands
DCL01-C	builtirebase.c	1266	3	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtirebase.c	1276	3	Do not ignore values returned by functions: refresh_index
EXP12-C	builtirebase.c	1283	4	Do not ignore values returned by functions: puts
EXP12-C	builtirebase.c	1330	3	Do not ignore values returned by functions: save_autostash
INT01-C	builtirebase.c	1380	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirebase.c	1387	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtirebase.c	1388	3	Do not reuse variable names in subscopes: option
INT07-C	builtirebase.c	1398	11	Use only explicitly signed or unsigned char type for numeric values
INT01-C	builtirebase.c	1404	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtirebase.c	1464	3	Use visually distinct identifiers: i
DCL01-C	builtirebase.c	1425	3	Do not reuse variable names in subscopes: i
DCL02-C	builtirebase.c	1464	3	Use visually distinct identifiers: i
INT01-C	builtirebase.c	1430	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtirebase.c	1458	4	Do not ignore values returned by functions: string_list_append
DCL02-C	builtirebase.c	1464	3	Use visually distinct identifiers: i
DCL01-C	builtirebase.c	1464	3	Do not reuse variable names in subscopes: i
DCL02-C	builtirebase.c	1464	3	Use visually distinct identifiers: i
DCL02-C	builtirebase.c	1464	3	Use visually distinct identifiers: i
INT01-C	builtirebase.c	1470	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirebase.c	1501	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirebase.c	1503	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirebase.c	1545	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtirebase.c	1557	3	Do not ignore values returned by functions: strvec_push
DCL01-C	builtirebase.c	1563	4	Do not reuse variable names in subscopes: branch
INT13-C	builtirebase.c	1771	22	Use bitwise operators only on unsigned operands
MSC12-C	builtirebase.c	1793	2	Detect and remove code that has no effect
INT13-C	builtirebase.c	1794	52	Use bitwise operators only on unsigned operands
INT13-C	builtirebase.c	1794	34	Use bitwise operators only on unsigned operands
EXP12-C	builtirebase.c	1809	3	Do not ignore values returned by functions: move_to_original_branch
MEM34-C	builtirebase.c	1835	2	Only free memory allocated dynamically
EXP05-C	builtireceive-pack.c	170	8	Do not cast away a const qualification
EXP36-C	builtireceive-pack.c	297	24	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtireceive-pack.c	313	3	Do not ignore values returned by functions: oidset_insert
EXP36-C	builtireceive-pack.c	322	24	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtireceive-pack.c	334	2	Do not ignore values returned by functions: for_each_ref
DCL01-C	builtireceive-pack.c	351	2	Do not reuse variable names in subscopes: report
DCL01-C	builtireceive-pack.c	355	2	Do not reuse variable names in subscopes: index
EXP36-C	builtireceive-pack.c	367	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtireceive-pack.c	440	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtireceive-pack.c	441	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtireceive-pack.c	442	20	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtireceive-pack.c	443	12	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builtireceive-pack.c	454	2	Const-qualify immutable objects: params
EXP12-C	builtireceive-pack.c	455	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	builtireceive-pack.c	457	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	builtireceive-pack.c	463	2	Const-qualify immutable objects: params
EXP12-C	builtireceive-pack.c	464	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	builtireceive-pack.c	466	2	Do not ignore values returned by functions: __builtin_va_end
DCL13-C	builtireceive-pack.c	469	59	Declare function parameters that are pointers to values not changed by the function as const: arg
STR11-C	builtireceive-pack.c	497	5	Do not specify the dimension of a character array initialized with a string literal
INT01-C	builtireceive-pack.c	498	38	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtireceive-pack.c	543	2	Do not ignore values returned by functions: memset
INT01-C	builtireceive-pack.c	553	16	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtireceive-pack.c	610	7	Use bitwise operators only on unsigned operands
INT13-C	builtireceive-pack.c	610	15	Use bitwise operators only on unsigned operands
EXP05-C	builtireceive-pack.c	690	8	Do not cast away a const qualification
MEM01-C	builtireceive-pack.c	698	2	Store a new value in pointers immediately after free()
MEM34-C	builtireceive-pack.c	698	2	Only free memory allocated dynamically
MEM34-C	builtireceive-pack.c	699	2	Only free memory allocated dynamically
DCL01-C	builtireceive-pack.c	712	2	Do not reuse variable names in subscopes: option
INT01-C	builtireceive-pack.c	725	20	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	builtireceive-pack.c	731	3	Store a new value in pointers immediately after free()
MEM31-C	builtireceive-pack.c	731	3	Free dynamically allocated memory when no longer needed
MEM34-C	builtireceive-pack.c	731	3	Only free memory allocated dynamically
INT01-C	builtireceive-pack.c	734	19	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtireceive-pack.c	738	2	Only free memory allocated dynamically
EXP12-C	builtireceive-pack.c	757	3	Do not ignore values returned by functions: memset
EXP12-C	builtireceive-pack.c	762	3	Do not ignore values returned by functions: check_signature
INT01-C	builtireceive-pack.c	763	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtireceive-pack.c	768	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtireceive-pack.c	770	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtireceive-pack.c	772	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtireceive-pack.c	774	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtireceive-pack.c	777	4	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtireceive-pack.c	780	4	Do not ignore values returned by functions: strvec_pushf
DCL01-C	builtireceive-pack.c	793	2	Do not reuse variable names in subscopes: report
EXP12-C	builtireceive-pack.c	811	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireceive-pack.c	819	4	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtireceive-pack.c	823	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtireceive-pack.c	832	3	Do not ignore values returned by functions: memset
EXP12-C	builtireceive-pack.c	850	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	builtireceive-pack.c	864	2	Do not ignore values returned by functions: sigchain_pop
EXP36-C	builtireceive-pack.c	871	42	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtireceive-pack.c	941	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireceive-pack.c	942	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireceive-pack.c	943	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireceive-pack.c	944	2	Do not ignore values returned by functions: strvec_push
DCL01-C	builtireceive-pack.c	974	2	Do not reuse variable names in subscopes: report
INT07-C	builtireceive-pack.c	1005	8	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	builtireceive-pack.c	1017	6	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtireceive-pack.c	1023	28	Do not convert pointers into more strictly aligned pointer types
INT07-C	builtireceive-pack.c	1031	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtireceive-pack.c	1054	9	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtireceive-pack.c	1119	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireceive-pack.c	1125	3	Do not ignore values returned by functions: memset
EXP12-C	builtireceive-pack.c	1143	2	Do not ignore values returned by functions: sigchain_push
INT05-C	builtireceive-pack.c	1176	15	Use strtol() or a related function to convert a string token to an integer
INT01-C	builtireceive-pack.c	1249	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtireceive-pack.c	1252	19	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtireceive-pack.c	1254	7	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtireceive-pack.c	1258	2	Do not ignore values returned by functions: sigchain_pop
STR05-C	builtireceive-pack.c	1263	1	Use pointers to const when referring to string literals
STR05-C	builtireceive-pack.c	1283	1	Use pointers to const when referring to string literals
DCL01-C	builtireceive-pack.c	1301	2	Do not reuse variable names in subscopes: shallow_lock
DCL00-C	builtireceive-pack.c	1304	2	Const-qualify immutable objects: mask
INT01-C	builtireceive-pack.c	1309	16	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtireceive-pack.c	1311	45	Use bitwise operators only on unsigned operands
EXP12-C	builtireceive-pack.c	1323	2	Do not ignore values returned by functions: commit_shallow_file
INT01-C	builtireceive-pack.c	1329	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtireceive-pack.c	1330	3	Do not ignore values returned by functions: register_shallow
EXP12-C	builtireceive-pack.c	1420	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtireceive-pack.c	1422	2	Do not ignore values returned by functions: strvec_push
DCL01-C	builtireceive-pack.c	1429	80	Do not reuse variable names in subscopes: worktree
EXP12-C	builtireceive-pack.c	1442	2	Do not ignore values returned by functions: strvec_pushf
DCL01-C	builtireceive-pack.c	1462	2	Do not reuse variable names in subscopes: worktree
MSC01-C	builtireceive-pack.c	1477	3	Strive for logical completeness
MSC12-C	builtireceive-pack.c	1498	3	Detect and remove code that has no effect
MSC12-C	builtireceive-pack.c	1545	4	Detect and remove code that has no effect
EXP11-C	builtireceive-pack.c	1549	16	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	builtireceive-pack.c	1550	16	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	builtireceive-pack.c	1633	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireceive-pack.c	1646	3	Do not ignore values returned by functions: finish_command
EXP11-C	builtireceive-pack.c	1714	16	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	builtireceive-pack.c	1728	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtireceive-pack.c	1766	30	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtireceive-pack.c	1919	3	Do not ignore values returned by functions: memset
MEM01-C	builtireceive-pack.c	1990	2	Store a new value in pointers immediately after free()
EXP30-C	builtireceive-pack.c	2020	6	Do not depend on order of evaluation for side effects
DCL00-C	builtireceive-pack.c	2028	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtireceive-pack.c	2028	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtireceive-pack.c	2036	25	Do not reuse variable names in subscopes: push_cert
DCL02-C	builtireceive-pack.c	2036	25	Use visually distinct identifiers: push_cert
DCL02-C	builtireceive-pack.c	2036	25	Use visually distinct identifiers: push_cert
DCL02-C	builtireceive-pack.c	2036	25	Use visually distinct identifiers: push_cert
DCL02-C	builtireceive-pack.c	2036	25	Use visually distinct identifiers: push_cert
DCL02-C	builtireceive-pack.c	2036	25	Use visually distinct identifiers: push_cert
DCL02-C	builtireceive-pack.c	2036	25	Use visually distinct identifiers: push_cert
DCL01-C	builtireceive-pack.c	2051	3	Do not reuse variable names in subscopes: eol
MEM34-C	builtireceive-pack.c	2108	5	Only free memory allocated dynamically
DCL00-C	builtireceive-pack.c	2114	4	Const-qualify immutable objects: saved_options
EXP12-C	builtireceive-pack.c	2118	5	Do not ignore values returned by functions: packet_reader_read
EXP12-C	builtireceive-pack.c	2153	3	Do not ignore values returned by functions: string_list_append
EXP12-C	builtireceive-pack.c	2181	2	Do not ignore values returned by functions: strvec_pushf
DCL00-C	builtireceive-pack.c	2191	2	Const-qualify immutable objects: fsck_objects
EXP12-C	builtireceive-pack.c	2206	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireceive-pack.c	2207	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireceive-pack.c	2226	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireceive-pack.c	2250	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtireceive-pack.c	2292	2	Do not ignore values returned by functions: memset
EXP12-C	builtireceive-pack.c	2300	2	Do not ignore values returned by functions: finish_async
DCL00-C	builtireceive-pack.c	2306	2	Const-qualify immutable objects: bitmap_size
INT01-C	builtireceive-pack.c	2306	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtireceive-pack.c	2306	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtireceive-pack.c	2306	29	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtireceive-pack.c	2308	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtireceive-pack.c	2311	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtireceive-pack.c	2312	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtireceive-pack.c	2313	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtireceive-pack.c	2318	16	Use rsize_t or size_t for all integer values representing the size of an object
INT34-C	builtireceive-pack.c	2326	38	Do not shift a negative number of bits or more bits than exist in the operand
EXP12-C	builtireceive-pack.c	2344	2	Do not ignore values returned by functions: setenv
DCL01-C	builtireceive-pack.c	2349	23	Do not reuse variable names in subscopes: ref
INT01-C	builtireceive-pack.c	2363	24	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtireceive-pack.c	2372	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtireceive-pack.c	2382	2	Only free memory allocated dynamically
DCL01-C	builtireceive-pack.c	2413	2	Do not reuse variable names in subscopes: report
DCL01-C	builtireceive-pack.c	2469	2	Do not reuse variable names in subscopes: ref
MSC01-C	builtireceive-pack.c	2507	2	Strive for logical completeness
EXP12-C	builtireceive-pack.c	2563	3	Do not ignore values returned by functions: sigchain_push
EXP12-C	builtireceive-pack.c	2568	3	Do not ignore values returned by functions: sigchain_pop
EXP12-C	builtireceive-pack.c	2569	3	Do not ignore values returned by functions: run_receive_hook
EXP12-C	builtireceive-pack.c	2586	5	Do not ignore values returned by functions: finish_command
MEM01-C	builtireceive-pack.c	2598	2	Store a new value in pointers immediately after free()
EXP05-C	builtireceive-pack.c	2598	7	Do not cast away a const qualification
DCL01-C	builtireflog.c	55	2	Do not reuse variable names in subscopes: worktree
DCL01-C	builtireflog.c	59	39	Do not reuse variable names in subscopes: ref
EXP36-C	builtireflog.c	62	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtireflog.c	63	2	Do not reuse variable names in subscopes: worktree
EXP12-C	builtireflog.c	75	2	Do not ignore values returned by functions: string_list_append_nodup
DCL00-C	builtireflog.c	99	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	builtireflog.c	99	2	Do not convert pointers into more strictly aligned pointer types
MSC01-C	builtireflog.c	132	3	Strive for logical completeness
MSC01-C	builtireflog.c	146	2	Strive for logical completeness
DCL01-C	builtireflog.c	157	82	Do not reuse variable names in subscopes: ref
EXP36-C	builtireflog.c	196	40	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtireflog.c	212	40	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtireflog.c	230	2	Do not ignore values returned by functions: parse_options
DCL00-C	builtireflog.c	240	2	Const-qualify immutable objects: now
EXP12-C	builtireflog.c	319	4	Do not ignore values returned by functions: refs_for_each_reflog
INT13-C	builtireflog.c	331	11	Use bitwise operators only on unsigned operands
DCL01-C	builtireflog.c	341	3	Do not reuse variable names in subscopes: ref
INT13-C	builtireflog.c	345	11	Use bitwise operators only on unsigned operands
INT13-C	builtireflog.c	349	10	Use bitwise operators only on unsigned operands
MEM30-C	builtireflog.c	354	3	Do not access freed memory
MEM34-C	builtireflog.c	354	3	Only free memory allocated dynamically
INT13-C	builtireflog.c	384	10	Use bitwise operators only on unsigned operands
STR11-C	builtiremote-ext.c	6	1	Do not specify the dimension of a character array initialized with a string literal
INT07-C	builtiremote-ext.c	36	2	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtiremote-ext.c	40	2	Do not ignore values returned by functions: skip_prefix
EXP12-C	builtiremote-ext.c	43	2	Do not ignore values returned by functions: setenv
EXP12-C	builtiremote-ext.c	44	2	Do not ignore values returned by functions: setenv
INT07-C	builtiremote-ext.c	47	19	Use only explicitly signed or unsigned char type for numeric values
INT01-C	builtiremote-ext.c	58	14	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtiremote-ext.c	58	14	Ensure that return values are compared against the proper type
INT07-C	builtiremote-ext.c	82	19	Use only explicitly signed or unsigned char type for numeric values
MSC01-C	builtiremote-ext.c	84	4	Strive for logical completeness
MEM34-C	builtiremote-ext.c	126	3	Only free memory allocated dynamically
INT01-C	builtiremote-ext.c	179	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiremote-ext.c	179	19	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtiremote-ext.c	180	16	Use only explicitly signed or unsigned char type for numeric values
STR11-C	builtiremote-fd.c	4	1	Do not specify the dimension of a character array initialized with a string literal
INT01-C	builtiremote-fd.c	37	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiremote-fd.c	37	19	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtiremote-fd.c	38	16	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtiremote.c	97	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiremote.c	100	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiremote.c	102	2	Do not ignore values returned by functions: printf_ln
STR11-C	builtiremote.c	133	1	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	builtiremote.c	139	24	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	161	2	Do not reuse variable names in subscopes: remote
INT01-C	builtiremote.c	190	41	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	builtiremote.c	198	3	Detect and remove code that has no effect
INT01-C	builtiremote.c	211	16	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtiremote.c	211	16	Ensure that return values are compared against the proper type
INT01-C	builtiremote.c	213	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiremote.c	264	2	Do not ignore values returned by functions: skip_prefix
DCL13-C	builtiremote.c	270	11	Declare function parameters that are pointers to values not changed by the function as const: data
EXP36-C	builtiremote.c	299	13	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiremote.c	312	4	Do not ignore values returned by functions: string_list_append
EXP12-C	builtiremote.c	316	3	Do not ignore values returned by functions: string_list_append
DCL01-C	builtiremote.c	349	2	Do not reuse variable names in subscopes: remote
DCL01-C	builtiremote.c	366	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtiremote.c	415	2	Do not reuse variable names in subscopes: remote
DCL01-C	builtiremote.c	416	2	Do not reuse variable names in subscopes: ref
EXP12-C	builtiremote.c	423	2	Do not ignore values returned by functions: match_push_refs
EXP36-C	builtiremote.c	436	14	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	460	2	Do not reuse variable names in subscopes: remote
EXP36-C	builtiremote.c	469	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiremote.c	482	21	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	492	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtiremote.c	494	2	Do not reuse variable names in subscopes: refspec
EXP12-C	builtiremote.c	496	2	Do not ignore values returned by functions: memset
EXP12-C	builtiremote.c	500	2	Do not ignore values returned by functions: get_fetch_map
EXP12-C	builtiremote.c	504	3	Do not ignore values returned by functions: string_list_append
DCL01-C	builtiremote.c	514	2	Do not reuse variable names in subscopes: remote
DCL01-C	builtiremote.c	522	44	Do not reuse variable names in subscopes: remote
EXP36-C	builtiremote.c	524	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiremote.c	530	13	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	538	2	Do not reuse variable names in subscopes: remote
EXP36-C	builtiremote.c	547	41	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	548	2	Do not reuse variable names in subscopes: refspec
EXP12-C	builtiremote.c	551	2	Do not ignore values returned by functions: memset
EXP05-C	builtiremote.c	552	16	Do not cast away a const qualification
EXP12-C	builtiremote.c	558	3	Do not ignore values returned by functions: memset
EXP05-C	builtiremote.c	559	17	Do not cast away a const qualification
EXP12-C	builtiremote.c	574	2	Do not ignore values returned by functions: string_list_append
DCL01-C	builtiremote.c	590	2	Do not reuse variable names in subscopes: rename
EXP36-C	builtiremote.c	590	31	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	613	40	Do not reuse variable names in subscopes: remote
EXP36-C	builtiremote.c	649	35	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtiremote.c	664	2	Use visually distinct identifiers: push_default
DCL01-C	builtiremote.c	664	2	Do not reuse variable names in subscopes: push_default
DCL02-C	builtiremote.c	664	2	Use visually distinct identifiers: push_default
DCL02-C	builtiremote.c	664	2	Use visually distinct identifiers: push_default
DCL02-C	builtiremote.c	664	2	Use visually distinct identifiers: push_default
DCL00-C	builtiremote.c	670	3	Const-qualify immutable objects: result
DCL02-C	builtiremote.c	664	2	Use visually distinct identifiers: push_default
DCL02-C	builtiremote.c	664	2	Use visually distinct identifiers: push_default
DCL02-C	builtiremote.c	664	2	Use visually distinct identifiers: push_default
DCL02-C	builtiremote.c	664	2	Use visually distinct identifiers: push_default
DCL01-C	builtiremote.c	699	2	Do not reuse variable names in subscopes: rename
DCL01-C	builtiremote.c	701	2	Do not reuse variable names in subscopes: progress
MSC12-C	builtiremote.c	716	3	Detect and remove code that has no effect
MSC12-C	builtiremote.c	725	3	Detect and remove code that has no effect
INT01-C	builtiremote.c	752	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiremote.c	766	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtiremote.c	768	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiremote.c	788	2	Do not ignore values returned by functions: for_each_ref
INT01-C	builtiremote.c	795	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiremote.c	797	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiremote.c	810	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiremote.c	826	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtiremote.c	859	2	Do not reuse variable names in subscopes: remote
DCL01-C	builtiremote.c	861	2	Do not reuse variable names in subscopes: known_remotes
EXP12-C	builtiremote.c	867	2	Do not ignore values returned by functions: memset
MSC12-C	builtiremote.c	879	3	Detect and remove code that has no effect
EXP12-C	builtiremote.c	884	2	Do not ignore values returned by functions: for_each_remote
INT01-C	builtiremote.c	887	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtiremote.c	889	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtiremote.c	924	3	Do not ignore values returned by functions: fprintf_ln
INT01-C	builtiremote.c	930	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtiremote.c	949	27	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtiremote.c	951	2	Only free memory allocated dynamically
EXP36-C	builtiremote.c	968	30	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	969	2	Do not reuse variable names in subscopes: refspec
EXP12-C	builtiremote.c	974	2	Do not ignore values returned by functions: memset
EXP05-C	builtiremote.c	975	16	Do not cast away a const qualification
DCL01-C	builtiremote.c	993	3	Do not reuse variable names in subscopes: transport
INT13-C	builtiremote.c	1001	13	Use bitwise operators only on unsigned operands
INT13-C	builtiremote.c	1003	13	Use bitwise operators only on unsigned operands
INT13-C	builtiremote.c	1005	13	Use bitwise operators only on unsigned operands
EXP12-C	builtiremote.c	1007	3	Do not ignore values returned by functions: transport_disconnect
EXP12-C	builtiremote.c	1009	3	Do not ignore values returned by functions: for_each_ref
EXP12-C	builtiremote.c	1011	3	Do not ignore values returned by functions: get_push_ref_states_noquery
EXP36-C	builtiremote.c	1031	27	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtiremote.c	1032	2	Const-qualify immutable objects: n
EXP12-C	builtiremote.c	1035	2	Do not ignore values returned by functions: string_list_insert
EXP36-C	builtiremote.c	1041	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	1070	2	Do not reuse variable names in subscopes: show_info
EXP36-C	builtiremote.c	1070	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	1072	2	Do not reuse variable names in subscopes: branch_info
EXP36-C	builtiremote.c	1072	47	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	1092	2	Do not reuse variable names in subscopes: show_info
EXP36-C	builtiremote.c	1092	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	1093	2	Do not reuse variable names in subscopes: branch_info
EXP36-C	builtiremote.c	1093	40	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtiremote.c	1098	66	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	builtiremote.c	1099	3	Detect and remove code that has no effect
EXP12-C	builtiremote.c	1114	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiremote.c	1117	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiremote.c	1120	3	Do not ignore values returned by functions: printf_ln
INT01-C	builtiremote.c	1122	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtiremote.c	1131	2	Do not reuse variable names in subscopes: show_info
EXP36-C	builtiremote.c	1131	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	1132	2	Do not reuse variable names in subscopes: push_info
EXP36-C	builtiremote.c	1132	41	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiremote.c	1150	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiremote.c	1151	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiremote.c	1152	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiremote.c	1153	36	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtiremote.c	1154	2	Const-qualify immutable objects: cmp
DCL01-C	builtiremote.c	1160	2	Do not reuse variable names in subscopes: show_info
EXP36-C	builtiremote.c	1160	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	1161	2	Do not reuse variable names in subscopes: push_info
EXP36-C	builtiremote.c	1161	36	Do not convert pointers into more strictly aligned pointer types
MSC01-C	builtiremote.c	1164	2	Strive for logical completeness
DCL01-C	builtiremote.c	1202	41	Do not reuse variable names in subscopes: remote
EXP36-C	builtiremote.c	1204	29	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtiremote.c	1251	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtiremote.c	1269	2	Const-qualify immutable objects: result
INT13-C	builtiremote.c	1284	49	Use bitwise operators only on unsigned operands
INT13-C	builtiremote.c	1284	32	Use bitwise operators only on unsigned operands
EXP12-C	builtiremote.c	1291	3	Do not ignore values returned by functions: get_remote_ref_states
EXP12-C	builtiremote.c	1293	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiremote.c	1294	3	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiremote.c	1309	4	Do not ignore values returned by functions: printf_ln
INT01-C	builtiremote.c	1316	33	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtiremote.c	1316	33	Ensure that return values are compared against the proper type
INT01-C	builtiremote.c	1321	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiremote.c	1327	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtiremote.c	1328	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtiremote.c	1329	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtiremote.c	1330	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtiremote.c	1336	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtiremote.c	1342	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtiremote.c	1347	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtiremote.c	1355	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtiremote.c	1362	3	Do not ignore values returned by functions: for_each_string_list
EXP12-C	builtiremote.c	1393	3	Do not ignore values returned by functions: get_remote_ref_states
INT13-C	builtiremote.c	1395	11	Use bitwise operators only on unsigned operands
INT01-C	builtiremote.c	1396	28	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtiremote.c	1397	11	Use bitwise operators only on unsigned operands
INT01-C	builtiremote.c	1399	18	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtiremote.c	1407	11	Use bitwise operators only on unsigned operands
INT13-C	builtiremote.c	1415	11	Use bitwise operators only on unsigned operands
INT13-C	builtiremote.c	1417	11	Use bitwise operators only on unsigned operands
MEM01-C	builtiremote.c	1420	3	Store a new value in pointers immediately after free()
MEM34-C	builtiremote.c	1420	3	Only free memory allocated dynamically
DCL01-C	builtiremote.c	1428	37	Do not reuse variable names in subscopes: remote
EXP12-C	builtiremote.c	1438	2	Do not ignore values returned by functions: get_remote_ref_states
EXP12-C	builtiremote.c	1445	2	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiremote.c	1446	2	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiremote.c	1452	3	Do not ignore values returned by functions: string_list_append
INT13-C	builtiremote.c	1456	10	Use bitwise operators only on unsigned operands
INT13-C	builtiremote.c	1491	10	Use bitwise operators only on unsigned operands
EXP36-C	builtiremote.c	1499	16	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiremote.c	1507	2	Do not reuse variable names in subscopes: prune
EXP12-C	builtiremote.c	1520	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiremote.c	1526	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiremote.c	1530	3	Do not ignore values returned by functions: strvec_push
INT01-C	builtiremote.c	1532	35	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiremote.c	1536	4	Do not ignore values returned by functions: strvec_push
DCL01-C	builtiremote.c	1550	41	Do not reuse variable names in subscopes: remote
DCL00-C	builtiremote.c	1554	2	Const-qualify immutable objects: mirror
DCL01-C	builtiremote.c	1555	2	Do not reuse variable names in subscopes: refspec
DCL01-C	builtiremote.c	1567	2	Do not reuse variable names in subscopes: remote
MSC12-C	builtiremote.c	1573	3	Detect and remove code that has no effect
MSC12-C	builtiremote.c	1598	3	Detect and remove code that has no effect
DCL01-C	builtiremote.c	1610	2	Do not reuse variable names in subscopes: remote
MSC12-C	builtiremote.c	1630	3	Detect and remove code that has no effect
EXP12-C	builtiremote.c	1652	4	Do not ignore values returned by functions: printf_ln
EXP12-C	builtiremote.c	1654	3	Do not ignore values returned by functions: printf_ln
DCL01-C	builtiremote.c	1667	2	Do not reuse variable names in subscopes: remote
MSC12-C	builtiremote.c	1701	3	Detect and remove code that has no effect
MSC12-C	builtiremote.c	1777	4	Detect and remove code that has no effect
STR11-C	builtirepack.c	41	1	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	builtirepack.c	60	44	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtirepack.c	117	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirepack.c	123	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirepack.c	123	32	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtirepack.c	125	4	Do not ignore values returned by functions: string_list_append_nodup
EXP11-C	builtirepack.c	131	18	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	builtirepack.c	134	2	Do not ignore values returned by functions: closedir
EXP12-C	builtirepack.c	155	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	176	2	Do not ignore values returned by functions: strvec_push
DCL13-C	builtirepack.c	185	70	Declare function parameters that are pointers to values not changed by the function as const: pack
EXP36-C	builtirepack.c	188	30	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtirepack.c	195	2	Do not ignore values returned by functions: xwrite
EXP12-C	builtirepack.c	196	2	Do not ignore values returned by functions: xwrite
EXP36-C	builtirepack.c	220	44	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtirepack.c	223	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtirepack.c	254	2	Do not ignore values returned by functions: for_each_packed_object
MEM34-C	builtirepack.c	291	3	Only free memory allocated dynamically
DCL00-C	builtirepack.c	313	2	Const-qualify immutable objects: aw
EXP05-C	builtirepack.c	313	38	Do not cast away a const qualification
DCL00-C	builtirepack.c	313	2	Const-qualify immutable objects: bw
EXP05-C	builtirepack.c	314	31	Do not cast away a const qualification
EXP36-C	builtirepack.c	330	23	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtirepack.c	350	4	Do not ignore values returned by functions: strbuf_strip_suffix
EXP36-C	builtirepack.c	358	3	Do not convert pointers into more strictly aligned pointer types
INT33-C	builtirepack.c	389	7	Ensure that division and remainder operations do not result in divide-by-zero errors
INT01-C	builtirepack.c	389	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirepack.c	389	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirepack.c	422	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirepack.c	422	7	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	builtirepack.c	429	7	Ensure that division and remainder operations do not result in divide-by-zero errors
INT01-C	builtirepack.c	429	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirepack.c	429	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirepack.c	433	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirepack.c	433	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtirepack.c	487	40	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtirepack.c	523	4	Do not ignore values returned by functions: for_each_ref_in
EXP12-C	builtirepack.c	527	2	Do not ignore values returned by functions: for_each_ref
DCL00-C	builtirepack.c	530	3	Const-qualify immutable objects: save_errno
EXP12-C	builtirepack.c	548	3	Do not ignore values returned by functions: string_list_insert
EXP12-C	builtirepack.c	550	3	Do not ignore values returned by functions: string_list_insert
EXP12-C	builtirepack.c	558	4	Do not ignore values returned by functions: strbuf_strip_suffix
EXP12-C	builtirepack.c	561	4	Do not ignore values returned by functions: string_list_insert
EXP12-C	builtirepack.c	572	4	Do not ignore values returned by functions: string_list_insert
EXP12-C	builtirepack.c	578	4	Do not ignore values returned by functions: string_list_insert
DCL01-C	builtirepack.c	586	33	Do not reuse variable names in subscopes: write_bitmaps
DCL02-C	builtirepack.c	586	33	Use visually distinct identifiers: write_bitmaps
DCL02-C	builtirepack.c	586	33	Use visually distinct identifiers: write_bitmaps
DCL02-C	builtirepack.c	586	33	Use visually distinct identifiers: write_bitmaps
EXP12-C	builtirepack.c	600	2	Do not ignore values returned by functions: strvec_push
DCL02-C	builtirepack.c	586	33	Use visually distinct identifiers: write_bitmaps
DCL02-C	builtirepack.c	586	33	Use visually distinct identifiers: write_bitmaps
DCL02-C	builtirepack.c	586	33	Use visually distinct identifiers: write_bitmaps
DCL02-C	builtirepack.c	586	33	Use visually distinct identifiers: write_bitmaps
DCL02-C	builtirepack.c	586	33	Use visually distinct identifiers: write_bitmaps
DCL02-C	builtirepack.c	586	33	Use visually distinct identifiers: write_bitmaps
DCL01-C	builtirepack.c	631	22	Do not reuse variable names in subscopes: packdir
DCL02-C	builtirepack.c	631	22	Use visually distinct identifiers: packdir
DCL02-C	builtirepack.c	631	22	Use visually distinct identifiers: packdir
DCL02-C	builtirepack.c	631	22	Use visually distinct identifiers: packdir
DCL02-C	builtirepack.c	631	22	Use visually distinct identifiers: packdir
EXP12-C	builtirepack.c	647	3	Do not ignore values returned by functions: strbuf_strip_suffix
DCL02-C	builtirepack.c	631	22	Use visually distinct identifiers: packdir
DCL00-C	builtirepack.c	673	2	Const-qualify immutable objects: local
EXP12-C	builtirepack.c	677	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	682	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	683	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	684	2	Do not ignore values returned by functions: strvec_push
DCL02-C	builtirepack.c	969	3	Use visually distinct identifiers: item
DCL01-C	builtirepack.c	716	3	Do not reuse variable names in subscopes: item
DCL02-C	builtirepack.c	969	3	Use visually distinct identifiers: item
DCL02-C	builtirepack.c	969	3	Use visually distinct identifiers: item
DCL02-C	builtirepack.c	969	3	Use visually distinct identifiers: item
EXP12-C	builtirepack.c	882	2	Do not ignore values returned by functions: strvec_push
INT01-C	builtirepack.c	885	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtirepack.c	886	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtirepack.c	888	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	900	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	901	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	902	3	Do not ignore values returned by functions: strvec_push
INT01-C	builtirepack.c	918	33	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtirepack.c	921	5	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtirepack.c	925	5	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtirepack.c	929	5	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	932	5	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	933	5	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	937	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	938	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	940	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtirepack.c	941	3	Do not ignore values returned by functions: strvec_push
DCL02-C	builtirepack.c	969	3	Use visually distinct identifiers: item
DCL01-C	builtirepack.c	969	3	Do not reuse variable names in subscopes: item
DCL02-C	builtirepack.c	969	3	Use visually distinct identifiers: item
EXP36-C	builtirepack.c	1053	42	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtirepack.c	1055	23	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	builtirepack.c	1066	28	Use bitwise operators only on unsigned operands
INT13-C	builtirepack.c	1066	48	Use bitwise operators only on unsigned operands
EXP12-C	builtirepack.c	1067	6	Do not ignore values returned by functions: chmod
MEM34-C	builtirepack.c	1078	4	Only free memory allocated dynamically
DCL00-C	builtirepack.c	1087	4	Const-qualify immutable objects: len
INT01-C	builtirepack.c	1088	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	builtirepack.c	1098	18	Do not apply operators expecting one type to data of an incompatible type
INT36-C	builtirepack.c	1098	25	Take care when converting from pointer to integer or integer to pointer
INT01-C	builtirepack.c	1098	56	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	builtirepack.c	1133	4	Use visually distinct identifiers: i
DCL01-C	builtirepack.c	1133	4	Do not reuse variable names in subscopes: i
DCL02-C	builtirepack.c	1133	4	Use visually distinct identifiers: i
DCL02-C	builtirepack.c	1133	4	Use visually distinct identifiers: i
DCL02-C	builtirepack.c	1133	4	Use visually distinct identifiers: i
EXP12-C	builtirepack.c	1142	5	Do not ignore values returned by functions: strbuf_strip_suffix
DCL02-C	builtirepack.c	1133	4	Use visually distinct identifiers: i
INT13-C	builtirepack.c	1170	31	Use bitwise operators only on unsigned operands
EXP12-C	builtirepack.c	1171	3	Do not ignore values returned by functions: write_midx_file
EXP36-C	builtireplace.c	46	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtireplace.c	54	4	Do not reuse variable names in subscopes: object
EXP12-C	builtireplace.c	94	2	Do not ignore values returned by functions: for_each_replace_ref
DCL01-C	builtireplace.c	105	2	Do not reuse variable names in subscopes: ref
MSC12-C	builtireplace.c	116	4	Detect and remove code that has no effect
MSC12-C	builtireplace.c	126	4	Detect and remove code that has no effect
DCL01-C	builtireplace.c	137	61	Do not reuse variable names in subscopes: ref
EXP12-C	builtireplace.c	142	2	Do not ignore values returned by functions: printf_ln
DCL01-C	builtireplace.c	146	46	Do not reuse variable names in subscopes: object
DCL01-C	builtireplace.c	148	23	Do not reuse variable names in subscopes: ref
DCL01-C	builtireplace.c	166	29	Do not reuse variable names in subscopes: object
DCL01-C	builtireplace.c	173	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtireplace.c	207	2	Do not reuse variable names in subscopes: object
FIO42-C	builtireplace.c	230	7	Close files when they are no longer needed
EXP12-C	builtireplace.c	234	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireplace.c	235	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireplace.c	240	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtireplace.c	267	3	Do not ignore values returned by functions: strvec_push
INT01-C	builtireplace.c	277	58	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	builtireplace.c	278	4	Detect and remove code that has no effect
DCL00-C	builtireplace.c	297	3	Const-qualify immutable objects: flags
MSC12-C	builtireplace.c	300	4	Detect and remove code that has no effect
DCL01-C	builtireplace.c	318	2	Do not reuse variable names in subscopes: tmpfile
DCL01-C	builtireplace.c	321	2	Do not reuse variable names in subscopes: ref
MEM34-C	builtireplace.c	339	3	Only free memory allocated dynamically
MEM34-C	builtireplace.c	343	3	Only free memory allocated dynamically
MEM34-C	builtireplace.c	347	3	Only free memory allocated dynamically
MEM01-C	builtireplace.c	350	2	Store a new value in pointers immediately after free()
MEM34-C	builtireplace.c	350	2	Only free memory allocated dynamically
DCL01-C	builtireplace.c	376	3	Do not reuse variable names in subscopes: commit
DCL13-C	builtireplace.c	404	46	Declare function parameters that are pointers to values not changed by the function as const: commit
DCL01-C	builtireplace.c	404	46	Do not reuse variable names in subscopes: commit
DCL01-C	builtireplace.c	409	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtireplace.c	411	2	Do not reuse variable names in subscopes: tag
DCL01-C	builtireplace.c	437	43	Do not reuse variable names in subscopes: commit
DCL01-C	builtireplace.c	450	2	Do not reuse variable names in subscopes: commit
INT01-C	builtireplace.c	518	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	builtirerere.c	17	23	Declare function parameters that are pointers to values not changed by the function as const: dummy
EXP12-C	builtirerere.c	40	2	Do not ignore values returned by functions: memset
EXP12-C	builtirerere.c	42	2	Do not ignore values returned by functions: memset
DCL01-C	builtirerere.c	75	3	Do not reuse variable names in subscopes: pathspec
INT01-C	builtirerere.c	91	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtirerere.c	94	3	Do not ignore values returned by functions: rerere_remaining
INT01-C	builtirerere.c	95	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirerere.c	107	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtirerere.c	109	50	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtireset.c	50	36	Do not reuse variable names in subscopes: ref
DCL01-C	builtireset.c	50	74	Do not reuse variable names in subscopes: reset_type
DCL01-C	builtireset.c	54	2	Do not reuse variable names in subscopes: tree
EXP12-C	builtireset.c	58	2	Do not ignore values returned by functions: memset
EXP12-C	builtireset.c	87	2	Do not ignore values returned by functions: repo_read_index_unmerged
MSC12-C	builtireset.c	100	3	Detect and remove code that has no effect
EXP05-C	builtireset.c	117	8	Do not cast away a const qualification
DCL01-C	builtireset.c	121	48	Do not reuse variable names in subscopes: commit
INT01-C	builtireset.c	129	14	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtireset.c	131	2	Do not ignore values returned by functions: putchar
DCL13-C	builtireset.c	136	24	Declare function parameters that are pointers to values not changed by the function as const: opt
DCL00-C	builtireset.c	139	2	Const-qualify immutable objects: intent_to_add
DCL00-C	builtireset.c	144	3	Const-qualify immutable objects: is_in_reset_tree
EXP12-C	builtireset.c	148	4	Do not ignore values returned by functions: remove_file_from_index
EXP12-C	builtireset.c	175	3	Do not ignore values returned by functions: add_index_entry
DCL01-C	builtireset.c	180	50	Do not reuse variable names in subscopes: pathspec
EXP12-C	builtireset.c	186	2	Do not ignore values returned by functions: memset
DCL01-C	builtireset.c	222	39	Do not reuse variable names in subscopes: reset_type
DCL05-C	builtireset.c	230	1	Use typedefs to improve code readability
DCL01-C	builtireset.c	230	41	Do not reuse variable names in subscopes: pathspec
INT13-C	builtireset.c	277	31	Use bitwise operators only on unsigned operands
EXP12-C	builtireset.c	294	3	Do not ignore values returned by functions: update_ref
DCL01-C	builtireset.c	315	2	Do not reuse variable names in subscopes: reset_type
DCL01-C	builtireset.c	320	2	Do not reuse variable names in subscopes: pathspec
DCL01-C	builtireset.c	371	3	Do not reuse variable names in subscopes: commit
DCL01-C	builtireset.c	379	3	Do not reuse variable names in subscopes: tree
ARR30-C	builtireset.c	411	3	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	builtireset.c	418	25	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	builtireset.c	437	3	Do not ignore values returned by functions: repo_hold_locked_index
DCL00-C	builtireset.c	440	4	Const-qualify immutable objects: flags
EXP12-C	builtireset.c	448	5	Do not ignore values returned by functions: refresh_index
DCL01-C	builtireset.c	458	4	Do not reuse variable names in subscopes: ref
EXP12-C	builtireset.c	461	4	Do not ignore values returned by functions: dwim_ref
MEM34-C	builtireset.c	463	5	Only free memory allocated dynamically
MEM34-C	builtireset.c	470	4	Only free memory allocated dynamically
STR11-C	builtirev-list.c	22	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtirev-list.c	100	40	Do not reuse variable names in subscopes: commit
EXP36-C	builtirev-list.c	102	31	Do not convert pointers into more strictly aligned pointer types
INT13-C	builtirev-list.c	110	18	Use bitwise operators only on unsigned operands
EXP36-C	builtirev-list.c	152	31	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtirev-list.c	195	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirev-list.c	195	35	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtirev-list.c	197	4	Do not ignore values returned by functions: putchar
DCL01-C	builtirev-list.c	218	42	Do not reuse variable names in subscopes: commit
EXP12-C	builtirev-list.c	244	3	Do not ignore values returned by functions: oidset_insert
EXP36-C	builtirev-list.c	262	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtirev-list.c	274	31	Do not convert pointers into more strictly aligned pointer types
INT13-C	builtirev-list.c	282	18	Use bitwise operators only on unsigned operands
DCL01-C	builtirev-list.c	303	38	Do not reuse variable names in subscopes: commit
DCL00-C	builtirev-list.c	320	2	Const-qualify immutable objects: flags
INT13-C	builtirev-list.c	329	18	Use bitwise operators only on unsigned operands
INT13-C	builtirev-list.c	348	12	Use bitwise operators only on unsigned operands
DCL13-C	builtirev-list.c	368	21	Declare function parameters that are pointers to values not changed by the function as const: found_pack
EXP12-C	builtirev-list.c	382	2	Do not ignore values returned by functions: puts
EXP12-C	builtirev-list.c	563	2	Do not ignore values returned by functions: memset
INT13-C	builtirev-list.c	569	14	Use bitwise operators only on unsigned operands
INT13-C	builtirev-list.c	588	15	Use bitwise operators only on unsigned operands
INT13-C	builtirev-list.c	659	15	Use bitwise operators only on unsigned operands
DCL00-C	builtirev-parse.c	104	3	Const-qualify immutable objects: sq
EXP12-C	builtirev-parse.c	106	3	Do not ignore values returned by functions: putchar
EXP12-C	builtirev-parse.c	110	4	Do not ignore values returned by functions: putchar
EXP12-C	builtirev-parse.c	112	3	Do not ignore values returned by functions: putchar
EXP12-C	builtirev-parse.c	113	3	Do not ignore values returned by functions: putchar
MEM34-C	builtirev-parse.c	159	4	Only free memory allocated dynamically
INT13-C	builtirev-parse.c	175	13	Use bitwise operators only on unsigned operands
DCL13-C	builtirev-parse.c	199	29	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL13-C	builtirev-parse.c	208	29	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL13-C	builtirev-parse.c	214	59	Declare function parameters that are pointers to values not changed by the function as const: cb_data
INT13-C	builtirev-parse.c	225	14	Use bitwise operators only on unsigned operands
MEM34-C	builtirev-parse.c	229	2	Only free memory allocated dynamically
EXP12-C	builtirev-parse.c	234	2	Do not ignore values returned by functions: show_default
INT13-C	builtirev-parse.c	235	14	Use bitwise operators only on unsigned operands
MEM34-C	builtirev-parse.c	240	4	Only free memory allocated dynamically
STR11-C	builtirev-parse.c	256	2	Do not specify the dimension of a character array initialized with a string literal
INT07-C	builtirev-parse.c	264	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtirev-parse.c	278	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtirev-parse.c	291	13	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	builtirev-parse.c	296	5	Do not reuse variable names in subscopes: commit
INT07-C	builtirev-parse.c	300	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtirev-parse.c	303	10	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	builtirev-parse.c	311	2	Do not reuse variable names in subscopes: commit
INT07-C	builtirev-parse.c	339	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtirev-parse.c	342	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtirev-parse.c	348	11	Use only explicitly signed or unsigned char type for numeric values
MEM30-C	builtirev-parse.c	366	3	Do not access freed memory
MEM34-C	builtirev-parse.c	366	3	Only free memory allocated dynamically
INT07-C	builtirev-parse.c	369	10	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	builtirev-parse.c	375	27	Do not convert pointers into more strictly aligned pointer types
EXP05-C	builtirev-parse.c	403	11	Do not cast away a const qualification
DCL01-C	builtirev-parse.c	427	2	Do not reuse variable names in subscopes: usage
EXP36-C	builtirev-parse.c	441	3	Do not convert pointers into more strictly aligned pointer types
ARR30-C	builtirev-parse.c	445	9	Do not form or use out-of-bounds pointers or array subscripts
EXP36-C	builtirev-parse.c	460	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtirev-parse.c	461	3	Do not ignore values returned by functions: memset
INT07-C	builtirev-parse.c	471	9	Use only explicitly signed or unsigned char type for numeric values
MSC01-C	builtirev-parse.c	498	4	Strive for logical completeness
EXP36-C	builtirev-parse.c	523	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtirev-parse.c	524	2	Do not ignore values returned by functions: memset
INT13-C	builtirev-parse.c	527	60	Use bitwise operators only on unsigned operands
INT13-C	builtirev-parse.c	526	50	Use bitwise operators only on unsigned operands
EXP12-C	builtirev-parse.c	532	2	Do not ignore values returned by functions: puts
STR11-C	builtirev-parse.c	556	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtirev-parse.c	611	105	Do not reuse variable names in subscopes: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
EXP12-C	builtirev-parse.c	625	3	Do not ignore values returned by functions: puts
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
EXP12-C	builtirev-parse.c	636	4	Do not ignore values returned by functions: strbuf_realpath_forgiving
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
EXP12-C	builtirev-parse.c	640	4	Do not ignore values returned by functions: strbuf_realpath_forgiving
EXP12-C	builtirev-parse.c	643	3	Do not ignore values returned by functions: puts
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
EXP12-C	builtirev-parse.c	649	3	Do not ignore values returned by functions: puts
DCL02-C	builtirev-parse.c	611	105	Use visually distinct identifiers: def
EXP12-C	builtirev-parse.c	653	3	Do not ignore values returned by functions: strbuf_realpath_forgiving
EXP12-C	builtirev-parse.c	654	3	Do not ignore values returned by functions: puts
MEM34-C	builtirev-parse.c	657	2	Only free memory allocated dynamically
EXP12-C	builtirev-parse.c	693	3	Do not ignore values returned by functions: setup_git_directory
DCL02-C	builtirev-parse.c	709	5	Use visually distinct identifiers: i
DCL01-C	builtirev-parse.c	709	5	Do not reuse variable names in subscopes: i
DCL02-C	builtirev-parse.c	709	5	Use visually distinct identifiers: i
EXP12-C	builtirev-parse.c	721	5	Do not ignore values returned by functions: puts
INT13-C	builtirev-parse.c	739	15	Use bitwise operators only on unsigned operands
INT13-C	builtirev-parse.c	796	12	Use bitwise operators only on unsigned operands
INT13-C	builtirev-parse.c	800	12	Use bitwise operators only on unsigned operands
INT13-C	builtirev-parse.c	804	12	Use bitwise operators only on unsigned operands
INT13-C	builtirev-parse.c	808	12	Use bitwise operators only on unsigned operands
INT13-C	builtirev-parse.c	812	12	Use bitwise operators only on unsigned operands
INT13-C	builtirev-parse.c	812	15	Use bitwise operators only on unsigned operands
INT13-C	builtirev-parse.c	822	12	Use bitwise operators only on unsigned operands
INT13-C	builtirev-parse.c	822	15	Use bitwise operators only on unsigned operands
EXP12-C	builtirev-parse.c	865	5	Do not ignore values returned by functions: for_each_ref
EXP12-C	builtirev-parse.c	870	5	Do not ignore values returned by functions: repo_for_each_abbrev
EXP12-C	builtirev-parse.c	874	5	Do not ignore values returned by functions: for_each_fullref_in
EXP12-C	builtirev-parse.c	875	5	Do not ignore values returned by functions: for_each_fullref_in
EXP12-C	builtirev-parse.c	946	5	Do not ignore values returned by functions: putchar
DCL01-C	builtirev-parse.c	969	7	Do not reuse variable names in subscopes: realpath
EXP12-C	builtirev-parse.c	970	7	Do not ignore values returned by functions: strbuf_realpath
EXP12-C	builtirev-parse.c	971	7	Do not ignore values returned by functions: puts
MEM01-C	builtirev-parse.c	980	5	Store a new value in pointers immediately after free()
MEM34-C	builtirev-parse.c	980	5	Only free memory allocated dynamically
DCL02-C	builtirev-parse.c	1013	6	Use visually distinct identifiers: oid
DCL01-C	builtirev-parse.c	1013	6	Do not reuse variable names in subscopes: oid
EXP12-C	builtirev-parse.c	1043	5	Do not ignore values returned by functions: puts
INT13-C	builtirev-parse.c	1048	16	Use bitwise operators only on unsigned operands
EXP36-C	builtirevert.c	49	37	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtirevert.c	55	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirevert.c	55	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirevert.c	55	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirevert.c	55	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirevert.c	55	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirevert.c	55	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirevert.c	55	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirevert.c	55	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtirevert.c	55	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtirevert.c	55	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtirevert.c	63	34	Do not convert pointers into more strictly aligned pointer types
INT07-C	builtirevert.c	72	11	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builtirevert.c	83	2	Const-qualify immutable objects: ap
EXP12-C	builtirevert.c	85	2	Do not ignore values returned by functions: __builtin_va_start
EXP11-C	builtirevert.c	86	21	Do not apply operators expecting one type to data of an incompatible type
INT36-C	builtirevert.c	86	21	Take care when converting from pointer to integer or integer to pointer
EXP12-C	builtirevert.c	90	2	Do not ignore values returned by functions: __builtin_va_end
MSC12-C	builtirevert.c	169	4	Detect and remove code that has no effect
EXP36-C	builtirevert.c	203	23	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtirevert.c	211	3	Do not ignore values returned by functions: memset
DCL00-C	builtirevert.c	226	3	Const-qualify immutable objects: ret
INT32-C	builtirm.c	36	10	Ensure that operations on signed integers do not result in overflow
INT01-C	builtirm.c	56	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtirm.c	93	56	Do not reuse variable names in subscopes: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
INT13-C	builtirm.c	173	36	Use bitwise operators only on unsigned operands
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL02-C	builtirm.c	239	1	Use visually distinct identifiers: index_only
DCL01-C	builtirm.c	260	2	Do not reuse variable names in subscopes: lock_file
DCL01-C	builtirm.c	262	2	Do not reuse variable names in subscopes: pathspec
EXP12-C	builtirm.c	293	2	Do not ignore values returned by functions: repo_hold_locked_index
EXP12-C	builtirm.c	298	2	Do not ignore values returned by functions: refresh_index
INT13-C	builtirm.c	298	41	Use bitwise operators only on unsigned operands
EXP36-C	builtirm.c	314	3	Do not convert pointers into more strictly aligned pointer types
INT07-C	builtirm.c	316	36	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtirm.c	317	42	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	builtirm.c	349	3	Store a new value in pointers immediately after free()
MEM34-C	builtirm.c	349	3	Only free memory allocated dynamically
MEM01-C	builtirm.c	356	2	Store a new value in pointers immediately after free()
MEM34-C	builtirm.c	356	2	Only free memory allocated dynamically
DCL00-C	builtirm.c	406	3	Const-qualify immutable objects: flag
INT13-C	builtirm.c	433	23	Use bitwise operators only on unsigned operands
DCL01-C	builtisend-pack.c	30	45	Do not reuse variable names in subscopes: ref
EXP12-C	builtisend-pack.c	133	2	Do not ignore values returned by functions: git_gpg_config
DCL01-C	builtisend-pack.c	160	2	Do not reuse variable names in subscopes: remote
DCL00-C	builtisend-pack.c	175	2	Const-qualify immutable objects: quiet
DCL01-C	builtisend-pack.c	183	2	Do not reuse variable names in subscopes: progress
EXP30-C	builtisend-pack.c	257	6	Do not depend on order of evaluation for side effects
MSC01-C	builtisend-pack.c	287	2	Strive for logical completeness
EXP12-C	builtisend-pack.c	293	3	Do not ignore values returned by functions: get_remote_heads
INT13-C	builtisend-pack.c	305	9	Use bitwise operators only on unsigned operands
INT13-C	builtisend-pack.c	307	9	Use bitwise operators only on unsigned operands
INT13-C	builtisend-pack.c	330	6	Use bitwise operators only on unsigned operands
DCL01-C	builtisend-pack.c	336	3	Do not reuse variable names in subscopes: ref
EXP36-C	builtishortlog.c	36	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtishortlog.c	36	48	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtishortlog.c	42	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtishortlog.c	42	48	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtishortlog.c	43	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtishortlog.c	43	51	Do not convert pointers into more strictly aligned pointer types
EXP11-C	builtishortlog.c	62	16	Do not apply operators expecting one type to data of an incompatible type
INT36-C	builtishortlog.c	62	16	Take care when converting from pointer to integer or integer to pointer
DCL01-C	builtishortlog.c	66	3	Do not reuse variable names in subscopes: eol
INT07-C	builtishortlog.c	69	19	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtishortlog.c	79	19	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	builtishortlog.c	81	3	Do not ignore values returned by functions: format_subject
EXP36-C	builtishortlog.c	86	31	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtishortlog.c	88	3	Do not ignore values returned by functions: string_list_append
EXP36-C	builtishortlog.c	88	26	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtishortlog.c	107	2	Do not ignore values returned by functions: map_user
INT01-C	builtishortlog.c	147	52	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtishortlog.c	167	22	Do not reuse variable names in subscopes: commit
INT01-C	builtishortlog.c	210	59	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtishortlog.c	210	55	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtishortlog.c	215	27	Do not reuse variable names in subscopes: commit
DCL01-C	builtishortlog.c	234	63	Do not reuse variable names in subscopes: commit
DCL01-C	builtishortlog.c	264	2	Do not reuse variable names in subscopes: commit
INT07-C	builtishortlog.c	279	12	Use only explicitly signed or unsigned char type for numeric values
STR11-C	builtishortlog.c	288	1	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	builtishortlog.c	295	28	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtishortlog.c	321	28	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtishortlog.c	334	3	Do not ignore values returned by functions: string_list_append
EXP12-C	builtishortlog.c	337	3	Do not ignore values returned by functions: string_list_append
EXP12-C	builtishortlog.c	340	3	Do not ignore values returned by functions: string_list_append
EXP12-C	builtishortlog.c	351	2	Do not ignore values returned by functions: memset
EXP12-C	builtishortlog.c	353	2	Do not ignore values returned by functions: read_mailmap
MSC01-C	builtishortlog.c	409	3	Strive for logical completeness
MSC12-C	builtishortlog.c	429	3	Detect and remove code that has no effect
MSC12-C	builtishortlog.c	434	3	Detect and remove code that has no effect
EXP36-C	builtishortlog.c	487	39	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtishortlog.c	490	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtishortlog.c	491	41	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtishortlog.c	496	6	Do not ignore values returned by functions: fwrite
EXP12-C	builtishortlog.c	501	4	Do not ignore values returned by functions: _IO_putc
MEM30-C	builtishortlog.c	504	4	Do not access freed memory
MEM34-C	builtishortlog.c	504	4	Only free memory allocated dynamically
DCL01-C	builtishow-branch.c	56	3	Do not reuse variable names in subscopes: commit
INT01-C	builtishow-branch.c	70	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	builtishow-branch.c	70	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	builtishow-branch.c	70	1	Use typedefs to improve code readability
EXP36-C	builtishow-branch.c	70	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtishow-branch.c	70	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtishow-branch.c	70	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtishow-branch.c	73	58	Do not reuse variable names in subscopes: commit
DCL01-C	builtishow-branch.c	82	40	Do not reuse variable names in subscopes: commit
EXP36-C	builtishow-branch.c	88	17	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtishow-branch.c	100	40	Do not reuse variable names in subscopes: commit
DCL01-C	builtishow-branch.c	102	2	Do not reuse variable names in subscopes: commit_name
DCL05-C	builtishow-branch.c	133	1	Use typedefs to improve code readability
DCL01-C	builtishow-branch.c	135	12	Do not reuse variable names in subscopes: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
DCL02-C	builtishow-branch.c	322	1	Use visually distinct identifiers: ref_name
EXP12-C	builtishow-branch.c	201	5	Do not ignore values returned by functions: name_first_parent_chain
DCL01-C	builtishow-branch.c	207	37	Do not reuse variable names in subscopes: commit
EXP12-C	builtishow-branch.c	210	3	Do not ignore values returned by functions: commit_list_insert
DCL05-C	builtishow-branch.c	216	1	Use typedefs to improve code readability
DCL00-C	builtishow-branch.c	220	2	Const-qualify immutable objects: all_mask
DCL00-C	builtishow-branch.c	221	2	Const-qualify immutable objects: all_revs
DCL00-C	builtishow-branch.c	225	3	Const-qualify immutable objects: still_interesting
DCL01-C	builtishow-branch.c	226	3	Do not reuse variable names in subscopes: commit
INT13-C	builtishow-branch.c	227	36	Use bitwise operators only on unsigned operands
EXP12-C	builtishow-branch.c	232	3	Do not ignore values returned by functions: mark_seen
INT13-C	builtishow-branch.c	233	14	Use bitwise operators only on unsigned operands
DCL00-C	builtishow-branch.c	239	4	Const-qualify immutable objects: this_flag
INT13-C	builtishow-branch.c	241	19	Use bitwise operators only on unsigned operands
EXP12-C	builtishow-branch.c	243	4	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	builtishow-branch.c	247	4	Do not ignore values returned by functions: commit_list_insert_by_date
INT13-C	builtishow-branch.c	265	26	Use bitwise operators only on unsigned operands
DCL01-C	builtishow-branch.c	290	44	Do not reuse variable names in subscopes: commit
EXP12-C	builtishow-branch.c	300	2	Do not ignore values returned by functions: skip_prefix
EXP12-C	builtishow-branch.c	318	2	Do not ignore values returned by functions: puts
EXP36-C	builtishow-branch.c	371	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtishow-branch.c	371	41	Do not convert pointers into more strictly aligned pointer types
DCL00-C	builtishow-branch.c	383	2	Const-qualify immutable objects: commit
DCL01-C	builtishow-branch.c	383	2	Do not reuse variable names in subscopes: commit
DCL13-C	builtishow-branch.c	408	30	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL13-C	builtishow-branch.c	423	32	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL13-C	builtishow-branch.c	438	29	Declare function parameters that are pointers to values not changed by the function as const: cb_data
INT07-C	builtishow-branch.c	457	29	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builtishow-branch.c	474	3	Const-qualify immutable objects: orig_cnt
EXP12-C	builtishow-branch.c	476	3	Do not ignore values returned by functions: for_each_ref
DCL00-C	builtishow-branch.c	480	3	Const-qualify immutable objects: orig_cnt
EXP12-C	builtishow-branch.c	482	3	Do not ignore values returned by functions: for_each_ref
EXP12-C	builtishow-branch.c	491	2	Do not ignore values returned by functions: skip_prefix
DCL00-C	builtishow-branch.c	499	2	Const-qualify immutable objects: all_mask
DCL00-C	builtishow-branch.c	500	2	Const-qualify immutable objects: all_revs
DCL01-C	builtishow-branch.c	504	3	Do not reuse variable names in subscopes: commit
DCL00-C	builtishow-branch.c	505	3	Const-qualify immutable objects: flags
INT13-C	builtishow-branch.c	505	36	Use bitwise operators only on unsigned operands
INT13-C	builtishow-branch.c	507	15	Use bitwise operators only on unsigned operands
EXP12-C	builtishow-branch.c	508	4	Do not ignore values returned by functions: puts
DCL01-C	builtishow-branch.c	523	3	Do not reuse variable names in subscopes: commit
DCL00-C	builtishow-branch.c	524	3	Const-qualify immutable objects: flag
EXP12-C	builtishow-branch.c	537	3	Do not ignore values returned by functions: append_ref
DCL00-C	builtishow-branch.c	542	3	Const-qualify immutable objects: saved_matches
EXP12-C	builtishow-branch.c	546	3	Do not ignore values returned by functions: for_each_ref
EXP12-C	builtishow-branch.c	567	3	Do not ignore values returned by functions: strvec_push
DCL01-C	builtishow-branch.c	579	41	Do not reuse variable names in subscopes: commit
DCL01-C	builtishow-branch.c	624	2	Do not reuse variable names in subscopes: commit
INT01-C	builtishow-branch.c	688	14	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtishow-branch.c	694	7	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtishow-branch.c	703	23	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtishow-branch.c	726	3	Do not reuse variable names in subscopes: ref
DCL00-C	builtishow-branch.c	728	3	Const-qualify immutable objects: flags
EXP12-C	builtishow-branch.c	760	5	Do not ignore values returned by functions: read_ref_at
INT07-C	builtishow-branch.c	783	10	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	builtishow-branch.c	790	4	Store a new value in pointers immediately after free()
MEM30-C	builtishow-branch.c	790	4	Do not access freed memory
MEM34-C	builtishow-branch.c	790	4	Only free memory allocated dynamically
EXP12-C	builtishow-branch.c	793	4	Do not ignore values returned by functions: append_ref
MEM34-C	builtishow-branch.c	794	4	Only free memory allocated dynamically
MEM34-C	builtishow-branch.c	796	3	Only free memory allocated dynamically
EXP12-C	builtishow-branch.c	821	4	Do not ignore values returned by functions: skip_prefix
DCL00-C	builtishow-branch.c	833	3	Const-qualify immutable objects: flag
ARR30-C	builtishow-branch.c	839	7	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	builtishow-branch.c	840	47	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	builtishow-branch.c	845	3	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	builtishow-branch.c	846	3	Do not ignore values returned by functions: mark_seen
DCL00-C	builtishow-branch.c	875	4	Const-qualify immutable objects: is_head
EXP12-C	builtishow-branch.c	882	6	Do not ignore values returned by functions: putchar
EXP12-C	builtishow-branch.c	901	5	Do not ignore values returned by functions: putchar
EXP12-C	builtishow-branch.c	902	4	Do not ignore values returned by functions: putchar
INT14-C	builtishow-branch.c	915	11	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	builtishow-branch.c	916	11	Avoid performing bitwise and arithmetic operations on the same data
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL01-C	builtishow-branch.c	919	3	Do not reuse variable names in subscopes: commit
DCL00-C	builtishow-branch.c	920	3	Const-qualify immutable objects: this_flag
DCL00-C	builtishow-branch.c	921	3	Const-qualify immutable objects: is_merge_point
INT13-C	builtishow-branch.c	921	36	Use bitwise operators only on unsigned operands
INT13-C	builtishow-branch.c	923	21	Use bitwise operators only on unsigned operands
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL00-C	builtishow-branch.c	926	4	Const-qualify immutable objects: is_merge
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
EXP12-C	builtishow-branch.c	952	4	Do not ignore values returned by functions: putchar
DCL02-C	builtishow-branch.c	919	3	Use visually distinct identifiers: commit
INT01-C	builtishow-index.c	37	40	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtishow-index.c	37	40	Ensure that return values are compared against the proper type
INT01-C	builtishow-index.c	43	43	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtishow-index.c	43	43	Ensure that return values are compared against the proper type
INT01-C	builtishow-index.c	47	47	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtishow-index.c	47	47	Ensure that return values are compared against the proper type
DCL00-C	builtishow-index.c	52	3	Const-qualify immutable objects: n
INT01-C	builtishow-index.c	61	43	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtishow-index.c	61	43	Ensure that return values are compared against the proper type
EXP36-C	builtishow-index.c	73	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtishow-index.c	75	53	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtishow-index.c	75	53	Ensure that return values are compared against the proper type
INT01-C	builtishow-index.c	80	44	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtishow-index.c	80	44	Ensure that return values are compared against the proper type
INT01-C	builtishow-index.c	83	44	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtishow-index.c	83	44	Ensure that return values are compared against the proper type
DCL00-C	builtishow-index.c	87	4	Const-qualify immutable objects: off
INT01-C	builtishow-index.c	94	35	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtishow-index.c	94	35	Ensure that return values are compared against the proper type
MEM34-C	builtishow-index.c	105	3	Only free memory allocated dynamically
DCL13-C	builtishow-ref.c	52	30	Declare function parameters that are pointers to values not changed by the function as const: cbdata
DCL00-C	builtishow-ref.c	58	3	Const-qualify immutable objects: reflen
DCL00-C	builtishow-ref.c	61	4	Const-qualify immutable objects: len
EXP12-C	builtishow-ref.c	87	2	Do not ignore values returned by functions: string_list_insert
DCL00-C	builtishow-ref.c	104	2	Const-qualify immutable objects: matchlen
EXP12-C	builtishow-ref.c	106	2	Do not ignore values returned by functions: for_each_ref
DCL01-C	builtishow-ref.c	108	3	Do not reuse variable names in subscopes: ref
INT07-C	builtishow-ref.c	112	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtishow-ref.c	115	13	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builtishow-ref.c	121	4	Const-qualify immutable objects: reflen
EXP12-C	builtishow-ref.c	220	3	Do not ignore values returned by functions: for_each_ref
EXP12-C	builtisparse-checkout.c	67	2	Do not ignore values returned by functions: memset
MEM01-C	builtisparse-checkout.c	73	2	Store a new value in pointers immediately after free()
MEM34-C	builtisparse-checkout.c	73	2	Only free memory allocated dynamically
DCL00-C	builtisparse-checkout.c	82	3	Const-qualify immutable objects: pe
DCL01-C	builtisparse-checkout.c	82	3	Do not reuse variable names in subscopes: pe
EXP30-C	builtisparse-checkout.c	86	3	Do not depend on order of evaluation for side effects
EXP36-C	builtisparse-checkout.c	86	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisparse-checkout.c	86	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtisparse-checkout.c	88	4	Do not ignore values returned by functions: string_list_insert
INT01-C	builtisparse-checkout.c	93	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtisparse-checkout.c	94	4	Do not ignore values returned by functions: quote_c_style
EXP12-C	builtisparse-checkout.c	171	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisparse-checkout.c	174	3	Do not ignore values returned by functions: fill_directory
DCL01-C	builtisparse-checkout.c	205	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtisparse-checkout.c	214	2	Do not ignore values returned by functions: memset
EXP12-C	builtisparse-checkout.c	225	2	Do not ignore values returned by functions: repo_hold_locked_index
EXP30-C	builtisparse-checkout.c	272	2	Do not depend on order of evaluation for side effects
EXP36-C	builtisparse-checkout.c	272	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisparse-checkout.c	272	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtisparse-checkout.c	287	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM30-C	builtisparse-checkout.c	292	3	Do not access freed memory
MEM34-C	builtisparse-checkout.c	292	3	Only free memory allocated dynamically
EXP30-C	builtisparse-checkout.c	297	2	Do not depend on order of evaluation for side effects
EXP36-C	builtisparse-checkout.c	297	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisparse-checkout.c	297	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtisparse-checkout.c	309	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM30-C	builtisparse-checkout.c	312	3	Do not access freed memory
MEM34-C	builtisparse-checkout.c	312	3	Only free memory allocated dynamically
MEM01-C	builtisparse-checkout.c	331	2	Store a new value in pointers immediately after free()
MEM34-C	builtisparse-checkout.c	331	2	Only free memory allocated dynamically
EXP12-C	builtisparse-checkout.c	337	3	Do not ignore values returned by functions: update_working_directory
EXP12-C	builtisparse-checkout.c	349	2	Do not ignore values returned by functions: commit_lock_file
MSC12-C	builtisparse-checkout.c	366	3	Detect and remove code that has no effect
EXP12-C	builtisparse-checkout.c	414	3	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtisparse-checkout.c	450	2	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtisparse-checkout.c	462	2	Do not ignore values returned by functions: memset
MEM34-C	builtisparse-checkout.c	469	3	Only free memory allocated dynamically
MEM01-C	builtisparse-checkout.c	484	3	Store a new value in pointers immediately after free()
MEM34-C	builtisparse-checkout.c	484	3	Only free memory allocated dynamically
EXP36-C	builtisparse-checkout.c	501	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisparse-checkout.c	517	14	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtisparse-checkout.c	613	2	Do not ignore values returned by functions: memset
MEM01-C	builtisparse-checkout.c	619	2	Store a new value in pointers immediately after free()
MEM34-C	builtisparse-checkout.c	619	2	Only free memory allocated dynamically
EXP30-C	builtisparse-checkout.c	624	2	Do not depend on order of evaluation for side effects
EXP36-C	builtisparse-checkout.c	624	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisparse-checkout.c	624	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtisparse-checkout.c	647	2	Store a new value in pointers immediately after free()
MEM34-C	builtisparse-checkout.c	647	2	Only free memory allocated dynamically
EXP36-C	builtisparse-checkout.c	656	35	Do not convert pointers into more strictly aligned pointer types
MSC01-C	builtisparse-checkout.c	658	2	Strive for logical completeness
EXP12-C	builtisparse-checkout.c	672	3	Do not ignore values returned by functions: set_config
MEM34-C	builtisparse-checkout.c	683	2	Only free memory allocated dynamically
DCL00-C	builtisparse-checkout.c	700	3	Const-qualify immutable objects: prefix_len
DCL01-C	builtisparse-checkout.c	725	3	Do not reuse variable names in subscopes: index
DCL00-C	builtisparse-checkout.c	726	3	Const-qualify immutable objects: pos
EXP12-C	builtisparse-checkout.c	765	2	Do not ignore values returned by functions: repo_read_index
DCL00-C	builtisparse-checkout.c	791	2	Const-qualify immutable objects: default_patterns_nr
EXP12-C	builtisparse-checkout.c	808	2	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtisparse-checkout.c	867	2	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtisparse-checkout.c	904	2	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtisparse-checkout.c	906	2	Do not ignore values returned by functions: memset
STR11-C	builtistash.c	116	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtistash.c	167	2	Do not reuse variable names in subscopes: commit
EXP12-C	builtistash.c	178	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtistash.c	190	4	Do not ignore values returned by functions: fprintf_ln
MEM34-C	builtistash.c	226	2	Only free memory allocated dynamically
DCL00-C	builtistash.c	258	2	Const-qualify immutable objects: nr_trees
DCL01-C	builtistash.c	261	2	Do not reuse variable names in subscopes: tree
DCL01-C	builtistash.c	262	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	builtistash.c	264	2	Do not ignore values returned by functions: repo_read_index_preload
EXP12-C	builtistash.c	268	2	Do not ignore values returned by functions: repo_hold_locked_index
EXP12-C	builtistash.c	270	2	Do not ignore values returned by functions: memset
EXP12-C	builtistash.c	308	2	Do not ignore values returned by functions: strvec_pushf
DCL13-C	builtistash.c	353	29	Declare function parameters that are pointers to values not changed by the function as const: options
EXP36-C	builtistash.c	362	17	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtistash.c	365	16	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtistash.c	380	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtistash.c	381	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtistash.c	382	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtistash.c	385	3	Do not ignore values returned by functions: remove_path
EXP12-C	builtistash.c	392	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtistash.c	396	2	Do not ignore values returned by functions: remove_path
EXP12-C	builtistash.c	435	2	Do not ignore values returned by functions: do_diff_cache
EXP12-C	builtistash.c	480	4	Do not ignore values returned by functions: checkout_entry
INT13-C	builtistash.c	481	20	Use bitwise operators only on unsigned operands
DCL01-C	builtistash.c	492	4	Do not reuse variable names in subscopes: option
EXP12-C	builtistash.c	501	4	Do not ignore values returned by functions: add_index_entry
EXP12-C	builtistash.c	509	2	Do not ignore values returned by functions: repo_hold_locked_index
INT13-C	builtistash.c	511	23	Use bitwise operators only on unsigned operands
DCL01-C	builtistash.c	516	10	Do not reuse variable names in subscopes: index
EXP12-C	builtistash.c	526	2	Do not ignore values returned by functions: repo_read_index_preload
EXP12-C	builtistash.c	554	4	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtistash.c	558	4	Do not ignore values returned by functions: reset_head
EXP12-C	builtistash.c	560	4	Do not ignore values returned by functions: repo_read_index
EXP12-C	builtistash.c	583	2	Do not ignore values returned by functions: repo_hold_locked_index
INT13-C	builtistash.c	596	23	Use bitwise operators only on unsigned operands
EXP12-C	builtistash.c	600	3	Do not ignore values returned by functions: repo_rerere
EXP12-C	builtistash.c	629	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtistash.c	631	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtistash.c	633	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtistash.c	634	3	Do not ignore values returned by functions: run_command
DCL01-C	builtistash.c	644	2	Do not reuse variable names in subscopes: index
DCL13-C	builtistash.c	665	48	Declare function parameters that are pointers to values not changed by the function as const: ooid
DCL13-C	builtistash.c	666	27	Declare function parameters that are pointers to values not changed by the function as const: noid
DCL13-C	builtistash.c	670	15	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL00-C	builtistash.c	702	2	Const-qualify immutable objects: ret
DCL01-C	builtistash.c	738	2	Do not reuse variable names in subscopes: index
EXP12-C	builtistash.c	779	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtistash.c	790	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtistash.c	791	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtistash.c	821	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtistash.c	822	2	Do not ignore values returned by functions: strvec_push
DCL01-C	builtistash.c	850	2	Do not reuse variable names in subscopes: tree
DCL01-C	builtistash.c	851	2	Do not reuse variable names in subscopes: tree_desc
INT01-C	builtistash.c	855	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtistash.c	868	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtistash.c	871	2	Do not ignore values returned by functions: do_diff_cache
EXP12-C	builtistash.c	906	2	Do not ignore values returned by functions: strvec_push
INT01-C	builtistash.c	921	23	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	builtistash.c	921	23	Ensure that return values are compared against the proper type
MSC01-C	builtistash.c	944	2	Strive for logical completeness
EXP12-C	builtistash.c	959	2	Do not ignore values returned by functions: log_tree_diff_flush
EXP12-C	builtistash.c	985	4	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtistash.c	1035	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtistash.c	1055	2	Do not ignore values returned by functions: fill_directory
EXP12-C	builtistash.c	1145	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtistash.c	1170	2	Do not ignore values returned by functions: remove_path
EXP12-C	builtistash.c	1215	2	Do not ignore values returned by functions: remove_path
EXP12-C	builtistash.c	1219	2	Do not ignore values returned by functions: strvec_pushf
ENV30-C	builtistash.c	1229	34	Do not modify the string returned by getenv()
EXP12-C	builtistash.c	1230	2	Do not ignore values returned by functions: setenv
MEM34-C	builtistash.c	1239	2	Only free memory allocated dynamically
EXP12-C	builtistash.c	1264	2	Do not ignore values returned by functions: remove_path
EXP12-C	builtistash.c	1306	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtistash.c	1325	2	Do not ignore values returned by functions: remove_path
EXP12-C	builtistash.c	1348	2	Do not ignore values returned by functions: repo_read_index_preload
EXP12-C	builtistash.c	1379	2	Do not ignore values returned by functions: commit_list_insert
EXP12-C	builtistash.c	1444	2	Do not ignore values returned by functions: commit_list_insert
EXP12-C	builtistash.c	1446	2	Do not ignore values returned by functions: commit_list_insert
EXP12-C	builtistash.c	1472	2	Do not ignore values returned by functions: strbuf_join_argv
EXP12-C	builtistash.c	1474	2	Do not ignore values returned by functions: memset
EXP12-C	builtistash.c	1501	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtistash.c	1512	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtistash.c	1518	2	Do not ignore values returned by functions: repo_read_index_preload
EXP12-C	builtistash.c	1526	4	Do not ignore values returned by functions: ce_path_match
EXP12-C	builtistash.c	1530	4	Do not ignore values returned by functions: fprintf_ln
MEM01-C	builtistash.c	1532	4	Store a new value in pointers immediately after free()
MEM31-C	builtistash.c	1532	4	Free dynamically allocated memory when no longer needed
MEM34-C	builtistash.c	1532	4	Only free memory allocated dynamically
MEM34-C	builtistash.c	1535	3	Only free memory allocated dynamically
EXP12-C	builtistash.c	1583	5	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtistash.c	1604	4	Do not ignore values returned by functions: strvec_push
EXP12-C	builtistash.c	1609	4	Do not ignore values returned by functions: strvec_push
DCL02-C	builtistash.c	1677	4	Use visually distinct identifiers: cp
DCL01-C	builtistash.c	1677	4	Do not reuse variable names in subscopes: cp
DCL02-C	builtistash.c	1677	4	Use visually distinct identifiers: cp
DCL02-C	builtistash.c	1677	4	Use visually distinct identifiers: cp
INT13-C	builtistash.c	1747	46	Use bitwise operators only on unsigned operands
INT13-C	builtistash.c	1761	30	Use bitwise operators only on unsigned operands
EXP12-C	builtistash.c	1811	2	Do not ignore values returned by functions: memset
DCL00-C	builtistash.c	1821	2	Const-qualify immutable objects: pid
EXP12-C	builtistash.c	1860	2	Do not ignore values returned by functions: strvec_push
MEM34-C	builtistripspace.c	14	2	Only free memory allocated dynamically
EXP12-C	builtistripspace.c	50	3	Do not ignore values returned by functions: setup_git_directory_gently
DCL00-C	builtisubmodule--helper.c	83	2	Const-qualify immutable objects: code
DCL01-C	builtisubmodule--helper.c	94	2	Do not reuse variable names in subscopes: remote
MEM01-C	builtisubmodule--helper.c	108	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	108	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	109	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	109	2	Only free memory allocated dynamically
DCL00-C	builtisubmodule--helper.c	125	3	Const-qualify immutable objects: displaypath
DCL01-C	builtisubmodule--helper.c	135	65	Do not reuse variable names in subscopes: object_id
EXP12-C	builtisubmodule--helper.c	159	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	161	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	164	4	Do not ignore values returned by functions: strbuf_strip_suffix
DCL01-C	builtisubmodule--helper.c	186	28	Do not reuse variable names in subscopes: pathspec
EXP36-C	builtisubmodule--helper.c	210	3	Do not convert pointers into more strictly aligned pointer types
MEM34-C	builtisubmodule--helper.c	224	2	Only free memory allocated dynamically
EXP36-C	builtisubmodule--helper.c	240	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtisubmodule--helper.c	263	36	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtisubmodule--helper.c	290	28	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtisubmodule--helper.c	328	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	329	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	330	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	331	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	333	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	345	3	Do not ignore values returned by functions: strvec_pushf
MEM34-C	builtisubmodule--helper.c	348	3	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	368	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	375	3	Do not ignore values returned by functions: strvec_push
MEM34-C	builtisubmodule--helper.c	385	2	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	391	2	Do not reuse variable names in subscopes: pathspec
EXP12-C	builtisubmodule--helper.c	466	3	Do not ignore values returned by functions: git_config_set_gently
MEM34-C	builtisubmodule--helper.c	489	4	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	518	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	518	2	Only free memory allocated dynamically
MEM34-C	builtisubmodule--helper.c	519	2	Only free memory allocated dynamically
EXP36-C	builtisubmodule--helper.c	524	25	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtisubmodule--helper.c	532	2	Do not reuse variable names in subscopes: pathspec
MEM34-C	builtisubmodule--helper.c	590	3	Only free memory allocated dynamically
EXP36-C	builtisubmodule--helper.c	601	29	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtisubmodule--helper.c	655	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	builtisubmodule--helper.c	685	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	686	3	Do not ignore values returned by functions: strvec_pushf
MEM01-C	builtisubmodule--helper.c	702	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	702	2	Only free memory allocated dynamically
EXP36-C	builtisubmodule--helper.c	709	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtisubmodule--helper.c	718	2	Do not reuse variable names in subscopes: pathspec
MEM30-C	builtisubmodule--helper.c	781	3	Do not access freed memory
MEM34-C	builtisubmodule--helper.c	781	3	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	812	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	813	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	861	4	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	870	3	Do not ignore values returned by functions: run_command
DCL00-C	builtisubmodule--helper.c	891	4	Const-qualify immutable objects: fd
FIO42-C	builtisubmodule--helper.c	891	13	Close files when they are no longer needed
EXP12-C	builtisubmodule--helper.c	965	3	Do not ignore values returned by functions: strvec_push
INT05-C	builtisubmodule--helper.c	972	20	Use strtol() or a related function to convert a string token to an integer
MEM01-C	builtisubmodule--helper.c	998	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	998	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	999	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	999	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1000	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1000	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1032	4	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1032	4	Only free memory allocated dynamically
DCL13-C	builtisubmodule--helper.c	1046	33	Declare function parameters that are pointers to values not changed by the function as const: options
EXP36-C	builtisubmodule--helper.c	1050	32	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisubmodule--helper.c	1065	3	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtisubmodule--helper.c	1070	47	Do not reuse variable names in subscopes: diff_cmd
DCL01-C	builtisubmodule--helper.c	1081	26	Do not reuse variable names in subscopes: diff_cmd
EXP12-C	builtisubmodule--helper.c	1091	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	1097	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	1104	2	Do not ignore values returned by functions: precompose_argv_prefix
EXP12-C	builtisubmodule--helper.c	1105	2	Do not ignore values returned by functions: setup_revisions
DCL01-C	builtisubmodule--helper.c	1143	2	Do not reuse variable names in subscopes: diff_cmd
MEM34-C	builtisubmodule--helper.c	1232	4	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1263	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1263	2	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	1265	2	Do not ignore values returned by functions: submodule_to_gitdir
EXP12-C	builtisubmodule--helper.c	1279	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	1280	3	Do not ignore values returned by functions: strvec_pushf
MEM01-C	builtisubmodule--helper.c	1293	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1293	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1294	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1294	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1296	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1296	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1297	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1297	2	Only free memory allocated dynamically
MEM34-C	builtisubmodule--helper.c	1298	2	Only free memory allocated dynamically
EXP36-C	builtisubmodule--helper.c	1303	25	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtisubmodule--helper.c	1311	2	Do not reuse variable names in subscopes: pathspec
EXP12-C	builtisubmodule--helper.c	1420	2	Do not ignore values returned by functions: strvec_pushf
INT01-C	builtisubmodule--helper.c	1423	50	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtisubmodule--helper.c	1430	3	Do not ignore values returned by functions: git_config_rename_section_in_file
MEM34-C	builtisubmodule--helper.c	1434	3	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1438	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1438	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1439	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1439	2	Only free memory allocated dynamically
EXP36-C	builtisubmodule--helper.c	1446	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtisubmodule--helper.c	1453	2	Do not reuse variable names in subscopes: pathspec
MSC12-C	builtisubmodule--helper.c	1474	3	Detect and remove code that has no effect
DCL01-C	builtisubmodule--helper.c	1508	2	Do not reuse variable names in subscopes: progress
STR11-C	builtisubmodule--helper.c	1530	1	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	builtisubmodule--helper.c	1540	42	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtisubmodule--helper.c	1574	4	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1574	4	Only free memory allocated dynamically
MSC01-C	builtisubmodule--helper.c	1576	4	Strive for logical completeness
EXP12-C	builtisubmodule--helper.c	1583	5	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtisubmodule--helper.c	1601	2	Do not ignore values returned by functions: git_config_get_string
EXP12-C	builtisubmodule--helper.c	1605	2	Do not ignore values returned by functions: git_config_get_string
MEM01-C	builtisubmodule--helper.c	1628	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1628	2	Only free memory allocated dynamically
MEM34-C	builtisubmodule--helper.c	1629	2	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	1668	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	1669	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	1696	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	1697	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	1698	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	1716	3	Do not ignore values returned by functions: unlink_or_warn
MEM34-C	builtisubmodule--helper.c	1717	3	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	1727	2	Do not ignore values returned by functions: git_config_get_string
EXP12-C	builtisubmodule--helper.c	1731	2	Do not ignore values returned by functions: git_config_get_string
MEM01-C	builtisubmodule--helper.c	1736	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1736	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1737	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1737	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1739	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1739	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	1740	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1740	2	Only free memory allocated dynamically
MEM34-C	builtisubmodule--helper.c	1741	2	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	1747	2	Do not reuse variable names in subscopes: progress
EXP12-C	builtisubmodule--helper.c	1805	2	Do not ignore values returned by functions: clone_submodule
MEM34-C	builtisubmodule--helper.c	1848	2	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	1863	2	Do not reuse variable names in subscopes: update_data
DCL01-C	builtisubmodule--helper.c	1901	2	Do not reuse variable names in subscopes: remote
DCL01-C	builtisubmodule--helper.c	1902	2	Do not reuse variable names in subscopes: progress
MEM01-C	builtisubmodule--helper.c	1985	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	1985	2	Only free memory allocated dynamically
EXP36-C	builtisubmodule--helper.c	2016	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtisubmodule--helper.c	2030	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	2031	2	Do not ignore values returned by functions: strvec_push
MEM01-C	builtisubmodule--helper.c	2064	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	2064	2	Only free memory allocated dynamically
MEM34-C	builtisubmodule--helper.c	2067	3	Only free memory allocated dynamically
EXP05-C	builtisubmodule--helper.c	2067	8	Do not cast away a const qualification
EXP36-C	builtisubmodule--helper.c	2077	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtisubmodule--helper.c	2079	2	Do not reuse variable names in subscopes: index
EXP36-C	builtisubmodule--helper.c	2084	20	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisubmodule--helper.c	2110	14	Do not convert pointers into more strictly aligned pointer types
DCL13-C	builtisubmodule--helper.c	2120	54	Declare function parameters that are pointers to values not changed by the function as const: err
DCL13-C	builtisubmodule--helper.c	2122	17	Declare function parameters that are pointers to values not changed by the function as const: idx_task_cb
EXP36-C	builtisubmodule--helper.c	2124	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisubmodule--helper.c	2136	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisubmodule--helper.c	2137	14	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtisubmodule--helper.c	2140	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	2140	2	Only free memory allocated dynamically
ARR30-C	builtisubmodule--helper.c	2146	39	Do not form or use out-of-bounds pointers or array subscripts
EXP36-C	builtisubmodule--helper.c	2150	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtisubmodule--helper.c	2171	18	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtisubmodule--helper.c	2191	52	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtisubmodule--helper.c	2206	2	Do not ignore values returned by functions: strvec_push
DCL01-C	builtisubmodule--helper.c	2213	3	Do not reuse variable names in subscopes: remote
MEM34-C	builtisubmodule--helper.c	2216	3	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	2237	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	2243	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	2249	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	2255	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	2262	4	Do not ignore values returned by functions: die_message
DCL00-C	builtisubmodule--helper.c	2316	2	Const-qualify immutable objects: subforce
DCL01-C	builtisubmodule--helper.c	2344	67	Do not reuse variable names in subscopes: branch
MEM01-C	builtisubmodule--helper.c	2358	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	2358	2	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	2410	3	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	2410	3	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	2411	3	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	2411	3	Only free memory allocated dynamically
MSC01-C	builtisubmodule--helper.c	2421	2	Strive for logical completeness
DCL01-C	builtisubmodule--helper.c	2436	59	Do not reuse variable names in subscopes: update_data
DCL00-C	builtisubmodule--helper.c	2439	2	Const-qualify immutable objects: update_type
EXP12-C	builtisubmodule--helper.c	2442	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtisubmodule--helper.c	2443	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	2446	2	Do not ignore values returned by functions: strvec_pushf
DCL01-C	builtisubmodule--helper.c	2489	49	Do not reuse variable names in subscopes: update_data
DCL01-C	builtisubmodule--helper.c	2509	3	Do not reuse variable names in subscopes: branch
MEM01-C	builtisubmodule--helper.c	2521	3	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	2521	3	Only free memory allocated dynamically
MEM34-C	builtisubmodule--helper.c	2534	3	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	2566	50	Do not reuse variable names in subscopes: update_data
DCL01-C	builtisubmodule--helper.c	2630	2	Do not reuse variable names in subscopes: pathspec
DCL01-C	builtisubmodule--helper.c	2751	2	Do not reuse variable names in subscopes: remote
DCL01-C	builtisubmodule--helper.c	2787	3	Do not reuse variable names in subscopes: refspec
MEM34-C	builtisubmodule--helper.c	2821	2	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	2829	2	Do not reuse variable names in subscopes: pathspec
DCL01-C	builtisubmodule--helper.c	2866	2	Do not reuse variable names in subscopes: usage
EXP12-C	builtisubmodule--helper.c	2878	2	Do not ignore values returned by functions: config_set_in_gitmodules_file_gently
MEM34-C	builtisubmodule--helper.c	2881	2	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	2905	2	Do not reuse variable names in subscopes: usage
MEM34-C	builtisubmodule--helper.c	2925	2	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	2946	2	Do not reuse variable names in subscopes: usage
DCL01-C	builtisubmodule--helper.c	2968	2	Do not reuse variable names in subscopes: branch
DCL01-C	builtisubmodule--helper.c	2977	2	Do not reuse variable names in subscopes: progress
EXP12-C	builtisubmodule--helper.c	2988	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtisubmodule--helper.c	2990	2	Do not ignore values returned by functions: strvec_push
DCL01-C	builtisubmodule--helper.c	3008	49	Do not reuse variable names in subscopes: add_data
MEM01-C	builtisubmodule--helper.c	3027	3	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	3027	3	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	3043	5	Store a new value in pointers immediately after free()
MEM30-C	builtisubmodule--helper.c	3043	5	Do not access freed memory
MEM31-C	builtisubmodule--helper.c	3043	5	Free dynamically allocated memory when no longer needed
MEM34-C	builtisubmodule--helper.c	3043	5	Only free memory allocated dynamically
MEM01-C	builtisubmodule--helper.c	3061	3	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	3061	3	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	3092	4	Do not ignore values returned by functions: strvec_pushf
MEM34-C	builtisubmodule--helper.c	3114	2	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	3119	56	Do not reuse variable names in subscopes: add_data
EXP12-C	builtisubmodule--helper.c	3127	2	Do not ignore values returned by functions: git_config_set_gently
MEM01-C	builtisubmodule--helper.c	3128	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	3128	2	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	3174	4	Do not ignore values returned by functions: git_config_set_gently
MEM01-C	builtisubmodule--helper.c	3175	4	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	3175	4	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	3179	3	Do not ignore values returned by functions: git_config_set_gently
MEM01-C	builtisubmodule--helper.c	3180	3	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	3180	3	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	3206	4	Do not ignore values returned by functions: ce_path_match
MEM34-C	builtisubmodule--helper.c	3219	3	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	3238	2	Do not reuse variable names in subscopes: progress
DCL01-C	builtisubmodule--helper.c	3239	2	Do not reuse variable names in subscopes: add_data
DCL01-C	builtisubmodule--helper.c	3257	2	Do not reuse variable names in subscopes: usage
MEM34-C	builtisubmodule--helper.c	3286	3	Only free memory allocated dynamically
EXP12-C	builtisubmodule--helper.c	3309	2	Do not ignore values returned by functions: normalize_path_copy
MEM01-C	builtisubmodule--helper.c	3348	2	Store a new value in pointers immediately after free()
MEM34-C	builtisubmodule--helper.c	3348	2	Only free memory allocated dynamically
DCL01-C	builtisubmodule--helper.c	3359	2	Do not reuse variable names in subscopes: usage
EXP12-C	builtisymbolic-ref.c	34	3	Do not ignore values returned by functions: puts
MEM34-C	builtisymbolic-ref.c	35	3	Only free memory allocated dynamically
EXP12-C	builtitag.c	50	2	Do not ignore values returned by functions: memset
EXP12-C	builtitag.c	68	2	Do not ignore values returned by functions: filter_refs
EXP12-C	builtitag.c	76	3	Do not ignore values returned by functions: fwrite
EXP12-C	builtitag.c	77	3	Do not ignore values returned by functions: putchar
MEM34-C	builtitag.c	83	2	Only free memory allocated dynamically
DCL01-C	builtitag.c	95	2	Do not reuse variable names in subscopes: ref
MSC12-C	builtitag.c	103	4	Detect and remove code that has no effect
DCL01-C	builtitag.c	114	55	Do not reuse variable names in subscopes: ref
EXP36-C	builtitag.c	117	33	Do not convert pointers into more strictly aligned pointer types
EXP12-C	builtitag.c	119	2	Do not ignore values returned by functions: string_list_append
INT01-C	builtitag.c	120	31	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	builtitag.c	136	31	Do not convert pointers into more strictly aligned pointer types
MEM30-C	builtitag.c	142	3	Do not access freed memory
MEM34-C	builtitag.c	142	3	Only free memory allocated dynamically
DCL01-C	builtitag.c	148	53	Do not reuse variable names in subscopes: ref
EXP36-C	builtitag.c	152	30	Do not convert pointers into more strictly aligned pointer types
STR11-C	builtitag.c	172	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtitag.c	176	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builtitag.c	193	3	Do not ignore values returned by functions: string_list_append
EXP36-C	builtitag.c	193	22	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtitag.c	223	8	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	builtitag.c	229	3	Only free memory allocated dynamically
MEM01-C	builtitag.c	235	2	Store a new value in pointers immediately after free()
MEM34-C	builtitag.c	235	2	Only free memory allocated dynamically
STR11-C	builtitag.c	260	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtitag.c	266	48	Do not reuse variable names in subscopes: object
DCL01-C	builtitag.c	267	22	Do not reuse variable names in subscopes: tag
DCL02-C	builtitag.c	426	2	Use visually distinct identifiers: buf
DCL01-C	builtitag.c	306	4	Do not reuse variable names in subscopes: buf
DCL02-C	builtitag.c	426	2	Use visually distinct identifiers: buf
EXP12-C	builtitag.c	340	3	Do not ignore values returned by functions: unlink_or_warn
MEM01-C	builtitag.c	341	3	Store a new value in pointers immediately after free()
MEM34-C	builtitag.c	341	3	Only free memory allocated dynamically
ENV30-C	builtitag.c	354	14	Do not modify the string returned by getenv()
MEM01-C	builtitag.c	375	3	Store a new value in pointers immediately after free()
MEM34-C	builtitag.c	375	3	Only free memory allocated dynamically
EXP36-C	builtitag.c	400	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtitag.c	427	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtitag.c	429	2	Do not reuse variable names in subscopes: object
DCL01-C	builtitag.c	430	2	Do not reuse variable names in subscopes: tag
EXP12-C	builtitag.c	495	2	Do not ignore values returned by functions: memset
EXP12-C	builtitag.c	496	2	Do not ignore values returned by functions: memset
INT01-C	builtitag.c	506	54	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtitag.c	526	2	Do not ignore values returned by functions: finalize_colopts
EXP12-C	builtitag.c	538	4	Do not ignore values returned by functions: memset
EXP12-C	builtitag.c	540	4	Do not ignore values returned by functions: run_column_filter
EXP12-C	builtiunpack-file.c	17	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	builtiunpack-file.c	36	2	Do not ignore values returned by functions: puts
STR11-C	builtiunpack-objects.c	19	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtiunpack-objects.c	36	2	Do not reuse variable names in subscopes: buffer
EXP36-C	builtiunpack-objects.c	44	26	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiunpack-objects.c	47	46	Do not reuse variable names in subscopes: object
DCL01-C	builtiunpack-objects.c	47	60	Do not reuse variable names in subscopes: buffer
DCL02-C	builtiunpack-objects.c	47	60	Use visually distinct identifiers: buffer
DCL02-C	builtiunpack-objects.c	47	60	Use visually distinct identifiers: buffer
EXP36-C	builtiunpack-objects.c	50	2	Do not convert pointers into more strictly aligned pointer types
DCL02-C	builtiunpack-objects.c	47	60	Use visually distinct identifiers: buffer
INT01-C	builtiunpack-objects.c	65	10	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtiunpack-objects.c	73	3	Const-qualify immutable objects: ret
INT01-C	builtiunpack-objects.c	73	55	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiunpack-objects.c	92	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiunpack-objects.c	92	6	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	builtiunpack-objects.c	114	2	Const-qualify immutable objects: bufsize
EXP12-C	builtiunpack-objects.c	117	2	Do not ignore values returned by functions: memset
DCL00-C	builtiunpack-objects.c	126	3	Const-qualify immutable objects: ret
MSC12-C	builtiunpack-objects.c	131	4	Detect and remove code that has no effect
MEM34-C	builtiunpack-objects.c	132	4	Only free memory allocated dynamically
MEM34-C	builtiunpack-objects.c	150	3	Only free memory allocated dynamically
EXP36-C	builtiunpack-objects.c	169	35	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiunpack-objects.c	181	2	Do not reuse variable names in subscopes: offset
DCL13-C	builtiunpack-objects.c	213	10	Declare function parameters that are pointers to values not changed by the function as const: data
DCL13-C	builtiunpack-objects.c	213	37	Declare function parameters that are pointers to values not changed by the function as const: options
DCL02-C	builtiunpack-objects.c	529	2	Use visually distinct identifiers: type
DCL00-C	builtiunpack-objects.c	228	3	Const-qualify immutable objects: type
DCL01-C	builtiunpack-objects.c	228	3	Do not reuse variable names in subscopes: type
DCL02-C	builtiunpack-objects.c	529	2	Use visually distinct identifiers: type
MEM01-C	builtiunpack-objects.c	272	3	Store a new value in pointers immediately after free()
MEM31-C	builtiunpack-objects.c	272	3	Free dynamically allocated memory when no longer needed
DCL01-C	builtiunpack-objects.c	275	3	Do not reuse variable names in subscopes: blob
MEM01-C	builtiunpack-objects.c	280	3	Store a new value in pointers immediately after free()
MEM01-C	builtiunpack-objects.c	317	2	Store a new value in pointers immediately after free()
MEM01-C	builtiunpack-objects.c	338	4	Store a new value in pointers immediately after free()
MEM34-C	builtiunpack-objects.c	338	4	Only free memory allocated dynamically
EXP36-C	builtiunpack-objects.c	363	45	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtiunpack-objects.c	373	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	builtiunpack-objects.c	381	31	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	builtiunpack-objects.c	407	3	Do not reuse variable names in subscopes: blob
DCL01-C	builtiunpack-objects.c	420	2	Do not reuse variable names in subscopes: obj_buffer
DCL00-C	builtiunpack-objects.c	459	3	Const-qualify immutable objects: base_offset
DCL01-C	builtiunpack-objects.c	459	3	Do not reuse variable names in subscopes: base_offset
INT13-C	builtiunpack-objects.c	468	24	Use bitwise operators only on unsigned operands
INT01-C	builtiunpack-objects.c	468	24	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	builtiunpack-objects.c	473	16	Avoid performing bitwise and arithmetic operations on the same data
MSC12-C	builtiunpack-objects.c	513	3	Detect and remove code that has no effect
MEM34-C	builtiunpack-objects.c	521	2	Only free memory allocated dynamically
INT14-C	builtiunpack-objects.c	543	8	Avoid performing bitwise and arithmetic operations on the same data
INT34-C	builtiunpack-objects.c	543	22	Do not shift a negative number of bits or more bits than exist in the operand
EXP36-C	builtiunpack-objects.c	575	32	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiunpack-objects.c	588	2	Do not convert pointers into more strictly aligned pointer types
EXP11-C	builtiunpack-objects.c	641	11	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	builtiunpack-objects.c	677	3	Const-qualify immutable objects: ret
DCL00-C	builtiupdate-index.c	56	2	Const-qualify immutable objects: vp
EXP12-C	builtiupdate-index.c	69	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	builtiupdate-index.c	71	2	Do not ignore values returned by functions: putchar
EXP12-C	builtiupdate-index.c	72	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	builtiupdate-index.c	132	2	Do not ignore values returned by functions: sleep
MEM01-C	builtiupdate-index.c	148	2	Store a new value in pointers immediately after free()
MEM34-C	builtiupdate-index.c	148	2	Only free memory allocated dynamically
EXP12-C	builtiupdate-index.c	150	2	Do not ignore values returned by functions: atexit
EXP12-C	builtiupdate-index.c	151	2	Do not ignore values returned by functions: xstat_mtime_dir
EXP12-C	builtiupdate-index.c	153	2	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	157	2	Do not ignore values returned by functions: xstat_mtime_dir
EXP12-C	builtiupdate-index.c	160	3	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	161	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtiupdate-index.c	166	2	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	170	2	Do not ignore values returned by functions: xstat_mtime_dir
EXP12-C	builtiupdate-index.c	173	3	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	174	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtiupdate-index.c	179	2	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	184	2	Do not ignore values returned by functions: xstat_mtime_dir
EXP12-C	builtiupdate-index.c	186	3	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	187	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtiupdate-index.c	191	2	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	195	2	Do not ignore values returned by functions: xstat_mtime_dir
EXP12-C	builtiupdate-index.c	197	3	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	198	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtiupdate-index.c	202	2	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	206	2	Do not ignore values returned by functions: xstat_mtime_dir
EXP12-C	builtiupdate-index.c	208	3	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	209	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtiupdate-index.c	214	2	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	219	2	Do not ignore values returned by functions: xstat_mtime_dir
EXP12-C	builtiupdate-index.c	221	3	Do not ignore values returned by functions: fputc
EXP12-C	builtiupdate-index.c	222	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtiupdate-index.c	229	2	Do not ignore values returned by functions: fprintf_ln
DCL00-C	builtiupdate-index.c	239	2	Const-qualify immutable objects: namelen
DCL00-C	builtiupdate-index.c	240	2	Const-qualify immutable objects: pos
INT13-C	builtiupdate-index.c	246	38	Use bitwise operators only on unsigned operands
DCL01-C	builtiupdate-index.c	280	2	Do not reuse variable names in subscopes: option
INT13-C	builtiupdate-index.c	300	9	Use bitwise operators only on unsigned operands
INT32-C	builtiupdate-index.c	352	8	Ensure that operations on signed integers do not result in overflow
DCL01-C	builtiupdate-index.c	414	2	Do not reuse variable names in subscopes: option
INT13-C	builtiupdate-index.c	431	9	Use bitwise operators only on unsigned operands
INT07-C	builtiupdate-index.c	583	32	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	builtiupdate-index.c	635	2	Const-qualify immutable objects: namelen
ARR30-C	builtiupdate-index.c	646	50	Do not form or use out-of-bounds pointers or array subscripts
INT32-C	builtiupdate-index.c	658	9	Ensure that operations on signed integers do not result in overflow
ARR30-C	builtiupdate-index.c	660	50	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	builtiupdate-index.c	689	2	Do not ignore values returned by functions: remove_file_from_index
MSC12-C	builtiupdate-index.c	691	3	Detect and remove code that has no effect
MSC12-C	builtiupdate-index.c	697	2	Detect and remove code that has no effect
INT13-C	builtiupdate-index.c	729	7	Use bitwise operators only on unsigned operands
MEM30-C	builtiupdate-index.c	730	3	Do not access freed memory
MEM34-C	builtiupdate-index.c	730	3	Only free memory allocated dynamically
DCL01-C	builtiupdate-index.c	743	2	Do not reuse variable names in subscopes: pathspec
MEM01-C	builtiupdate-index.c	788	3	Store a new value in pointers immediately after free()
MEM34-C	builtiupdate-index.c	788	3	Only free memory allocated dynamically
EXP12-C	builtiupdate-index.c	805	2	Do not ignore values returned by functions: repo_read_index
INT13-C	builtiupdate-index.c	806	17	Use bitwise operators only on unsigned operands
EXP36-C	builtiupdate-index.c	827	20	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiupdate-index.c	835	20	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiupdate-index.c	914	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiupdate-index.c	930	28	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiupdate-index.c	945	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiupdate-index.c	966	23	Do not convert pointers into more strictly aligned pointer types
DCL01-C	builtiupdate-index.c	986	2	Do not reuse variable names in subscopes: untracked_cache
DCL00-C	builtiupdate-index.c	988	2	Const-qualify immutable objects: prefix_length
INT07-C	builtiupdate-index.c	990	2	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	builtiupdate-index.c	993	2	Do not reuse variable names in subscopes: split_index
DCL01-C	builtiupdate-index.c	996	2	Do not reuse variable names in subscopes: lock_file
MSC01-C	builtiupdate-index.c	1141	3	Strive for logical completeness
MEM01-C	builtiupdate-index.c	1158	4	Store a new value in pointers immediately after free()
MEM34-C	builtiupdate-index.c	1158	4	Only free memory allocated dynamically
MEM34-C	builtiupdate-index.c	1203	4	Only free memory allocated dynamically
DCL00-C	builtiupdate-index.c	1260	3	Const-qualify immutable objects: fsm_mode
DCL00-C	builtiupdate-index.c	1261	3	Const-qualify immutable objects: reason
DCL00-C	builtiupdate-index.c	1285	3	Const-qualify immutable objects: fsm_mode
INT07-C	builtiupdate-ref.c	16	1	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtiupdate-ref.c	35	13	Use only explicitly signed or unsigned char type for numeric values
INT07-C	builtiupdate-ref.c	38	16	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	builtiupdate-ref.c	55	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtiupdate-ref.c	100	18	Do not reuse variable names in subscopes: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
MEM01-C	builtiupdate-ref.c	210	2	Store a new value in pointers immediately after free()
MEM34-C	builtiupdate-ref.c	210	2	Only free memory allocated dynamically
MEM01-C	builtiupdate-ref.c	240	2	Store a new value in pointers immediately after free()
MEM34-C	builtiupdate-ref.c	240	2	Only free memory allocated dynamically
MEM01-C	builtiupdate-ref.c	274	2	Store a new value in pointers immediately after free()
MEM34-C	builtiupdate-ref.c	274	2	Only free memory allocated dynamically
MEM01-C	builtiupdate-ref.c	301	2	Store a new value in pointers immediately after free()
MEM34-C	builtiupdate-ref.c	301	2	Only free memory allocated dynamically
DCL01-C	builtiupdate-ref.c	305	35	Do not reuse variable names in subscopes: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL02-C	builtiupdate-ref.c	374	1	Use visually distinct identifiers: command
DCL13-C	builtiupdate-ref.c	311	54	Declare function parameters that are pointers to values not changed by the function as const: transaction
DCL13-C	builtiupdate-ref.c	321	53	Declare function parameters that are pointers to values not changed by the function as const: transaction
DCL01-C	builtiupdate-ref.c	332	2	Do not reuse variable names in subscopes: error
DCL01-C	builtiupdate-ref.c	343	2	Do not reuse variable names in subscopes: error
DCL01-C	builtiupdate-ref.c	354	2	Do not reuse variable names in subscopes: error
INT01-C	builtiupdate-ref.c	411	19	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	builtiupdate-ref.c	423	6	Use only explicitly signed or unsigned char type for numeric values
MSC01-C	builtiupdate-ref.c	442	3	Strive for logical completeness
MSC01-C	builtiupdate-ref.c	476	2	Strive for logical completeness
INT07-C	builtiupdate-ref.c	532	21	Use only explicitly signed or unsigned char type for numeric values
STR11-C	builtiupload-archive.c	12	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	builtiupload-archive.c	15	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	builtiupload-archive.c	34	2	Do not ignore values returned by functions: strvec_push
INT01-C	builtiupload-archive.c	39	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiupload-archive.c	44	3	Do not ignore values returned by functions: strvec_push
DCL00-C	builtiupload-archive.c	56	2	Const-qualify immutable objects: params
EXP12-C	builtiupload-archive.c	58	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	builtiupload-archive.c	60	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	builtiupload-archive.c	68	2	Const-qualify immutable objects: sz
EXP12-C	builtiupload-archive.c	94	2	Do not ignore values returned by functions: strvec_push
DCL00-C	builtiupload-archive.c	97	3	Const-qualify immutable objects: err
MSC12-C	builtiupload-archive.c	114	5	Detect and remove code that has no effect
EXP12-C	builtiupload-archive.c	115	5	Do not ignore values returned by functions: sleep
MSC01-C	builtiupload-pack.c	51	2	Strive for logical completeness
STR11-C	builtivar.c	10	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	builtivar.c	38	2	Do not reuse variable names in subscopes: read
DCL01-C	builtiverify-commit.c	23	42	Do not reuse variable names in subscopes: commit
DCL01-C	builtiverify-commit.c	25	2	Do not reuse variable names in subscopes: signature_check
EXP12-C	builtiverify-commit.c	28	2	Do not ignore values returned by functions: memset
DCL00-C	builtiverify-commit.c	57	2	Const-qualify immutable objects: status
EXP12-C	builtiverify-commit.c	85	2	Do not ignore values returned by functions: signal
DCL00-C	builtiverify-pack.c	16	2	Const-qualify immutable objects: stat_only
EXP12-C	builtiverify-pack.c	19	2	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiverify-pack.c	39	2	Do not ignore values returned by functions: strvec_push
DCL00-C	builtiverify-tag.c	24	2	Const-qualify immutable objects: status
EXP12-C	builtiworktree.c	128	2	Do not ignore values returned by functions: lstat_cache_aware_rmdir
EXP36-C	builtiworktree.c	141	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiworktree.c	142	37	Do not convert pointers into more strictly aligned pointer types
INT01-C	builtiworktree.c	166	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	builtiworktree.c	189	2	Do not ignore values returned by functions: closedir
EXP12-C	builtiworktree.c	193	2	Do not ignore values returned by functions: strbuf_strip_suffix
EXP12-C	builtiworktree.c	194	2	Do not ignore values returned by functions: string_list_append
EXP12-C	builtiworktree.c	234	3	Do not ignore values returned by functions: remove_dir_recursively
EXP12-C	builtiworktree.c	239	3	Do not ignore values returned by functions: remove_dir_recursively
EXP12-C	builtiworktree.c	247	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	builtiworktree.c	248	2	Do not ignore values returned by functions: raise
MEM01-C	builtiworktree.c	311	2	Store a new value in pointers immediately after free()
MEM34-C	builtiworktree.c	311	2	Only free memory allocated dynamically
MEM34-C	builtiworktree.c	312	2	Only free memory allocated dynamically
MSC12-C	builtiworktree.c	327	4	Detect and remove code that has no effect
EXP12-C	builtiworktree.c	333	3	Do not ignore values returned by functions: git_configset_add_file
MEM01-C	builtiworktree.c	351	2	Store a new value in pointers immediately after free()
MEM34-C	builtiworktree.c	351	2	Only free memory allocated dynamically
MEM34-C	builtiworktree.c	352	2	Only free memory allocated dynamically
DCL01-C	builtiworktree.c	371	2	Do not reuse variable names in subscopes: realpath
DCL01-C	builtiworktree.c	378	2	Do not reuse variable names in subscopes: commit
DCL01-C	builtiworktree.c	379	2	Do not reuse variable names in subscopes: is_branch
EXP12-C	builtiworktree.c	406	2	Do not ignore values returned by functions: git_path_buf
EXP12-C	builtiworktree.c	423	2	Do not ignore values returned by functions: atexit
EXP12-C	builtiworktree.c	447	2	Do not ignore values returned by functions: strbuf_realpath
EXP12-C	builtiworktree.c	449	2	Do not ignore values returned by functions: strbuf_realpath
EXP12-C	builtiworktree.c	481	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtiworktree.c	482	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtiworktree.c	512	3	Do not ignore values returned by functions: unlink_or_warn
DCL01-C	builtiworktree.c	549	3	Do not reuse variable names in subscopes: commit
EXP12-C	builtiworktree.c	557	3	Do not ignore values returned by functions: fprintf_ln
DCL01-C	builtiworktree.c	565	4	Do not reuse variable names in subscopes: commit
EXP12-C	builtiworktree.c	568	4	Do not ignore values returned by functions: fprintf_ln
DCL01-C	builtiworktree.c	581	2	Do not reuse variable names in subscopes: ref
DCL01-C	builtiworktree.c	594	3	Do not reuse variable names in subscopes: remote
EXP12-C	builtiworktree.c	633	2	Do not ignore values returned by functions: memset
DCL01-C	builtiworktree.c	674	3	Do not reuse variable names in subscopes: commit
DCL01-C	builtiworktree.c	675	3	Do not reuse variable names in subscopes: remote
EXP12-C	builtiworktree.c	692	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiworktree.c	697	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiworktree.c	698	3	Do not ignore values returned by functions: strvec_push
EXP12-C	builtiworktree.c	732	4	Do not ignore values returned by functions: fputc
EXP12-C	builtiworktree.c	735	4	Do not ignore values returned by functions: fputc
EXP12-C	builtiworktree.c	743	2	Do not ignore values returned by functions: fputc
DCL00-C	builtiworktree.c	749	2	Const-qualify immutable objects: cur_path_len
DCL00-C	builtiworktree.c	750	2	Const-qualify immutable objects: path_adj
DCL01-C	builtiworktree.c	762	4	Do not reuse variable names in subscopes: ref
MEM34-C	builtiworktree.c	764	4	Only free memory allocated dynamically
DCL00-C	builtiworktree.c	791	3	Const-qualify immutable objects: path_len
EXP36-C	builtiworktree.c	803	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	builtiworktree.c	804	36	Do not convert pointers into more strictly aligned pointer types
MEM01-C	builtiworktree.c	983	2	Store a new value in pointers immediately after free()
MEM34-C	builtiworktree.c	983	2	Only free memory allocated dynamically
EXP12-C	builtiworktree.c	1052	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	builtiworktree.c	1054	2	Do not ignore values returned by functions: strvec_pushf
MSC12-C	builtiworktree.c	1084	3	Detect and remove code that has no effect
INT13-C	builtiworktree.c	1132	7	Use bitwise operators only on unsigned operands
INT13-C	builtiworktree.c	1138	6	Use bitwise operators only on unsigned operands
EXP12-C	builtiworktree.c	1148	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	builtiworktree.c	1151	3	Do not ignore values returned by functions: fprintf_ln
MSC01-C	builtiwrite-tree.c	42	2	Strive for logical completeness
EXP12-C	common-main.c	20	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	common-main.c	21	2	Do not ignore values returned by functions: sigaddset
EXP12-C	common-main.c	22	2	Do not ignore values returned by functions: sigprocmask
EXP12-C	common-main.c	23	2	Do not ignore values returned by functions: signal
EXP12-C	common-main.c	43	2	Do not ignore values returned by functions: setlocale
DCL00-C	abspath.c	17	2	Const-qualify immutable objects: offset
INT01-C	abspath.c	21	51	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	abspath.c	24	50	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	abspath.c	40	31	Do not ignore values returned by functions: git_is_dir_sep
INT07-C	abspath.c	43	25	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	abspath.c	54	2	Const-qualify immutable objects: offset
DCL01-C	abspath.c	82	2	Do not reuse variable names in subscopes: symlink
INT13-C	abspath.c	88	13	Use bitwise operators only on unsigned operands
INT13-C	abspath.c	100	14	Use bitwise operators only on unsigned operands
INT01-C	abspath.c	108	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	abspath.c	111	16	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	abspath.c	111	16	Ensure that return values are compared against the proper type
INT01-C	abspath.c	113	23	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	abspath.c	113	23	Ensure that return values are compared against the proper type
INT01-C	abspath.c	115	23	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	abspath.c	115	23	Ensure that return values are compared against the proper type
INT01-C	abspath.c	122	47	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	abspath.c	129	41	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	abspath.c	129	16	Use bitwise operators only on unsigned operands
INT13-C	abspath.c	130	15	Use bitwise operators only on unsigned operands
INT13-C	abspath.c	143	15	Use bitwise operators only on unsigned operands
INT13-C	abspath.c	153	15	Use bitwise operators only on unsigned operands
INT13-C	abspath.c	229	50	Use bitwise operators only on unsigned operands
DCL01-C	abspath.c	235	2	Do not reuse variable names in subscopes: realpath
INT07-C	add-interactive.c	22	10	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	add-interactive.c	27	2	Only free memory allocated dynamically
EXP12-C	add-interactive.c	61	2	Do not ignore values returned by functions: gitstrlcpy
EXP12-C	add-interactive.c	65	2	Do not ignore values returned by functions: git_config_get_string
EXP12-C	add-interactive.c	69	2	Do not ignore values returned by functions: git_config_get_string
EXP12-C	add-interactive.c	72	2	Do not ignore values returned by functions: git_config_get_bool
FIO12-C	add-interactive.c	74	3	Prefer setvbuf() to setbuf()
EXP12-C	add-interactive.c	81	2	Do not ignore values returned by functions: memset
DCL01-C	add-interactive.c	114	61	Do not reuse variable names in subscopes: list
EXP36-C	add-interactive.c	124	17	Do not convert pointers into more strictly aligned pointer types
DCL00-C	add-interactive.c	130	3	Const-qualify immutable objects: c
INT13-C	add-interactive.c	138	37	Use bitwise operators only on unsigned operands
INT01-C	add-interactive.c	143	30	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	add-interactive.c	148	59	Do not reuse variable names in subscopes: list
EXP36-C	add-interactive.c	157	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	add-interactive.c	170	46	Do not convert pointers into more strictly aligned pointer types
EXP36-C	add-interactive.c	171	21	Do not convert pointers into more strictly aligned pointer types
DCL00-C	add-interactive.c	175	4	Const-qualify immutable objects: c
INT13-C	add-interactive.c	177	15	Use bitwise operators only on unsigned operands
INT01-C	add-interactive.c	183	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-interactive.c	186	9	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	add-interactive.c	192	73	Do not reuse variable names in subscopes: list
DCL00-C	add-interactive.c	194	2	Const-qualify immutable objects: index
DCL01-C	add-interactive.c	194	2	Do not reuse variable names in subscopes: index
EXP36-C	add-interactive.c	203	40	Do not convert pointers into more strictly aligned pointer types
INT01-C	add-interactive.c	207	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-interactive.c	210	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-interactive.c	212	35	Do not convert pointers into more strictly aligned pointer types
DCL01-C	add-interactive.c	226	61	Do not reuse variable names in subscopes: list
INT01-C	add-interactive.c	238	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	add-interactive.c	243	4	Do not ignore values returned by functions: putchar
EXP12-C	add-interactive.c	247	4	Do not ignore values returned by functions: putchar
EXP36-C	add-interactive.c	288	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	add-interactive.c	303	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	add-interactive.c	308	4	Do not ignore values returned by functions: putchar
INT01-C	add-interactive.c	343	12	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	add-interactive.c	343	12	Ensure that return values are compared against the proper type
INT07-C	add-interactive.c	372	14	Use only explicitly signed or unsigned char type for numeric values
INT01-C	add-interactive.c	379	25	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	add-interactive.c	381	5	Do not ignore values returned by functions: color_fprintf_ln
INT01-C	add-interactive.c	389	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	add-interactive.c	417	2	Do not reuse variable names in subscopes: index
DCL01-C	add-interactive.c	417	2	Do not reuse variable names in subscopes: worktree
EXP36-C	add-interactive.c	422	34	Do not convert pointers into more strictly aligned pointer types
EXP11-C	add-interactive.c	439	3	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	add-interactive.c	439	3	Do not cast away a const qualification
EXP11-C	add-interactive.c	441	3	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	add-interactive.c	441	3	Do not cast away a const qualification
EXP05-C	add-interactive.c	443	33	Do not cast away a const qualification
EXP36-C	add-interactive.c	461	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	add-interactive.c	462	2	Do not reuse variable names in subscopes: stat
DCL00-C	add-interactive.c	472	3	Const-qualify immutable objects: hash
DCL01-C	add-interactive.c	474	3	Do not reuse variable names in subscopes: file_item
DCL01-C	add-interactive.c	475	3	Do not reuse variable names in subscopes: adddel
EXP36-C	add-interactive.c	485	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	add-interactive.c	487	47	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-interactive.c	488	51	Do not convert pointers into more strictly aligned pointer types
INT01-C	add-interactive.c	488	47	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	add-interactive.c	528	2	Const-qualify immutable objects: is_initial
EXP12-C	add-interactive.c	555	3	Do not ignore values returned by functions: setup_revisions
EXP12-C	add-interactive.c	568	4	Do not ignore values returned by functions: run_diff_files
INT01-C	add-interactive.c	609	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	add-interactive.c	609	15	Ensure that return values are compared against the proper type
DCL01-C	add-interactive.c	616	2	Do not reuse variable names in subscopes: index
DCL01-C	add-interactive.c	616	2	Do not reuse variable names in subscopes: worktree
DCL01-C	add-interactive.c	621	14	Do not reuse variable names in subscopes: print_file_item_data
EXP36-C	add-interactive.c	623	28	Do not convert pointers into more strictly aligned pointer types
EXP36-C	add-interactive.c	624	35	Do not convert pointers into more strictly aligned pointer types
INT01-C	add-interactive.c	632	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	add-interactive.c	664	2	Do not ignore values returned by functions: putchar
EXP12-C	add-interactive.c	681	3	Do not ignore values returned by functions: putchar
INT01-C	add-interactive.c	687	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	add-interactive.c	688	3	Do not ignore values returned by functions: putchar
EXP12-C	add-interactive.c	694	3	Do not ignore values returned by functions: putchar
EXP12-C	add-interactive.c	722	2	Do not ignore values returned by functions: putchar
DCL13-C	add-interactive.c	727	41	Declare function parameters that are pointers to values not changed by the function as const: data
DCL00-C	add-interactive.c	729	2	Const-qualify immutable objects: add_flags
EXP12-C	add-interactive.c	736	4	Do not ignore values returned by functions: remove_file_from_index
EXP12-C	add-interactive.c	744	4	Do not ignore values returned by functions: add_index_entry
DCL00-C	add-interactive.c	757	2	Const-qualify immutable objects: is_initial
DCL01-C	add-interactive.c	761	2	Do not reuse variable names in subscopes: tree
EXP12-C	add-interactive.c	768	3	Do not ignore values returned by functions: putchar
INT01-C	add-interactive.c	774	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-interactive.c	794	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	add-interactive.c	794	2	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	add-interactive.c	801	31	Use bitwise operators only on unsigned operands
MEM01-C	add-interactive.c	816	2	Store a new value in pointers immediately after free()
MEM34-C	add-interactive.c	816	2	Only free memory allocated dynamically
EXP12-C	add-interactive.c	830	2	Do not ignore values returned by functions: putchar
EXP12-C	add-interactive.c	847	2	Do not ignore values returned by functions: add_pattern_list
EXP12-C	add-interactive.c	848	2	Do not ignore values returned by functions: fill_directory
INT01-C	add-interactive.c	850	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-interactive.c	868	50	Do not convert pointers into more strictly aligned pointer types
INT01-C	add-interactive.c	885	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	add-interactive.c	912	2	Do not ignore values returned by functions: putchar
INT01-C	add-interactive.c	929	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-interactive.c	930	50	Do not convert pointers into more strictly aligned pointer types
MEM01-C	add-interactive.c	933	5	Store a new value in pointers immediately after free()
MEM30-C	add-interactive.c	933	5	Do not access freed memory
MEM31-C	add-interactive.c	933	5	Free dynamically allocated memory when no longer needed
MEM34-C	add-interactive.c	933	5	Only free memory allocated dynamically
EXP12-C	add-interactive.c	937	5	Do not ignore values returned by functions: color_fprintf_ln
MEM01-C	add-interactive.c	940	5	Store a new value in pointers immediately after free()
MEM30-C	add-interactive.c	940	5	Do not access freed memory
MEM34-C	add-interactive.c	940	5	Only free memory allocated dynamically
INT01-C	add-interactive.c	962	17	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	add-interactive.c	967	30	Use bitwise operators only on unsigned operands
INT13-C	add-interactive.c	967	11	Use bitwise operators only on unsigned operands
INT13-C	add-interactive.c	967	11	Use bitwise operators only on unsigned operands
INT13-C	add-interactive.c	967	11	Use bitwise operators only on unsigned operands
INT13-C	add-interactive.c	967	11	Use bitwise operators only on unsigned operands
INT13-C	add-interactive.c	967	11	Use bitwise operators only on unsigned operands
INT13-C	add-interactive.c	967	11	Use bitwise operators only on unsigned operands
INT13-C	add-interactive.c	967	32	Use bitwise operators only on unsigned operands
DCL00-C	add-interactive.c	985	2	Const-qualify immutable objects: is_initial
EXP12-C	add-interactive.c	991	3	Do not ignore values returned by functions: putchar
INT01-C	add-interactive.c	1006	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	add-interactive.c	1013	2	Do not ignore values returned by functions: putchar
DCL13-C	add-interactive.c	1018	32	Declare function parameters that are pointers to values not changed by the function as const: unused_files
DCL13-C	add-interactive.c	1019	39	Declare function parameters that are pointers to values not changed by the function as const: unused_opts
EXP12-C	add-interactive.c	1021	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1023	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1025	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1027	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1029	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1031	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1039	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1041	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1043	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1045	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1047	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1049	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1051	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1053	2	Do not ignore values returned by functions: color_fprintf_ln
DCL01-C	add-interactive.c	1072	17	Do not reuse variable names in subscopes: print_command_item_data
EXP36-C	add-interactive.c	1074	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	add-interactive.c	1075	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	add-interactive.c	1089	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1090	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1092	2	Do not ignore values returned by functions: color_fprintf_ln
EXP12-C	add-interactive.c	1094	2	Do not ignore values returned by functions: color_fprintf_ln
DCL01-C	add-interactive.c	1121	2	Do not reuse variable names in subscopes: print_file_item_data
INT01-C	add-interactive.c	1134	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-interactive.c	1135	38	Do not convert pointers into more strictly aligned pointer types
INT01-C	add-interactive.c	1171	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-interactive.c	1174	34	Do not convert pointers into more strictly aligned pointer types
DCL01-C	add-patch.c	24	2	Do not reuse variable names in subscopes: apply_for_checkout
DCL01-C	add-patch.c	259	3	Do not reuse variable names in subscopes: hunk
DCL01-C	add-patch.c	257	2	Do not reuse variable names in subscopes: file_diff
DCL00-C	add-patch.c	287	2	Const-qualify immutable objects: args
EXP12-C	add-patch.c	289	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	add-patch.c	293	2	Do not ignore values returned by functions: fputc
EXP12-C	add-patch.c	294	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	add-patch.c	300	2	Const-qualify immutable objects: ap
EXP12-C	add-patch.c	303	2	Do not ignore values returned by functions: __builtin_va_start
EXP11-C	add-patch.c	304	16	Do not apply operators expecting one type to data of an incompatible type
INT36-C	add-patch.c	304	16	Take care when converting from pointer to integer or integer to pointer
EXP12-C	add-patch.c	306	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	add-patch.c	309	2	Do not ignore values returned by functions: strvec_pushf
DCL01-C	add-patch.c	330	66	Do not reuse variable names in subscopes: hunk
DCL01-C	add-patch.c	334	2	Do not reuse variable names in subscopes: eol
EXP30-C	add-patch.c	362	6	Do not depend on order of evaluation for side effects
DCL01-C	add-patch.c	386	53	Do not reuse variable names in subscopes: hunk
INT07-C	add-patch.c	403	2	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	add-patch.c	405	2	Do not reuse variable names in subscopes: file_diff
DCL01-C	add-patch.c	406	2	Do not reuse variable names in subscopes: hunk
EXP12-C	add-patch.c	414	3	Do not ignore values returned by functions: strvec_push
INT01-C	add-patch.c	424	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	add-patch.c	425	3	Do not ignore values returned by functions: strvec_push
EXP12-C	add-patch.c	445	3	Do not ignore values returned by functions: xsnprintf
EXP05-C	add-patch.c	445	13	Do not cast away a const qualification
DCL01-C	add-patch.c	480	3	Do not reuse variable names in subscopes: eol
DCL00-C	add-patch.c	488	4	Const-qualify immutable objects: new_nr
INT01-C	add-patch.c	488	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	488	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	488	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	488	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	488	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	488	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	488	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-patch.c	488	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	add-patch.c	488	4	Do not ignore values returned by functions: memset
INT01-C	add-patch.c	488	4	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	add-patch.c	495	11	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	add-patch.c	511	4	Const-qualify immutable objects: new_nr
INT01-C	add-patch.c	511	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	511	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	511	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	511	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	511	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	511	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	511	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-patch.c	511	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	add-patch.c	511	4	Do not ignore values returned by functions: memset
INT01-C	add-patch.c	511	4	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	add-patch.c	547	4	Const-qualify immutable objects: new_nr
INT01-C	add-patch.c	547	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	547	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	547	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	547	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	547	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	547	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	547	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-patch.c	547	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	add-patch.c	547	4	Do not ignore values returned by functions: memset
INT01-C	add-patch.c	547	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	564	27	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	add-patch.c	564	27	Ensure that return values are compared against the proper type
INT01-C	add-patch.c	567	23	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	add-patch.c	584	14	Use only explicitly signed or unsigned char type for numeric values
INT01-C	add-patch.c	608	27	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	add-patch.c	608	27	Ensure that return values are compared against the proper type
DCL01-C	add-patch.c	633	2	Do not reuse variable names in subscopes: eol
DCL01-C	add-patch.c	645	61	Do not reuse variable names in subscopes: hunk
DCL01-C	add-patch.c	709	29	Do not reuse variable names in subscopes: file_diff
DCL00-C	add-patch.c	717	2	Const-qualify immutable objects: skip_mode_change
DCL01-C	add-patch.c	742	65	Do not reuse variable names in subscopes: file_diff
DCL01-C	add-patch.c	746	2	Do not reuse variable names in subscopes: hunk
INT01-C	add-patch.c	757	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	add-patch.c	783	4	Const-qualify immutable objects: overlapping_line_count
INT01-C	add-patch.c	810	13	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	add-patch.c	838	5	Const-qualify immutable objects: start
INT01-C	add-patch.c	858	40	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	add-patch.c	870	27	Do not reuse variable names in subscopes: file_diff
DCL01-C	add-patch.c	873	2	Do not reuse variable names in subscopes: hunk
DCL00-C	add-patch.c	874	2	Const-qualify immutable objects: save_len
DCL01-C	add-patch.c	905	64	Do not reuse variable names in subscopes: file_diff
DCL00-C	add-patch.c	908	2	Const-qualify immutable objects: colored
DCL01-C	add-patch.c	909	2	Do not reuse variable names in subscopes: hunk
INT01-C	add-patch.c	919	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	928	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	929	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	929	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	929	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	929	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	929	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	929	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	add-patch.c	929	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	add-patch.c	937	2	Do not ignore values returned by functions: memset
INT01-C	add-patch.c	937	39	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	add-patch.c	945	9	Use only explicitly signed or unsigned char type for numeric values
INT01-C	add-patch.c	948	25	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	add-patch.c	977	8	Use only explicitly signed or unsigned char type for numeric values
INT01-C	add-patch.c	1010	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1011	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1029	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1030	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1041	41	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	add-patch.c	1064	62	Do not reuse variable names in subscopes: hunk
DCL01-C	add-patch.c	1067	2	Do not reuse variable names in subscopes: eol
INT01-C	add-patch.c	1077	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1078	34	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	add-patch.c	1096	67	Do not reuse variable names in subscopes: hunk
DCL00-C	add-patch.c	1131	3	Const-qualify immutable objects: next
DCL01-C	add-patch.c	1157	72	Do not reuse variable names in subscopes: hunk
MSC01-C	add-patch.c	1165	3	Strive for logical completeness
INT01-C	add-patch.c	1182	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1182	3	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	add-patch.c	1186	25	Do not reuse variable names in subscopes: file_diff
DCL00-C	add-patch.c	1205	3	Const-qualify immutable objects: res
EXP12-C	add-patch.c	1218	3	Do not ignore values returned by functions: color_fprintf
MSC01-C	add-patch.c	1222	3	Strive for logical completeness
DCL01-C	add-patch.c	1230	24	Do not reuse variable names in subscopes: file_diff
DCL01-C	add-patch.c	1230	48	Do not reuse variable names in subscopes: hunk
DCL00-C	add-patch.c	1232	2	Const-qualify immutable objects: plain_len
DCL00-C	add-patch.c	1232	2	Const-qualify immutable objects: colored_len
EXP12-C	add-patch.c	1297	3	Do not ignore values returned by functions: pipe_command
EXP12-C	add-patch.c	1302	3	Do not ignore values returned by functions: pipe_command
DCL01-C	add-patch.c	1327	64	Do not reuse variable names in subscopes: hunk
DCL00-C	add-patch.c	1332	2	Const-qualify immutable objects: len
INT01-C	add-patch.c	1337	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1339	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1339	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1345	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1346	26	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	add-patch.c	1352	26	Do not reuse variable names in subscopes: file_diff
INT01-C	add-patch.c	1354	33	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	add-patch.c	1360	3	Do not reuse variable names in subscopes: hunk
STR11-C	add-patch.c	1373	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	add-patch.c	1385	27	Do not reuse variable names in subscopes: file_diff
DCL01-C	add-patch.c	1389	2	Do not reuse variable names in subscopes: hunk
DCL00-C	add-patch.c	1392	2	Const-qualify immutable objects: colored
DCL01-C	add-patch.c	1393	2	Do not reuse variable names in subscopes: prompt_mode_type
INT01-C	add-patch.c	1421	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1427	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1427	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1457	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1461	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1465	30	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1469	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1469	19	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	add-patch.c	1499	6	Use only explicitly signed or unsigned char type for numeric values
INT01-C	add-patch.c	1562	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1565	25	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	add-patch.c	1565	25	Ensure that return values are compared against the proper type
INT01-C	add-patch.c	1567	20	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	add-patch.c	1579	14	Use only explicitly signed or unsigned char type for numeric values
INT01-C	add-patch.c	1582	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1583	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1599	22	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	add-patch.c	1599	22	Ensure that return values are compared against the proper type
INT01-C	add-patch.c	1606	23	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	add-patch.c	1606	23	Ensure that return values are compared against the proper type
INT13-C	add-patch.c	1610	36	Use bitwise operators only on unsigned operands
EXP12-C	add-patch.c	1614	5	Do not ignore values returned by functions: regerror
INT01-C	add-patch.c	1628	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1630	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	add-patch.c	1637	4	Const-qualify immutable objects: splittable_into
DCL01-C	add-patch.c	1653	4	Do not reuse variable names in subscopes: eol
EXP12-C	add-patch.c	1655	4	Do not ignore values returned by functions: color_fprintf
EXP12-C	add-patch.c	1673	5	Do not ignore values returned by functions: color_fprintf_ln
EXP05-C	add-patch.c	1674	16	Do not cast away a const qualification
INT01-C	add-patch.c	1680	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	add-patch.c	1684	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	add-patch.c	1706	2	Do not ignore values returned by functions: putchar
INT01-C	add-patch.c	1769	21	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	add-patch.c	1769	21	Ensure that return values are compared against the proper type
STR11-C	advice.c	80	1	Do not specify the dimension of a character array initialized with a string literal
EXP05-C	advice.c	99	4	Do not cast away a const qualification
DCL00-C	advice.c	109	2	Const-qualify immutable objects: params
EXP12-C	advice.c	110	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	advice.c	112	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	advice.c	128	2	Const-qualify immutable objects: params
EXP12-C	advice.c	133	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	advice.c	135	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	advice.c	149	3	Const-qualify immutable objects: slot
INT01-C	advice.c	160	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	advice.c	174	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	advice.c	206	2	Do not ignore values returned by functions: error_resolve_conflict
MSC12-C	advice.c	212	2	Detect and remove code that has no effect
EXP36-C	alias.c	14	35	Do not convert pointers into more strictly aligned pointer types
EXP12-C	alias.c	25	3	Do not ignore values returned by functions: string_list_append
DCL13-C	alias.c	40	39	Declare function parameters that are pointers to values not changed by the function as const: list
DCL05-C	alias.c	56	1	Use typedefs to improve code readability
INT07-C	alias.c	59	2	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	alias.c	61	2	Do not convert pointers into more strictly aligned pointer types
INT07-C	alias.c	68	19	Use only explicitly signed or unsigned char type for numeric values
INT07-C	alias.c	70	6	Use only explicitly signed or unsigned char type for numeric values
INT01-C	alias.c	72	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	72	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	72	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	72	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	72	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	72	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	72	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	72	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	72	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	alias.c	72	4	Do not convert pointers into more strictly aligned pointer types
INT07-C	alias.c	78	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	alias.c	94	15	Use only explicitly signed or unsigned char type for numeric values
INT01-C	alias.c	101	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	alias.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	alias.c	106	2	Do not convert pointers into more strictly aligned pointer types
INT32-C	alias.c	114	30	Ensure that operations on signed integers do not result in overflow
DCL01-C	alloc.c	22	2	Do not reuse variable names in subscopes: object
DCL01-C	alloc.c	23	2	Do not reuse variable names in subscopes: blob
DCL01-C	alloc.c	24	2	Do not reuse variable names in subscopes: tree
DCL01-C	alloc.c	25	2	Do not reuse variable names in subscopes: commit
DCL01-C	alloc.c	26	2	Do not reuse variable names in subscopes: tag
EXP36-C	alloc.c	40	16	Do not convert pointers into more strictly aligned pointer types
INT01-C	alloc.c	59	27	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	alloc.c	61	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	alloc.c	67	2	Do not ignore values returned by functions: memset
EXP36-C	alloc.c	74	29	Do not convert pointers into more strictly aligned pointer types
EXP36-C	alloc.c	81	29	Do not convert pointers into more strictly aligned pointer types
EXP36-C	alloc.c	88	28	Do not convert pointers into more strictly aligned pointer types
EXP36-C	alloc.c	95	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	alloc.c	119	31	Do not convert pointers into more strictly aligned pointer types
EXP12-C	apply.c	34	2	Do not ignore values returned by functions: git_config_get_string
EXP12-C	apply.c	35	2	Do not ignore values returned by functions: git_config_get_string
DCL01-C	apply.c	39	75	Do not reuse variable names in subscopes: option
DCL01-C	apply.c	74	20	Do not reuse variable names in subscopes: option
EXP12-C	apply.c	93	2	Do not ignore values returned by functions: memset
DCL00-C	apply.c	135	2	Const-qualify immutable objects: is_not_gitdir
DCL01-C	apply.c	194	2	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	195	2	Do not reuse variable names in subscopes: free_patch
EXP05-C	apply.c	216	9	Do not cast away a const qualification
DCL01-C	apply.c	222	34	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	231	38	Do not reuse variable names in subscopes: patch
MEM01-C	apply.c	234	2	Store a new value in pointers immediately after free()
DCL01-C	apply.c	268	2	Do not reuse variable names in subscopes: line
INT14-C	apply.c	277	6	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	apply.c	321	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	321	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	321	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	321	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	321	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	321	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	321	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	321	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	321	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	apply.c	321	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	apply.c	333	41	Do not reuse variable names in subscopes: image
EXP12-C	apply.c	338	2	Do not ignore values returned by functions: memset
DCL01-C	apply.c	359	39	Do not reuse variable names in subscopes: image
EXP12-C	apply.c	363	2	Do not ignore values returned by functions: memset
DCL01-C	apply.c	367	73	Do not reuse variable names in subscopes: patch
EXP12-C	apply.c	373	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	apply.c	375	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	apply.c	380	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	apply.c	383	2	Do not ignore values returned by functions: fputc
INT01-C	apply.c	401	44	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	apply.c	410	2	Do not ignore values returned by functions: memset
INT07-C	apply.c	456	10	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	apply.c	461	19	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	491	39	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	509	45	Do not reuse variable names in subscopes: line
EXP30-C	apply.c	520	6	Do not depend on order of evaluation for side effects
DCL01-C	apply.c	527	36	Do not reuse variable names in subscopes: line
EXP30-C	apply.c	535	6	Do not depend on order of evaluation for side effects
INT01-C	apply.c	540	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	547	42	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	549	2	Do not reuse variable names in subscopes: time
EXP30-C	apply.c	556	6	Do not depend on order of evaluation for side effects
DCL01-C	apply.c	565	47	Do not reuse variable names in subscopes: line
INT01-C	apply.c	571	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	586	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	589	47	Do not reuse variable names in subscopes: line
INT01-C	apply.c	594	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	608	46	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	651	22	Do not reuse variable names in subscopes: line
DCL00-C	apply.c	663	3	Const-qualify immutable objects: c
DCL00-C	apply.c	688	3	Const-qualify immutable objects: deflen
DCL01-C	apply.c	702	22	Do not reuse variable names in subscopes: line
DCL00-C	apply.c	708	3	Const-qualify immutable objects: name
DCL01-C	apply.c	717	20	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	722	2	Do not reuse variable names in subscopes: date_len
DCL00-C	apply.c	725	3	Const-qualify immutable objects: name
MEM34-C	apply.c	769	2	Only free memory allocated dynamically
STR11-C	apply.c	786	2	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	apply.c	815	18	Do not convert pointers into more strictly aligned pointer types
INT01-C	apply.c	823	37	Use rsize_t or size_t for all integer values representing the size of an object
INT32-C	apply.c	840	16	Ensure that operations on signed integers do not result in overflow
DCL01-C	apply.c	855	22	Do not reuse variable names in subscopes: patch
MEM01-C	apply.c	885	3	Store a new value in pointers immediately after free()
MEM34-C	apply.c	885	3	Only free memory allocated dynamically
DCL13-C	apply.c	905	48	Declare function parameters that are pointers to values not changed by the function as const: state
DCL01-C	apply.c	906	18	Do not reuse variable names in subscopes: line
DCL13-C	apply.c	907	20	Declare function parameters that are pointers to values not changed by the function as const: patch
DCL01-C	apply.c	907	20	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	925	23	Do not reuse variable names in subscopes: line
MEM34-C	apply.c	942	4	Only free memory allocated dynamically
MEM34-C	apply.c	947	3	Only free memory allocated dynamically
DCL01-C	apply.c	957	19	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	958	21	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	966	19	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	967	21	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	974	40	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	984	19	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	985	21	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	991	19	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	992	21	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	998	18	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	999	20	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1008	19	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1009	21	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1018	19	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1019	21	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1028	19	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1029	21	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1038	21	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1039	23	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1048	21	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1049	23	Do not reuse variable names in subscopes: patch
DCL13-C	apply.c	1057	52	Declare function parameters that are pointers to values not changed by the function as const: state
DCL01-C	apply.c	1058	22	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1059	24	Do not reuse variable names in subscopes: patch
DCL00-C	apply.c	1061	2	Const-qualify immutable objects: val
DCL13-C	apply.c	1067	55	Declare function parameters that are pointers to values not changed by the function as const: state
DCL01-C	apply.c	1068	18	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1069	20	Do not reuse variable names in subscopes: patch
DCL00-C	apply.c	1071	2	Const-qualify immutable objects: val
DCL01-C	apply.c	1078	17	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1079	19	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1085	2	Do not reuse variable names in subscopes: eol
INT07-C	apply.c	1094	29	Use only explicitly signed or unsigned char type for numeric values
INT07-C	apply.c	1107	29	Use only explicitly signed or unsigned char type for numeric values
DCL13-C	apply.c	1117	54	Declare function parameters that are pointers to values not changed by the function as const: state
DCL01-C	apply.c	1118	17	Do not reuse variable names in subscopes: line
DCL13-C	apply.c	1119	19	Declare function parameters that are pointers to values not changed by the function as const: patch
DCL01-C	apply.c	1119	19	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1129	21	Do not reuse variable names in subscopes: line
DCL00-C	apply.c	1140	3	Const-qualify immutable objects: ch
DCL01-C	apply.c	1156	21	Do not reuse variable names in subscopes: line
INT01-C	apply.c	1164	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	1206	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	1239	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	1276	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	1279	25	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	1293	56	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1308	18	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1311	20	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1341	3	Do not reuse variable names in subscopes: optable
INT01-C	apply.c	1368	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	apply.c	1370	4	Const-qualify immutable objects: oplen
MSC12-C	apply.c	1388	4	Detect and remove code that has no effect
MSC12-C	apply.c	1401	3	Detect and remove code that has no effect
DCL01-C	apply.c	1409	34	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1419	36	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1457	38	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1457	71	Do not reuse variable names in subscopes: fragment
DCL00-C	apply.c	1467	3	Const-qualify immutable objects: len
DCL01-C	apply.c	1511	46	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1511	78	Do not reuse variable names in subscopes: fragment
DCL01-C	apply.c	1534	22	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1537	24	Do not reuse variable names in subscopes: patch
MSC12-C	apply.c	1566	4	Detect and remove code that has no effect
DCL00-C	apply.c	1579	4	Const-qualify immutable objects: git_hdr_len
DCL01-C	apply.c	1615	20	Do not reuse variable names in subscopes: line
MEM34-C	apply.c	1633	2	Only free memory allocated dynamically
DCL01-C	apply.c	1637	21	Do not reuse variable names in subscopes: line
DCL00-C	apply.c	1641	2	Const-qualify immutable objects: result
DCL01-C	apply.c	1650	46	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1650	65	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1666	18	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1668	20	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1669	23	Do not reuse variable names in subscopes: fragment
DCL01-C	apply.c	1788	22	Do not reuse variable names in subscopes: line
DCL01-C	apply.c	1790	24	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	1797	3	Do not reuse variable names in subscopes: fragment
EXP36-C	apply.c	1800	3	Do not convert pointers into more strictly aligned pointer types
MEM34-C	apply.c	1804	4	Only free memory allocated dynamically
DCL01-C	apply.c	1854	50	Do not reuse variable names in subscopes: patch
EXP12-C	apply.c	1871	2	Do not ignore values returned by functions: memset
EXP05-C	apply.c	1873	19	Do not cast away a const qualification
MEM34-C	apply.c	1881	3	Only free memory allocated dynamically
EXP36-C	apply.c	1979	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	apply.c	1984	2	Store a new value in pointers immediately after free()
MEM34-C	apply.c	1984	2	Only free memory allocated dynamically
MEM01-C	apply.c	1993	2	Store a new value in pointers immediately after free()
MEM34-C	apply.c	1993	2	Only free memory allocated dynamically
MSC12-C	apply.c	1995	2	Detect and remove code that has no effect
DCL01-C	apply.c	2008	18	Do not reuse variable names in subscopes: patch
EXP05-C	apply.c	2045	8	Do not cast away a const qualification
MEM34-C	apply.c	2046	3	Only free memory allocated dynamically
MEM34-C	apply.c	2061	2	Only free memory allocated dynamically
INT01-C	apply.c	2099	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	2124	99	Do not reuse variable names in subscopes: patch
DCL00-C	apply.c	2127	2	Const-qualify immutable objects: offset
STR11-C	apply.c	2152	3	Do not specify the dimension of a character array initialized with a string literal
DCL00-C	apply.c	2153	3	Const-qualify immutable objects: hd
DCL00-C	apply.c	2154	3	Const-qualify immutable objects: llen
INT01-C	apply.c	2156	34	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	apply.c	2177	5	Const-qualify immutable objects: len
MSC12-C	apply.c	2194	4	Detect and remove code that has no effect
INT01-C	apply.c	2207	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2207	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2208	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2208	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2209	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2209	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2210	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2210	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2211	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2211	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2214	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2214	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2215	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2215	4	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	apply.c	2220	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	apply.c	2222	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	apply.c	2225	65	Do not reuse variable names in subscopes: patch
EXP12-C	apply.c	2231	2	Do not ignore values returned by functions: quote_c_style
INT01-C	apply.c	2240	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	apply.c	2264	3	Const-qualify immutable objects: total
DCL01-C	apply.c	2272	57	Do not reuse variable names in subscopes: patch
DCL00-C	apply.c	2275	2	Const-qualify immutable objects: conv_flags
EXP12-C	apply.c	2293	3	Do not ignore values returned by functions: convert_to_git
MSC12-C	apply.c	2322	2	Detect and remove code that has no effect
INT01-C	apply.c	2325	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2346	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2360	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2370	20	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	apply.c	2376	25	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	apply.c	2385	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2386	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2392	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	apply.c	2415	3	Const-qualify immutable objects: prelen
DCL00-C	apply.c	2416	3	Const-qualify immutable objects: imglen
INT01-C	apply.c	2439	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2478	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2483	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2494	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2513	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2522	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2522	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2523	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2523	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2577	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2587	36	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	apply.c	2591	3	Const-qualify immutable objects: oldlen
DCL00-C	apply.c	2592	3	Const-qualify immutable objects: tgtlen
DCL00-C	apply.c	2593	3	Const-qualify immutable objects: fixstart
INT01-C	apply.c	2637	12	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	apply.c	2638	3	Const-qualify immutable objects: fixstart
DCL00-C	apply.c	2639	3	Const-qualify immutable objects: oldlen
INT01-C	apply.c	2645	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	2673	11	Do not reuse variable names in subscopes: line
INT01-C	apply.c	2688	29	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	apply.c	2688	29	Ensure that return values are compared against the proper type
INT01-C	apply.c	2711	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2730	42	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2739	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2743	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2747	13	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	apply.c	2747	25	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	apply.c	2800	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2800	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2801	28	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	apply.c	2821	19	Use only explicitly signed or unsigned char type for numeric values
INT01-C	apply.c	2824	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2825	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	apply.c	2830	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	apply.c	2833	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2834	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2834	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2834	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2837	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2837	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2839	17	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	apply.c	2840	36	Avoid performing bitwise and arithmetic operations on the same data
DCL01-C	apply.c	2855	2	Do not reuse variable names in subscopes: patch
EXP12-C	apply.c	2867	2	Do not ignore values returned by functions: memset
EXP12-C	apply.c	2868	2	Do not ignore values returned by functions: memset
DCL00-C	apply.c	2875	3	Const-qualify immutable objects: len
INT07-C	apply.c	2897	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	apply.c	2899	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	apply.c	2908	11	Use only explicitly signed or unsigned char type for numeric values
INT01-C	apply.c	2972	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2972	52	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2974	41	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2975	39	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	2976	41	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	3049	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	apply.c	3073	4	Do not ignore values returned by functions: fprintf_ln
MEM01-C	apply.c	3097	2	Store a new value in pointers immediately after free()
MEM34-C	apply.c	3097	2	Only free memory allocated dynamically
DCL01-C	apply.c	3107	20	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	3109	2	Do not reuse variable names in subscopes: fragment
MSC01-C	apply.c	3128	2	Strive for logical completeness
INT01-C	apply.c	3136	12	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	3155	18	Do not reuse variable names in subscopes: patch
INT01-C	apply.c	3165	36	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	apply.c	3165	36	Ensure that return values are compared against the proper type
INT01-C	apply.c	3166	36	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	apply.c	3166	36	Ensure that return values are compared against the proper type
EXP12-C	apply.c	3192	2	Do not ignore values returned by functions: get_oid_hex
INT01-C	apply.c	3211	12	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	3233	88	Do not reuse variable names in subscopes: patch
DCL00-C	apply.c	3237	2	Const-qualify immutable objects: ws_rule
DCL00-C	apply.c	3238	2	Const-qualify immutable objects: inaccurate_eof
MSC12-C	apply.c	3247	4	Detect and remove code that has no effect
DCL13-C	apply.c	3312	40	Declare function parameters that are pointers to values not changed by the function as const: patch
DCL01-C	apply.c	3312	40	Do not reuse variable names in subscopes: patch
DCL13-C	apply.c	3317	38	Declare function parameters that are pointers to values not changed by the function as const: patch
DCL01-C	apply.c	3317	38	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	3322	70	Do not reuse variable names in subscopes: patch
EXP11-C	apply.c	3342	16	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	apply.c	3346	71	Do not reuse variable names in subscopes: patch
EXP11-C	apply.c	3355	17	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	apply.c	3375	23	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	3416	23	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	3447	19	Do not reuse variable names in subscopes: image
DCL01-C	apply.c	3448	19	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	3488	37	Do not reuse variable names in subscopes: image
INT01-C	apply.c	3498	13	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	3504	21	Do not reuse variable names in subscopes: image
DCL01-C	apply.c	3552	18	Do not reuse variable names in subscopes: image
DCL01-C	apply.c	3553	18	Do not reuse variable names in subscopes: patch
DCL00-C	apply.c	3562	2	Const-qualify immutable objects: mode
DCL01-C	apply.c	3591	18	Do not reuse variable names in subscopes: image
DCL01-C	apply.c	3592	18	Do not reuse variable names in subscopes: patch
EXP12-C	apply.c	3628	2	Do not ignore values returned by functions: write_object_file
EXP12-C	apply.c	3641	2	Do not ignore values returned by functions: write_object_file
DCL01-C	apply.c	3675	64	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	3678	2	Do not reuse variable names in subscopes: image
INT01-C	apply.c	3697	27	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	apply.c	3715	20	Do not reuse variable names in subscopes: patch
MSC12-C	apply.c	3727	2	Detect and remove code that has no effect
DCL00-C	apply.c	3741	3	Const-qualify immutable objects: pos
DCL01-C	apply.c	3837	78	Do not reuse variable names in subscopes: patch
INT01-C	apply.c	3854	22	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	apply.c	3858	24	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	apply.c	3890	2	Detect and remove code that has no effect
DCL01-C	apply.c	3898	44	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	3920	65	Do not reuse variable names in subscopes: patch
DCL00-C	apply.c	3987	3	Const-qualify immutable objects: same
DCL01-C	apply.c	4026	70	Do not reuse variable names in subscopes: patch
INT13-C	apply.c	4040	7	Use bitwise operators only on unsigned operands
STR11-C	apply.c	4083	2	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	apply.c	4107	2	Do not reuse variable names in subscopes: patch
EXP12-C	apply.c	4152	2	Do not ignore values returned by functions: hold_lock_file_for_update
DCL01-C	apply.c	4163	70	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	4178	25	Do not reuse variable names in subscopes: patch
EXP05-C	apply.c	4236	10	Do not cast away a const qualification
DCL01-C	apply.c	4244	46	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	4269	66	Do not reuse variable names in subscopes: patch
DCL00-C	apply.c	4271	2	Const-qualify immutable objects: lines
DCL01-C	apply.c	4291	65	Do not reuse variable names in subscopes: patch
EXP12-C	apply.c	4299	4	Do not ignore values returned by functions: remove_path
DCL00-C	apply.c	4313	2	Const-qualify immutable objects: namelen
POS35-C	apply.c	4381	7	Avoid race conditions while checking for the existence of a symbolic link
INT01-C	apply.c	4386	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	apply.c	4451	4	Do not ignore values returned by functions: mksnpath
EXP12-C	apply.c	4458	5	Do not ignore values returned by functions: unlink_or_warn
DCL01-C	apply.c	4471	26	Do not reuse variable names in subscopes: patch
EXP12-C	apply.c	4482	2	Do not ignore values returned by functions: remove_file_from_index
DCL01-C	apply.c	4502	65	Do not reuse variable names in subscopes: patch
DCL00-C	apply.c	4506	2	Const-qualify immutable objects: size
DCL01-C	apply.c	4523	19	Do not reuse variable names in subscopes: patch
DCL01-C	apply.c	4547	74	Do not reuse variable names in subscopes: patch
INT01-C	apply.c	4584	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	apply.c	4585	9	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	apply.c	4648	7	Do not ignore values returned by functions: string_list_append
DCL01-C	apply.c	4704	3	Do not reuse variable names in subscopes: patch
EXP36-C	apply.c	4707	3	Do not convert pointers into more strictly aligned pointer types
INT13-C	apply.c	4708	38	Use bitwise operators only on unsigned operands
INT13-C	apply.c	4709	32	Use bitwise operators only on unsigned operands
INT01-C	apply.c	4745	10	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	apply.c	4750	4	Detect and remove code that has no effect
MSC12-C	apply.c	4771	3	Detect and remove code that has no effect
DCL00-C	apply.c	4777	3	Const-qualify immutable objects: r
DCL00-C	apply.c	4789	3	Const-qualify immutable objects: write_res
EXP36-C	apply.c	4828	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	apply.c	4839	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	apply.c	4852	33	Do not convert pointers into more strictly aligned pointer types
INT05-C	apply.c	4856	19	Use strtol() or a related function to convert a string token to an integer
EXP36-C	apply.c	4864	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	apply.c	4878	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	apply.c	4891	33	Do not convert pointers into more strictly aligned pointer types
INT13-C	apply.c	4920	9	Use bitwise operators only on unsigned operands
MSC12-C	apply.c	4928	4	Detect and remove code that has no effect
MEM01-C	apply.c	4930	4	Store a new value in pointers immediately after free()
MEM31-C	apply.c	4930	4	Free dynamically allocated memory when no longer needed
MEM34-C	apply.c	4930	4	Only free memory allocated dynamically
MEM01-C	apply.c	4937	3	Store a new value in pointers immediately after free()
MEM34-C	apply.c	4937	3	Only free memory allocated dynamically
INT13-C	apply.c	4940	8	Use bitwise operators only on unsigned operands
INT13-C	apply.c	4947	8	Use bitwise operators only on unsigned operands
DCL00-C	apply.c	4953	4	Const-qualify immutable objects: squelched
MSC12-C	apply.c	4961	4	Detect and remove code that has no effect
MSC12-C	apply.c	4985	4	Detect and remove code that has no effect
DCL05-C	apply.c	5006	1	Use typedefs to improve code readability
DCL13-C	apply.c	5008	9	Declare function parameters that are pointers to values not changed by the function as const: force_apply
DCL13-C	apply.c	5008	27	Declare function parameters that are pointers to values not changed by the function as const: options
EXP12-C	archive-tar.c	91	3	Do not ignore values returned by functions: memset
DCL00-C	archive-tar.c	109	2	Const-qualify immutable objects: tail
EXP12-C	archive-tar.c	110	2	Do not ignore values returned by functions: memset
EXP12-C	archive-tar.c	113	3	Do not ignore values returned by functions: memset
EXP12-C	archive-tar.c	139	2	Do not ignore values returned by functions: close_istream
DCL00-C	archive-tar.c	154	2	Const-qualify immutable objects: orig_len
INT01-C	archive-tar.c	158	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-tar.c	158	36	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-tar.c	158	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-tar.c	159	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-tar.c	159	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	archive-tar.c	189	27	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	archive-tar.c	189	27	Do not cast away a const qualification
INT01-C	archive-tar.c	193	35	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	archive-tar.c	195	13	Do not cast away a const qualification
INT01-C	archive-tar.c	203	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-tar.c	203	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-tar.c	209	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	archive-tar.c	217	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	archive-tar.c	218	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	archive-tar.c	219	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	archive-tar.c	221	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	archive-tar.c	222	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	archive-tar.c	223	2	Do not ignore values returned by functions: gitstrlcpy
EXP12-C	archive-tar.c	224	2	Do not ignore values returned by functions: gitstrlcpy
EXP12-C	archive-tar.c	225	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	archive-tar.c	226	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	archive-tar.c	231	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	archive-tar.c	240	2	Do not ignore values returned by functions: memset
INT07-C	archive-tar.c	241	19	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	archive-tar.c	243	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	archive-tar.c	260	2	Do not ignore values returned by functions: memset
INT07-C	archive-tar.c	263	20	Use only explicitly signed or unsigned char type for numeric values
INT13-C	archive-tar.c	264	26	Use bitwise operators only on unsigned operands
INT07-C	archive-tar.c	266	20	Use only explicitly signed or unsigned char type for numeric values
INT07-C	archive-tar.c	269	20	Use only explicitly signed or unsigned char type for numeric values
INT13-C	archive-tar.c	270	51	Use bitwise operators only on unsigned operands
DCL00-C	archive-tar.c	276	3	Const-qualify immutable objects: plen
DCL00-C	archive-tar.c	278	3	Const-qualify immutable objects: rest
INT01-C	archive-tar.c	278	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-tar.c	279	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	archive-tar.c	283	4	Do not ignore values returned by functions: xsnprintf
INT01-C	archive-tar.c	292	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	archive-tar.c	293	4	Do not ignore values returned by functions: xsnprintf
INT01-C	archive-tar.c	309	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	archive-tar.c	344	2	Do not ignore values returned by functions: memset
INT07-C	archive-tar.c	345	19	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	archive-tar.c	347	2	Do not ignore values returned by functions: xsnprintf
DCL13-C	archive-tar.c	370	15	Declare function parameters that are pointers to values not changed by the function as const: data
EXP36-C	archive-tar.c	382	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	archive-tar.c	387	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	archive-tar.c	414	4	Do not ignore values returned by functions: umask
DCL00-C	archive-tar.c	442	3	Const-qualify immutable objects: status
INT01-C	archive-tar.c	446	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	archive-tar.c	457	21	Do not cast away a const qualification
STR11-C	archive-tar.c	462	1	Do not specify the dimension of a character array initialized with a string literal
INT01-C	archive-tar.c	485	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	archive-tar.c	498	2	Do not ignore values returned by functions: strvec_push
EXP12-C	archive-tar.c	531	2	Do not ignore values returned by functions: tar_filter_config
EXP12-C	archive-tar.c	532	2	Do not ignore values returned by functions: tar_filter_config
EXP12-C	archive-tar.c	533	2	Do not ignore values returned by functions: tar_filter_config
EXP12-C	archive-tar.c	534	2	Do not ignore values returned by functions: tar_filter_config
DCL38-C	archive-zip.c	45	2	Use the correct syntax when declaring flexible array members
DCL01-C	archive-zip.c	40	2	Do not reuse variable names in subscopes: crc32
DCL38-C	archive-zip.c	53	2	Use the correct syntax when declaring flexible array members
DCL01-C	archive-zip.c	50	2	Do not reuse variable names in subscopes: crc32
DCL38-C	archive-zip.c	61	2	Use the correct syntax when declaring flexible array members
DCL01-C	archive-zip.c	58	2	Do not reuse variable names in subscopes: crc32
DCL38-C	archive-zip.c	73	2	Use the correct syntax when declaring flexible array members
DCL38-C	archive-zip.c	81	2	Use the correct syntax when declaring flexible array members
DCL38-C	archive-zip.c	89	2	Use the correct syntax when declaring flexible array members
DCL38-C	archive-zip.c	103	2	Use the correct syntax when declaring flexible array members
DCL38-C	archive-zip.c	111	2	Use the correct syntax when declaring flexible array members
INT01-C	archive-zip.c	183	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	archive-zip.c	219	3	Only free memory allocated dynamically
DCL00-C	archive-zip.c	265	3	Const-qualify immutable objects: c
INT13-C	archive-zip.c	268	8	Use bitwise operators only on unsigned operands
DCL00-C	archive-zip.c	293	2	Const-qualify immutable objects: offset
INT01-C	archive-zip.c	322	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-zip.c	398	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-zip.c	407	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	archive-zip.c	434	3	Do not ignore values returned by functions: close_istream
INT01-C	archive-zip.c	454	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-zip.c	473	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-zip.c	475	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-zip.c	477	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	archive-zip.c	481	3	Do not ignore values returned by functions: close_istream
INT01-C	archive-zip.c	494	19	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	archive-zip.c	503	2	Store a new value in pointers immediately after free()
MEM34-C	archive-zip.c	503	2	Only free memory allocated dynamically
INT01-C	archive-zip.c	508	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-zip.c	510	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-zip.c	512	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-zip.c	513	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive-zip.c	513	31	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	archive-zip.c	516	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	517	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	518	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	519	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	520	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	521	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	522	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	523	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	524	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	525	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	526	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	527	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	528	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	529	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	530	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	531	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	532	2	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	536	3	Do not ignore values returned by functions: strbuf_add_le
EXP12-C	archive-zip.c	537	3	Do not ignore values returned by functions: strbuf_add_le
INT01-C	archive-zip.c	568	41	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	archive-zip.c	598	66	Do not reuse variable names in subscopes: dos_time
DCL01-C	archive-zip.c	600	2	Do not reuse variable names in subscopes: time
DCL01-C	archive-zip.c	601	2	Do not reuse variable names in subscopes: tm
EXP12-C	archive-zip.c	607	2	Do not ignore values returned by functions: localtime_r
DCL13-C	archive-zip.c	616	16	Declare function parameters that are pointers to values not changed by the function as const: data
EXP36-C	archive.c	29	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	archive.c	39	47	Do not reuse variable names in subscopes: commit
INT01-C	archive.c	63	7	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	archive.c	68	2	Only free memory allocated dynamically
DCL01-C	archive.c	79	2	Do not reuse variable names in subscopes: commit
EXP12-C	archive.c	93	3	Do not ignore values returned by functions: convert_to_working_tree
INT01-C	archive.c	97	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	archive.c	142	31	Do not convert pointers into more strictly aligned pointer types
DCL00-C	archive.c	144	2	Const-qualify immutable objects: write_entry
MEM34-C	archive.c	189	2	Only free memory allocated dynamically
DCL00-C	archive.c	198	2	Const-qualify immutable objects: len
EXP36-C	archive.c	199	13	Do not convert pointers into more strictly aligned pointer types
INT07-C	archive.c	216	22	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	archive.c	222	2	Only free memory allocated dynamically
EXP36-C	archive.c	230	31	Do not convert pointers into more strictly aligned pointer types
INT01-C	archive.c	233	21	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	archive.c	241	3	Const-qualify immutable objects: baselen
DCL01-C	archive.c	264	2	Do not reuse variable names in subscopes: stat
INT01-C	archive.c	282	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive.c	282	52	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive.c	285	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	archive.c	285	36	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	archive.c	295	2	Do not ignore values returned by functions: memset
EXP12-C	archive.c	303	3	Do not ignore values returned by functions: memset
INT01-C	archive.c	327	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	archive.c	330	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	archive.c	379	2	Do not reuse variable names in subscopes: pathspec
EXP36-C	archive.c	389	36	Do not convert pointers into more strictly aligned pointer types
DCL01-C	archive.c	420	45	Do not reuse variable names in subscopes: pathspec
INT07-C	archive.c	434	19	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	archive.c	448	2	Do not reuse variable names in subscopes: tree
DCL01-C	archive.c	449	2	Do not reuse variable names in subscopes: commit
DCL01-C	archive.c	451	2	Do not reuse variable names in subscopes: ref
DCL00-C	archive.c	456	3	Const-qualify immutable objects: refnamelen
EXP12-C	archive.c	461	3	Do not ignore values returned by functions: dwim_ref
EXP36-C	archive.c	503	33	Do not convert pointers into more strictly aligned pointer types
MEM34-C	archive.c	506	2	Only free memory allocated dynamically
EXP36-C	archive.c	511	34	Do not convert pointers into more strictly aligned pointer types
EXP11-C	archive.c	512	23	Do not apply operators expecting one type to data of an incompatible type
INT36-C	archive.c	512	23	Take care when converting from pointer to integer or integer to pointer
EXP36-C	archive.c	527	16	Do not convert pointers into more strictly aligned pointer types
MEM34-C	archive.c	558	4	Only free memory allocated dynamically
EXP12-C	archive.c	560	3	Do not ignore values returned by functions: memset
DCL05-C	archive.c	580	1	Use typedefs to improve code readability
INT01-C	archive.c	631	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	archive.c	659	3	Const-qualify immutable objects: high_ok
EXP12-C	archive.c	685	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	archive.c	703	3	Do not ignore values returned by functions: setup_git_directory
DCL00-C	archive.c	719	2	Const-qualify immutable objects: prefixlen
DCL02-C	attr.c	18	1	Use visually distinct identifiers: git_attr__true
DCL02-C	attr.c	19	1	Use visually distinct identifiers: git_attr__false
STR11-C	attr.c	18	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	attr.c	19	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	attr.c	20	1	Do not specify the dimension of a character array initialized with a string literal
EXP11-C	attr.c	67	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	attr.c	67	6	Do not cast away a const qualification
EXP11-C	attr.c	68	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	attr.c	68	6	Do not cast away a const qualification
EXP36-C	attr.c	94	6	Do not convert pointers into more strictly aligned pointer types
EXP36-C	attr.c	106	13	Do not convert pointers into more strictly aligned pointer types
DCL00-C	attr.c	149	3	Const-qualify immutable objects: e
DCL01-C	attr.c	149	3	Do not reuse variable names in subscopes: e
EXP36-C	attr.c	152	3	Do not convert pointers into more strictly aligned pointer types
EXP30-C	attr.c	155	3	Do not depend on order of evaluation for side effects
EXP36-C	attr.c	155	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	attr.c	155	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	attr.c	157	32	Do not convert pointers into more strictly aligned pointer types
INT01-C	attr.c	181	14	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	attr.c	184	3	Const-qualify immutable objects: ch
EXP36-C	attr.c	218	22	Do not convert pointers into more strictly aligned pointer types
DCL00-C	attr.c	221	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	attr.c	221	3	Do not convert pointers into more strictly aligned pointer types
EXP06-C	attr.c	225	3	Operands to the sizeof operator should not contain side effects
DCL01-C	attr.c	246	2	Do not reuse variable names in subscopes: pattern
STR11-C	attr.c	275	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	attr.c	341	2	Do not reuse variable names in subscopes: pattern
INT01-C	attr.c	356	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	attr.c	359	4	Do not ignore values returned by functions: fprintf_ln
EXP36-C	attr.c	384	15	Do not convert pointers into more strictly aligned pointer types
INT01-C	attr.c	385	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	386	35	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	attr.c	391	13	Do not apply operators expecting one type to data of an incompatible type
INT07-C	attr.c	404	16	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	attr.c	417	2	Only free memory allocated dynamically
EXP05-C	attr.c	463	10	Do not cast away a const qualification
MEM30-C	attr.c	465	3	Do not access freed memory
MEM34-C	attr.c	465	3	Only free memory allocated dynamically
MEM01-C	attr.c	468	2	Store a new value in pointers immediately after free()
INT01-C	attr.c	502	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	502	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	502	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	502	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	502	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	502	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	502	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	502	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	502	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	attr.c	502	2	Do not convert pointers into more strictly aligned pointer types
DCL13-C	attr.c	510	52	Declare function parameters that are pointers to values not changed by the function as const: check
INT01-C	attr.c	517	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	521	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	525	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	525	29	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	attr.c	526	22	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	attr.c	540	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	attr.c	549	32	Do not convert pointers into more strictly aligned pointer types
DCL00-C	attr.c	561	2	Const-qualify immutable objects: params
EXP12-C	attr.c	564	2	Do not ignore values returned by functions: __builtin_va_start
EXP11-C	attr.c	565	25	Do not apply operators expecting one type to data of an incompatible type
INT36-C	attr.c	565	25	Take care when converting from pointer to integer or integer to pointer
EXP12-C	attr.c	567	2	Do not ignore values returned by functions: __builtin_va_end
EXP36-C	attr.c	572	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	attr.c	575	2	Do not ignore values returned by functions: __builtin_va_start
EXP11-C	attr.c	578	11	Do not apply operators expecting one type to data of an incompatible type
INT36-C	attr.c	578	11	Take care when converting from pointer to integer or integer to pointer
EXP12-C	attr.c	587	2	Do not ignore values returned by functions: __builtin_va_end
EXP36-C	attr.c	602	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	attr.c	603	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	603	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	attr.c	613	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	attr.c	643	3	Store a new value in pointers immediately after free()
EXP36-C	attr.c	663	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	attr.c	673	2	Do not convert pointers into more strictly aligned pointer types
FIO42-C	attr.c	713	8	Close files when they are no longer needed
EXP12-C	attr.c	716	3	Do not ignore values returned by functions: warn_on_fopen_errors
EXP36-C	attr.c	721	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	attr.c	761	2	Do not convert pointers into more strictly aligned pointer types
INT07-C	attr.c	768	7	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	attr.c	772	2	Only free memory allocated dynamically
EXP36-C	attr.c	802	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	attr.c	845	2	Const-qualify immutable objects: flags
EXP36-C	attr.c	876	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	attr.c	917	3	Const-qualify immutable objects: namelen
MSC12-C	attr.c	936	2	Detect and remove code that has no effect
INT01-C	attr.c	940	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	946	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	949	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	attr.c	952	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	attr.c	979	2	Do not reuse variable names in subscopes: pattern
DCL00-C	attr.c	980	2	Const-qualify immutable objects: prefix
DCL00-C	attr.c	981	2	Const-qualify immutable objects: isdir
DCL00-C	attr.c	1062	5	Const-qualify immutable objects: n
EXP12-C	attr.c	1102	2	Do not ignore values returned by functions: fill
DCL00-C	attr.c	1114	3	Const-qualify immutable objects: n
EXP12-C	attr.c	1143	2	Do not ignore values returned by functions: pthread_mutex_init
EXP12-C	attr.c	1144	2	Do not ignore values returned by functions: pthread_mutex_init
INT01-C	base85.c	34	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	base85.c	35	3	Const-qualify immutable objects: ch
INT07-C	base85.c	36	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	base85.c	71	11	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	base85.c	86	4	Const-qualify immutable objects: ch
INT34-C	base85.c	87	14	Do not shift a negative number of bits or more bits than exist in the operand
DCL00-C	base85.c	93	4	Const-qualify immutable objects: val
INT07-C	base85.c	101	7	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	bisect.c	43	3	Do not reuse variable names in subscopes: commit
DCL01-C	bisect.c	68	3	Do not reuse variable names in subscopes: commit
INT01-C	bisect.c	74	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	bisect.c	74	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	bisect.c	74	1	Use typedefs to improve code readability
EXP36-C	bisect.c	74	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	bisect.c	74	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	bisect.c	74	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	bisect.c	84	61	Do not reuse variable names in subscopes: weight
DCL01-C	bisect.c	89	53	Do not reuse variable names in subscopes: commit
DCL01-C	bisect.c	147	3	Do not reuse variable names in subscopes: commit
DCL00-C	bisect.c	148	3	Const-qualify immutable objects: commit_flags
DCL00-C	bisect.c	184	3	Const-qualify immutable objects: commit_flags
DCL01-C	bisect.c	201	2	Do not reuse variable names in subscopes: commit
EXP05-C	bisect.c	209	6	Do not cast away a const qualification
EXP05-C	bisect.c	210	6	Do not cast away a const qualification
EXP36-C	bisect.c	219	37	Do not convert pointers into more strictly aligned pointer types
DCL00-C	bisect.c	225	3	Const-qualify immutable objects: commit_flags
MEM34-C	bisect.c	253	2	Only free memory allocated dynamically
DCL01-C	bisect.c	280	3	Do not reuse variable names in subscopes: commit
DCL00-C	bisect.c	281	3	Const-qualify immutable objects: commit_flags
DCL00-C	bisect.c	344	4	Const-qualify immutable objects: commit_flags
DCL01-C	bisect.c	389	42	Do not reuse variable names in subscopes: commit_list
DCL00-C	bisect.c	406	3	Const-qualify immutable objects: commit_flags
MEM01-C	bisect.c	410	4	Store a new value in pointers immediately after free()
MEM34-C	bisect.c	410	4	Only free memory allocated dynamically
EXP36-C	bisect.c	423	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	bisect.c	436	2	Store a new value in pointers immediately after free()
MEM34-C	bisect.c	436	2	Only free memory allocated dynamically
DCL13-C	bisect.c	442	28	Declare function parameters that are pointers to values not changed by the function as const: cb_data
EXP36-C	bisect.c	449	28	Do not convert pointers into more strictly aligned pointer types
INT01-C	bisect.c	499	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	bisect.c	501	13	Use rsize_t or size_t for all integer values representing the size of an object
FLP33-C	bisect.c	591	2	Convert integers to floating point for floating point operations
DCL00-C	bisect.c	597	3	Const-qualify immutable objects: y
FLP03-C	bisect.c	597	29	Detect and handle floating point errors
INT33-C	bisect.c	597	29	Ensure that division and remainder operations do not result in divide-by-zero errors
FLP34-C	bisect.c	602	9	Ensure that floating point conversions are within range of the new type
DCL01-C	bisect.c	608	2	Do not reuse variable names in subscopes: index
EXP12-C	bisect.c	664	2	Do not ignore values returned by functions: strvec_push
EXP12-C	bisect.c	665	2	Do not ignore values returned by functions: strvec_pushf
INT01-C	bisect.c	666	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	bisect.c	667	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	bisect.c	669	2	Do not ignore values returned by functions: strvec_push
EXP12-C	bisect.c	673	2	Do not ignore values returned by functions: setup_revisions
DCL01-C	bisect.c	730	2	Do not reuse variable names in subscopes: commit
EXP12-C	bisect.c	734	2	Do not ignore values returned by functions: update_ref
EXP12-C	bisect.c	737	3	Do not ignore values returned by functions: update_ref
DCL00-C	bisect.c	765	2	Const-qualify immutable objects: c
EXP36-C	bisect.c	777	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	bisect.c	777	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	bisect.c	779	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	bisect.c	829	2	Only free memory allocated dynamically
FIO01-C	bisect.c	920	7	Be careful using functions that use file names for identification
MEM01-C	bisect.c	932	2	Store a new value in pointers immediately after free()
MEM34-C	bisect.c	932	2	Only free memory allocated dynamically
MEM34-C	bisect.c	951	2	Only free memory allocated dynamically
DCL01-C	bisect.c	960	22	Do not reuse variable names in subscopes: commit
EXP12-C	bisect.c	970	2	Do not ignore values returned by functions: setup_revisions
INT01-C	bisect.c	970	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	bisect.c	971	2	Do not ignore values returned by functions: log_tree_commit
DCL05-C	bisect.c	980	1	Use typedefs to improve code readability
EXP12-C	bisect.c	995	3	Do not ignore values returned by functions: strbuf_getline_lf
EXP12-C	bisect.c	997	3	Do not ignore values returned by functions: strbuf_getline_lf
DCL00-C	bisect.c	1028	2	Const-qualify immutable objects: no_checkout
MEM01-C	bisect.c	1113	2	Store a new value in pointers immediately after free()
MEM34-C	bisect.c	1113	2	Only free memory allocated dynamically
INT34-C	bisect.c	1136	11	Do not shift a negative number of bits or more bits than exist in the operand
EXP36-C	bisect.c	1167	29	Do not convert pointers into more strictly aligned pointer types
DCL01-C	bisect.c	1168	2	Do not reuse variable names in subscopes: ref
EXP12-C	bisect.c	1169	2	Do not ignore values returned by functions: string_list_append
EXP12-C	bisect.c	1179	2	Do not ignore values returned by functions: for_each_ref_in
EXP12-C	bisect.c	1180	2	Do not ignore values returned by functions: string_list_append
EXP12-C	bisect.c	1184	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	bisect.c	1185	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	bisect.c	1186	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	bisect.c	1187	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	bisect.c	1188	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	bisect.c	1189	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	bisect.c	1190	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	bisect.c	1192	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	bisect.c	1197	2	Do not ignore values returned by functions: unlink_or_warn
INT01-C	blame.c	15	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	blame.c	15	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	blame.c	15	1	Use typedefs to improve code readability
EXP36-C	blame.c	15	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	15	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	blame.c	15	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	blame.c	18	56	Do not reuse variable names in subscopes: commit
DCL01-C	blame.c	27	47	Do not reuse variable names in subscopes: commit
DCL01-C	blame.c	60	56	Do not reuse variable names in subscopes: commit
DCL00-C	blame.c	63	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	blame.c	63	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	blame.c	75	55	Do not reuse variable names in subscopes: commit
DCL01-C	blame.c	181	2	Do not reuse variable names in subscopes: commit
EXP12-C	blame.c	193	2	Do not ignore values returned by functions: repo_read_index
EXP12-C	blame.c	194	2	Do not ignore values returned by functions: time
EXP36-C	blame.c	195	28	Do not convert pointers into more strictly aligned pointer types
EXP12-C	blame.c	264	2	Do not ignore values returned by functions: convert_to_git
EXP12-C	blame.c	267	2	Do not ignore values returned by functions: pretend_object_file
EXP12-C	blame.c	276	2	Do not ignore values returned by functions: repo_read_index
DCL00-C	blame.c	280	3	Const-qualify immutable objects: pos
EXP12-C	blame.c	293	2	Do not ignore values returned by functions: add_index_entry
EXP36-C	blame.c	334	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	blame.c	401	2	Const-qualify immutable objects: max_map_entry_count
EXP36-C	blame.c	402	43	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	424	17	Do not convert pointers into more strictly aligned pointer types
EXP30-C	blame.c	455	2	Do not depend on order of evaluation for side effects
EXP36-C	blame.c	455	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	455	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	457	13	Do not convert pointers into more strictly aligned pointer types
EXP30-C	blame.c	476	2	Do not depend on order of evaluation for side effects
EXP36-C	blame.c	476	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	476	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	478	13	Do not convert pointers into more strictly aligned pointer types
MSC12-C	blame.c	588	2	Detect and remove code that has no effect
EXP06-C	blame.c	588	2	Operands to the sizeof operator should not contain side effects
MSC12-C	blame.c	665	4	Detect and remove code that has no effect
EXP06-C	blame.c	665	4	Operands to the sizeof operator should not contain side effects
ARR30-C	blame.c	795	30	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	blame.c	918	2	Const-qualify immutable objects: start_a
DCL00-C	blame.c	919	2	Const-qualify immutable objects: length_a
DCL00-C	blame.c	920	2	Const-qualify immutable objects: start_b
DCL00-C	blame.c	921	2	Const-qualify immutable objects: length_b
INT33-C	blame.c	952	11	Ensure that division and remainder operations do not result in divide-by-zero errors
EXP36-C	blame.c	954	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	955	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	956	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	960	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	blame.c	983	2	Store a new value in pointers immediately after free()
MEM34-C	blame.c	983	2	Only free memory allocated dynamically
MEM01-C	blame.c	984	2	Store a new value in pointers immediately after free()
MEM34-C	blame.c	984	2	Only free memory allocated dynamically
MEM34-C	blame.c	985	2	Only free memory allocated dynamically
EXP36-C	blame.c	998	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	blame.c	1001	2	Only free memory allocated dynamically
MSC12-C	blame.c	1101	1	Detect and remove code that has no effect
MSC12-C	blame.c	1101	1	Detect and remove code that has no effect
DCL05-C	blame.c	1101	1	Use typedefs to improve code readability
INT01-C	blame.c	1101	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	blame.c	1101	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	blame.c	1101	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	blame.c	1101	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	blame.c	1101	1	Use typedefs to improve code readability
INT01-C	blame.c	1101	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	blame.c	1101	1	Use typedefs to improve code readability
MEM01-C	blame.c	1184	4	Store a new value in pointers immediately after free()
MEM34-C	blame.c	1184	4	Only free memory allocated dynamically
EXP36-C	blame.c	1295	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	1298	28	Do not convert pointers into more strictly aligned pointer types
INT13-C	blame.c	1338	29	Use bitwise operators only on unsigned operands
INT13-C	blame.c	1338	10	Use bitwise operators only on unsigned operands
INT13-C	blame.c	1338	10	Use bitwise operators only on unsigned operands
INT13-C	blame.c	1338	10	Use bitwise operators only on unsigned operands
INT13-C	blame.c	1338	10	Use bitwise operators only on unsigned operands
INT13-C	blame.c	1338	10	Use bitwise operators only on unsigned operands
INT13-C	blame.c	1338	10	Use bitwise operators only on unsigned operands
INT13-C	blame.c	1338	31	Use bitwise operators only on unsigned operands
DCL05-C	blame.c	1446	1	Use typedefs to improve code readability
EXP36-C	blame.c	1449	33	Do not convert pointers into more strictly aligned pointer types
EXP12-C	blame.c	1451	2	Do not ignore values returned by functions: blame_origin_incref
DCL05-C	blame.c	1463	1	Use typedefs to improve code readability
EXP12-C	blame.c	1466	2	Do not ignore values returned by functions: blame_origin_incref
EXP12-C	blame.c	1500	2	Do not ignore values returned by functions: memset
DCL05-C	blame.c	1547	1	Use typedefs to improve code readability
EXP36-C	blame.c	1624	33	Do not convert pointers into more strictly aligned pointer types
DCL00-C	blame.c	1684	2	Const-qualify immutable objects: parent_slno
MEM34-C	blame.c	1708	2	Only free memory allocated dynamically
DCL05-C	blame.c	1721	1	Use typedefs to improve code readability
MSC12-C	blame.c	1765	3	Detect and remove code that has no effect
MSC12-C	blame.c	1769	2	Detect and remove code that has no effect
DCL05-C	blame.c	1787	1	Use typedefs to improve code readability
EXP36-C	blame.c	1845	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	blame.c	1878	2	Store a new value in pointers immediately after free()
MEM34-C	blame.c	1878	2	Only free memory allocated dynamically
EXP36-C	blame.c	1911	34	Do not convert pointers into more strictly aligned pointer types
DCL00-C	blame.c	1985	3	Const-qualify immutable objects: ch
EXP05-C	blame.c	1985	19	Do not cast away a const qualification
INT13-C	blame.c	1986	7	Use bitwise operators only on unsigned operands
EXP12-C	blame.c	2015	3	Do not ignore values returned by functions: blame_origin_incref
EXP36-C	blame.c	2065	35	Do not convert pointers into more strictly aligned pointer types
EXP12-C	blame.c	2088	2	Do not ignore values returned by functions: memset
EXP05-C	blame.c	2094	15	Do not cast away a const qualification
EXP12-C	blame.c	2101	2	Do not ignore values returned by functions: memset
DCL05-C	blame.c	2114	1	Use typedefs to improve code readability
DCL05-C	blame.c	2141	1	Use typedefs to improve code readability
DCL01-C	blame.c	2200	2	Do not reuse variable names in subscopes: blame_list
EXP36-C	blame.c	2205	3	Do not convert pointers into more strictly aligned pointer types
DCL05-C	blame.c	2218	1	Use typedefs to improve code readability
DCL01-C	blame.c	2228	2	Do not reuse variable names in subscopes: blame_list
MEM01-C	blame.c	2312	3	Store a new value in pointers immediately after free()
MEM34-C	blame.c	2312	3	Only free memory allocated dynamically
EXP12-C	blame.c	2337	3	Do not ignore values returned by functions: blame_origin_incref
DCL01-C	blame.c	2349	82	Do not reuse variable names in subscopes: commit
EXP36-C	blame.c	2361	26	Do not convert pointers into more strictly aligned pointer types
DCL01-C	blame.c	2364	65	Do not reuse variable names in subscopes: commit
DCL01-C	blame.c	2402	2	Do not reuse variable names in subscopes: commit
INT01-C	blame.c	2412	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	blame.c	2415	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	blame.c	2422	3	Const-qualify immutable objects: find
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
DCL01-C	blame.c	2459	3	Do not reuse variable names in subscopes: porigin
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
EXP12-C	blame.c	2463	4	Do not ignore values returned by functions: blame_origin_incref
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
DCL01-C	blame.c	2478	4	Do not reuse variable names in subscopes: porigin
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
EXP12-C	blame.c	2498	3	Do not ignore values returned by functions: filter_small
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
DCL01-C	blame.c	2503	5	Do not reuse variable names in subscopes: porigin
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
EXP12-C	blame.c	2522	4	Do not ignore values returned by functions: filter_small
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
DCL01-C	blame.c	2530	4	Do not reuse variable names in subscopes: porigin
DCL02-C	blame.c	2530	4	Use visually distinct identifiers: porigin
MEM34-C	blame.c	2563	3	Only free memory allocated dynamically
DCL01-C	blame.c	2573	2	Do not reuse variable names in subscopes: commit
EXP36-C	blame.c	2573	40	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	2584	27	Do not convert pointers into more strictly aligned pointer types
MSC12-C	blame.c	2588	3	Detect and remove code that has no effect
EXP12-C	blame.c	2594	3	Do not ignore values returned by functions: blame_origin_incref
EXP12-C	blame.c	2595	3	Do not ignore values returned by functions: repo_parse_commit
INT07-C	blame.c	2612	20	Use only explicitly signed or unsigned char type for numeric values
EXP11-C	blame.c	2662	11	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	blame.c	2729	11	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	blame.c	2745	2	Do not ignore values returned by functions: memset
EXP36-C	blame.c	2813	35	Do not convert pointers into more strictly aligned pointer types
EXP12-C	blame.c	2850	2	Do not ignore values returned by functions: prepare_lines
EXP05-C	blame.c	2855	7	Do not cast away a const qualification
EXP36-C	blame.c	2864	40	Do not convert pointers into more strictly aligned pointer types
EXP12-C	blame.c	2870	2	Do not ignore values returned by functions: blame_origin_incref
EXP36-C	blame.c	2886	14	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blame.c	2892	2	Do not convert pointers into more strictly aligned pointer types
DCL02-C	blob.c	6	1	Use visually distinct identifiers: blob_type
EXP36-C	blob.c	12	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	blob.c	13	23	Do not convert pointers into more strictly aligned pointer types
DCL13-C	blob.c	16	48	Declare function parameters that are pointers to values not changed by the function as const: buffer
INT01-C	bloom.c	10	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	bloom.c	10	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	bloom.c	10	1	Use typedefs to improve code readability
EXP36-C	bloom.c	10	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	bloom.c	10	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	bloom.c	10	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	bloom.c	21	2	Const-qualify immutable objects: mask
INT01-C	bloom.c	21	20	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	bloom.c	22	8	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	23	27	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	23	17	Use bitwise operators only on unsigned operands
INT34-C	bloom.c	23	17	Do not shift a negative number of bits or more bits than exist in the operand
INT13-C	bloom.c	23	36	Use bitwise operators only on unsigned operands
INT32-C	bloom.c	23	41	Ensure that operations on signed integers do not result in overflow
INT13-C	bloom.c	28	28	Use bitwise operators only on unsigned operands
EXP05-C	bloom.c	54	17	Do not cast away a const qualification
INT01-C	bloom.c	55	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	bloom.c	56	6	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	bloom.c	80	2	Const-qualify immutable objects: len4
DCL00-C	bloom.c	84	3	Const-qualify immutable objects: byte1
DCL00-C	bloom.c	85	3	Const-qualify immutable objects: byte2
DCL00-C	bloom.c	86	3	Const-qualify immutable objects: byte3
DCL00-C	bloom.c	87	3	Const-qualify immutable objects: byte4
INT13-C	bloom.c	88	29	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	88	21	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	88	13	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	93	8	Use bitwise operators only on unsigned operands
INT01-C	bloom.c	97	22	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	bloom.c	99	2	Strive for logical completeness
INT01-C	bloom.c	99	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	bloom.c	99	34	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	bloom.c	101	6	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	104	6	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	107	6	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	111	8	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	115	7	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	116	7	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	118	7	Use bitwise operators only on unsigned operands
INT13-C	bloom.c	120	7	Use bitwise operators only on unsigned operands
DCL00-C	bloom.c	151	2	Const-qualify immutable objects: mod
INT01-C	bloom.c	151	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	bloom.c	154	3	Const-qualify immutable objects: hash_mod
INT33-C	bloom.c	154	38	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL00-C	bloom.c	155	3	Const-qualify immutable objects: block_pos
EXP11-C	bloom.c	173	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	bloom.c	173	7	Do not cast away a const qualification
EXP11-C	bloom.c	174	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	bloom.c	174	7	Do not cast away a const qualification
EXP12-C	bloom.c	223	2	Do not ignore values returned by functions: repo_parse_commit
DCL00-C	bloom.c	233	3	Const-qualify immutable objects: e
DCL01-C	bloom.c	233	3	Do not reuse variable names in subscopes: e
DCL00-C	bloom.c	250	5	Const-qualify immutable objects: flex_array_len_
EXP36-C	bloom.c	250	5	Do not convert pointers into more strictly aligned pointer types
EXP05-C	bloom.c	250	5	Do not cast away a const qualification
MEM01-C	bloom.c	256	6	Store a new value in pointers immediately after free()
MEM30-C	bloom.c	256	6	Do not access freed memory
MEM34-C	bloom.c	256	6	Only free memory allocated dynamically
EXP05-C	bloom.c	259	19	Do not cast away a const qualification
INT07-C	bloom.c	260	17	Use only explicitly signed or unsigned char type for numeric values
EXP30-C	bloom.c	282	3	Do not depend on order of evaluation for side effects
EXP36-C	bloom.c	282	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	bloom.c	282	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	bloom.c	314	2	Const-qualify immutable objects: mod
INT01-C	bloom.c	314	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	bloom.c	320	3	Const-qualify immutable objects: hash_mod
INT33-C	bloom.c	320	38	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL00-C	bloom.c	321	3	Const-qualify immutable objects: block_pos
INT13-C	bloom.c	322	33	Use bitwise operators only on unsigned operands
DCL01-C	branch.c	18	2	Do not reuse variable names in subscopes: remote
DCL01-C	branch.c	23	2	Do not reuse variable names in subscopes: tracking
DCL01-C	branch.c	27	47	Do not reuse variable names in subscopes: remote
EXP36-C	branch.c	29	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	branch.c	30	2	Do not reuse variable names in subscopes: tracking
EXP12-C	branch.c	35	4	Do not ignore values returned by functions: string_list_append
EXP12-C	branch.c	40	4	Do not ignore values returned by functions: string_list_append
EXP12-C	branch.c	43	4	Do not ignore values returned by functions: string_list_append
MSC01-C	branch.c	56	2	Strive for logical completeness
INT01-C	branch.c	93	30	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	branch.c	142	4	Do not ignore values returned by functions: skip_prefix
EXP12-C	branch.c	146	5	Do not ignore values returned by functions: string_list_append_nodup
EXP12-C	branch.c	150	5	Do not ignore values returned by functions: string_list_append
INT01-C	branch.c	155	19	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	branch.c	155	19	Ensure that return values are compared against the proper type
EXP12-C	branch.c	160	4	Do not ignore values returned by functions: printf_ln
EXP12-C	branch.c	165	4	Do not ignore values returned by functions: printf_ln
EXP12-C	branch.c	167	5	Do not ignore values returned by functions: printf_ln
MSC12-C	branch.c	177	2	Detect and remove code that has no effect
INT01-C	branch.c	181	18	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	branch.c	181	18	Ensure that return values are compared against the proper type
DCL01-C	branch.c	198	15	Do not reuse variable names in subscopes: remote
EXP12-C	branch.c	203	2	Do not ignore values returned by functions: string_list_append
DCL01-C	branch.c	209	46	Do not reuse variable names in subscopes: tracking
DCL01-C	branch.c	212	2	Do not reuse variable names in subscopes: branch
EXP12-C	branch.c	216	2	Do not ignore values returned by functions: skip_prefix
EXP12-C	branch.c	233	3	Do not ignore values returned by functions: string_list_append
DCL01-C	branch.c	247	2	Do not reuse variable names in subscopes: tracking
DCL00-C	branch.c	249	2	Const-qualify immutable objects: config_flags
EXP12-C	branch.c	258	2	Do not ignore values returned by functions: memset
EXP05-C	branch.c	259	22	Do not cast away a const qualification
DCL00-C	branch.c	286	3	Const-qualify immutable objects: status
INT01-C	branch.c	334	24	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	branch.c	355	2	Store a new value in pointers immediately after free()
MEM34-C	branch.c	355	2	Only free memory allocated dynamically
DCL01-C	branch.c	365	58	Do not reuse variable names in subscopes: ref
MEM01-C	branch.c	400	4	Store a new value in pointers immediately after free()
MEM34-C	branch.c	400	4	Only free memory allocated dynamically
DCL01-C	branch.c	406	4	Do not reuse variable names in subscopes: ref
MEM01-C	branch.c	411	4	Store a new value in pointers immediately after free()
MEM34-C	branch.c	411	4	Only free memory allocated dynamically
DCL01-C	branch.c	418	4	Do not reuse variable names in subscopes: ref
MEM01-C	branch.c	423	4	Store a new value in pointers immediately after free()
MEM34-C	branch.c	423	4	Only free memory allocated dynamically
MEM01-C	branch.c	435	5	Store a new value in pointers immediately after free()
MEM34-C	branch.c	435	5	Only free memory allocated dynamically
DCL01-C	branch.c	456	62	Do not reuse variable names in subscopes: ref
DCL01-C	branch.c	474	49	Do not reuse variable names in subscopes: remote
EXP12-C	branch.c	478	2	Do not ignore values returned by functions: memset
DCL01-C	branch.c	483	50	Do not reuse variable names in subscopes: ref
STR11-C	branch.c	488	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	branch.c	490	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	branch.c	492	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	branch.c	525	2	Do not reuse variable names in subscopes: commit
DCL00-C	branch.c	536	4	Const-qualify immutable objects: code
MEM34-C	branch.c	557	5	Only free memory allocated dynamically
MEM34-C	branch.c	574	2	Only free memory allocated dynamically
DCL01-C	branch.c	584	2	Do not reuse variable names in subscopes: ref
MEM01-C	branch.c	621	2	Store a new value in pointers immediately after free()
MEM34-C	branch.c	621	2	Only free memory allocated dynamically
MEM34-C	branch.c	628	2	Only free memory allocated dynamically
DCL01-C	branch.c	648	32	Do not reuse variable names in subscopes: submodule
MSC01-C	branch.c	684	2	Strive for logical completeness
EXP12-C	branch.c	686	3	Do not ignore values returned by functions: strvec_push
EXP12-C	branch.c	690	3	Do not ignore values returned by functions: strvec_push
EXP12-C	branch.c	696	3	Do not ignore values returned by functions: strvec_push
EXP12-C	branch.c	712	2	Do not ignore values returned by functions: strbuf_read
DCL01-C	branch.c	734	2	Do not reuse variable names in subscopes: submodule_entry_list
DCL00-C	branch.c	755	4	Const-qualify immutable objects: code
EXP12-C	branch.c	805	2	Do not ignore values returned by functions: unlink
EXP12-C	branch.c	806	2	Do not ignore values returned by functions: unlink
EXP12-C	branch.c	807	2	Do not ignore values returned by functions: unlink
EXP12-C	branch.c	808	2	Do not ignore values returned by functions: unlink
EXP12-C	branch.c	809	2	Do not ignore values returned by functions: unlink
EXP12-C	branch.c	810	2	Do not ignore values returned by functions: save_autostash
EXP12-C	branch.c	816	2	Do not ignore values returned by functions: unlink
DCL01-C	branch.c	820	37	Do not reuse variable names in subscopes: branch
EXP12-C	branch.c	827	3	Do not ignore values returned by functions: skip_prefix
DCL01-C	bulk-checkin.c	31	48	Do not reuse variable names in subscopes: __xpg_basename
MEM34-C	bulk-checkin.c	44	2	Only free memory allocated dynamically
EXP12-C	bulk-checkin.c	58	3	Do not ignore values returned by functions: unlink
EXP12-C	bulk-checkin.c	61	3	Do not ignore values returned by functions: finalize_hashfile
DCL00-C	bulk-checkin.c	64	3	Const-qualify immutable objects: fd
EXP12-C	bulk-checkin.c	81	2	Do not ignore values returned by functions: memset
EXP12-C	bulk-checkin.c	118	2	Do not ignore values returned by functions: tmp_objdir_migrate
DCL00-C	bulk-checkin.c	164	2	Const-qualify immutable objects: write_object
INT01-C	bulk-checkin.c	171	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	bulk-checkin.c	174	12	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	bulk-checkin.c	175	4	Const-qualify immutable objects: rsize
DCL00-C	bulk-checkin.c	176	4	Const-qualify immutable objects: read_result
INT01-C	bulk-checkin.c	185	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	bulk-checkin.c	193	9	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	bulk-checkin.c	200	5	Const-qualify immutable objects: written
INT01-C	bulk-checkin.c	205	45	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	bulk-checkin.c	206	6	Do not ignore values returned by functions: git_deflate_abort
INT01-C	bulk-checkin.c	211	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	bulk-checkin.c	214	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	bulk-checkin.c	270	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	bulk-checkin.c	291	3	Do not ignore values returned by functions: hashfile_truncate
EXP12-C	bulk-checkin.c	303	3	Do not ignore values returned by functions: hashfile_truncate
MEM34-C	bulk-checkin.c	305	3	Only free memory allocated dynamically
EXP36-C	bulk-checkin.c	308	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	bulk-checkin.c	353	2	Const-qualify immutable objects: status
EXP11-C	bundle-uri.c	17	3	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	bundle-uri.c	17	3	Do not cast away a const qualification
EXP11-C	bundle-uri.c	19	3	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	bundle-uri.c	19	3	Do not cast away a const qualification
EXP05-C	bundle-uri.c	21	29	Do not cast away a const qualification
EXP12-C	bundle-uri.c	26	2	Do not ignore values returned by functions: memset
DCL13-C	bundle-uri.c	36	15	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	bundle-uri.c	50	2	Do not ignore values returned by functions: for_all_bundles_in_list
EXP30-C	bundle-uri.c	61	2	Do not depend on order of evaluation for side effects
EXP36-C	bundle-uri.c	61	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	bundle-uri.c	61	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	bundle-uri.c	62	3	Const-qualify immutable objects: result
EXP36-C	bundle-uri.c	73	13	Do not convert pointers into more strictly aligned pointer types
EXP12-C	bundle-uri.c	101	2	Do not ignore values returned by functions: for_all_bundles_in_list
EXP36-C	bundle-uri.c	155	17	Do not convert pointers into more strictly aligned pointer types
EXP36-C	bundle-uri.c	156	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	bundle-uri.c	180	29	Do not convert pointers into more strictly aligned pointer types
EXP12-C	bundle-uri.c	220	2	Do not ignore values returned by functions: unlink
EXP36-C	bundle-uri.c	324	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	bundle-uri.c	336	3	Do not ignore values returned by functions: update_ref
EXP36-C	bundle-uri.c	369	36	Do not convert pointers into more strictly aligned pointer types
DCL01-C	bundle-uri.c	456	2	Do not reuse variable names in subscopes: bcopy
EXP36-C	bundle-uri.c	485	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	bundle-uri.c	503	25	Do not convert pointers into more strictly aligned pointer types
DCL13-C	bundle-uri.c	533	65	Declare function parameters that are pointers to values not changed by the function as const: data
EXP12-C	bundle-uri.c	560	2	Do not ignore values returned by functions: for_all_bundles_in_list
EXP12-C	bundle-uri.c	562	2	Do not ignore values returned by functions: clear_remote_bundle_info
STR11-C	bundle.c	16	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	bundle.c	17	1	Do not specify the dimension of a character array initialized with a string literal
INT01-C	bundle.c	60	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	bundle.c	88	49	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	bundle.c	115	11	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	bundle.c	123	4	Do not reuse variable names in subscopes: dup
DCL00-C	bundle.c	142	2	Const-qualify immutable objects: fd
FIO42-C	bundle.c	142	11	Close files when they are no longer needed
INT01-C	bundle.c	167	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	bundle.c	180	20	Do not convert pointers into more strictly aligned pointer types
DCL01-C	bundle.c	201	2	Do not reuse variable names in subscopes: commit
INT01-C	bundle.c	209	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	bundle.c	212	28	Do not convert pointers into more strictly aligned pointer types
INT01-C	bundle.c	226	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	bundle.c	229	2	Do not ignore values returned by functions: setup_revisions
INT01-C	bundle.c	241	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	bundle.c	244	34	Do not convert pointers into more strictly aligned pointer types
MSC12-C	bundle.c	246	3	Detect and remove code that has no effect
DCL02-C	bundle.c	625	33	Use visually distinct identifiers: r
DCL01-C	bundle.c	258	3	Do not reuse variable names in subscopes: r
EXP12-C	bundle.c	261	3	Do not ignore values returned by functions: printf_ln
EXP12-C	bundle.c	265	3	Do not ignore values returned by functions: list_refs
DCL02-C	bundle.c	625	33	Use visually distinct identifiers: r
DCL02-C	bundle.c	625	33	Use visually distinct identifiers: r
EXP12-C	bundle.c	269	4	Do not ignore values returned by functions: printf_ln
DCL02-C	bundle.c	625	33	Use visually distinct identifiers: r
EXP12-C	bundle.c	271	4	Do not ignore values returned by functions: printf_ln
EXP12-C	bundle.c	275	4	Do not ignore values returned by functions: list_refs
EXP12-C	bundle.c	278	3	Do not ignore values returned by functions: printf_ln
DCL02-C	bundle.c	625	33	Use visually distinct identifiers: r
INT01-C	bundle.c	286	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	bundle.c	288	28	Do not convert pointers into more strictly aligned pointer types
MEM34-C	bundle.c	327	2	Only free memory allocated dynamically
MSC12-C	bundle.c	357	4	Detect and remove code that has no effect
DCL01-C	bundle.c	367	3	Do not reuse variable names in subscopes: object
DCL01-C	bundle.c	396	3	Do not reuse variable names in subscopes: ref
MEM30-C	bundle.c	465	3	Do not access freed memory
MEM34-C	bundle.c	465	3	Only free memory allocated dynamically
DCL01-C	bundle.c	478	55	Do not reuse variable names in subscopes: commit
EXP36-C	bundle.c	480	42	Do not convert pointers into more strictly aligned pointer types
DCL01-C	bundle.c	481	2	Do not reuse variable names in subscopes: object
EXP11-C	bundle.c	496	11	Do not apply operators expecting one type to data of an incompatible type
MSC12-C	bundle.c	540	3	Detect and remove code that has no effect
EXP36-C	cache-tree.c	18	33	Do not convert pointers into more strictly aligned pointer types
MEM01-C	cache-tree.c	36	2	Store a new value in pointers immediately after free()
MEM34-C	cache-tree.c	36	2	Only free memory allocated dynamically
DCL00-C	cache-tree.c	57	3	Const-qualify immutable objects: mi
DCL00-C	cache-tree.c	59	3	Const-qualify immutable objects: cmp
INT32-C	cache-tree.c	68	9	Ensure that operations on signed integers do not result in overflow
INT32-C	cache-tree.c	83	8	Ensure that operations on signed integers do not result in overflow
EXP36-C	cache-tree.c	84	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	cache-tree.c	87	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	cache-tree.c	87	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	cache-tree.c	92	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	cache-tree.c	92	3	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	cache-tree.c	94	10	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	cache-tree.c	100	2	Const-qualify immutable objects: pathlen
INT01-C	cache-tree.c	138	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	cache-tree.c	138	4	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	cache-tree.c	159	2	Const-qualify immutable objects: silent
DCL00-C	cache-tree.c	193	3	Const-qualify immutable objects: this_len
DCL00-C	cache-tree.c	213	2	Const-qualify immutable objects: nr
MEM01-C	cache-tree.c	221	4	Store a new value in pointers immediately after free()
MEM30-C	cache-tree.c	221	4	Do not access freed memory
MEM34-C	cache-tree.c	221	4	Only free memory allocated dynamically
DCL00-C	cache-tree.c	255	2	Const-qualify immutable objects: missing_ok
DCL00-C	cache-tree.c	257	2	Const-qualify immutable objects: repair
MSC12-C	cache-tree.c	261	2	Detect and remove code that has no effect
EXP06-C	cache-tree.c	261	2	Operands to the sizeof operator should not contain side effects
EXP12-C	cache-tree.c	476	2	Do not ignore values returned by functions: trace_performance_enter
EXP05-C	cache-tree.c	576	21	Do not cast away a const qualification
EXP36-C	cache-tree.c	597	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	cache-tree.c	661	26	Do not reuse variable names in subscopes: index_state
DCL01-C	cache-tree.c	691	2	Do not reuse variable names in subscopes: index_state
DCL01-C	cache-tree.c	712	68	Do not reuse variable names in subscopes: index_state
DCL01-C	cache-tree.c	712	93	Do not reuse variable names in subscopes: index_path
DCL01-C	cache-tree.c	715	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	cache-tree.c	718	2	Do not ignore values returned by functions: hold_lock_file_for_update
EXP12-C	cache-tree.c	733	3	Do not ignore values returned by functions: write_locked_index
DCL01-C	cache-tree.c	748	19	Do not reuse variable names in subscopes: tree
DCL01-C	cache-tree.c	757	19	Do not reuse variable names in subscopes: tree
DCL00-C	cache-tree.c	763	2	Const-qualify immutable objects: base_path_len
DCL01-C	cache-tree.c	814	22	Do not reuse variable names in subscopes: tree
DCL00-C	cache-tree.c	883	2	Const-qualify immutable objects: len
INT32-C	cache-tree.c	915	9	Ensure that operations on signed integers do not result in overflow
INT13-C	cache-tree.c	930	55	Use bitwise operators only on unsigned operands
INT01-C	cache-tree.c	946	28	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	cbtree.c	11	28	Do not cast away a const qualification
DCL00-C	cbtree.c	20	3	Const-qualify immutable objects: c
INT01-C	cbtree.c	20	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	cbtree.c	21	3	Const-qualify immutable objects: direction
INT13-C	cbtree.c	21	41	Use bitwise operators only on unsigned operands
MSC12-C	cbtree.c	36	2	Detect and remove code that has no effect
INT13-C	cbtree.c	54	31	Use bitwise operators only on unsigned operands
INT13-C	cbtree.c	55	15	Use bitwise operators only on unsigned operands
INT13-C	cbtree.c	56	15	Use bitwise operators only on unsigned operands
INT13-C	cbtree.c	57	15	Use bitwise operators only on unsigned operands
INT01-C	cbtree.c	58	55	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	cbtree.c	58	31	Use bitwise operators only on unsigned operands
INT13-C	cbtree.c	58	33	Use bitwise operators only on unsigned operands
INT14-C	cbtree.c	60	15	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	cbtree.c	60	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	cbtree.c	60	36	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	cbtree.c	76	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	cbtree.c	78	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	cbtree.c	78	42	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	cbtree.c	80	15	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	cbtree.c	81	13	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	cbtree.c	81	34	Use bitwise operators only on unsigned operands
EXP11-C	cbtree.c	86	12	Do not apply operators expecting one type to data of an incompatible type
INT36-C	cbtree.c	86	12	Take care when converting from pointer to integer or integer to pointer
DCL00-C	cbtree.c	102	3	Const-qualify immutable objects: n
DCL00-C	cbtree.c	122	3	Const-qualify immutable objects: c
INT01-C	cbtree.c	122	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	cbtree.c	123	3	Const-qualify immutable objects: direction
INT13-C	cbtree.c	123	41	Use bitwise operators only on unsigned operands
INT01-C	cbtree.c	126	15	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	cbtree.c	134	2	Do not ignore values returned by functions: cb_descend
EXP36-C	chdir-notify.c	18	40	Do not convert pointers into more strictly aligned pointer types
EXP36-C	chdir-notify.c	30	16	Do not convert pointers into more strictly aligned pointer types
MEM01-C	chdir-notify.c	37	2	Store a new value in pointers immediately after free()
MEM34-C	chdir-notify.c	37	2	Only free memory allocated dynamically
DCL00-C	chdir-notify.c	59	3	Const-qualify immutable objects: saved_errno
EXP11-C	chdir-notify.c	71	4	Do not apply operators expecting one type to data of an incompatible type
MEM34-C	chdir-notify.c	90	2	Only free memory allocated dynamically
DCL01-C	checkout.c	19	47	Do not reuse variable names in subscopes: remote
EXP36-C	checkout.c	21	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	checkout.c	23	2	Do not ignore values returned by functions: memset
EXP36-C	checkout.c	32	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	checkout.c	54	2	Do not ignore values returned by functions: for_each_remote
EXP36-C	chunk-format.c	28	32	Do not convert pointers into more strictly aligned pointer types
MEM01-C	chunk-format.c	38	2	Store a new value in pointers immediately after free()
INT01-C	chunk-format.c	51	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	51	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	51	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	51	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	51	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	51	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	51	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	51	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	51	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	chunk-format.c	51	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	chunk-format.c	55	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	67	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	67	36	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	67	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	69	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	chunk-format.c	71	3	Do not ignore values returned by functions: hashwrite_be64
EXP12-C	chunk-format.c	78	2	Do not ignore values returned by functions: hashwrite_be64
INT01-C	chunk-format.c	80	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	chunk-format.c	81	3	Const-qualify immutable objects: start_offset
INT01-C	chunk-format.c	108	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	108	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	108	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	108	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	108	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	108	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	108	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	chunk-format.c	108	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	chunk-format.c	108	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	chunk-format.c	117	4	Detect and remove code that has no effect
INT01-C	chunk-format.c	125	25	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	chunk-format.c	126	4	Detect and remove code that has no effect
INT01-C	chunk-format.c	131	17	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	chunk-format.c	133	5	Detect and remove code that has no effect
MSC12-C	chunk-format.c	147	3	Detect and remove code that has no effect
EXP36-C	chunk-format.c	158	28	Do not convert pointers into more strictly aligned pointer types
INT01-C	chunk-format.c	177	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	color.c	6	1	Use visually distinct identifiers: color_stdout_is_tty
DCL02-C	color.c	11	1	Use visually distinct identifiers: column_colors_ansi
DCL02-C	color.c	36	1	Use visually distinct identifiers: column_colors_ansi_max
INT01-C	color.c	36	36	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	color.c	112	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	color.c	183	3	Do not reuse variable names in subscopes: name
DCL01-C	color.c	184	3	Do not reuse variable names in subscopes: len
INT01-C	color.c	188	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	color.c	189	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	color.c	190	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	color.c	191	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	color.c	192	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	color.c	193	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	color.c	194	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	color.c	201	3	Do not ignore values returned by functions: skip_prefix_mem
INT01-C	color.c	205	18	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	color.c	228	2	Strive for logical completeness
INT07-C	color.c	269	10	Use only explicitly signed or unsigned char type for numeric values
INT34-C	color.c	308	15	Do not shift a negative number of bits or more bits than exist in the operand
INT07-C	color.c	324	3	Use only explicitly signed or unsigned char type for numeric values
INT07-C	color.c	325	3	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	color.c	331	4	Const-qualify immutable objects: bit
INT34-C	color.c	331	22	Do not shift a negative number of bits or more bits than exist in the operand
INT07-C	color.c	336	5	Use only explicitly signed or unsigned char type for numeric values
INT07-C	color.c	341	5	Use only explicitly signed or unsigned char type for numeric values
INT07-C	color.c	346	5	Use only explicitly signed or unsigned char type for numeric values
INT07-C	color.c	349	3	Use only explicitly signed or unsigned char type for numeric values
INT07-C	color.c	351	2	Use only explicitly signed or unsigned char type for numeric values
INT01-C	color.c	404	22	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	color.c	418	64	Declare function parameters that are pointers to values not changed by the function as const: cb
DCL01-C	color.c	436	47	Do not reuse variable names in subscopes: color
DCL01-C	color.c	445	49	Do not reuse variable names in subscopes: color
DCL01-C	color.c	460	41	Do not reuse variable names in subscopes: color
DCL00-C	color.c	462	2	Const-qualify immutable objects: args
EXP12-C	color.c	464	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	color.c	466	2	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	color.c	470	44	Do not reuse variable names in subscopes: color
DCL00-C	color.c	472	2	Const-qualify immutable objects: args
EXP12-C	color.c	474	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	color.c	476	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	column.c	38	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	column.c	44	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	column.c	48	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	column.c	48	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	column.c	48	15	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	column.c	55	18	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	column.c	57	6	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	column.c	58	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	column.c	74	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	column.c	81	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	column.c	81	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	column.c	81	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	column.c	83	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	column.c	106	16	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	column.c	116	4	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	column.c	117	8	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	column.c	120	17	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	column.c	132	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	column.c	134	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	column.c	134	56	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	column.c	152	2	Do not ignore values returned by functions: memset
EXP36-C	column.c	157	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	column.c	158	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	column.c	167	2	Do not ignore values returned by functions: memset
MEM34-C	column.c	176	2	Only free memory allocated dynamically
MSC12-C	column.c	186	2	Detect and remove code that has no effect
EXP12-C	column.c	188	2	Do not ignore values returned by functions: memset
INT01-C	column.c	245	18	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	column.c	262	3	Strive for logical completeness
DCL00-C	column.c	291	3	Const-qualify immutable objects: len
EXP36-C	column.c	343	29	Do not convert pointers into more strictly aligned pointer types
EXP12-C	column.c	369	2	Do not ignore values returned by functions: strvec_push
EXP12-C	column.c	370	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	column.c	388	2	Do not ignore values returned by functions: dup2
EXP12-C	column.c	400	2	Do not ignore values returned by functions: finish_command
EXP12-C	column.c	401	2	Do not ignore values returned by functions: dup2
EXP36-C	combine-diff.c	49	15	Do not convert pointers into more strictly aligned pointer types
EXP11-C	combine-diff.c	50	14	Do not apply operators expecting one type to data of an incompatible type
INT07-C	combine-diff.c	52	17	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	combine-diff.c	54	4	Do not ignore values returned by functions: memset
INT01-C	combine-diff.c	55	32	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	combine-diff.c	91	4	Store a new value in pointers immediately after free()
MEM34-C	combine-diff.c	91	4	Only free memory allocated dynamically
DCL01-C	combine-diff.c	134	2	Do not reuse variable names in subscopes: plost
INT13-C	combine-diff.c	150	12	Use bitwise operators only on unsigned operands
INT13-C	combine-diff.c	150	14	Use bitwise operators only on unsigned operands
INT13-C	combine-diff.c	150	14	Use bitwise operators only on unsigned operands
INT13-C	combine-diff.c	150	14	Use bitwise operators only on unsigned operands
INT13-C	combine-diff.c	155	14	Use bitwise operators only on unsigned operands
INT13-C	combine-diff.c	155	39	Use bitwise operators only on unsigned operands
INT13-C	combine-diff.c	162	15	Use bitwise operators only on unsigned operands
INT13-C	combine-diff.c	173	12	Use bitwise operators only on unsigned operands
DCL00-C	combine-diff.c	196	2	Const-qualify immutable objects: origbaselen
EXP36-C	combine-diff.c	217	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	218	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	220	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	221	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	combine-diff.c	249	2	Store a new value in pointers immediately after free()
MEM34-C	combine-diff.c	249	2	Only free memory allocated dynamically
INT34-C	combine-diff.c	256	28	Do not shift a negative number of bits or more bits than exist in the operand
DCL01-C	combine-diff.c	262	4	Do not reuse variable names in subscopes: lline
DCL01-C	combine-diff.c	300	3	Do not reuse variable names in subscopes: lline
MEM34-C	combine-diff.c	302	3	Only free memory allocated dynamically
MEM34-C	combine-diff.c	307	2	Only free memory allocated dynamically
DCL01-C	combine-diff.c	317	2	Do not reuse variable names in subscopes: blob
INT01-C	combine-diff.c	323	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	combine-diff.c	332	9	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	combine-diff.c	342	39	Do not reuse variable names in subscopes: sline
DCL01-C	combine-diff.c	344	2	Do not reuse variable names in subscopes: lline
DCL00-C	combine-diff.c	345	2	Const-qualify immutable objects: this_mask
INT34-C	combine-diff.c	345	32	Do not shift a negative number of bits or more bits than exist in the operand
DCL00-C	combine-diff.c	349	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	combine-diff.c	349	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	combine-diff.c	368	2	Do not reuse variable names in subscopes: sline
EXP36-C	combine-diff.c	377	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	401	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	408	37	Do not convert pointers into more strictly aligned pointer types
MSC01-C	combine-diff.c	411	2	Strive for logical completeness
INT14-C	combine-diff.c	416	35	Avoid performing bitwise and arithmetic operations on the same data
DCL01-C	combine-diff.c	426	19	Do not reuse variable names in subscopes: sline
DCL00-C	combine-diff.c	432	2	Const-qualify immutable objects: nmask
INT34-C	combine-diff.c	432	29	Do not shift a negative number of bits or more bits than exist in the operand
EXP12-C	combine-diff.c	444	2	Do not ignore values returned by functions: memset
EXP12-C	combine-diff.c	446	2	Do not ignore values returned by functions: memset
EXP12-C	combine-diff.c	447	2	Do not ignore values returned by functions: memset
INT07-C	combine-diff.c	495	1	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	combine-diff.c	497	38	Do not reuse variable names in subscopes: sline
DCL01-C	combine-diff.c	505	53	Do not reuse variable names in subscopes: sline
DCL01-C	combine-diff.c	522	46	Do not reuse variable names in subscopes: sline
DCL01-C	combine-diff.c	545	39	Do not reuse variable names in subscopes: sline
DCL00-C	combine-diff.c	547	2	Const-qualify immutable objects: all_mask
INT34-C	combine-diff.c	547	31	Do not shift a negative number of bits or more bits than exist in the operand
DCL00-C	combine-diff.c	548	2	Const-qualify immutable objects: mark
INT34-C	combine-diff.c	548	27	Do not shift a negative number of bits or more bits than exist in the operand
DCL00-C	combine-diff.c	549	2	Const-qualify immutable objects: no_pre_delete
INT34-C	combine-diff.c	549	36	Do not shift a negative number of bits or more bits than exist in the operand
INT14-C	combine-diff.c	573	20	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	combine-diff.c	593	21	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	combine-diff.c	605	20	Avoid performing bitwise and arithmetic operations on the same data
DCL01-C	combine-diff.c	610	37	Do not reuse variable names in subscopes: sline
DCL00-C	combine-diff.c	613	2	Const-qualify immutable objects: all_mask
INT34-C	combine-diff.c	613	31	Do not shift a negative number of bits or more bits than exist in the operand
DCL00-C	combine-diff.c	614	2	Const-qualify immutable objects: mark
INT34-C	combine-diff.c	614	27	Do not shift a negative number of bits or more bits than exist in the operand
EXP30-C	combine-diff.c	652	12	Do not depend on order of evaluation for side effects
DCL01-C	combine-diff.c	726	43	Do not reuse variable names in subscopes: sline
DCL01-C	combine-diff.c	755	38	Do not reuse variable names in subscopes: sline
DCL00-C	combine-diff.c	759	2	Const-qualify immutable objects: mark
INT34-C	combine-diff.c	759	27	Do not shift a negative number of bits or more bits than exist in the operand
DCL00-C	combine-diff.c	760	2	Const-qualify immutable objects: no_pre_delete
INT34-C	combine-diff.c	760	36	Do not shift a negative number of bits or more bits than exist in the operand
EXP12-C	combine-diff.c	813	37	Do not ignore values returned by functions: putchar
EXP12-C	combine-diff.c	817	37	Do not ignore values returned by functions: putchar
DCL00-C	combine-diff.c	822	5	Const-qualify immutable objects: ch
ARR30-C	combine-diff.c	825	10	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	combine-diff.c	833	5	Do not ignore values returned by functions: putchar
DCL01-C	combine-diff.c	881	46	Do not reuse variable names in subscopes: sline
INT34-C	combine-diff.c	889	14	Do not shift a negative number of bits or more bits than exist in the operand
INT34-C	combine-diff.c	890	14	Do not shift a negative number of bits or more bits than exist in the operand
EXP12-C	combine-diff.c	922	2	Do not ignore values returned by functions: puts
DCL00-C	combine-diff.c	933	2	Const-qualify immutable objects: abbrev
DCL00-C	combine-diff.c	942	2	Const-qualify immutable objects: dense
DCL01-C	combine-diff.c	1023	2	Do not reuse variable names in subscopes: sline
MSC12-C	combine-diff.c	1055	5	Detect and remove code that has no effect
INT01-C	combine-diff.c	1058	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	combine-diff.c	1073	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	combine-diff.c	1498	2	Use visually distinct identifiers: i
DCL01-C	combine-diff.c	1078	4	Do not reuse variable names in subscopes: i
DCL02-C	combine-diff.c	1498	2	Use visually distinct identifiers: i
DCL02-C	combine-diff.c	1498	2	Use visually distinct identifiers: i
INT01-C	combine-diff.c	1090	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	combine-diff.c	1498	2	Use visually distinct identifiers: i
DCL02-C	combine-diff.c	1498	2	Use visually distinct identifiers: i
INT01-C	combine-diff.c	1096	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	combine-diff.c	1498	2	Use visually distinct identifiers: i
DCL02-C	combine-diff.c	1498	2	Use visually distinct identifiers: i
DCL02-C	combine-diff.c	1498	2	Use visually distinct identifiers: i
DCL02-C	combine-diff.c	1498	2	Use visually distinct identifiers: i
MEM34-C	combine-diff.c	1105	6	Only free memory allocated dynamically
INT01-C	combine-diff.c	1107	18	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	combine-diff.c	1145	4	Only free memory allocated dynamically
MEM34-C	combine-diff.c	1152	3	Only free memory allocated dynamically
EXP36-C	combine-diff.c	1163	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	1182	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	combine-diff.c	1212	2	Store a new value in pointers immediately after free()
MEM34-C	combine-diff.c	1212	2	Only free memory allocated dynamically
MEM34-C	combine-diff.c	1220	5	Only free memory allocated dynamically
MEM34-C	combine-diff.c	1225	2	Only free memory allocated dynamically
EXP12-C	combine-diff.c	1248	4	Do not ignore values returned by functions: putchar
INT13-C	combine-diff.c	1262	25	Use bitwise operators only on unsigned operands
EXP12-C	combine-diff.c	1264	4	Do not ignore values returned by functions: putchar
EXP12-C	combine-diff.c	1265	3	Do not ignore values returned by functions: putchar
INT13-C	combine-diff.c	1292	25	Use bitwise operators only on unsigned operands
MEM01-C	combine-diff.c	1303	2	Store a new value in pointers immediately after free()
EXP36-C	combine-diff.c	1322	16	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	1323	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	1352	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	combine-diff.c	1386	2	Const-qualify immutable objects: num_parent
DCL00-C	combine-diff.c	1388	2	Const-qualify immutable objects: output_format
DCL00-C	combine-diff.c	1401	3	Const-qualify immutable objects: stat_opt
INT13-C	combine-diff.c	1401	32	Use bitwise operators only on unsigned operands
DCL00-C	combine-diff.c	1434	2	Const-qualify immutable objects: nparent
EXP36-C	combine-diff.c	1439	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	combine-diff.c	1447	2	Do not ignore values returned by functions: diff_tree_paths
MEM34-C	combine-diff.c	1450	2	Only free memory allocated dynamically
MEM34-C	combine-diff.c	1483	4	Only free memory allocated dynamically
DCL00-C	combine-diff.c	1498	2	Const-qualify immutable objects: num_parent
INT14-C	combine-diff.c	1547	24	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	combine-diff.c	1552	30	Use bitwise operators only on unsigned operands
INT13-C	combine-diff.c	1575	33	Use bitwise operators only on unsigned operands
EXP36-C	combine-diff.c	1595	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	1600	12	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	1601	20	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	1604	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	combine-diff.c	1606	15	Do not convert pointers into more strictly aligned pointer types
MEM34-C	combine-diff.c	1607	3	Only free memory allocated dynamically
INT13-C	combine-diff.c	1612	26	Use bitwise operators only on unsigned operands
INT13-C	combine-diff.c	1619	31	Use bitwise operators only on unsigned operands
MEM30-C	combine-diff.c	1641	3	Do not access freed memory
MEM34-C	combine-diff.c	1641	3	Only free memory allocated dynamically
DCL01-C	combine-diff.c	1647	52	Do not reuse variable names in subscopes: commit
INT01-C	commit-graph.c	70	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	commit-graph.c	70	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	commit-graph.c	70	1	Use typedefs to improve code readability
EXP36-C	commit-graph.c	70	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit-graph.c	70	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	70	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	73	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	commit-graph.c	73	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	commit-graph.c	73	1	Use typedefs to improve code readability
EXP36-C	commit-graph.c	73	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit-graph.c	73	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	73	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	74	39	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	commit-graph.c	79	2	Do not reuse variable names in subscopes: commit
EXP05-C	commit-graph.c	89	28	Do not cast away a const qualification
EXP05-C	commit-graph.c	90	28	Do not cast away a const qualification
INT01-C	commit-graph.c	95	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	commit-graph.c	95	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	commit-graph.c	95	1	Use typedefs to improve code readability
EXP36-C	commit-graph.c	95	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit-graph.c	95	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	95	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	97	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	commit-graph.c	102	2	Do not ignore values returned by functions: repo_config_get_int
EXP05-C	commit-graph.c	160	28	Do not cast away a const qualification
EXP05-C	commit-graph.c	161	28	Do not cast away a const qualification
EXP36-C	commit-graph.c	198	34	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	248	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	248	19	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	commit-graph.c	250	3	Detect and remove code that has no effect
MSC12-C	commit-graph.c	281	3	Detect and remove code that has no effect
MSC12-C	commit-graph.c	285	3	Detect and remove code that has no effect
MSC12-C	commit-graph.c	289	3	Detect and remove code that has no effect
EXP36-C	commit-graph.c	299	27	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	301	30	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit-graph.c	308	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit-graph.c	316	36	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	337	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	337	19	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	commit-graph.c	344	3	Detect and remove code that has no effect
EXP05-C	commit-graph.c	349	19	Do not cast away a const qualification
MSC12-C	commit-graph.c	351	3	Detect and remove code that has no effect
EXP05-C	commit-graph.c	356	18	Do not cast away a const qualification
MSC12-C	commit-graph.c	358	3	Detect and remove code that has no effect
EXP05-C	commit-graph.c	366	23	Do not cast away a const qualification
INT01-C	commit-graph.c	370	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	372	23	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	commit-graph.c	373	3	Detect and remove code that has no effect
MEM34-C	commit-graph.c	375	3	Only free memory allocated dynamically
EXP12-C	commit-graph.c	385	2	Do not ignore values returned by functions: pair_chunk
EXP12-C	commit-graph.c	387	2	Do not ignore values returned by functions: read_chunk
EXP12-C	commit-graph.c	388	2	Do not ignore values returned by functions: pair_chunk
EXP12-C	commit-graph.c	389	2	Do not ignore values returned by functions: pair_chunk
EXP12-C	commit-graph.c	390	2	Do not ignore values returned by functions: pair_chunk
EXP12-C	commit-graph.c	393	3	Do not ignore values returned by functions: pair_chunk
EXP12-C	commit-graph.c	395	3	Do not ignore values returned by functions: pair_chunk
EXP12-C	commit-graph.c	403	3	Do not ignore values returned by functions: pair_chunk
EXP12-C	commit-graph.c	405	3	Do not ignore values returned by functions: read_chunk
MEM34-C	commit-graph.c	429	2	Only free memory allocated dynamically
DCL00-C	commit-graph.c	441	2	Const-qualify immutable objects: open_ok
DCL00-C	commit-graph.c	458	2	Const-qualify immutable objects: g
MEM34-C	commit-graph.c	459	2	Only free memory allocated dynamically
MEM01-C	commit-graph.c	511	2	Store a new value in pointers immediately after free()
MEM34-C	commit-graph.c	511	2	Only free memory allocated dynamically
INT01-C	commit-graph.c	516	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	521	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	521	45	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit-graph.c	522	2	Do not convert pointers into more strictly aligned pointer types
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL01-C	commit-graph.c	527	3	Do not reuse variable names in subscopes: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
MEM01-C	commit-graph.c	544	4	Store a new value in pointers immediately after free()
MEM30-C	commit-graph.c	544	4	Do not access freed memory
MEM34-C	commit-graph.c	544	4	Only free memory allocated dynamically
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
DCL02-C	commit-graph.c	2273	49	Use visually distinct identifiers: odb
MEM01-C	commit-graph.c	562	2	Store a new value in pointers immediately after free()
MEM34-C	commit-graph.c	562	2	Only free memory allocated dynamically
EXP12-C	commit-graph.c	602	2	Do not ignore values returned by functions: validate_mixed_generation_chain
INT14-C	commit-graph.c	676	19	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	commit-graph.c	782	56	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	782	39	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	commit-graph.c	787	12	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	commit-graph.c	789	47	Use bitwise operators only on unsigned operands
INT01-C	commit-graph.c	792	78	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	commit-graph.c	803	26	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	commit-graph.c	806	45	Avoid performing bitwise and arithmetic operations on the same data
EXP11-C	commit-graph.c	851	20	Do not apply operators expecting one type to data of an incompatible type
INT14-C	commit-graph.c	851	18	Avoid performing bitwise and arithmetic operations on the same data
EXP05-C	commit-graph.c	851	20	Do not cast away a const qualification
EXP36-C	commit-graph.c	851	53	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit-graph.c	882	2	Const-qualify immutable objects: graph_pos
DCL01-C	commit-graph.c	901	2	Do not reuse variable names in subscopes: commit
DCL00-C	commit-graph.c	966	2	Const-qualify immutable objects: graph_pos
INT01-C	commit-graph.c	972	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	972	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	commit-graph.c	989	36	Do not cast away a const qualification
DCL01-C	commit-graph.c	1012	2	Do not reuse variable names in subscopes: progress
EXP36-C	commit-graph.c	1047	43	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	1057	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit-graph.c	1074	43	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	1077	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	commit-graph.c	1085	53	Do not reuse variable names in subscopes: index
EXP36-C	commit-graph.c	1087	41	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit-graph.c	1094	43	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit-graph.c	1096	2	Const-qualify immutable objects: last
DCL01-C	commit-graph.c	1101	3	Do not reuse variable names in subscopes: tree
INT01-C	commit-graph.c	1178	29	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	commit-graph.c	1183	17	Use bitwise operators only on unsigned operands
EXP36-C	commit-graph.c	1197	43	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	1200	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	commit-graph.c	1203	3	Do not ignore values returned by functions: repo_parse_commit
EXP36-C	commit-graph.c	1221	43	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	1223	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	commit-graph.c	1225	3	Const-qualify immutable objects: offset
EXP36-C	commit-graph.c	1240	43	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit-graph.c	1242	2	Const-qualify immutable objects: last
EXP36-C	commit-graph.c	1295	43	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit-graph.c	1297	2	Const-qualify immutable objects: last
DCL00-C	commit-graph.c	1302	3	Const-qualify immutable objects: len
INT01-C	commit-graph.c	1303	11	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit-graph.c	1331	43	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit-graph.c	1333	2	Const-qualify immutable objects: last
DCL00-C	commit-graph.c	1343	3	Const-qualify immutable objects: len
DCL00-C	commit-graph.c	1361	2	Const-qualify immutable objects: offset
DCL01-C	commit-graph.c	1380	88	Do not reuse variable names in subscopes: commit
DCL01-C	commit-graph.c	1394	2	Do not reuse variable names in subscopes: commit
DCL00-C	commit-graph.c	1395	2	Const-qualify immutable objects: flags
INT01-C	commit-graph.c	1402	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1419	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1439	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1458	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	commit-graph.c	1462	3	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	commit-graph.c	1469	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	commit-graph.c	1477	5	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	commit-graph.c	1482	6	Do not ignore values returned by functions: commit_list_insert
EXP12-C	commit-graph.c	1491	5	Do not ignore values returned by functions: pop_commit
INT01-C	commit-graph.c	1513	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	commit-graph.c	1515	4	Do not ignore values returned by functions: repo_parse_commit
INT01-C	commit-graph.c	1520	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	commit-graph.c	1524	3	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	commit-graph.c	1531	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	commit-graph.c	1539	5	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	commit-graph.c	1544	6	Do not ignore values returned by functions: commit_list_insert
EXP12-C	commit-graph.c	1553	5	Do not ignore values returned by functions: pop_commit
INT01-C	commit-graph.c	1562	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	commit-graph.c	1564	3	Const-qualify immutable objects: offset
DCL01-C	commit-graph.c	1586	2	Do not reuse variable names in subscopes: progress
EXP36-C	commit-graph.c	1597	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	1598	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1598	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1608	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1625	37	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	commit-graph.c	1633	2	Store a new value in pointers immediately after free()
MEM34-C	commit-graph.c	1633	2	Only free memory allocated dynamically
DCL01-C	commit-graph.c	1639	2	Do not reuse variable names in subscopes: progress
EXP12-C	commit-graph.c	1667	2	Do not ignore values returned by functions: memset
EXP12-C	commit-graph.c	1673	2	Do not ignore values returned by functions: for_each_ref
INT01-C	commit-graph.c	1704	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	commit-graph.c	1717	3	Do not ignore values returned by functions: for_each_object_in_pack
MEM34-C	commit-graph.c	1720	3	Only free memory allocated dynamically
EXP12-C	commit-graph.c	1754	2	Do not ignore values returned by functions: for_each_packed_object
DCL00-C	commit-graph.c	1764	2	Const-qualify immutable objects: flags
INT01-C	commit-graph.c	1773	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1778	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1778	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1778	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1778	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1778	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1778	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1778	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1778	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1778	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit-graph.c	1778	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit-graph.c	1815	43	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit-graph.c	1816	2	Const-qualify immutable objects: num
MSC12-C	commit-graph.c	1819	3	Detect and remove code that has no effect
MSC12-C	commit-graph.c	1850	3	Detect and remove code that has no effect
EXP12-C	commit-graph.c	1858	3	Do not ignore values returned by functions: hold_lock_file_for_update_mode
MEM01-C	commit-graph.c	1860	3	Store a new value in pointers immediately after free()
MEM34-C	commit-graph.c	1860	3	Only free memory allocated dynamically
MSC12-C	commit-graph.c	1864	4	Detect and remove code that has no effect
MSC12-C	commit-graph.c	1869	4	Detect and remove code that has no effect
EXP12-C	commit-graph.c	1876	3	Do not ignore values returned by functions: hold_lock_file_for_update_mode
INT01-C	commit-graph.c	1886	48	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1888	50	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1897	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1909	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1908	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	1932	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	commit-graph.c	1935	2	Do not ignore values returned by functions: write_chunkfile
EXP12-C	commit-graph.c	1951	2	Do not ignore values returned by functions: finalize_hashfile
DCL00-C	commit-graph.c	1956	3	Const-qualify immutable objects: chainf
MSC12-C	commit-graph.c	1963	4	Detect and remove code that has no effect
MSC12-C	commit-graph.c	1979	6	Detect and remove code that has no effect
EXP12-C	commit-graph.c	1985	4	Do not ignore values returned by functions: unlink
MEM34-C	commit-graph.c	1986	4	Only free memory allocated dynamically
MSC12-C	commit-graph.c	2000	4	Detect and remove code that has no effect
EXP12-C	commit-graph.c	2005	2	Do not ignore values returned by functions: commit_lock_file
MEM34-C	commit-graph.c	2065	3	Only free memory allocated dynamically
EXP36-C	commit-graph.c	2068	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit-graph.c	2069	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit-graph.c	2098	2	Const-qualify immutable objects: offset
INT01-C	commit-graph.c	2100	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	2100	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	2100	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	2100	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	2100	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	2100	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	2100	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	2100	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-graph.c	2100	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit-graph.c	2100	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	commit-graph.c	2122	28	Do not cast away a const qualification
EXP05-C	commit-graph.c	2123	28	Do not cast away a const qualification
INT01-C	commit-graph.c	2139	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	commit-graph.c	2199	2	Const-qualify immutable objects: now
EXP12-C	commit-graph.c	2210	3	Do not ignore values returned by functions: utime
EXP12-C	commit-graph.c	2226	3	Do not ignore values returned by functions: unlink
MEM01-C	commit-graph.c	2227	3	Store a new value in pointers immediately after free()
MEM34-C	commit-graph.c	2227	3	Only free memory allocated dynamically
INT01-C	commit-graph.c	2252	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit-graph.c	2295	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	commit-graph.c	2317	2	Do not ignore values returned by functions: prepare_commit_graph
EXP36-C	commit-graph.c	2350	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-graph.c	2395	22	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	commit-graph.c	2396	3	Detect and remove code that has no effect
MEM34-C	commit-graph.c	2448	2	Only free memory allocated dynamically
DCL00-C	commit-graph.c	2459	2	Const-qualify immutable objects: ap
EXP12-C	commit-graph.c	2462	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	commit-graph.c	2465	2	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	commit-graph.c	2481	2	Do not reuse variable names in subscopes: progress
DCL00-C	commit-graph.c	2511	4	Const-qualify immutable objects: fanout_value
DCL00-C	commit-graph.c	2526	3	Const-qualify immutable objects: fanout_value
INT13-C	commit-graph.c	2535	32	Use bitwise operators only on unsigned operands
INT13-C	commit-graph.c	2538	12	Use bitwise operators only on unsigned operands
EXP12-C	commit-graph.c	2577	4	Do not ignore values returned by functions: parse_commit_in_graph_one
INT13-C	commit-graph.c	2635	14	Use bitwise operators only on unsigned operands
INT13-C	commit-graph.c	2636	15	Use bitwise operators only on unsigned operands
EXP12-C	commit-graph.c	2646	3	Do not ignore values returned by functions: munmap
EXP05-C	commit-graph.c	2646	10	Do not cast away a const qualification
MEM01-C	commit-graph.c	2651	2	Store a new value in pointers immediately after free()
EXP05-C	commit-reach.c	22	28	Do not cast away a const qualification
EXP05-C	commit-reach.c	23	28	Do not cast away a const qualification
DCL00-C	commit-reach.c	25	2	Const-qualify immutable objects: generation_a
DCL00-C	commit-reach.c	26	2	Const-qualify immutable objects: generation_b
DCL01-C	commit-reach.c	43	3	Do not reuse variable names in subscopes: commit
EXP36-C	commit-reach.c	43	42	Do not convert pointers into more strictly aligned pointer types
EXP12-C	commit-reach.c	66	3	Do not ignore values returned by functions: commit_list_append
DCL01-C	commit-reach.c	77	3	Do not reuse variable names in subscopes: commit
EXP36-C	commit-reach.c	77	41	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit-reach.c	80	3	Const-qualify immutable objects: generation
EXP12-C	commit-reach.c	95	5	Do not ignore values returned by functions: commit_list_insert_by_date
INT13-C	commit-reach.c	104	25	Use bitwise operators only on unsigned operands
DCL01-C	commit-reach.c	144	3	Do not reuse variable names in subscopes: commit
EXP12-C	commit-reach.c	158	2	Do not ignore values returned by functions: commit_list_insert
EXP36-C	commit-reach.c	186	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit-reach.c	188	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	commit-reach.c	191	3	Do not ignore values returned by functions: repo_parse_commit
INT01-C	commit-reach.c	222	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	222	2	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	commit-reach.c	226	2	Store a new value in pointers immediately after free()
MEM34-C	commit-reach.c	226	2	Only free memory allocated dynamically
MEM01-C	commit-reach.c	227	2	Store a new value in pointers immediately after free()
MEM34-C	commit-reach.c	227	2	Only free memory allocated dynamically
MEM34-C	commit-reach.c	228	2	Only free memory allocated dynamically
EXP36-C	commit-reach.c	248	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-reach.c	249	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	249	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit-reach.c	253	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	commit-reach.c	259	3	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	commit-reach.c	264	4	Do not ignore values returned by functions: repo_parse_commit
INT01-C	commit-reach.c	267	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	267	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	267	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	267	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	267	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	267	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	267	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	267	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	267	5	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit-reach.c	267	5	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit-reach.c	277	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit-reach.c	286	25	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	commit-reach.c	290	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	commit-reach.c	297	4	Do not ignore values returned by functions: repo_parse_commit
ARR30-C	commit-reach.c	307	53	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	commit-reach.c	312	5	Do not ignore values returned by functions: pop_commit
EXP12-C	commit-reach.c	320	6	Do not ignore values returned by functions: commit_list_insert
MEM01-C	commit-reach.c	332	2	Store a new value in pointers immediately after free()
MEM34-C	commit-reach.c	332	2	Only free memory allocated dynamically
MEM34-C	commit-reach.c	346	2	Only free memory allocated dynamically
EXP36-C	commit-reach.c	402	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	commit-reach.c	413	3	Do not ignore values returned by functions: commit_list_insert_by_date
MEM34-C	commit-reach.c	414	2	Only free memory allocated dynamically
DCL01-C	commit-reach.c	445	21	Do not reuse variable names in subscopes: commit
EXP12-C	commit-reach.c	454	3	Do not ignore values returned by functions: commit_list_insert
DCL01-C	commit-reach.c	474	67	Do not reuse variable names in subscopes: commit
DCL01-C	commit-reach.c	511	19	Do not reuse variable names in subscopes: commit
EXP36-C	commit-reach.c	544	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	commit-reach.c	554	2	Only free memory allocated dynamically
EXP11-C	commit-reach.c	580	15	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	commit-reach.c	586	15	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	commit-reach.c	591	2	Do not ignore values returned by functions: commit_list_insert
DCL01-C	commit-reach.c	608	3	Do not reuse variable names in subscopes: commit
DCL01-C	commit-reach.c	607	2	Do not reuse variable names in subscopes: contains_stack
DCL01-C	commit-reach.c	651	85	Do not reuse variable names in subscopes: contains_stack
EXP36-C	commit-reach.c	653	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	commit-reach.c	662	2	Do not reuse variable names in subscopes: contains_stack
DCL01-C	commit-reach.c	683	3	Do not reuse variable names in subscopes: commit
MSC01-C	commit-reach.c	694	8	Strive for logical completeness
DCL01-C	commit-reach.c	711	63	Do not reuse variable names in subscopes: commit
EXP36-C	commit-reach.c	730	2	Do not convert pointers into more strictly aligned pointer types
EXP11-C	commit-reach.c	751	22	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	commit-reach.c	768	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	commit-reach.c	774	5	Do not ignore values returned by functions: pop_commit
EXP12-C	commit-reach.c	792	6	Do not ignore values returned by functions: commit_list_insert
MEM01-C	commit-reach.c	809	2	Store a new value in pointers immediately after free()
MEM34-C	commit-reach.c	809	2	Only free memory allocated dynamically
DCL05-C	commit-reach.c	875	1	Use typedefs to improve code readability
DCL00-C	commit-reach.c	882	2	Const-qualify immutable objects: to_last
DCL00-C	commit-reach.c	883	2	Const-qualify immutable objects: from_last
EXP12-C	commit-reach.c	893	3	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	commit-reach.c	908	4	Do not ignore values returned by functions: repo_parse_commit
EXP36-C	commit-reach.c	914	49	Do not convert pointers into more strictly aligned pointer types
EXP12-C	commit-reach.c	920	4	Do not ignore values returned by functions: commit_list_insert
EXP12-C	commit-reach.c	927	4	Do not ignore values returned by functions: repo_parse_commit
DCL02-C	commit.c	28	1	Use visually distinct identifiers: save_commit_buffer
DCL02-C	commit.c	29	1	Use visually distinct identifiers: no_graft_file_deprecated_advice
DCL02-C	commit.c	31	1	Use visually distinct identifiers: commit_type
EXP36-C	commit.c	42	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	66	13	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	74	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	75	23	Do not convert pointers into more strictly aligned pointer types
DCL01-C	commit.c	81	2	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	118	63	Do not reuse variable names in subscopes: index
EXP36-C	commit.c	120	58	Do not convert pointers into more strictly aligned pointer types
INT32-C	commit.c	156	8	Ensure that operations on signed integers do not result in overflow
EXP36-C	commit.c	157	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit.c	164	45	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	commit.c	166	27	Do not form or use out-of-bounds pointers or array subscripts
EXP36-C	commit.c	196	19	Do not convert pointers into more strictly aligned pointer types
MSC12-C	commit.c	205	2	Detect and remove code that has no effect
EXP12-C	commit.c	248	2	Do not ignore values returned by functions: read_graft_file
EXP12-C	commit.c	250	2	Do not ignore values returned by functions: is_repository_shallow
INT01-C	commit.c	288	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	commit.c	288	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	commit.c	288	1	Use typedefs to improve code readability
EXP36-C	commit.c	288	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	288	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit.c	288	1	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	commit.c	292	34	Do not convert pointers into more strictly aligned pointer types
MEM01-C	commit.c	300	2	Store a new value in pointers immediately after free()
DCL01-C	commit.c	303	61	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	311	81	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	326	29	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	347	31	Do not reuse variable names in subscopes: commit
MEM01-C	commit.c	353	3	Store a new value in pointers immediately after free()
EXP05-C	commit.c	353	8	Do not cast away a const qualification
DCL01-C	commit.c	356	73	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	372	28	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	383	60	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	385	2	Do not reuse variable names in subscopes: tree
DCL01-C	commit.c	399	49	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	426	2	Do not reuse variable names in subscopes: tree_entry_len
INT01-C	commit.c	426	50	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit.c	427	52	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	commit.c	428	2	Do not reuse variable names in subscopes: tree
MEM34-C	commit.c	525	3	Only free memory allocated dynamically
MEM34-C	commit.c	535	2	Only free memory allocated dynamically
DCL01-C	commit.c	552	37	Do not reuse variable names in subscopes: commit_buffer
DCL01-C	commit.c	554	2	Do not reuse variable names in subscopes: eol
INT07-C	commit.c	557	12	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	commit.c	586	40	Do not convert pointers into more strictly aligned pointer types
DCL13-C	commit.c	593	41	Declare function parameters that are pointers to values not changed by the function as const: item
DCL00-C	commit.c	656	2	Const-qualify immutable objects: a_date
DCL00-C	commit.c	657	2	Const-qualify immutable objects: b_date
MSC12-C	commit.c	665	1	Detect and remove code that has no effect
MSC12-C	commit.c	665	1	Detect and remove code that has no effect
DCL05-C	commit.c	665	1	Use typedefs to improve code readability
INT01-C	commit.c	665	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit.c	665	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit.c	665	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit.c	665	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	commit.c	665	1	Use typedefs to improve code readability
INT01-C	commit.c	665	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	commit.c	665	1	Use typedefs to improve code readability
DCL01-C	commit.c	679	3	Do not reuse variable names in subscopes: commit
EXP12-C	commit.c	682	4	Do not ignore values returned by functions: commit_list_insert_by_date
DCL01-C	commit.c	690	21	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	711	54	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	723	40	Do not reuse variable names in subscopes: commit
DCL00-C	commit.c	731	2	Const-qualify immutable objects: item
MEM34-C	commit.c	735	3	Only free memory allocated dynamically
INT01-C	commit.c	745	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	commit.c	745	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	commit.c	745	1	Use typedefs to improve code readability
EXP36-C	commit.c	745	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	745	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit.c	745	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit.c	747	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	commit.c	747	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	commit.c	747	1	Use typedefs to improve code readability
EXP36-C	commit.c	747	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	747	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit.c	747	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	commit.c	750	19	Do not reuse variable names in subscopes: commit
EXP36-C	commit.c	778	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	778	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	779	41	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit.c	780	2	Const-qualify immutable objects: a_date
DCL00-C	commit.c	781	2	Const-qualify immutable objects: b_date
DCL13-C	commit.c	791	83	Declare function parameters that are pointers to values not changed by the function as const: unused
EXP36-C	commit.c	793	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	793	36	Do not convert pointers into more strictly aligned pointer types
DCL13-C	commit.c	811	74	Declare function parameters that are pointers to values not changed by the function as const: unused
EXP36-C	commit.c	813	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	813	36	Do not convert pointers into more strictly aligned pointer types
DCL01-C	commit.c	831	2	Do not reuse variable names in subscopes: commit
EXP12-C	commit.c	839	2	Do not ignore values returned by functions: memset
DCL02-C	commit.c	1647	56	Use visually distinct identifiers: commit
DCL01-C	commit.c	857	3	Do not reuse variable names in subscopes: commit
DCL02-C	commit.c	1647	56	Use visually distinct identifiers: commit
DCL02-C	commit.c	1647	56	Use visually distinct identifiers: commit
DCL01-C	commit.c	885	3	Do not reuse variable names in subscopes: commit
DCL02-C	commit.c	1647	56	Use visually distinct identifiers: commit
EXP36-C	commit.c	903	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	commit.c	937	2	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	945	2	Do not reuse variable names in subscopes: commit
EXP36-C	commit.c	956	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	966	29	Do not convert pointers into more strictly aligned pointer types
DCL01-C	commit.c	976	67	Do not reuse variable names in subscopes: commit
EXP12-C	commit.c	994	2	Do not ignore values returned by functions: memset
EXP12-C	commit.c	996	2	Do not ignore values returned by functions: for_each_reflog_ent
MEM34-C	commit.c	1024	2	Only free memory allocated dynamically
DCL00-C	commit.c	1043	2	Const-qualify immutable objects: gpg_sig_header_len
DCL01-C	commit.c	1061	3	Do not reuse variable names in subscopes: eol
DCL00-C	commit.c	1062	3	Const-qualify immutable objects: len
DCL01-C	commit.c	1079	46	Do not reuse variable names in subscopes: commit
DCL00-C	commit.c	1085	2	Const-qualify immutable objects: ret
EXP12-C	commit.c	1148	2	Do not ignore values returned by functions: memset
DCL02-C	commit.c	1599	1	Use visually distinct identifiers: i
DCL01-C	commit.c	1157	4	Do not reuse variable names in subscopes: i
DCL02-C	commit.c	1599	1	Use visually distinct identifiers: i
DCL02-C	commit.c	1599	1	Use visually distinct identifiers: i
DCL02-C	commit.c	1599	1	Use visually distinct identifiers: i
DCL02-C	commit.c	1599	1	Use visually distinct identifiers: i
INT01-C	commit.c	1171	39	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit.c	1178	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	commit.c	1185	1	Use typedefs to improve code readability
EXP36-C	commit.c	1213	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit.c	1216	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	commit.c	1225	2	Only free memory allocated dynamically
DCL01-C	commit.c	1228	49	Do not reuse variable names in subscopes: commit
INT07-C	commit.c	1234	15	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	commit.c	1250	44	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	1254	2	Do not reuse variable names in subscopes: signature_check
EXP12-C	commit.c	1256	2	Do not ignore values returned by functions: memset
EXP12-C	commit.c	1260	2	Do not ignore values returned by functions: repo_find_unique_abbrev_r
DCL05-C	commit.c	1280	1	Use typedefs to improve code readability
DCL01-C	commit.c	1300	70	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	1311	59	Do not reuse variable names in subscopes: commit
INT01-C	commit.c	1328	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	commit.c	1328	15	Ensure that return values are compared against the proper type
INT01-C	commit.c	1329	8	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	commit.c	1329	8	Ensure that return values are compared against the proper type
INT01-C	commit.c	1330	8	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	commit.c	1330	8	Ensure that return values are compared against the proper type
INT01-C	commit.c	1331	8	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	commit.c	1331	8	Ensure that return values are compared against the proper type
INT01-C	commit.c	1332	8	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	commit.c	1332	8	Ensure that return values are compared against the proper type
DCL00-C	commit.c	1341	3	Const-qualify immutable objects: xlen
EXP36-C	commit.c	1380	3	Do not convert pointers into more strictly aligned pointer types
DCL01-C	commit.c	1403	74	Do not reuse variable names in subscopes: tree
INT13-C	commit.c	1464	26	Use bitwise operators only on unsigned operands
INT34-C	commit.c	1464	26	Do not shift a negative number of bits or more bits than exist in the operand
INT01-C	commit.c	1511	52	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	commit.c	1520	14	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	commit.c	1521	14	Avoid performing bitwise and arithmetic operations on the same data
STR11-C	commit.c	1527	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	commit.c	1533	29	Do not reuse variable names in subscopes: tree
INT01-C	commit.c	1599	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	commit.c	1599	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	commit.c	1599	1	Use typedefs to improve code readability
EXP36-C	commit.c	1599	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	commit.c	1599	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	commit.c	1599	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	commit.c	1600	49	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	commit.c	1602	60	Do not reuse variable names in subscopes: commit
DCL01-C	commit.c	1607	43	Do not reuse variable names in subscopes: commit
DCL00-C	commit.c	1611	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	commit.c	1611	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	commit.c	1619	2	Do not reuse variable names in subscopes: commit
EXP11-C	commit.c	1624	11	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	commit.c	1647	56	Do not reuse variable names in subscopes: commit
EXP36-C	commit.c	1650	42	Do not convert pointers into more strictly aligned pointer types
DCL00-C	commit.c	1660	2	Const-qualify immutable objects: key_len
DCL01-C	commit.c	1671	3	Do not reuse variable names in subscopes: eol
DCL00-C	commit.c	1706	2	Const-qualify immutable objects: cutoff
DCL00-C	commit.c	1741	2	Const-qualify immutable objects: args
EXP12-C	commit.c	1744	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	commit.c	1752	2	Do not ignore values returned by functions: __builtin_va_start
EXP11-C	commit.c	1753	16	Do not apply operators expecting one type to data of an incompatible type
INT36-C	commit.c	1753	16	Take care when converting from pointer to integer or integer to pointer
EXP12-C	commit.c	1755	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	compaterminal.c	15	2	Do not ignore values returned by functions: raise
EXP12-C	compaterminal.c	34	2	Do not ignore values returned by functions: write_in_full
EXP12-C	compaterminal.c	35	2	Do not ignore values returned by functions: write_in_full
EXP12-C	compaterminal.c	36	2	Do not ignore values returned by functions: write_in_full
DCL00-C	compaterminal.c	41	2	Const-qualify immutable objects: saved_errno
EXP12-C	compaterminal.c	48	2	Do not ignore values returned by functions: sigaction
EXP12-C	compaterminal.c	49	2	Do not ignore values returned by functions: raise
EXP12-C	compaterminal.c	50	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	compaterminal.c	51	2	Do not ignore values returned by functions: sigaddset
EXP12-C	compaterminal.c	52	2	Do not ignore values returned by functions: sigprocmask
EXP12-C	compaterminal.c	54	2	Do not ignore values returned by functions: sigprocmask
EXP12-C	compaterminal.c	55	2	Do not ignore values returned by functions: sigaction
DCL00-C	compaterminal.c	61	2	Const-qualify immutable objects: saved_errno
EXP12-C	compaterminal.c	75	2	Do not ignore values returned by functions: sigaction
EXP12-C	compaterminal.c	76	2	Do not ignore values returned by functions: raise
EXP12-C	compaterminal.c	77	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	compaterminal.c	78	2	Do not ignore values returned by functions: sigaddset
EXP12-C	compaterminal.c	79	2	Do not ignore values returned by functions: sigprocmask
EXP12-C	compaterminal.c	81	2	Do not ignore values returned by functions: sigprocmask
EXP12-C	compaterminal.c	82	2	Do not ignore values returned by functions: sigaction
EXP12-C	compaterminal.c	92	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	compaterminal.c	93	2	Do not ignore values returned by functions: sigaddset
EXP12-C	compaterminal.c	97	2	Do not ignore values returned by functions: sigaction
EXP12-C	compaterminal.c	100	2	Do not ignore values returned by functions: sigprocmask
EXP12-C	compaterminal.c	102	2	Do not ignore values returned by functions: sigprocmask
EXP12-C	compaterminal.c	107	2	Do not ignore values returned by functions: sigaction
EXP12-C	compaterminal.c	115	3	Do not ignore values returned by functions: signal
EXP12-C	compaterminal.c	116	3	Do not ignore values returned by functions: signal
EXP12-C	compaterminal.c	117	3	Do not ignore values returned by functions: signal
EXP12-C	compaterminal.c	136	2	Do not ignore values returned by functions: tcsetattr
EXP12-C	compaterminal.c	162	2	Do not ignore values returned by functions: sigaction
EXP12-C	compaterminal.c	171	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	compaterminal.c	172	2	Do not ignore values returned by functions: sigaddset
EXP12-C	compaterminal.c	173	2	Do not ignore values returned by functions: sigaddset
EXP12-C	compaterminal.c	174	2	Do not ignore values returned by functions: sigaddset
EXP12-C	compaterminal.c	175	2	Do not ignore values returned by functions: sigaction
EXP12-C	compaterminal.c	176	2	Do not ignore values returned by functions: sigaction
EXP12-C	compaterminal.c	177	2	Do not ignore values returned by functions: sigaction
INT13-C	compaterminal.c	191	12	Use bitwise operators only on unsigned operands
INT13-C	compaterminal.c	191	15	Use bitwise operators only on unsigned operands
MSC12-C	compaterminal.c	233	2	Detect and remove code that has no effect
INT13-C	compaterminal.c	233	2	Use bitwise operators only on unsigned operands
INT14-C	compaterminal.c	233	2	Avoid performing bitwise and arithmetic operations on the same data
EXP12-C	compaterminal.c	454	3	Do not ignore values returned by functions: _IO_putc
DCL01-C	compaterminal.c	496	3	Do not reuse variable names in subscopes: eol
INT07-C	compaterminal.c	516	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	compaterminal.c	517	10	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	compaterminal.c	518	5	Const-qualify immutable objects: flex_array_len_
EXP36-C	compaterminal.c	518	5	Do not convert pointers into more strictly aligned pointer types
INT01-C	compaterminal.c	563	31	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	connect.c	47	38	Do not reuse variable names in subscopes: ref
INT01-C	connect.c	73	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	connect.c	90	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	connect.c	106	16	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	connect.c	140	2	Strive for logical completeness
MSC01-C	connect.c	153	2	Strive for logical completeness
EXP12-C	connect.c	159	3	Do not ignore values returned by functions: packet_reader_read
INT07-C	connect.c	185	14	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	connect.c	194	2	Only free memory allocated dynamically
DCL01-C	connect.c	198	56	Do not reuse variable names in subscopes: ref
DCL00-C	connect.c	229	2	Const-qualify immutable objects: nul_location
MEM34-C	connect.c	241	3	Only free memory allocated dynamically
INT01-C	connect.c	264	19	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	connect.c	264	19	Ensure that return values are compared against the proper type
DCL05-C	connect.c	269	1	Use typedefs to improve code readability
DCL01-C	connect.c	288	3	Do not reuse variable names in subscopes: ref
MSC01-C	connect.c	338	3	Strive for logical completeness
MSC01-C	connect.c	352	3	Strive for logical completeness
DCL05-C	connect.c	381	1	Use typedefs to improve code readability
DCL01-C	connect.c	387	2	Do not reuse variable names in subscopes: ref
INT01-C	connect.c	411	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	connect.c	434	11	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	connect.c	457	4	Only free memory allocated dynamically
DCL01-C	connect.c	468	22	Do not reuse variable names in subscopes: error
INT01-C	connect.c	515	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	connect.c	526	32	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	connect.c	650	44	Do not reuse variable names in subscopes: protocol
INT07-C	connect.c	693	10	Use only explicitly signed or unsigned char type for numeric values
DCL05-C	connect.c	707	1	Use typedefs to improve code readability
DCL00-C	connect.c	713	3	Const-qualify immutable objects: portnr
INT07-C	connect.c	715	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	connect.c	718	11	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	connect.c	759	2	Do not ignore values returned by functions: memset
DCL13-C	connect.c	895	52	Declare function parameters that are pointers to values not changed by the function as const: conn
DCL00-C	connect.c	902	2	Const-qualify immutable objects: sockfd
DCL00-C	connect.c	921	3	Const-qualify immutable objects: rhost_len
EXP05-C	connect.c	966	40	Do not cast away a const qualification
EXP36-C	connect.c	982	17	Do not convert pointers into more strictly aligned pointer types
EXP12-C	connect.c	984	2	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	985	2	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	986	2	Do not ignore values returned by functions: strvec_push
DCL00-C	connect.c	1002	3	Const-qualify immutable objects: port
INT07-C	connect.c	1004	7	Use only explicitly signed or unsigned char type for numeric values
DCL05-C	connect.c	1016	1	Use typedefs to improve code readability
DCL01-C	connect.c	1023	2	Do not reuse variable names in subscopes: protocol
INT07-C	connect.c	1032	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	connect.c	1077	7	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	connect.c	1081	2	Only free memory allocated dynamically
DCL01-C	connect.c	1107	52	Do not reuse variable names in subscopes: ssh_variant
DCL01-C	connect.c	1131	2	Do not reuse variable names in subscopes: ssh_variant
EXP05-C	connect.c	1148	23	Do not cast away a const qualification
MEM01-C	connect.c	1154	4	Store a new value in pointers immediately after free()
MEM34-C	connect.c	1154	4	Only free memory allocated dynamically
MEM34-C	connect.c	1156	4	Only free memory allocated dynamically
MEM34-C	connect.c	1171	2	Only free memory allocated dynamically
ENV30-C	connect.c	1193	22	Do not modify the string returned by getenv()
MEM01-C	connect.c	1232	2	Store a new value in pointers immediately after free()
MEM34-C	connect.c	1232	2	Only free memory allocated dynamically
EXP12-C	connect.c	1247	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	1248	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	1249	3	Do not ignore values returned by functions: strvec_pushf
MSC01-C	connect.c	1254	3	Strive for logical completeness
EXP12-C	connect.c	1263	4	Do not ignore values returned by functions: strvec_push
MSC01-C	connect.c	1266	3	Strive for logical completeness
EXP12-C	connect.c	1275	4	Do not ignore values returned by functions: strvec_push
MSC01-C	connect.c	1283	3	Strive for logical completeness
EXP12-C	connect.c	1289	4	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	1294	4	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	1297	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	1335	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	1336	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	1339	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	1344	2	Do not ignore values returned by functions: strvec_push
EXP12-C	connect.c	1347	2	Do not ignore values returned by functions: strvec_push
DCL01-C	connect.c	1366	2	Do not reuse variable names in subscopes: protocol
EXP12-C	connect.c	1380	2	Do not ignore values returned by functions: signal
EXP36-C	connect.c	1396	17	Do not convert pointers into more strictly aligned pointer types
EXP12-C	connect.c	1408	4	Do not ignore values returned by functions: strvec_push
MEM01-C	connect.c	1428	5	Store a new value in pointers immediately after free()
MEM34-C	connect.c	1428	5	Only free memory allocated dynamically
MEM01-C	connect.c	1429	5	Store a new value in pointers immediately after free()
MEM34-C	connect.c	1429	5	Only free memory allocated dynamically
MEM01-C	connect.c	1430	5	Store a new value in pointers immediately after free()
MEM34-C	connect.c	1430	5	Only free memory allocated dynamically
EXP12-C	connect.c	1440	5	Do not ignore values returned by functions: strvec_pushf
EXP12-C	connect.c	1445	3	Do not ignore values returned by functions: strvec_push
MEM01-C	connect.c	1454	2	Store a new value in pointers immediately after free()
MEM34-C	connect.c	1454	2	Only free memory allocated dynamically
MEM34-C	connect.c	1455	2	Only free memory allocated dynamically
DCL01-C	connected.c	30	2	Do not reuse variable names in subscopes: transport
INT01-C	connected.c	46	35	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	connected.c	46	35	Ensure that return values are compared against the proper type
EXP12-C	connected.c	93	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connected.c	94	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connected.c	96	2	Do not ignore values returned by functions: strvec_push
EXP12-C	connected.c	97	2	Do not ignore values returned by functions: strvec_push
EXP12-C	connected.c	98	2	Do not ignore values returned by functions: strvec_push
EXP12-C	connected.c	102	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connected.c	106	3	Do not ignore values returned by functions: strvec_push
EXP12-C	connected.c	108	2	Do not ignore values returned by functions: strvec_push
EXP12-C	connected.c	109	2	Do not ignore values returned by functions: strvec_push
EXP12-C	connected.c	127	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	connected.c	156	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	convert.c	39	2	Do not ignore values returned by functions: memset
DCL00-C	convert.c	42	3	Const-qualify immutable objects: c
DCL00-C	convert.c	114	2	Const-qualify immutable objects: convert_stats
MEM34-C	convert.c	137	2	Only free memory allocated dynamically
MSC01-C	convert.c	166	2	Strive for logical completeness
INT13-C	convert.c	195	18	Use bitwise operators only on unsigned operands
INT13-C	convert.c	197	23	Use bitwise operators only on unsigned operands
INT13-C	convert.c	205	18	Use bitwise operators only on unsigned operands
INT13-C	convert.c	207	23	Use bitwise operators only on unsigned operands
MEM34-C	convert.c	233	2	Only free memory allocated dynamically
EXP12-C	convert.c	266	3	Do not ignore values returned by functions: skip_prefix
DCL00-C	convert.c	283	4	Const-qualify immutable objects: stripped_len
INT01-C	convert.c	319	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	325	24	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	convert.c	377	32	Use bitwise operators only on unsigned operands
MSC12-C	convert.c	412	4	Detect and remove code that has no effect
MEM34-C	convert.c	456	3	Only free memory allocated dynamically
INT01-C	convert.c	459	43	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	convert.c	479	3	Detect and remove code that has no effect
INT01-C	convert.c	484	43	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	convert.c	521	21	Use bitwise operators only on unsigned operands
INT13-C	convert.c	525	19	Use bitwise operators only on unsigned operands
INT01-C	convert.c	526	43	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	convert.c	526	20	Use bitwise operators only on unsigned operands
DCL00-C	convert.c	562	4	Const-qualify immutable objects: c
INT07-C	convert.c	564	12	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	convert.c	568	4	Const-qualify immutable objects: c
INT01-C	convert.c	569	27	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	convert.c	570	12	Use only explicitly signed or unsigned char type for numeric values
INT01-C	convert.c	594	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	605	7	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	convert.c	610	2	Only free memory allocated dynamically
DCL01-C	convert.c	627	2	Do not reuse variable names in subscopes: child_process
EXP12-C	convert.c	647	2	Do not ignore values returned by functions: strvec_push
EXP12-C	convert.c	658	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	convert.c	677	2	Do not ignore values returned by functions: sigchain_pop
DCL01-C	convert.c	698	2	Do not reuse variable names in subscopes: async
EXP12-C	convert.c	701	2	Do not ignore values returned by functions: memset
EXP11-C	convert.c	753	30	Do not apply operators expecting one type to data of an incompatible type
MSC12-C	convert.c	777	3	Detect and remove code that has no effect
MEM01-C	convert.c	779	3	Store a new value in pointers immediately after free()
EXP11-C	convert.c	802	11	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	convert.c	808	18	Do not convert pointers into more strictly aligned pointer types
MEM34-C	convert.c	812	4	Only free memory allocated dynamically
EXP12-C	convert.c	828	2	Do not ignore values returned by functions: sigchain_push
MSC12-C	convert.c	830	2	Detect and remove code that has no effect
EXP06-C	convert.c	830	2	Operands to the sizeof operator should not contain side effects
EXP06-C	convert.c	830	2	Operands to the sizeof operator should not contain side effects
INT01-C	convert.c	830	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	830	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	830	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	830	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	835	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	835	45	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	convert.c	837	3	Detect and remove code that has no effect
EXP12-C	convert.c	891	3	Do not ignore values returned by functions: string_list_insert
EXP12-C	convert.c	892	3	Do not ignore values returned by functions: string_list_insert
EXP12-C	convert.c	912	2	Do not ignore values returned by functions: sigchain_pop
MSC12-C	convert.c	932	2	Detect and remove code that has no effect
EXP11-C	convert.c	933	10	Do not apply operators expecting one type to data of an incompatible type
MSC12-C	convert.c	935	3	Detect and remove code that has no effect
EXP12-C	convert.c	940	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	convert.c	966	2	Do not ignore values returned by functions: sigchain_pop
DCL13-C	convert.c	1011	74	Declare function parameters that are pointers to values not changed by the function as const: cb
EXP36-C	convert.c	1027	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	convert.c	1122	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1125	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1126	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1136	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1164	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1164	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1164	53	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1171	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1175	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1181	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1190	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1210	8	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	convert.c	1224	2	Only free memory allocated dynamically
DCL01-C	convert.c	1228	68	Do not reuse variable names in subscopes: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL01-C	convert.c	1246	77	Do not reuse variable names in subscopes: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL01-C	convert.c	1263	60	Do not reuse variable names in subscopes: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL01-C	convert.c	1276	78	Do not reuse variable names in subscopes: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL01-C	convert.c	1289	57	Do not reuse variable names in subscopes: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL02-C	convert.c	1296	1	Use visually distinct identifiers: check
DCL00-C	convert.c	1319	3	Const-qualify immutable objects: eol_attr
EXP05-C	convert.c	1353	8	Do not cast away a const qualification
MEM34-C	convert.c	1354	3	Only free memory allocated dynamically
MSC01-C	convert.c	1384	2	Strive for logical completeness
INT13-C	convert.c	1414	6	Use bitwise operators only on unsigned operands
INT14-C	convert.c	1414	6	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	convert.c	1423	6	Use bitwise operators only on unsigned operands
INT13-C	convert.c	1429	19	Use bitwise operators only on unsigned operands
INT13-C	convert.c	1430	7	Use bitwise operators only on unsigned operands
INT13-C	convert.c	1436	13	Use bitwise operators only on unsigned operands
MSC12-C	convert.c	1446	2	Detect and remove code that has no effect
EXP12-C	convert.c	1451	2	Do not ignore values returned by functions: encode_to_git
EXP12-C	convert.c	1452	2	Do not ignore values returned by functions: crlf_to_git
EXP12-C	convert.c	1453	2	Do not ignore values returned by functions: ident_to_git
INT13-C	convert.c	1465	6	Use bitwise operators only on unsigned operands
INT13-C	convert.c	1476	7	Use bitwise operators only on unsigned operands
INT13-C	convert.c	1483	6	Use bitwise operators only on unsigned operands
INT14-C	convert.c	1489	13	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	convert.c	1494	13	Use bitwise operators only on unsigned operands
EXP36-C	convert.c	1504	16	Do not convert pointers into more strictly aligned pointer types
INT13-C	convert.c	1529	13	Use bitwise operators only on unsigned operands
DCL01-C	convert.c	1545	2	Do not reuse variable names in subscopes: free
DCL13-C	convert.c	1552	49	Declare function parameters that are pointers to values not changed by the function as const: filter
DCL13-C	convert.c	1571	48	Declare function parameters that are pointers to values not changed by the function as const: filter
DCL13-C	convert.c	1585	49	Declare function parameters that are pointers to values not changed by the function as const: filter
EXP11-C	convert.c	1606	41	Do not apply operators expecting one type to data of an incompatible type
INT01-C	convert.c	1625	12	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	convert.c	1635	4	Const-qualify immutable objects: ch
INT07-C	convert.c	1638	17	Use only explicitly signed or unsigned char type for numeric values
INT07-C	convert.c	1645	17	Use only explicitly signed or unsigned char type for numeric values
INT07-C	convert.c	1674	21	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	convert.c	1682	2	Store a new value in pointers immediately after free()
EXP36-C	convert.c	1692	48	Do not convert pointers into more strictly aligned pointer types
EXP11-C	convert.c	1714	31	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	convert.c	1716	2	Const-qualify immutable objects: sz
INT01-C	convert.c	1732	38	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	convert.c	1749	4	Const-qualify immutable objects: fed
EXP11-C	convert.c	1775	31	Do not apply operators expecting one type to data of an incompatible type
MEM01-C	convert.c	1778	2	Store a new value in pointers immediately after free()
EXP36-C	convert.c	1796	19	Do not convert pointers into more strictly aligned pointer types
EXP11-C	convert.c	1849	31	Do not apply operators expecting one type to data of an incompatible type
STR11-C	convert.c	1850	2	Do not specify the dimension of a character array initialized with a string literal
INT01-C	convert.c	1866	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1888	46	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1895	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	convert.c	1903	36	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	convert.c	1928	31	Do not apply operators expecting one type to data of an incompatible type
MEM01-C	convert.c	1930	2	Store a new value in pointers immediately after free()
EXP36-C	convert.c	1940	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	convert.c	1942	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	convert.c	2002	2	Do not ignore values returned by functions: memset
DCL00-C	copy.c	7	3	Const-qualify immutable objects: len
MSC01-C	copy.c	43	2	Strive for logical completeness
DCL00-C	copy.c	63	2	Const-qualify immutable objects: status
EXP36-C	credential.c	47	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	credential.c	91	25	Do not convert pointers into more strictly aligned pointer types
MEM01-C	credential.c	132	2	Store a new value in pointers immediately after free()
MEM34-C	credential.c	132	2	Only free memory allocated dynamically
INT13-C	credential.c	197	22	Use bitwise operators only on unsigned operands
INT07-C	credential.c	219	12	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	credential.c	281	2	Do not ignore values returned by functions: strvec_push
EXP12-C	credential.c	293	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	credential.c	296	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	credential.c	304	4	Do not ignore values returned by functions: finish_command
INT01-C	credential.c	343	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	credential.c	344	3	Do not ignore values returned by functions: credential_do
INT01-C	credential.c	368	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	credential.c	369	3	Do not ignore values returned by functions: credential_do
INT01-C	credential.c	379	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	credential.c	380	3	Do not ignore values returned by functions: credential_do
INT07-C	credential.c	486	9	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	csum-file.c	18	2	Const-qualify immutable objects: ret
DCL00-C	csum-file.c	45	2	Const-qualify immutable objects: offset
MEM01-C	csum-file.c	58	2	Store a new value in pointers immediately after free()
DCL00-C	csum-file.c	82	3	Const-qualify immutable objects: cnt
INT01-C	csum-file.c	98	33	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	csum-file.c	99	3	Const-qualify immutable objects: nr
INT01-C	csum-file.c	104	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	csum-file.c	126	9	Do not cast away a const qualification
EXP36-C	csum-file.c	148	30	Do not convert pointers into more strictly aligned pointer types
DCL00-C	csum-file.c	195	2	Const-qualify immutable objects: offset
DCL00-C	csum-file.c	222	2	Const-qualify immutable objects: data_len
DCL02-C	ctype.c	20	1	Use visually distinct identifiers: sane_ctype
DCL02-C	ctype.c	33	1	Use visually distinct identifiers: tolower_trans_tbl
DCL01-C	date.c	13	38	Do not reuse variable names in subscopes: tm
DCL00-C	date.c	18	2	Const-qualify immutable objects: year
DCL00-C	date.c	19	2	Const-qualify immutable objects: month
DCL01-C	date.c	43	37	Do not reuse variable names in subscopes: time
INT32-C	date.c	47	21	Ensure that operations on signed integers do not result in overflow
INT32-C	date.c	49	21	Ensure that operations on signed integers do not result in overflow
INT01-C	date.c	52	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	date.c	52	7	Use rsize_t or size_t for all integer values representing the size of an object
INT32-C	date.c	55	20	Ensure that operations on signed integers do not result in overflow
DCL01-C	date.c	68	42	Do not reuse variable names in subscopes: time
DCL01-C	date.c	68	67	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	74	48	Do not reuse variable names in subscopes: time
DCL01-C	date.c	74	65	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	84	53	Do not reuse variable names in subscopes: tm
EXP12-C	date.c	89	2	Do not ignore values returned by functions: localtime_r
ERR33-C	date.c	91	14	Ensure that return values are compared against the proper type
MSC05-C	date.c	93	14	Do not manipulate time_t typed values directly
MSC05-C	date.c	95	14	Do not manipulate time_t typed values directly
MSC05-C	date.c	98	20	Do not manipulate time_t typed values directly
DCL01-C	date.c	109	39	Do not reuse variable names in subscopes: time
DCL01-C	date.c	111	2	Do not reuse variable names in subscopes: tm
INT05-C	date.c	125	17	Use strtol() or a related function to convert a string token to an integer
DCL01-C	date.c	132	37	Do not reuse variable names in subscopes: time
DCL00-C	date.c	185	3	Const-qualify immutable objects: totalmonths
DCL00-C	date.c	186	3	Const-qualify immutable objects: years
DCL00-C	date.c	187	3	Const-qualify immutable objects: months
DCL01-C	date.c	216	62	Do not reuse variable names in subscopes: time
DCL01-C	date.c	216	79	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	219	3	Do not reuse variable names in subscopes: time
DCL01-C	date.c	219	3	Do not reuse variable names in subscopes: tz
DCL01-C	date.c	283	35	Do not reuse variable names in subscopes: time
DCL01-C	date.c	285	2	Do not reuse variable names in subscopes: tm
DCL00-C	date.c	342	3	Const-qualify immutable objects: sign
INT07-C	date.c	342	3	Use only explicitly signed or unsigned char type for numeric values
INT13-C	date.c	431	8	Use bitwise operators only on unsigned operands
DCL01-C	date.c	450	53	Do not reuse variable names in subscopes: tm
DCL00-C	date.c	455	3	Const-qualify immutable objects: match
DCL00-C	date.c	463	3	Const-qualify immutable objects: match
INT01-C	date.c	470	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	date.c	471	3	Const-qualify immutable objects: match
INT01-C	date.c	472	27	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	date.c	500	93	Do not reuse variable names in subscopes: tm
ERR33-C	date.c	531	18	Ensure that return values are compared against the proper type
MSC05-C	date.c	531	46	Do not manipulate time_t typed values directly
MSC05-C	date.c	531	33	Do not manipulate time_t typed values directly
DCL01-C	date.c	542	69	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	556	37	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	562	32	Do not reuse variable names in subscopes: tm
MSC01-C	date.c	574	2	Strive for logical completeness
MSC05-C	date.c	593	7	Do not manipulate time_t typed values directly
DCL01-C	date.c	631	37	Do not reuse variable names in subscopes: tm
INT13-C	date.c	637	14	Use bitwise operators only on unsigned operands
INT13-C	date.c	636	15	Use bitwise operators only on unsigned operands
INT13-C	date.c	635	15	Use bitwise operators only on unsigned operands
INT13-C	date.c	634	14	Use bitwise operators only on unsigned operands
INT13-C	date.c	633	22	Use bitwise operators only on unsigned operands
DCL01-C	date.c	644	53	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	658	3	Do not reuse variable names in subscopes: time
MSC01-C	date.c	668	2	Strive for logical completeness
DCL00-C	date.c	674	4	Const-qualify immutable objects: match
DCL00-C	date.c	693	3	Const-qualify immutable objects: num1
DCL00-C	date.c	694	3	Const-qualify immutable objects: num2
DCL00-C	date.c	695	3	Const-qualify immutable objects: num3
DCL00-C	date.c	707	4	Const-qualify immutable objects: minutes
DCL00-C	date.c	708	4	Const-qualify immutable objects: hours
DCL00-C	date.c	756	2	Const-qualify immutable objects: n
INT32-C	date.c	783	13	Ensure that operations on signed integers do not result in overflow
INT32-C	date.c	794	12	Ensure that operations on signed integers do not result in overflow
INT32-C	date.c	821	9	Ensure that operations on signed integers do not result in overflow
DCL01-C	date.c	831	2	Do not reuse variable names in subscopes: tm
EXP12-C	date.c	841	2	Do not ignore values returned by functions: memset
DCL00-C	date.c	857	3	Const-qualify immutable objects: c
MSC05-C	date.c	889	26	Do not manipulate time_t typed values directly
MSC05-C	date.c	890	47	Do not manipulate time_t typed values directly
MSC05-C	date.c	890	34	Do not manipulate time_t typed values directly
MSC05-C	date.c	892	54	Do not manipulate time_t typed values directly
MSC05-C	date.c	892	32	Do not manipulate time_t typed values directly
EXP05-C	date.c	998	7	Do not cast away a const qualification
DCL01-C	date.c	1005	2	Do not reuse variable names in subscopes: tm
EXP12-C	date.c	1007	2	Do not ignore values returned by functions: time
MSC05-C	date.c	1009	48	Do not manipulate time_t typed values directly
DCL01-C	date.c	1019	36	Do not reuse variable names in subscopes: tm
MSC05-C	date.c	1033	17	Do not manipulate time_t typed values directly
EXP12-C	date.c	1034	2	Do not ignore values returned by functions: localtime_r
DCL01-C	date.c	1043	39	Do not reuse variable names in subscopes: tm
DCL00-C	date.c	1045	2	Const-qualify immutable objects: number
DCL01-C	date.c	1065	33	Do not reuse variable names in subscopes: tm
EXP12-C	date.c	1068	2	Do not ignore values returned by functions: update_tm
DCL01-C	date.c	1071	39	Do not reuse variable names in subscopes: tm
EXP12-C	date.c	1074	2	Do not ignore values returned by functions: update_tm
DCL01-C	date.c	1077	34	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	1086	38	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	1092	34	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	1098	33	Do not reuse variable names in subscopes: tm
DCL01-C	date.c	1104	32	Do not reuse variable names in subscopes: tm
DCL13-C	date.c	1104	47	Declare function parameters that are pointers to values not changed by the function as const: now
DCL00-C	date.c	1106	2	Const-qualify immutable objects: n
DCL01-C	date.c	1118	32	Do not reuse variable names in subscopes: tm
DCL13-C	date.c	1118	47	Declare function parameters that are pointers to values not changed by the function as const: now
DCL00-C	date.c	1120	2	Const-qualify immutable objects: n
DCL01-C	date.c	1132	35	Do not reuse variable names in subscopes: tm
DCL13-C	date.c	1132	50	Declare function parameters that are pointers to values not changed by the function as const: now
EXP12-C	date.c	1135	2	Do not ignore values returned by functions: localtime_r
DCL01-C	date.c	1171	67	Do not reuse variable names in subscopes: tm
DCL00-C	date.c	1182	3	Const-qualify immutable objects: match
DCL00-C	date.c	1191	3	Const-qualify immutable objects: len
DCL00-C	date.c	1201	4	Const-qualify immutable objects: len
DCL00-C	date.c	1217	3	Const-qualify immutable objects: len
EXP12-C	date.c	1219	4	Do not ignore values returned by functions: update_tm
DCL00-C	date.c	1228	3	Const-qualify immutable objects: match
EXP12-C	date.c	1238	4	Do not ignore values returned by functions: update_tm
EXP12-C	date.c	1246	3	Do not ignore values returned by functions: update_tm
EXP12-C	date.c	1259	3	Do not ignore values returned by functions: update_tm
DCL01-C	date.c	1269	67	Do not reuse variable names in subscopes: tm
DCL00-C	date.c	1273	2	Const-qualify immutable objects: number
MSC01-C	date.c	1275	2	Strive for logical completeness
DCL00-C	date.c	1281	4	Const-qualify immutable objects: match
DCL01-C	date.c	1300	2	Do not reuse variable names in subscopes: tm
EXP12-C	date.c	1304	2	Do not ignore values returned by functions: localtime_r
DCL00-C	date.c	1312	3	Const-qualify immutable objects: c
MSC05-C	date.c	1377	37	Do not manipulate time_t typed values directly
INT33-C	decorate.c	11	28	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL01-C	decorate.c	14	87	Do not reuse variable names in subscopes: decoration
DCL00-C	decorate.c	16	2	Const-qualify immutable objects: size
DCL00-C	decorate.c	22	4	Const-qualify immutable objects: old
DCL00-C	decorate.c	38	2	Const-qualify immutable objects: old_size
EXP36-C	decorate.c	42	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	decorate.c	47	3	Do not reuse variable names in subscopes: decoration
EXP12-C	decorate.c	51	3	Do not ignore values returned by functions: insert_decoration
MEM34-C	decorate.c	53	2	Only free memory allocated dynamically
DCL01-C	decorate.c	57	9	Do not reuse variable names in subscopes: decoration
DCL00-C	decorate.c	59	2	Const-qualify immutable objects: nr
MEM01-C	delta-islands.c	23	1	Store a new value in pointers immediately after free()
EXP12-C	delta-islands.c	23	1	Do not ignore values returned by functions: memset
INT01-C	delta-islands.c	23	1	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT14-C	delta-islands.c	23	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
EXP30-C	delta-islands.c	23	1	Do not depend on order of evaluation for side effects
MSC12-C	delta-islands.c	23	1	Detect and remove code that has no effect
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
EXP36-C	delta-islands.c	23	1	Do not convert pointers into more strictly aligned pointer types
EXP12-C	delta-islands.c	23	1	Do not ignore values returned by functions: memset
INT01-C	delta-islands.c	23	1	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	delta-islands.c	23	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	23	1	Do not convert pointers into more strictly aligned pointer types
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT14-C	delta-islands.c	23	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
EXP36-C	delta-islands.c	23	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	23	1	Do not convert pointers into more strictly aligned pointer types
DCL00-C	delta-islands.c	23	1	Const-qualify immutable objects: mask
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT14-C	delta-islands.c	23	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	23	1	Use bitwise operators only on unsigned operands
DCL00-C	delta-islands.c	47	2	Const-qualify immutable objects: size
INT01-C	delta-islands.c	47	45	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	delta-islands.c	48	35	Do not convert pointers into more strictly aligned pointer types
INT13-C	delta-islands.c	62	14	Use bitwise operators only on unsigned operands
INT13-C	delta-islands.c	74	22	Use bitwise operators only on unsigned operands
INT14-C	delta-islands.c	86	37	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	delta-islands.c	118	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	119	5	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	132	14	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	136	14	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	159	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	183	6	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	186	35	Do not convert pointers into more strictly aligned pointer types
INT01-C	delta-islands.c	197	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	delta-islands.c	214	5	Do not ignore values returned by functions: parse_object
EXP36-C	delta-islands.c	234	43	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	235	43	Do not convert pointers into more strictly aligned pointer types
DCL01-C	delta-islands.c	241	10	Do not reuse variable names in subscopes: progress
EXP36-C	delta-islands.c	259	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	delta-islands.c	275	3	Do not reuse variable names in subscopes: tree
EXP36-C	delta-islands.c	284	16	Do not convert pointers into more strictly aligned pointer types
MEM34-C	delta-islands.c	310	2	Only free memory allocated dynamically
INT13-C	delta-islands.c	333	2	Use bitwise operators only on unsigned operands
EXP36-C	delta-islands.c	333	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	delta-islands.c	333	2	Store a new value in pointers immediately after free()
MEM34-C	delta-islands.c	333	2	Only free memory allocated dynamically
EXP05-C	delta-islands.c	333	2	Do not cast away a const qualification
MEM01-C	delta-islands.c	333	2	Store a new value in pointers immediately after free()
MEM34-C	delta-islands.c	333	2	Only free memory allocated dynamically
EXP36-C	delta-islands.c	343	33	Do not convert pointers into more strictly aligned pointer types
INT01-C	delta-islands.c	351	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	351	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	351	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	351	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	351	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	351	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	351	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	351	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	351	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	delta-islands.c	351	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	delta-islands.c	378	2	Const-qualify immutable objects: pos
EXP36-C	delta-islands.c	385	7	Do not convert pointers into more strictly aligned pointer types
EXP36-C	delta-islands.c	395	33	Do not convert pointers into more strictly aligned pointer types
INT01-C	delta-islands.c	407	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	409	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	416	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	419	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	delta-islands.c	421	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	delta-islands.c	441	3	Const-qualify immutable objects: pos
EXP36-C	delta-islands.c	443	11	Do not convert pointers into more strictly aligned pointer types
DCL01-C	delta-islands.c	452	2	Do not reuse variable names in subscopes: ref
EXP36-C	delta-islands.c	455	2	Do not convert pointers into more strictly aligned pointer types
INT13-C	delta-islands.c	457	2	Use bitwise operators only on unsigned operands
EXP36-C	delta-islands.c	457	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	delta-islands.c	481	2	Only free memory allocated dynamically
DCL01-C	delta-islands.c	484	51	Do not reuse variable names in subscopes: progress
EXP12-C	delta-islands.c	492	2	Do not ignore values returned by functions: for_each_ref
DCL01-C	delta-islands.c	501	44	Do not reuse variable names in subscopes: commit
DCL00-C	delta-islands.c	503	2	Const-qualify immutable objects: pos
EXP36-C	delta-islands.c	507	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	delta-islands.c	509	3	Do not ignore values returned by functions: repo_parse_commit
DCL00-C	delta-islands.c	525	3	Const-qualify immutable objects: pos
DCL01-C	delta-islands.c	530	4	Do not reuse variable names in subscopes: bitmap
EXP36-C	delta-islands.c	530	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diagnose.c	29	36	Do not convert pointers into more strictly aligned pointer types
INT01-C	diagnose.c	36	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diagnose.c	49	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diagnose.c	59	23	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diagnose.c	118	2	Do not ignore values returned by functions: closedir
INT01-C	diagnose.c	145	25	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	diagnose.c	145	25	Ensure that return values are compared against the proper type
EXP12-C	diagnose.c	156	2	Do not ignore values returned by functions: closedir
DCL01-C	diagnose.c	159	53	Do not reuse variable names in subscopes: archiver_args
DCL00-C	diagnose.c	162	2	Const-qualify immutable objects: at_root
EXP12-C	diagnose.c	181	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	diagnose.c	207	2	Do not ignore values returned by functions: closedir
DCL01-C	diagnose.c	214	2	Do not reuse variable names in subscopes: archiver_args
EXP12-C	diagnose.c	252	2	Do not ignore values returned by functions: get_disk_info
EXP12-C	diagnose.c	254	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	diagnose.c	260	2	Do not ignore values returned by functions: dir_file_stats
EXP12-C	diagnose.c	261	2	Do not ignore values returned by functions: foreach_alt_odb
EXP12-C	diagnose.c	262	2	Do not ignore values returned by functions: strvec_push
EXP12-C	diagnose.c	267	2	Do not ignore values returned by functions: strvec_push
INT01-C	diagnose.c	271	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diagnose.c	286	22	Do not convert pointers into more strictly aligned pointer types
MSC12-C	diagnose.c	291	3	Detect and remove code that has no effect
EXP12-C	diagnose.c	302	3	Do not ignore values returned by functions: dup2
MEM01-C	diagnose.c	306	2	Store a new value in pointers immediately after free()
MEM34-C	diagnose.c	306	2	Only free memory allocated dynamically
DCL01-C	diff-delta.c	137	2	Do not reuse variable names in subscopes: index
INT34-C	diff-delta.c	158	18	Do not shift a negative number of bits or more bits than exist in the operand
INT34-C	diff-delta.c	159	12	Do not shift a negative number of bits or more bits than exist in the operand
INT01-C	diff-delta.c	163	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	164	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP09-C	diff-delta.c	165	8	malloc called using something other than sizeof()
EXP36-C	diff-delta.c	168	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff-delta.c	170	10	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diff-delta.c	172	2	Do not ignore values returned by functions: memset
INT01-C	diff-delta.c	172	24	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diff-delta.c	175	21	Do not convert pointers into more strictly aligned pointer types
MEM34-C	diff-delta.c	177	3	Only free memory allocated dynamically
MEM01-C	diff-delta.c	253	2	Store a new value in pointers immediately after free()
INT01-C	diff-delta.c	260	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	260	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	261	27	Use rsize_t or size_t for all integer values representing the size of an object
EXP09-C	diff-delta.c	262	8	malloc called using something other than sizeof()
MEM34-C	diff-delta.c	264	3	Only free memory allocated dynamically
EXP36-C	diff-delta.c	268	10	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff-delta.c	275	16	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff-delta.c	277	17	Do not convert pointers into more strictly aligned pointer types
MSC12-C	diff-delta.c	292	2	Detect and remove code that has no effect
MEM34-C	diff-delta.c	293	2	Only free memory allocated dynamically
DCL01-C	diff-delta.c	298	43	Do not reuse variable names in subscopes: index
MEM01-C	diff-delta.c	300	2	Store a new value in pointers immediately after free()
DCL01-C	diff-delta.c	303	54	Do not reuse variable names in subscopes: index
DCL01-C	diff-delta.c	318	40	Do not reuse variable names in subscopes: index
INT01-C	diff-delta.c	336	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	337	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	343	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	344	11	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	diff-delta.c	345	17	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	diff-delta.c	345	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	351	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	352	11	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	diff-delta.c	353	17	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	diff-delta.c	353	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	diff-delta.c	361	8	Do not cast away a const qualification
INT01-C	diff-delta.c	374	13	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	diff-delta.c	376	8	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	diff-delta.c	387	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	391	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	395	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	401	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	433	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	433	42	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	434	10	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	diff-delta.c	439	13	Use bitwise operators only on unsigned operands
INT14-C	diff-delta.c	440	19	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	diff-delta.c	441	13	Use bitwise operators only on unsigned operands
INT14-C	diff-delta.c	442	19	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	diff-delta.c	443	13	Use bitwise operators only on unsigned operands
INT14-C	diff-delta.c	444	19	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	diff-delta.c	445	13	Use bitwise operators only on unsigned operands
INT14-C	diff-delta.c	446	19	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	diff-delta.c	448	14	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	diff-delta.c	449	19	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	diff-delta.c	450	14	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	diff-delta.c	451	19	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	diff-delta.c	456	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	462	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	471	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	471	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	473	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	473	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	474	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-delta.c	475	13	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	diff-delta.c	480	5	Only free memory allocated dynamically
DCL01-C	diff-merges.c	68	57	Do not reuse variable names in subscopes: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL01-C	diff-merges.c	87	64	Do not reuse variable names in subscopes: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL00-C	diff-merges.c	89	2	Const-qualify immutable objects: func
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL00-C	diff-merges.c	103	2	Const-qualify immutable objects: func
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL01-C	diff-merges.c	120	2	Do not reuse variable names in subscopes: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
DCL02-C	diff-merges.c	120	2	Use visually distinct identifiers: optarg
MSC12-C	diff-lib.c	33	2	Detect and remove code that has no effect
EXP06-C	diff-lib.c	33	2	Operands to the sizeof operator should not contain side effects
DCL01-C	diff-lib.c	91	56	Do not reuse variable names in subscopes: option
DCL00-C	diff-lib.c	95	2	Const-qualify immutable objects: ce_option
DCL00-C	diff-lib.c	97	2	Const-qualify immutable objects: start
EXP36-C	diff-lib.c	134	19	Do not convert pointers into more strictly aligned pointer types
EXP11-C	diff-lib.c	135	18	Do not apply operators expecting one type to data of an incompatible type
INT07-C	diff-lib.c	139	26	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	diff-lib.c	141	4	Do not ignore values returned by functions: memset
INT01-C	diff-lib.c	142	45	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	diff-lib.c	168	6	Const-qualify immutable objects: mode
INT07-C	diff-lib.c	173	36	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	diff-lib.c	189	5	Store a new value in pointers immediately after free()
MEM31-C	diff-lib.c	189	5	Free dynamically allocated memory when no longer needed
MEM34-C	diff-lib.c	189	5	Only free memory allocated dynamically
MEM34-C	diff-lib.c	192	4	Only free memory allocated dynamically
MSC12-C	diff-lib.c	359	2	Detect and remove code that has no effect
DCL00-C	diff-lib.c	385	3	Const-qualify immutable objects: pathlen
EXP36-C	diff-lib.c	387	14	Do not convert pointers into more strictly aligned pointer types
EXP11-C	diff-lib.c	388	13	Do not apply operators expecting one type to data of an incompatible type
INT07-C	diff-lib.c	391	20	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	diff-lib.c	394	3	Do not ignore values returned by functions: memset
INT01-C	diff-lib.c	394	26	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	diff-lib.c	395	23	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff-lib.c	398	23	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	diff-lib.c	402	3	Only free memory allocated dynamically
DCL01-C	diff-lib.c	425	33	Do not reuse variable names in subscopes: tree
EXP36-C	diff-lib.c	427	27	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diff-lib.c	480	2	Do not ignore values returned by functions: show_modified
DCL01-C	diff-lib.c	502	2	Do not reuse variable names in subscopes: tree
EXP36-C	diff-lib.c	503	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	diff-lib.c	532	2	Do not reuse variable names in subscopes: tree
EXP12-C	diff-lib.c	540	2	Do not ignore values returned by functions: memset
DCL01-C	diff-lib.c	601	56	Do not reuse variable names in subscopes: option
DCL00-C	diff-lib.c	604	2	Const-qualify immutable objects: cached
DCL00-C	diff-lib.c	605	2	Const-qualify immutable objects: merge_base
EXP12-C	diff-lib.c	614	2	Do not ignore values returned by functions: trace_performance_enter
EXP12-C	diff-lib.c	662	2	Do not ignore values returned by functions: memset
EXP12-C	diff-lib.c	664	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	diff-lib.c	670	2	Do not ignore values returned by functions: run_diff_index
DCL13-C	diff-lib.c	676	60	Declare function parameters that are pointers to values not changed by the function as const: opt
DCL13-C	diff-lib.c	676	71	Declare function parameters that are pointers to values not changed by the function as const: data
EXP36-C	diff-lib.c	678	9	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diff-no-index.c	32	2	Do not ignore values returned by functions: closedir
STR11-C	diff-no-index.c	41	1	Do not specify the dimension of a character array initialized with a string literal
INT01-C	diff-no-index.c	72	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	diff-no-index.c	116	3	Do not ignore values returned by functions: diff_queue
INT01-C	diff-no-index.c	148	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-no-index.c	148	47	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-no-index.c	155	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-no-index.c	157	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-no-index.c	188	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-no-index.c	188	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-no-index.c	189	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-no-index.c	189	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	diff-no-index.c	194	3	Do not ignore values returned by functions: diff_queue
INT01-C	diff-no-index.c	205	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff-no-index.c	205	42	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	diff-no-index.c	268	2	Only free memory allocated dynamically
INT01-C	diff-no-index.c	312	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	diff.c	51	1	Use visually distinct identifiers: diff_auto_refresh_index
DCL02-C	diff.c	2501	1	Use visually distinct identifiers: mime_boundary_leader
DCL02-C	diff.c	5748	1	Use visually distinct identifiers: diff_queued_diff
INT01-C	diff.c	112	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	112	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	118	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	131	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	diff.c	170	2	Only free memory allocated dynamically
INT13-C	diff.c	240	30	Use bitwise operators only on unsigned operands
INT13-C	diff.c	240	19	Use bitwise operators only on unsigned operands
EXP05-C	diff.c	248	16	Do not cast away a const qualification
DCL13-C	diff.c	268	16	Declare function parameters that are pointers to values not changed by the function as const: cb
EXP12-C	diff.c	310	2	Do not ignore values returned by functions: string_list_split
INT13-C	diff.c	320	8	Use bitwise operators only on unsigned operands
INT13-C	diff.c	322	8	Use bitwise operators only on unsigned operands
INT13-C	diff.c	324	8	Use bitwise operators only on unsigned operands
INT13-C	diff.c	326	8	Use bitwise operators only on unsigned operands
INT13-C	diff.c	328	8	Use bitwise operators only on unsigned operands
INT13-C	diff.c	335	11	Use bitwise operators only on unsigned operands
INT13-C	diff.c	336	11	Use bitwise operators only on unsigned operands
INT13-C	diff.c	336	13	Use bitwise operators only on unsigned operands
INT13-C	diff.c	336	13	Use bitwise operators only on unsigned operands
INT13-C	diff.c	336	13	Use bitwise operators only on unsigned operands
MSC12-C	diff.c	337	3	Detect and remove code that has no effect
INT13-C	diff.c	338	7	Use bitwise operators only on unsigned operands
DCL00-C	diff.c	353	3	Const-qualify immutable objects: cm
DCL00-C	diff.c	360	3	Const-qualify immutable objects: cm
DCL00-C	diff.c	446	3	Const-qualify immutable objects: slot
DCL00-C	diff.c	455	3	Const-qualify immutable objects: val
DCL00-C	diff.c	489	2	Const-qualify immutable objects: need_one
DCL00-C	diff.c	490	2	Const-qualify immutable objects: need_two
EXP12-C	diff.c	495	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	diff.c	496	3	Do not ignore values returned by functions: quote_c_style
DCL01-C	diff.c	538	2	Do not reuse variable names in subscopes: tempfile
DCL01-C	diff.c	542	2	Do not reuse variable names in subscopes: color_diff
EXP12-C	diff.c	603	2	Do not ignore values returned by functions: diff_populate_filespec
DCL00-C	diff.c	610	2	Const-qualify immutable objects: size
DCL00-C	diff.c	637	2	Const-qualify immutable objects: ws_rule
EXP12-C	diff.c	695	2	Do not ignore values returned by functions: fwrite
EXP36-C	diff.c	795	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	diff.c	809	2	Store a new value in pointers immediately after free()
DCL00-C	diff.c	828	2	Const-qualify immutable objects: tab_width
INT33-C	diff.c	843	32	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL00-C	diff.c	868	2	Const-qualify immutable objects: a_width
DCL00-C	diff.c	868	2	Const-qualify immutable objects: b_width
DCL00-C	diff.c	881	2	Const-qualify immutable objects: a_width
DCL00-C	diff.c	881	2	Const-qualify immutable objects: b_width
EXP36-C	diff.c	922	39	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diff.c	924	2	Const-qualify immutable objects: flags
INT13-C	diff.c	925	7	Use bitwise operators only on unsigned operands
INT13-C	diff.c	925	7	Use bitwise operators only on unsigned operands
INT13-C	diff.c	925	7	Use bitwise operators only on unsigned operands
EXP05-C	diff.c	927	6	Do not cast away a const qualification
EXP05-C	diff.c	928	6	Do not cast away a const qualification
DCL00-C	diff.c	939	2	Const-qualify immutable objects: flags
INT13-C	diff.c	939	48	Use bitwise operators only on unsigned operands
INT13-C	diff.c	939	48	Use bitwise operators only on unsigned operands
INT13-C	diff.c	939	48	Use bitwise operators only on unsigned operands
DCL00-C	diff.c	940	2	Const-qualify immutable objects: hash
DCL01-C	diff.c	966	3	Do not reuse variable names in subscopes: key
EXP36-C	diff.c	981	7	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diff.c	986	4	Const-qualify immutable objects: new_nr
INT01-C	diff.c	986	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	986	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	986	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	986	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	986	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	986	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	986	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diff.c	986	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diff.c	986	4	Do not ignore values returned by functions: memset
INT01-C	diff.c	986	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diff.c	988	15	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	992	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	1056	3	Do not convert pointers into more strictly aligned pointer types
INT13-C	diff.c	1096	9	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1104	40	Use bitwise operators only on unsigned operands
INT14-C	diff.c	1104	40	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	diff.c	1104	43	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1104	44	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1153	13	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1188	13	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1190	14	Use bitwise operators only on unsigned operands
EXP12-C	diff.c	1193	2	Do not ignore values returned by functions: adjust_last_block
MEM34-C	diff.c	1195	2	Only free memory allocated dynamically
INT13-C	diff.c	1214	18	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1230	20	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1230	22	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1231	17	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1231	19	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1233	20	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1233	22	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1234	17	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1234	19	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1235	13	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1240	28	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1241	20	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1242	20	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1244	28	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1245	20	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1246	20	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1253	12	Use bitwise operators only on unsigned operands
DCL00-C	diff.c	1264	2	Const-qualify immutable objects: sign
DCL00-C	diff.c	1294	2	Const-qualify immutable objects: s
EXP12-C	diff.c	1303	3	Do not ignore values returned by functions: _IO_putc
DCL00-C	diff.c	1333	4	Const-qualify immutable objects: c
INT07-C	diff.c	1333	4	Use only explicitly signed or unsigned char type for numeric values
INT13-C	diff.c	1344	18	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1344	18	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1348	33	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1347	43	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1351	35	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1350	31	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1355	31	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1359	31	Use bitwise operators only on unsigned operands
DCL00-C	diff.c	1373	4	Const-qualify immutable objects: c
INT07-C	diff.c	1373	4	Use only explicitly signed or unsigned char type for numeric values
INT13-C	diff.c	1384	13	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1384	14	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1384	14	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1388	17	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1388	17	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1393	33	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1392	43	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1396	35	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1395	31	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1400	31	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1404	31	Use bitwise operators only on unsigned operands
DCL00-C	diff.c	1418	4	Const-qualify immutable objects: c
INT07-C	diff.c	1418	4	Use only explicitly signed or unsigned char type for numeric values
INT13-C	diff.c	1432	17	Use bitwise operators only on unsigned operands
INT13-C	diff.c	1432	17	Use bitwise operators only on unsigned operands
EXP12-C	diff.c	1483	3	Do not ignore values returned by functions: fputc
DCL00-C	diff.c	1602	2	Const-qualify immutable objects: flags
DCL00-C	diff.c	1609	2	Const-qualify immutable objects: flags
DCL00-C	diff.c	1624	2	Const-qualify immutable objects: org_len
INT01-C	diff.c	1683	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	1692	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	diff.c	1773	2	Do not ignore values returned by functions: memset
INT07-C	diff.c	1834	38	Use only explicitly signed or unsigned char type for numeric values
INT01-C	diff.c	1894	9	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diff.c	1960	39	Do not convert pointers into more strictly aligned pointer types
MSC12-C	diff.c	1966	2	Detect and remove code that has no effect
EXP12-C	diff.c	1988	3	Do not ignore values returned by functions: fn_out_diff_words_write_helper
EXP12-C	diff.c	1994	3	Do not ignore values returned by functions: fn_out_diff_words_write_helper
EXP12-C	diff.c	1999	3	Do not ignore values returned by functions: fn_out_diff_words_write_helper
EXP36-C	diff.c	2058	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	2067	3	Do not convert pointers into more strictly aligned pointer types
INT07-C	diff.c	2076	31	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	diff.c	2094	2	Detect and remove code that has no effect
EXP12-C	diff.c	2101	3	Do not ignore values returned by functions: fn_out_diff_words_write_helper
EXP12-C	diff.c	2112	2	Do not ignore values returned by functions: memset
EXP12-C	diff.c	2113	2	Do not ignore values returned by functions: memset
EXP12-C	diff.c	2129	3	Do not ignore values returned by functions: fn_out_diff_words_write_helper
EXP05-C	diff.c	2159	9	Do not cast away a const qualification
EXP36-C	diff.c	2193	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	2196	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	2201	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	diff.c	2218	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	2275	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	2276	11	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	diff.c	2277	3	Detect and remove code that has no effect
INT01-C	diff.c	2281	15	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diff.c	2301	34	Do not convert pointers into more strictly aligned pointer types
INT07-C	diff.c	2325	11	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	diff.c	2339	3	Const-qualify immutable objects: s
DCL00-C	diff.c	2395	2	Const-qualify immutable objects: len_a
DCL00-C	diff.c	2396	2	Const-qualify immutable objects: len_b
DCL00-C	diff.c	2399	2	Const-qualify immutable objects: qlen_b
EXP12-C	diff.c	2402	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	diff.c	2404	3	Do not ignore values returned by functions: quote_c_style
EXP36-C	diff.c	2471	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	2472	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	2488	32	Do not convert pointers into more strictly aligned pointer types
STR11-C	diff.c	2501	1	Do not specify the dimension of a character array initialized with a string literal
INT33-C	diff.c	2513	31	Ensure that division and remainder operations do not result in divide-by-zero errors
MSC12-C	diff.c	2550	3	Detect and remove code that has no effect
EXP06-C	diff.c	2550	3	Operands to the sizeof operator should not contain side effects
EXP12-C	diff.c	2589	2	Do not ignore values returned by functions: memset
DCL01-C	diff.c	2600	2	Do not reuse variable names in subscopes: graph_width
DCL00-C	diff.c	2620	3	Const-qualify immutable objects: change
DCL00-C	diff.c	2638	4	Const-qualify immutable objects: w
INT01-C	diff.c	2686	26	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	diff.c	2744	3	Const-qualify immutable objects: added
DCL00-C	diff.c	2745	3	Const-qualify immutable objects: deleted
DCL00-C	diff.c	2844	3	Const-qualify immutable objects: added
DCL00-C	diff.c	2845	3	Const-qualify immutable objects: deleted
DCL00-C	diff.c	2878	3	Const-qualify immutable objects: added
DCL00-C	diff.c	2879	3	Const-qualify immutable objects: deleted
EXP12-C	diff.c	2917	5	Do not ignore values returned by functions: _IO_putc
EXP12-C	diff.c	2921	5	Do not ignore values returned by functions: _IO_putc
DCL00-C	diff.c	2948	3	Const-qualify immutable objects: namelen
DCL00-C	diff.c	2958	4	Const-qualify immutable objects: newbaselen
DCL00-C	diff.c	2978	4	Const-qualify immutable objects: permille
INT33-C	diff.c	2978	38	Ensure that division and remainder operations do not result in divide-by-zero errors
EXP36-C	diff.c	2992	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	2993	33	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diff.c	3045	4	Do not ignore values returned by functions: diff_populate_filespec
EXP12-C	diff.c	3046	4	Do not ignore values returned by functions: diff_populate_filespec
EXP12-C	diff.c	3047	4	Do not ignore values returned by functions: diffcore_count_changes
EXP12-C	diff.c	3053	4	Do not ignore values returned by functions: diff_populate_filespec
EXP12-C	diff.c	3057	4	Do not ignore values returned by functions: diff_populate_filespec
EXP36-C	diff.c	3079	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diff.c	3092	2	Do not ignore values returned by functions: gather_dirstat
EXP36-C	diff.c	3123	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diff.c	3136	2	Do not ignore values returned by functions: gather_dirstat
MEM01-C	diff.c	3144	2	Store a new value in pointers immediately after free()
EXP36-C	diff.c	3192	29	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	3198	29	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diff.c	3199	2	Const-qualify immutable objects: marker_size
MSC12-C	diff.c	3206	2	Detect and remove code that has no effect
MEM01-C	diff.c	3225	3	Store a new value in pointers immediately after free()
MEM34-C	diff.c	3225	3	Only free memory allocated dynamically
EXP11-C	diff.c	3249	19	Do not apply operators expecting one type to data of an incompatible type
MEM34-C	diff.c	3283	4	Only free memory allocated dynamically
MEM01-C	diff.c	3291	3	Store a new value in pointers immediately after free()
MEM34-C	diff.c	3291	3	Only free memory allocated dynamically
MEM01-C	diff.c	3292	3	Store a new value in pointers immediately after free()
MEM34-C	diff.c	3292	3	Only free memory allocated dynamically
MEM01-C	diff.c	3299	3	Store a new value in pointers immediately after free()
MEM34-C	diff.c	3299	3	Only free memory allocated dynamically
MEM01-C	diff.c	3300	3	Store a new value in pointers immediately after free()
MEM34-C	diff.c	3300	3	Only free memory allocated dynamically
DCL00-C	diff.c	3309	3	Const-qualify immutable objects: bytes
INT07-C	diff.c	3313	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	3315	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	3320	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	3321	13	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	diff.c	3327	2	Only free memory allocated dynamically
EXP36-C	diff.c	3392	19	Do not convert pointers into more strictly aligned pointer types
EXP05-C	diff.c	3406	8	Do not cast away a const qualification
INT01-C	diff.c	3420	16	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	diff.c	3538	18	Use bitwise operators only on unsigned operands
EXP12-C	diff.c	3626	3	Do not ignore values returned by functions: memset
EXP12-C	diff.c	3627	3	Do not ignore values returned by functions: memset
EXP12-C	diff.c	3628	3	Do not ignore values returned by functions: memset
INT01-C	diff.c	3637	18	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	diff.c	3678	2	Store a new value in pointers immediately after free()
MEM34-C	diff.c	3678	2	Only free memory allocated dynamically
MEM34-C	diff.c	3679	2	Only free memory allocated dynamically
EXP12-C	diff.c	3753	3	Do not ignore values returned by functions: diff_populate_filespec
EXP12-C	diff.c	3754	3	Do not ignore values returned by functions: diff_populate_filespec
EXP12-C	diff.c	3768	3	Do not ignore values returned by functions: memset
EXP12-C	diff.c	3769	3	Do not ignore values returned by functions: memset
EXP12-C	diff.c	3820	2	Do not ignore values returned by functions: memset
EXP12-C	diff.c	3844	3	Do not ignore values returned by functions: memset
EXP12-C	diff.c	3845	3	Do not ignore values returned by functions: memset
DCL00-C	diff.c	3882	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	diff.c	3882	2	Do not convert pointers into more strictly aligned pointer types
EXP11-C	diff.c	3882	2	Do not apply operators expecting one type to data of an incompatible type
MEM01-C	diff.c	3892	3	Store a new value in pointers immediately after free()
STR05-C	diff.c	3995	2	Use pointers to const when referring to string literals
INT01-C	diff.c	4003	10	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	diff.c	4031	17	Use bitwise operators only on unsigned operands
EXP11-C	diff.c	4058	14	Do not apply operators expecting one type to data of an incompatible type
INT01-C	diff.c	4062	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4070	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	diff.c	4111	4	Do not ignore values returned by functions: munmap
INT01-C	diff.c	4114	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4203	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	diff.c	4209	2	Do not ignore values returned by functions: oid_to_hex_r
EXP12-C	diff.c	4210	2	Do not ignore values returned by functions: xsnprintf
MEM34-C	diff.c	4212	2	Only free memory allocated dynamically
EXP12-C	diff.c	4227	3	Do not ignore values returned by functions: xsnprintf
EXP12-C	diff.c	4228	3	Do not ignore values returned by functions: xsnprintf
EXP12-C	diff.c	4265	4	Do not ignore values returned by functions: xsnprintf
EXP12-C	diff.c	4285	2	Do not ignore values returned by functions: strvec_push
EXP12-C	diff.c	4286	2	Do not ignore values returned by functions: strvec_push
EXP12-C	diff.c	4287	2	Do not ignore values returned by functions: strvec_push
EXP12-C	diff.c	4307	2	Do not ignore values returned by functions: strvec_push
EXP12-C	diff.c	4308	2	Do not ignore values returned by functions: strvec_push
EXP12-C	diff.c	4316	4	Do not ignore values returned by functions: strvec_push
EXP12-C	diff.c	4317	4	Do not ignore values returned by functions: strvec_push
EXP12-C	diff.c	4321	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	diff.c	4323	2	Do not ignore values returned by functions: strvec_pushf
INT01-C	diff.c	4347	14	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	diff.c	4350	16	Use only explicitly signed or unsigned char type for numeric values
ARR30-C	diff.c	4350	7	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	diff.c	4378	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	diff.c	4380	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	diff.c	4388	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	diff.c	4391	3	Do not ignore values returned by functions: quote_c_style
DCL00-C	diff.c	4445	2	Const-qualify immutable objects: complete_rewrite
DCL05-C	diff.c	4499	1	Use typedefs to improve code readability
MEM01-C	diff.c	4553	3	Store a new value in pointers immediately after free()
MEM34-C	diff.c	4553	3	Only free memory allocated dynamically
MEM34-C	diff.c	4559	3	Only free memory allocated dynamically
INT07-C	diff.c	4627	51	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	4628	51	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	4629	55	Use only explicitly signed or unsigned char type for numeric values
INT13-C	diff.c	4647	20	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4649	3	Use bitwise operators only on unsigned operands
INT34-C	diff.c	4691	50	Do not shift a negative number of bits or more bits than exist in the operand
DCL00-C	diff.c	4708	2	Const-qualify immutable objects: check_mask
INT01-C	diff.c	4744	49	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	diff.c	4744	25	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4744	27	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4744	27	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4744	27	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4760	29	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4764	26	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4764	29	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4776	29	Use bitwise operators only on unsigned operands
DCL05-C	diff.c	4828	1	Use typedefs to improve code readability
DCL01-C	diff.c	4829	19	Do not reuse variable names in subscopes: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
EXP36-C	diff.c	4851	36	Do not convert pointers into more strictly aligned pointer types
DCL01-C	diff.c	4854	2	Do not reuse variable names in subscopes: graph_width
DCL01-C	diff.c	4916	54	Do not reuse variable names in subscopes: option
DCL01-C	diff.c	4917	17	Do not reuse variable names in subscopes: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
EXP36-C	diff.c	4919	35	Do not convert pointers into more strictly aligned pointer types
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
ARR30-C	diff.c	4936	50	Do not form or use out-of-bounds pointers or array subscripts
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
INT13-C	diff.c	4950	7	Use bitwise operators only on unsigned operands
DCL01-C	diff.c	4954	61	Do not reuse variable names in subscopes: option
EXP36-C	diff.c	4957	35	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diff.c	4958	2	Const-qualify immutable objects: val
DCL01-C	diff.c	4968	54	Do not reuse variable names in subscopes: option
EXP36-C	diff.c	4971	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	4979	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diff.c	4984	2	Do not ignore values returned by functions: oidset_insert
EXP36-C	diff.c	4991	36	Do not convert pointers into more strictly aligned pointer types
INT13-C	diff.c	4994	22	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4994	22	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4994	22	Use bitwise operators only on unsigned operands
INT13-C	diff.c	4994	22	Use bitwise operators only on unsigned operands
INT01-C	diff.c	4995	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4995	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4995	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4995	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4995	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4995	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4995	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4995	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	4995	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diff.c	4995	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5004	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5016	22	Do not convert pointers into more strictly aligned pointer types
INT13-C	diff.c	5033	20	Use bitwise operators only on unsigned operands
EXP36-C	diff.c	5053	36	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diff.c	5063	3	Const-qualify immutable objects: cm
EXP36-C	diff.c	5074	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5092	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5104	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5119	36	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diff.c	5120	2	Const-qualify immutable objects: value
INT13-C	diff.c	5128	2	Use bitwise operators only on unsigned operands
INT13-C	diff.c	5128	2	Use bitwise operators only on unsigned operands
INT13-C	diff.c	5129	20	Use bitwise operators only on unsigned operands
INT13-C	diff.c	5129	23	Use bitwise operators only on unsigned operands
INT13-C	diff.c	5129	24	Use bitwise operators only on unsigned operands
INT13-C	diff.c	5130	20	Use bitwise operators only on unsigned operands
EXP36-C	diff.c	5137	36	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diff.c	5146	2	Do not ignore values returned by functions: parse_dirstat_opt
EXP36-C	diff.c	5153	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5173	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5189	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5204	36	Do not convert pointers into more strictly aligned pointer types
DCL01-C	diff.c	5215	17	Do not reuse variable names in subscopes: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
EXP36-C	diff.c	5217	36	Do not convert pointers into more strictly aligned pointer types
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL01-C	diff.c	5227	22	Do not reuse variable names in subscopes: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
EXP36-C	diff.c	5229	36	Do not convert pointers into more strictly aligned pointer types
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
DCL02-C	diff.c	5227	22	Use visually distinct identifiers: optarg
EXP36-C	diff.c	5242	36	Do not convert pointers into more strictly aligned pointer types
MEM34-C	diff.c	5251	2	Only free memory allocated dynamically
EXP36-C	diff.c	5258	36	Do not convert pointers into more strictly aligned pointer types
INT13-C	diff.c	5263	22	Use bitwise operators only on unsigned operands
INT13-C	diff.c	5263	22	Use bitwise operators only on unsigned operands
INT13-C	diff.c	5263	22	Use bitwise operators only on unsigned operands
INT13-C	diff.c	5263	22	Use bitwise operators only on unsigned operands
INT01-C	diff.c	5269	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diff.c	5278	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5282	17	Do not convert pointers into more strictly aligned pointer types
INT01-C	diff.c	5285	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5285	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5285	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5285	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5285	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5285	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5285	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5285	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5285	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diff.c	5285	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5294	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5305	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5316	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5327	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5341	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5356	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5374	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5400	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5411	36	Do not convert pointers into more strictly aligned pointer types
INT13-C	diff.c	5602	3	Use bitwise operators only on unsigned operands
EXP36-C	diff.c	5692	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	diff.c	5692	2	Use rsize_t or size_t for all integer values representing the size of an object
FLP03-C	diff.c	5745	61	Detect and handle floating point errors
INT33-C	diff.c	5745	61	Ensure that division and remainder operations do not result in divide-by-zero errors
FLP03-C	diff.c	5745	55	Detect and handle floating point errors
EXP36-C	diff.c	5752	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	5760	36	Do not convert pointers into more strictly aligned pointer types
MEM01-C	diff.c	5772	2	Store a new value in pointers immediately after free()
INT01-C	diff.c	5788	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5818	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	5818	36	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	diff.c	5832	2	Const-qualify immutable objects: line_termination
DCL00-C	diff.c	5833	2	Const-qualify immutable objects: inter_name_termination
DCL00-C	diff.c	5900	2	Const-qualify immutable objects: include_conflict_headers
DCL00-C	diff.c	5956	2	Const-qualify immutable objects: include_conflict_headers
INT07-C	diff.c	6017	13	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	6019	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	6021	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	6023	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	6025	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	6043	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	6045	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	6047	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	diff.c	6054	14	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	diff.c	6059	4	Detect and remove code that has no effect
INT07-C	diff.c	6061	14	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	diff.c	6081	2	Const-qualify immutable objects: fmt
INT13-C	diff.c	6085	15	Use bitwise operators only on unsigned operands
EXP12-C	diff.c	6105	2	Do not ignore values returned by functions: quote_c_style
EXP12-C	diff.c	6121	4	Do not ignore values returned by functions: quote_c_style
EXP12-C	diff.c	6165	4	Do not ignore values returned by functions: quote_c_style
INT07-C	diff.c	6189	11	Use only explicitly signed or unsigned char type for numeric values
INT01-C	diff.c	6203	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	diff.c	6212	28	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diff.c	6233	2	Const-qualify immutable objects: len
EXP12-C	diff.c	6246	2	Do not ignore values returned by functions: memset
EXP12-C	diff.c	6257	3	Do not ignore values returned by functions: memset
EXP12-C	diff.c	6258	3	Do not ignore values returned by functions: memset
DCL00-C	diff.c	6339	2	Const-qualify immutable objects: result
STR11-C	diff.c	6372	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	diff.c	6375	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	diff.c	6378	1	Do not specify the dimension of a character array initialized with a string literal
EXP30-C	diff.c	6422	2	Do not depend on order of evaluation for side effects
EXP36-C	diff.c	6422	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diff.c	6422	2	Do not convert pointers into more strictly aligned pointer types
INT07-C	diff.c	6432	14	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	diff.c	6477	4	Only free memory allocated dynamically
EXP05-C	diff.c	6484	9	Do not cast away a const qualification
INT01-C	diff.c	6501	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	diff.c	6522	2	Const-qualify immutable objects: output_format
INT13-C	diff.c	6533	20	Use bitwise operators only on unsigned operands
INT13-C	diff.c	6548	20	Use bitwise operators only on unsigned operands
EXP05-C	diff.c	6763	36	Do not cast away a const qualification
EXP05-C	diff.c	6764	36	Do not cast away a const qualification
DCL01-C	diff.c	6789	38	Do not reuse variable names in subscopes: repository
EXP36-C	diff.c	6791	28	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diff.c	6812	2	Const-qualify immutable objects: output_formats_to_prefetch
INT13-C	diff.c	6827	30	Use bitwise operators only on unsigned operands
EXP12-C	diff.c	6913	2	Do not ignore values returned by functions: memset
EXP12-C	diff.c	6962	2	Do not ignore values returned by functions: diff_queue
INT01-C	diff.c	6983	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	6983	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	6984	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	6984	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	6985	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	6985	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	6986	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	diff.c	6986	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	diff.c	7041	2	Do not ignore values returned by functions: strvec_push
EXP12-C	diff.c	7042	2	Do not ignore values returned by functions: strvec_push
EXP12-C	diff.c	7100	3	Do not ignore values returned by functions: notes_cache_put
EXP12-C	diff.c	7108	3	Do not ignore values returned by functions: notes_cache_write
INT01-C	diff.c	7133	12	Use rsize_t or size_t for all integer values representing the size of an object
FLP03-C	diffcore-break.c	105	49	Detect and handle floating point errors
FLP03-C	diffcore-break.c	105	37	Detect and handle floating point errors
FLP03-C	diffcore-break.c	113	29	Detect and handle floating point errors
INT33-C	diffcore-break.c	113	29	Ensure that division and remainder operations do not result in divide-by-zero errors
FLP03-C	diffcore-break.c	113	17	Detect and handle floating point errors
FLP03-C	diffcore-break.c	119	45	Detect and handle floating point errors
MEM01-C	diffcore-break.c	220	5	Store a new value in pointers immediately after free()
MEM30-C	diffcore-break.c	220	5	Do not access freed memory
MEM34-C	diffcore-break.c	220	5	Only free memory allocated dynamically
MEM01-C	diffcore-break.c	267	2	Store a new value in pointers immediately after free()
MEM34-C	diffcore-break.c	267	2	Only free memory allocated dynamically
MEM34-C	diffcore-break.c	268	2	Only free memory allocated dynamically
DCL01-C	diffcore-delta.c	45	2	Do not reuse variable names in subscopes: free
DCL00-C	diffcore-delta.c	53	2	Const-qualify immutable objects: osz
DCL00-C	diffcore-delta.c	54	2	Const-qualify immutable objects: sz
EXP36-C	diffcore-delta.c	56	24	Do not convert pointers into more strictly aligned pointer types
INT14-C	diffcore-delta.c	59	21	Avoid performing bitwise and arithmetic operations on the same data
EXP12-C	diffcore-delta.c	60	2	Do not ignore values returned by functions: memset
INT01-C	diffcore-delta.c	60	56	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	diffcore-delta.c	66	10	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	diffcore-delta.c	90	9	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	diffcore-delta.c	112	29	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-delta.c	113	29	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-delta.c	135	16	Do not convert pointers into more strictly aligned pointer types
INT01-C	diffcore-delta.c	136	53	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	diffcore-delta.c	136	53	Use bitwise operators only on unsigned operands
INT34-C	diffcore-delta.c	136	53	Do not shift a negative number of bits or more bits than exist in the operand
INT14-C	diffcore-delta.c	138	13	Avoid performing bitwise and arithmetic operations on the same data
INT33-C	diffcore-delta.c	138	15	Ensure that division and remainder operations do not result in divide-by-zero errors
INT34-C	diffcore-delta.c	138	15	Do not shift a negative number of bits or more bits than exist in the operand
EXP12-C	diffcore-delta.c	139	2	Do not ignore values returned by functions: memset
INT01-C	diffcore-delta.c	139	61	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	diffcore-delta.c	139	61	Use bitwise operators only on unsigned operands
INT34-C	diffcore-delta.c	139	61	Do not shift a negative number of bits or more bits than exist in the operand
DCL00-C	diffcore-delta.c	144	3	Const-qualify immutable objects: c
DCL00-C	diffcore-delta.c	145	3	Const-qualify immutable objects: old_1
INT01-C	diffcore-delta.c	162	2	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	diffcore-delta.c	162	2	Use bitwise operators only on unsigned operands
DCL05-C	diffcore-delta.c	166	1	Use typedefs to improve code readability
EXP36-C	diffcore-delta.c	180	15	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-delta.c	187	15	Do not convert pointers into more strictly aligned pointer types
MEM01-C	diffcore-delta.c	227	3	Store a new value in pointers immediately after free()
MEM34-C	diffcore-delta.c	227	3	Only free memory allocated dynamically
MEM01-C	diffcore-delta.c	229	3	Store a new value in pointers immediately after free()
MEM34-C	diffcore-delta.c	229	3	Only free memory allocated dynamically
INT07-C	diffcore-order.c	42	10	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	diffcore-order.c	55	4	Do not convert pointers into more strictly aligned pointer types
INT07-C	diffcore-order.c	75	8	Use only explicitly signed or unsigned char type for numeric values
EXP05-C	diffcore-order.c	84	6	Do not cast away a const qualification
EXP05-C	diffcore-order.c	85	6	Do not cast away a const qualification
EXP36-C	diffcore-order.c	123	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-order.c	128	21	Do not convert pointers into more strictly aligned pointer types
MEM34-C	diffcore-order.c	129	2	Only free memory allocated dynamically
EXP36-C	diffcore-pickaxe.c	24	29	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diffcore-pickaxe.c	52	2	Do not ignore values returned by functions: memset
EXP12-C	diffcore-pickaxe.c	53	2	Do not ignore values returned by functions: memset
DCL00-C	diffcore-pickaxe.c	102	4	Const-qualify immutable objects: offset
INT01-C	diffcore-pickaxe.c	103	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	diffcore-pickaxe.c	103	15	Ensure that return values are compared against the proper type
INT01-C	diffcore-pickaxe.c	105	7	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	diffcore-pickaxe.c	117	31	Declare function parameters that are pointers to values not changed by the function as const: o
DCL00-C	diffcore-pickaxe.c	120	2	Const-qualify immutable objects: c1
DCL00-C	diffcore-pickaxe.c	121	2	Const-qualify immutable objects: c2
DCL00-C	diffcore-pickaxe.c	220	2	Const-qualify immutable objects: err
EXP12-C	diffcore-pickaxe.c	224	3	Do not ignore values returned by functions: regerror
DCL00-C	diffcore-pickaxe.c	232	2	Const-qualify immutable objects: opts
INT13-C	diffcore-pickaxe.c	237	11	Use bitwise operators only on unsigned operands
INT13-C	diffcore-pickaxe.c	240	11	Use bitwise operators only on unsigned operands
INT13-C	diffcore-pickaxe.c	243	11	Use bitwise operators only on unsigned operands
DCL00-C	diffcore-pickaxe.c	264	4	Const-qualify immutable objects: cflags
INT13-C	diffcore-pickaxe.c	264	29	Use bitwise operators only on unsigned operands
EXP12-C	diffcore-pickaxe.c	273	4	Do not ignore values returned by functions: kwsincr
EXP12-C	diffcore-pickaxe.c	274	4	Do not ignore values returned by functions: kwsprep
EXP36-C	diffcore-rename.c	37	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	56	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	62	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diffcore-rename.c	72	3	Const-qualify immutable objects: c1
DCL00-C	diffcore-rename.c	73	3	Const-qualify immutable objects: c2
EXP36-C	diffcore-rename.c	96	45	Do not convert pointers into more strictly aligned pointer types
FLP03-C	diffcore-rename.c	184	15	Detect and handle floating point errors
FLP03-C	diffcore-rename.c	184	56	Detect and handle floating point errors
FLP03-C	diffcore-rename.c	205	40	Detect and handle floating point errors
INT33-C	diffcore-rename.c	205	40	Ensure that division and remainder operations do not result in divide-by-zero errors
FLP03-C	diffcore-rename.c	205	28	Detect and handle floating point errors
EXP36-C	diffcore-rename.c	237	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	237	40	Do not convert pointers into more strictly aligned pointer types
DCL01-C	diffcore-rename.c	253	2	Do not reuse variable names in subscopes: index
DCL00-C	diffcore-rename.c	277	2	Const-qualify immutable objects: hash
EXP36-C	diffcore-rename.c	284	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	diffcore-rename.c	321	37	Do not reuse variable names in subscopes: index
EXP36-C	diffcore-rename.c	324	48	Do not convert pointers into more strictly aligned pointer types
INT07-C	diffcore-rename.c	384	9	Use only explicitly signed or unsigned char type for numeric values
EXP30-C	diffcore-rename.c	394	2	Do not depend on order of evaluation for side effects
EXP36-C	diffcore-rename.c	394	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	394	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diffcore-rename.c	396	3	Const-qualify immutable objects: count
STR05-C	diffcore-rename.c	405	1	Use pointers to const when referring to string literals
EXP30-C	diffcore-rename.c	412	2	Do not depend on order of evaluation for side effects
EXP36-C	diffcore-rename.c	412	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	412	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	diffcore-rename.c	414	3	Const-qualify immutable objects: count
EXP36-C	diffcore-rename.c	437	13	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	439	19	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diffcore-rename.c	441	3	Do not ignore values returned by functions: strmap_put
MEM01-C	diffcore-rename.c	563	2	Store a new value in pointers immediately after free()
MEM34-C	diffcore-rename.c	563	2	Only free memory allocated dynamically
MEM34-C	diffcore-rename.c	564	2	Only free memory allocated dynamically
EXP36-C	diffcore-rename.c	585	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	596	39	Do not convert pointers into more strictly aligned pointer types
EXP30-C	diffcore-rename.c	598	3	Do not depend on order of evaluation for side effects
EXP36-C	diffcore-rename.c	598	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	598	3	Do not convert pointers into more strictly aligned pointer types
DCL01-C	diffcore-rename.c	599	4	Do not reuse variable names in subscopes: dirname
MEM34-C	diffcore-rename.c	604	4	Only free memory allocated dynamically
EXP30-C	diffcore-rename.c	637	2	Do not depend on order of evaluation for side effects
EXP36-C	diffcore-rename.c	637	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	637	2	Do not convert pointers into more strictly aligned pointer types
EXP30-C	diffcore-rename.c	654	2	Do not depend on order of evaluation for side effects
EXP36-C	diffcore-rename.c	654	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	654	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	656	35	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diffcore-rename.c	660	3	Do not ignore values returned by functions: strmap_put
EXP30-C	diffcore-rename.c	670	2	Do not depend on order of evaluation for side effects
EXP36-C	diffcore-rename.c	670	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	670	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	671	35	Do not convert pointers into more strictly aligned pointer types
EXP30-C	diffcore-rename.c	717	2	Do not depend on order of evaluation for side effects
EXP36-C	diffcore-rename.c	717	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	717	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	719	35	Do not convert pointers into more strictly aligned pointer types
EXP12-C	diffcore-rename.c	722	4	Do not ignore values returned by functions: string_list_append
INT01-C	diffcore-rename.c	730	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	diffcore-rename.c	812	2	Store a new value in pointers immediately after free()
MEM34-C	diffcore-rename.c	812	2	Only free memory allocated dynamically
EXP36-C	diffcore-rename.c	834	46	Do not convert pointers into more strictly aligned pointer types
MSC12-C	diffcore-rename.c	866	3	Detect and remove code that has no effect
EXP06-C	diffcore-rename.c	866	3	Operands to the sizeof operator should not contain side effects
ARR30-C	diffcore-rename.c	881	18	Do not form or use out-of-bounds pointers or array subscripts
MSC12-C	diffcore-rename.c	960	3	Detect and remove code that has no effect
MSC12-C	diffcore-rename.c	1009	3	Detect and remove code that has no effect
EXP06-C	diffcore-rename.c	1009	3	Operands to the sizeof operator should not contain side effects
ARR30-C	diffcore-rename.c	1025	18	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	diffcore-rename.c	1083	2	Const-qualify immutable objects: rename_limit
DCL01-C	diffcore-rename.c	1154	27	Do not reuse variable names in subscopes: interesting
MSC12-C	diffcore-rename.c	1241	3	Detect and remove code that has no effect
MEM34-C	diffcore-rename.c	1252	4	Only free memory allocated dynamically
MEM34-C	diffcore-rename.c	1260	3	Only free memory allocated dynamically
EXP30-C	diffcore-rename.c	1273	2	Do not depend on order of evaluation for side effects
EXP36-C	diffcore-rename.c	1273	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	1273	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	diffcore-rename.c	1275	35	Do not convert pointers into more strictly aligned pointer types
MSC12-C	diffcore-rename.c	1296	3	Detect and remove code that has no effect
DCL00-C	diffcore-rename.c	1303	5	Const-qualify immutable objects: res
MSC12-C	diffcore-rename.c	1314	5	Detect and remove code that has no effect
MEM34-C	diffcore-rename.c	1316	5	Only free memory allocated dynamically
MEM01-C	diffcore-rename.c	1318	4	Store a new value in pointers immediately after free()
MEM30-C	diffcore-rename.c	1318	4	Do not access freed memory
MEM34-C	diffcore-rename.c	1318	4	Only free memory allocated dynamically
DCL13-C	diffcore-rename.c	1341	49	Declare function parameters that are pointers to values not changed by the function as const: pool
DCL13-C	diffcore-rename.c	1357	47	Declare function parameters that are pointers to values not changed by the function as const: pool
DCL00-C	diffcore-rename.c	1381	2	Const-qualify immutable objects: detect_rename
DCL01-C	diffcore-rename.c	1389	2	Do not reuse variable names in subscopes: progress
MSC12-C	diffcore-rename.c	1403	2	Detect and remove code that has no effect
EXP06-C	diffcore-rename.c	1403	2	Operands to the sizeof operator should not contain side effects
EXP06-C	diffcore-rename.c	1403	2	Operands to the sizeof operator should not contain side effects
FLP02-C	diffcore-rename.c	1474	20	Consider avoiding floating-point numbers when precise computation is needed
ENV30-C	diffcore-rename.c	1491	27	Do not modify the string returned by getenv()
MSC12-C	diffcore-rename.c	1496	3	Detect and remove code that has no effect
EXP06-C	diffcore-rename.c	1496	3	Operands to the sizeof operator should not contain side effects
FLP03-C	diffcore-rename.c	1498	17	Detect and handle floating point errors
EXP36-C	diffcore-rename.c	1575	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	diffcore-rename.c	1591	4	Detect and remove code that has no effect
EXP06-C	diffcore-rename.c	1591	4	Operands to the sizeof operator should not contain side effects
EXP06-C	diffcore-rename.c	1591	4	Operands to the sizeof operator should not contain side effects
MEM01-C	diffcore-rename.c	1626	2	Store a new value in pointers immediately after free()
MEM34-C	diffcore-rename.c	1626	2	Only free memory allocated dynamically
DCL00-C	diffcore-rotate.c	19	3	Const-qualify immutable objects: cmp
INT01-C	dir-iterator.c	56	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	56	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	56	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	56	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	56	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	56	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	56	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	56	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	56	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	dir-iterator.c	56	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	dir-iterator.c	59	58	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	dir-iterator.c	65	3	Const-qualify immutable objects: saved_errno
INT01-C	dir-iterator.c	85	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	113	39	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	dir-iterator.c	128	47	Do not reuse variable names in subscopes: dir_iterator
EXP11-C	dir-iterator.c	131	3	Do not apply operators expecting one type to data of an incompatible type
INT01-C	dir-iterator.c	136	23	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	dir-iterator.c	136	23	Ensure that return values are compared against the proper type
INT01-C	dir-iterator.c	144	34	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	dir-iterator.c	175	2	Do not ignore values returned by functions: dir_iterator_abort
DCL01-C	dir-iterator.c	179	45	Do not reuse variable names in subscopes: dir_iterator
EXP11-C	dir-iterator.c	181	34	Do not apply operators expecting one type to data of an incompatible type
INT01-C	dir-iterator.c	185	34	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	dir-iterator.c	188	4	Const-qualify immutable objects: saved_errno
MEM34-C	dir-iterator.c	198	2	Only free memory allocated dynamically
EXP36-C	dir-iterator.c	204	41	Do not convert pointers into more strictly aligned pointer types
DCL01-C	dir-iterator.c	205	2	Do not reuse variable names in subscopes: dir_iterator
INT01-C	dir-iterator.c	211	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	211	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	211	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	211	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	211	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	211	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	211	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir-iterator.c	211	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	dir-iterator.c	211	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	dir-iterator.c	232	2	Do not ignore values returned by functions: dir_iterator_abort
DCL00-C	dir.c	107	3	Const-qualify immutable objects: pattern_len
DCL00-C	dir.c	108	3	Const-qualify immutable objects: string_len
DCL01-C	dir.c	152	56	Do not reuse variable names in subscopes: pathspec
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	164	2	Use bitwise operators only on unsigned operands
DCL00-C	dir.c	182	4	Const-qualify immutable objects: c
INT01-C	dir.c	186	13	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	dir.c	202	44	Do not reuse variable names in subscopes: pathspec
DCL00-C	dir.c	204	2	Const-qualify immutable objects: len
DCL01-C	dir.c	211	29	Do not reuse variable names in subscopes: pathspec
DCL00-C	dir.c	216	2	Const-qualify immutable objects: exclusive_flags
INT13-C	dir.c	216	46	Use bitwise operators only on unsigned operands
EXP12-C	dir.c	228	2	Do not ignore values returned by functions: read_directory
DCL01-C	dir.c	260	71	Do not reuse variable names in subscopes: oid_stat
MEM34-C	dir.c	272	3	Only free memory allocated dynamically
EXP12-C	dir.c	277	3	Do not ignore values returned by functions: memset
MEM34-C	dir.c	282	3	Only free memory allocated dynamically
INT07-C	dir.c	288	14	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	dir.c	330	2	Const-qualify immutable objects: matchlen
ARR30-C	dir.c	377	39	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	dir.c	394	3	Const-qualify immutable objects: offset
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	455	2	Use bitwise operators only on unsigned operands
INT07-C	dir.c	493	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	dir.c	512	13	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	dir.c	539	2	Const-qualify immutable objects: flags
DCL00-C	dir.c	552	2	Const-qualify immutable objects: matched
INT13-C	dir.c	555	26	Use bitwise operators only on unsigned operands
DCL01-C	dir.c	561	32	Do not reuse variable names in subscopes: pathspec
ARR30-C	dir.c	583	31	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	dir.c	584	24	Do not form or use out-of-bounds pointers or array subscripts
MSC12-C	dir.c	593	3	Detect and remove code that has no effect
DCL00-C	dir.c	608	3	Const-qualify immutable objects: c
INT01-C	dir.c	634	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	634	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	650	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	dir.c	664	4	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	dir.c	664	4	Do not cast away a const qualification
EXP11-C	dir.c	666	4	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	dir.c	666	4	Do not cast away a const qualification
DCL00-C	dir.c	668	2	Const-qualify immutable objects: min_len
DCL01-C	dir.c	677	2	Do not reuse variable names in subscopes: read
INT07-C	dir.c	695	7	Use only explicitly signed or unsigned char type for numeric values
INT01-C	dir.c	697	12	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	dir.c	700	14	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	dir.c	779	23	Do not convert pointers into more strictly aligned pointer types
MEM01-C	dir.c	790	4	Store a new value in pointers immediately after free()
MEM34-C	dir.c	790	4	Only free memory allocated dynamically
MEM01-C	dir.c	791	4	Store a new value in pointers immediately after free()
MEM34-C	dir.c	791	4	Only free memory allocated dynamically
EXP12-C	dir.c	796	3	Do not ignore values returned by functions: hashmap_remove
MEM34-C	dir.c	797	3	Only free memory allocated dynamically
EXP36-C	dir.c	807	22	Do not convert pointers into more strictly aligned pointer types
DCL00-C	dir.c	881	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	dir.c	881	3	Do not convert pointers into more strictly aligned pointer types
EXP11-C	dir.c	881	3	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	dir.c	883	20	Do not convert pointers into more strictly aligned pointer types
EXP36-C	dir.c	892	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	dir.c	902	29	Do not reuse variable names in subscopes: oid_stat
EXP12-C	dir.c	931	2	Do not ignore values returned by functions: memset
INT07-C	dir.c	954	15	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	dir.c	977	3	Const-qualify immutable objects: next
INT01-C	dir.c	980	31	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	dir.c	992	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	dir.c	992	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	dir.c	994	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	dir.c	995	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	995	2	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	dir.c	1056	37	Do not reuse variable names in subscopes: oid_stat
INT01-C	dir.c	1083	12	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	dir.c	1083	12	Ensure that return values are compared against the proper type
INT01-C	dir.c	1093	35	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	dir.c	1094	4	Store a new value in pointers immediately after free()
MEM34-C	dir.c	1094	4	Only free memory allocated dynamically
INT07-C	dir.c	1098	15	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	dir.c	1120	2	Do not ignore values returned by functions: add_patterns_from_buffer
INT01-C	dir.c	1137	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	1141	16	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	dir.c	1144	38	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	dir.c	1176	2	Do not ignore values returned by functions: add_patterns_from_buffer
DCL01-C	dir.c	1184	2	Do not reuse variable names in subscopes: group
EXP36-C	dir.c	1187	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	dir.c	1189	2	Do not ignore values returned by functions: memset
DCL01-C	dir.c	1198	27	Do not reuse variable names in subscopes: oid_stat
DCL01-C	dir.c	1219	32	Do not reuse variable names in subscopes: __xpg_basename
DCL01-C	dir.c	1309	26	Do not reuse variable names in subscopes: __xpg_basename
DCL00-C	dir.c	1323	3	Const-qualify immutable objects: prefix
MSC12-C	dir.c	1342	3	Detect and remove code that has no effect
EXP06-C	dir.c	1342	3	Operands to the sizeof operator should not contain side effects
DCL01-C	dir.c	1363	17	Do not reuse variable names in subscopes: __xpg_basename
INT01-C	dir.c	1398	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	1399	46	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	1400	35	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	dir.c	1443	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	dir.c	1509	15	Do not reuse variable names in subscopes: __xpg_basename
DCL01-C	dir.c	1512	2	Do not reuse variable names in subscopes: group
DCL01-C	dir.c	1535	2	Do not reuse variable names in subscopes: group
EXP05-C	dir.c	1555	8	Do not cast away a const qualification
MEM01-C	dir.c	1557	3	Store a new value in pointers immediately after free()
MEM34-C	dir.c	1557	3	Only free memory allocated dynamically
DCL01-C	dir.c	1583	3	Do not reuse variable names in subscopes: oid_stat
EXP36-C	dir.c	1585	3	Do not convert pointers into more strictly aligned pointer types
MSC12-C	dir.c	1605	3	Detect and remove code that has no effect
INT01-C	dir.c	1605	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	1605	3	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	dir.c	1610	39	Use only explicitly signed or unsigned char type for numeric values
INT07-C	dir.c	1615	39	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	dir.c	1654	4	Do not ignore values returned by functions: add_patterns
DCL00-C	dir.c	1694	2	Const-qualify immutable objects: pathlen
DCL01-C	dir.c	1695	2	Do not reuse variable names in subscopes: __xpg_basename
DCL00-C	dir.c	1726	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	dir.c	1726	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	dir.c	1738	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	dir.c	1749	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	dir.c	1765	21	Do not reuse variable names in subscopes: dirname
DCL01-C	dir.c	1787	22	Do not reuse variable names in subscopes: dirname
INT32-C	dir.c	1796	9	Ensure that operations on signed integers do not result in overflow
DCL01-C	dir.c	1850	14	Do not reuse variable names in subscopes: dirname
DCL01-C	dir.c	1851	25	Do not reuse variable names in subscopes: pathspec
DCL00-C	dir.c	1863	2	Const-qualify immutable objects: status
MEM01-C	dir.c	1912	4	Store a new value in pointers immediately after free()
MEM34-C	dir.c	1912	4	Only free memory allocated dynamically
MEM34-C	dir.c	1913	4	Only free memory allocated dynamically
MSC12-C	dir.c	1953	2	Detect and remove code that has no effect
INT13-C	dir.c	1996	29	Use bitwise operators only on unsigned operands
INT13-C	dir.c	1995	39	Use bitwise operators only on unsigned operands
DCL00-C	dir.c	2060	3	Const-qualify immutable objects: want_ignored_subpaths
DCL01-C	dir.c	2107	28	Do not reuse variable names in subscopes: pathspec
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2114	2	Use bitwise operators only on unsigned operands
DCL01-C	dir.c	2148	32	Do not reuse variable names in subscopes: pathspec
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2155	2	Use bitwise operators only on unsigned operands
DCL00-C	dir.c	2165	3	Const-qualify immutable objects: len
ARR30-C	dir.c	2171	18	Do not form or use out-of-bounds pointers or array subscripts
INT32-C	dir.c	2201	8	Ensure that operations on signed integers do not result in overflow
DCL01-C	dir.c	2243	32	Do not reuse variable names in subscopes: pathspec
DCL01-C	dir.c	2281	34	Do not reuse variable names in subscopes: pathspec
INT13-C	dir.c	2333	50	Use bitwise operators only on unsigned operands
EXP36-C	dir.c	2367	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	dir.c	2389	4	Do not ignore values returned by functions: memset
INT01-C	dir.c	2409	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	2409	39	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	2412	33	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	dir.c	2429	2	Do not ignore values returned by functions: memset
DCL01-C	dir.c	2500	25	Do not reuse variable names in subscopes: pathspec
EXP12-C	dir.c	2518	3	Do not ignore values returned by functions: dir_add_name
DCL01-C	dir.c	2550	49	Do not reuse variable names in subscopes: pathspec
INT01-C	dir.c	2584	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	dir.c	2645	32	Do not cast away a const qualification
EXP05-C	dir.c	2646	32	Do not cast away a const qualification
DCL01-C	dir.c	2662	33	Do not reuse variable names in subscopes: pathspec
EXP12-C	dir.c	2693	2	Do not ignore values returned by functions: memset
INT13-C	dir.c	2785	36	Use bitwise operators only on unsigned operands
EXP36-C	dir.c	2790	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	dir.c	2822	36	Do not reuse variable names in subscopes: pathspec
INT13-C	dir.c	2855	60	Use bitwise operators only on unsigned operands
INT13-C	dir.c	2855	37	Use bitwise operators only on unsigned operands
DCL00-C	dir.c	2925	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	dir.c	2925	3	Do not convert pointers into more strictly aligned pointer types
DCL01-C	dir.c	2984	56	Do not reuse variable names in subscopes: pathspec
DCL13-C	dir.c	3040	41	Declare function parameters that are pointers to values not changed by the function as const: repo
MSC12-C	dir.c	3066	2	Detect and remove code that has no effect
EXP06-C	dir.c	3066	2	Operands to the sizeof operator should not contain side effects
EXP06-C	dir.c	3066	2	Operands to the sizeof operator should not contain side effects
EXP06-C	dir.c	3066	2	Operands to the sizeof operator should not contain side effects
MEM34-C	dir.c	3099	2	Only free memory allocated dynamically
EXP12-C	dir.c	3116	2	Do not ignore values returned by functions: closedir
EXP12-C	dir.c	3198	2	Do not ignore values returned by functions: strip_suffix_mem
INT01-C	dir.c	3200	19	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	dir.c	3200	19	Ensure that return values are compared against the proper type
INT07-C	dir.c	3218	8	Use only explicitly signed or unsigned char type for numeric values
ARR30-C	dir.c	3219	8	Do not form or use out-of-bounds pointers or array subscripts
INT07-C	dir.c	3227	8	Use only explicitly signed or unsigned char type for numeric values
INT07-C	dir.c	3229	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	dir.c	3240	7	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	dir.c	3247	2	Const-qualify immutable objects: original_len
DCL00-C	dir.c	3248	2	Const-qualify immutable objects: only_empty
DCL00-C	dir.c	3249	2	Const-qualify immutable objects: keep_toplevel
DCL00-C	dir.c	3250	2	Const-qualify immutable objects: purge_original_cwd
INT13-C	dir.c	3261	7	Use bitwise operators only on unsigned operands
EXP12-C	dir.c	3303	2	Do not ignore values returned by functions: closedir
MEM34-C	dir.c	3362	2	Only free memory allocated dynamically
INT07-C	dir.c	3378	11	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	dir.c	3383	3	Only free memory allocated dynamically
DCL01-C	dir.c	3395	2	Do not reuse variable names in subscopes: group
EXP05-C	dir.c	3405	10	Do not cast away a const qualification
MEM34-C	dir.c	3421	3	Only free memory allocated dynamically
DCL01-C	dir.c	3438	2	Do not reuse variable names in subscopes: index
DCL01-C	dir.c	3463	2	Do not reuse variable names in subscopes: stat_data
INT01-C	dir.c	3501	59	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	dir.c	3505	39	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	dir.c	3520	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	dir.c	3532	81	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	dir.c	3533	2	Only free memory allocated dynamically
EXP12-C	dir.c	3553	2	Do not ignore values returned by functions: ewah_serialize_strbuf
EXP12-C	dir.c	3554	2	Do not ignore values returned by functions: ewah_serialize_strbuf
EXP12-C	dir.c	3555	2	Do not ignore values returned by functions: ewah_serialize_strbuf
MEM01-C	dir.c	3579	2	Store a new value in pointers immediately after free()
MEM01-C	dir.c	3586	2	Store a new value in pointers immediately after free()
DCL01-C	dir.c	3590	2	Do not reuse variable names in subscopes: index
EXP12-C	dir.c	3622	2	Do not ignore values returned by functions: memset
EXP36-C	dir.c	3631	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	dir.c	3636	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	dir.c	3642	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	dir.c	3667	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	dir.c	3674	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	dir.c	3687	25	Do not convert pointers into more strictly aligned pointer types
DCL01-C	dir.c	3697	44	Do not reuse variable names in subscopes: oid_stat
EXP05-C	dir.c	3709	43	Do not cast away a const qualification
EXP11-C	dir.c	3725	10	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	dir.c	3725	10	Do not cast away a const qualification
EXP36-C	dir.c	3731	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	dir.c	3741	20	Do not cast away a const qualification
INT01-C	dir.c	3744	33	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	dir.c	3758	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	dir.c	3836	3	Const-qualify immutable objects: component_len
DCL00-C	dir.c	3839	3	Const-qualify immutable objects: ret
EXP12-C	dir.c	3858	2	Do not ignore values returned by functions: invalidate_one_component
MEM01-C	dir.c	3960	2	Store a new value in pointers immediately after free()
MEM34-C	dir.c	3960	2	Only free memory allocated dynamically
MEM34-C	dir.c	3961	2	Only free memory allocated dynamically
INT13-C	dir.c	3983	21	Use bitwise operators only on unsigned operands
INT13-C	dir.c	3989	21	Use bitwise operators only on unsigned operands
DCL00-C	editor.c	21	2	Const-qualify immutable objects: terminal_is_dumb
DCL01-C	editor.c	58	3	Do not reuse variable names in subscopes: realpath
INT07-C	editor.c	71	4	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	editor.c	79	3	Do not ignore values returned by functions: strbuf_realpath
EXP05-C	editor.c	83	25	Do not cast away a const qualification
EXP12-C	editor.c	91	3	Do not ignore values returned by functions: sigchain_push
EXP12-C	editor.c	92	3	Do not ignore values returned by functions: sigchain_push
EXP12-C	editor.c	96	3	Do not ignore values returned by functions: sigchain_pop
EXP12-C	editor.c	97	3	Do not ignore values returned by functions: sigchain_pop
INT07-C	entry.c	25	12	Use only explicitly signed or unsigned char type for numeric values
ARR30-C	entry.c	25	6	Do not form or use out-of-bounds pointers or array subscripts
MEM34-C	entry.c	50	2	Only free memory allocated dynamically
DCL00-C	entry.c	57	2	Const-qualify immutable objects: origlen
EXP12-C	entry.c	74	2	Do not ignore values returned by functions: closedir
INT01-C	entry.c	91	8	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	entry.c	95	3	Only free memory allocated dynamically
DCL00-C	entry.c	102	2	Const-qualify immutable objects: symlink
DCL01-C	entry.c	102	2	Do not reuse variable names in subscopes: symlink
EXP12-C	entry.c	104	3	Do not ignore values returned by functions: xsnprintf
INT13-C	entry.c	134	9	Use bitwise operators only on unsigned operands
INT13-C	entry.c	136	9	Use bitwise operators only on unsigned operands
EXP36-C	entry.c	146	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	entry.c	155	40	Do not convert pointers into more strictly aligned pointer types
DCL01-C	entry.c	170	2	Do not reuse variable names in subscopes: progress
INT01-C	entry.c	179	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	entry.c	189	27	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	entry.c	212	6	Detect and remove code that has no effect
INT13-C	entry.c	229	11	Use bitwise operators only on unsigned operands
EXP36-C	entry.c	229	50	Do not convert pointers into more strictly aligned pointer types
INT01-C	entry.c	242	7	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	entry.c	242	7	Use bitwise operators only on unsigned operands
MEM01-C	entry.c	248	2	Store a new value in pointers immediately after free()
MEM34-C	entry.c	248	2	Only free memory allocated dynamically
MSC12-C	entry.c	258	3	Detect and remove code that has no effect
DCL00-C	entry.c	271	2	Const-qualify immutable objects: ce_mode_s_ifmt
DCL00-C	entry.c	273	2	Const-qualify immutable objects: fd
MEM01-C	entry.c	310	3	Store a new value in pointers immediately after free()
MEM34-C	entry.c	310	3	Only free memory allocated dynamically
MEM01-C	entry.c	343	6	Store a new value in pointers immediately after free()
MEM31-C	entry.c	343	6	Free dynamically allocated memory when no longer needed
MEM34-C	entry.c	343	6	Only free memory allocated dynamically
MEM34-C	entry.c	353	4	Only free memory allocated dynamically
MEM34-C	entry.c	366	4	Only free memory allocated dynamically
MEM01-C	entry.c	374	3	Store a new value in pointers immediately after free()
MEM34-C	entry.c	374	3	Only free memory allocated dynamically
DCL01-C	entry.c	439	3	Do not reuse variable names in subscopes: dup
INT13-C	entry.c	453	46	Use bitwise operators only on unsigned operands
DCL00-C	entry.c	497	3	Const-qualify immutable objects: changed
EXP12-C	entry.c	568	3	Do not ignore values returned by functions: submodule_move_head
DCL02-C	environment.c	24	1	Use visually distinct identifiers: trust_executable_bit
DCL02-C	environment.c	25	1	Use visually distinct identifiers: trust_ctime
DCL02-C	environment.c	26	1	Use visually distinct identifiers: check_stat
DCL02-C	environment.c	27	1	Use visually distinct identifiers: has_symlinks
DCL02-C	environment.c	28	1	Use visually distinct identifiers: minimum_abbrev
DCL02-C	environment.c	28	1	Use visually distinct identifiers: default_abbrev
DCL02-C	environment.c	29	1	Use visually distinct identifiers: ignore_case
DCL02-C	environment.c	30	1	Use visually distinct identifiers: assume_unchanged
DCL02-C	environment.c	31	1	Use visually distinct identifiers: prefer_symlink_refs
DCL02-C	environment.c	32	1	Use visually distinct identifiers: is_bare_repository_cfg
DCL02-C	environment.c	33	1	Use visually distinct identifiers: warn_ambiguous_refs
DCL02-C	environment.c	37	1	Use visually distinct identifiers: git_commit_encoding
DCL02-C	environment.c	38	1	Use visually distinct identifiers: git_log_output_encoding
DCL02-C	environment.c	39	1	Use visually distinct identifiers: apply_default_whitespace
DCL02-C	environment.c	40	1	Use visually distinct identifiers: apply_default_ignorewhitespace
DCL02-C	environment.c	41	1	Use visually distinct identifiers: git_attributes_file
DCL02-C	environment.c	42	1	Use visually distinct identifiers: git_hooks_path
DCL02-C	environment.c	43	1	Use visually distinct identifiers: zlib_compression_level
DCL02-C	environment.c	44	1	Use visually distinct identifiers: pack_compression_level
DCL02-C	environment.c	45	1	Use visually distinct identifiers: fsync_object_files
DCL02-C	environment.c	46	1	Use visually distinct identifiers: use_fsync
DCL02-C	environment.c	47	1	Use visually distinct identifiers: fsync_method
DCL02-C	environment.c	48	1	Use visually distinct identifiers: fsync_components
DCL02-C	environment.c	49	1	Use visually distinct identifiers: packed_git_window_size
DCL02-C	environment.c	50	1	Use visually distinct identifiers: packed_git_limit
DCL02-C	environment.c	51	1	Use visually distinct identifiers: delta_base_cache_limit
DCL02-C	environment.c	52	1	Use visually distinct identifiers: big_file_threshold
DCL02-C	environment.c	53	1	Use visually distinct identifiers: pager_use_color
DCL02-C	environment.c	54	1	Use visually distinct identifiers: editor_program
DCL02-C	environment.c	55	1	Use visually distinct identifiers: askpass_program
DCL02-C	environment.c	56	1	Use visually distinct identifiers: excludes_file
DCL02-C	environment.c	57	1	Use visually distinct identifiers: auto_crlf
DCL02-C	environment.c	58	1	Use visually distinct identifiers: read_replace_refs
DCL02-C	environment.c	59	1	Use visually distinct identifiers: core_eol
DCL02-C	environment.c	60	1	Use visually distinct identifiers: global_conv_flags_eol
DCL02-C	environment.c	61	1	Use visually distinct identifiers: check_roundtrip_encoding
DCL02-C	environment.c	62	1	Use visually distinct identifiers: whitespace_rule_cfg
DCL02-C	environment.c	63	1	Use visually distinct identifiers: git_branch_track
DCL02-C	environment.c	64	1	Use visually distinct identifiers: autorebase
DCL02-C	environment.c	65	1	Use visually distinct identifiers: push_default
DCL02-C	environment.c	69	1	Use visually distinct identifiers: object_creation_mode
DCL02-C	environment.c	70	1	Use visually distinct identifiers: notes_ref_name
DCL02-C	environment.c	71	1	Use visually distinct identifiers: grafts_replace_parents
DCL02-C	environment.c	72	1	Use visually distinct identifiers: core_apply_sparse_checkout
DCL02-C	environment.c	73	1	Use visually distinct identifiers: core_sparse_checkout_cone
DCL02-C	environment.c	75	1	Use visually distinct identifiers: merge_log_config
DCL02-C	environment.c	76	1	Use visually distinct identifiers: precomposed_unicode
DCL02-C	environment.c	77	1	Use visually distinct identifiers: pack_size_limit_cfg
DCL02-C	environment.c	78	1	Use visually distinct identifiers: log_all_ref_updates
DCL02-C	environment.c	83	1	Use visually distinct identifiers: protect_hfs
DCL02-C	environment.c	88	1	Use visually distinct identifiers: protect_ntfs
DCL02-C	environment.c	94	1	Use visually distinct identifiers: comment_line_char
DCL02-C	environment.c	95	1	Use visually distinct identifiers: auto_comment_line_char
DCL02-C	environment.c	98	1	Use visually distinct identifiers: core_preload_index
DCL02-C	environment.c	101	1	Use visually distinct identifiers: git_work_tree_cfg
DCL02-C	environment.c	110	1	Use visually distinct identifiers: local_repo_env
INT01-C	environment.c	49	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	environment.c	50	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	environment.c	50	27	Use rsize_t or size_t for all integer values representing the size of an object
STR05-C	environment.c	61	1	Use pointers to const when referring to string literals
INT07-C	environment.c	94	1	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	environment.c	158	2	Do not ignore values returned by functions: strvec_push
INT01-C	environment.c	159	26	Use rsize_t or size_t for all integer values representing the size of an object
ENV30-C	environment.c	190	35	Do not modify the string returned by getenv()
DCL01-C	environment.c	257	3	Do not reuse variable names in subscopes: realpath
EXP12-C	environment.c	259	3	Do not ignore values returned by functions: strbuf_realpath
DCL00-C	environment.c	291	2	Const-qualify immutable objects: mode
EXP12-C	environment.c	292	2	Do not ignore values returned by functions: git_path_buf
EXP12-C	environment.c	299	2	Do not ignore values returned by functions: git_path_buf
EXP12-C	environment.c	300	2	Do not ignore values returned by functions: safe_create_leading_directories
FIO42-C	environment.c	308	7	Close files when they are no longer needed
EXP12-C	environment.c	313	2	Do not ignore values returned by functions: safe_create_leading_directories_const
DCL13-C	environment.c	340	14	Declare function parameters that are pointers to values not changed by the function as const: data
DCL01-C	environment.c	343	2	Do not reuse variable names in subscopes: tmp_objdir
MEM34-C	environment.c	351	2	Only free memory allocated dynamically
DCL01-C	environment.c	356	2	Do not reuse variable names in subscopes: realpath
EXP12-C	environment.c	359	3	Do not ignore values returned by functions: strbuf_realpath
DCL01-C	ewabitmap.c	27	2	Do not reuse variable names in subscopes: bitmap
EXP36-C	ewabitmap.c	27	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	ewabitmap.c	28	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	ewabitmap.c	41	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	41	2	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	ewabitmap.c	47	2	Const-qualify immutable objects: old_size
INT01-C	ewabitmap.c	48	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	48	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	48	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	48	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	48	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	48	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	ewabitmap.c	48	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	ewabitmap.c	49	2	Do not ignore values returned by functions: memset
DCL00-C	ewabitmap.c	55	2	Const-qualify immutable objects: block
INT01-C	ewabitmap.c	55	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	55	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	57	26	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewabitmap.c	58	21	Use bitwise operators only on unsigned operands
INT14-C	ewabitmap.c	58	21	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	ewabitmap.c	58	24	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewabitmap.c	58	24	Use bitwise operators only on unsigned operands
INT01-C	ewabitmap.c	58	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	58	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	ewabitmap.c	63	2	Const-qualify immutable objects: block
INT01-C	ewabitmap.c	63	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	63	17	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewabitmap.c	66	22	Use bitwise operators only on unsigned operands
INT14-C	ewabitmap.c	66	22	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	ewabitmap.c	66	25	Use bitwise operators only on unsigned operands
INT01-C	ewabitmap.c	66	26	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewabitmap.c	66	26	Use bitwise operators only on unsigned operands
INT01-C	ewabitmap.c	66	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	66	26	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	ewabitmap.c	71	2	Const-qualify immutable objects: block
INT01-C	ewabitmap.c	71	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	71	17	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewabitmap.c	73	23	Use bitwise operators only on unsigned operands
INT01-C	ewabitmap.c	73	25	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewabitmap.c	73	25	Use bitwise operators only on unsigned operands
INT01-C	ewabitmap.c	73	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	73	25	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	ewabitmap.c	76	51	Do not reuse variable names in subscopes: bitmap
INT01-C	ewabitmap.c	91	27	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	ewabitmap.c	92	4	Do not ignore values returned by functions: ewah_add_empty_words
EXP12-C	ewabitmap.c	99	2	Do not ignore values returned by functions: ewah_add
DCL01-C	ewabitmap.c	105	2	Do not reuse variable names in subscopes: bitmap
INT01-C	ewabitmap.c	113	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	113	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	113	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	113	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	113	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	113	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	113	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	113	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	113	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	ewabitmap.c	113	3	Do not convert pointers into more strictly aligned pointer types
INT13-C	ewabitmap.c	129	18	Use bitwise operators only on unsigned operands
INT13-C	ewabitmap.c	129	21	Use bitwise operators only on unsigned operands
INT13-C	ewabitmap.c	138	18	Use bitwise operators only on unsigned operands
DCL00-C	ewabitmap.c	143	2	Const-qualify immutable objects: original_size
DCL00-C	ewabitmap.c	144	2	Const-qualify immutable objects: other_final
INT01-C	ewabitmap.c	144	57	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	144	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewabitmap.c	144	42	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	ewabitmap.c	151	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	ewabitmap.c	152	3	Do not ignore values returned by functions: memset
INT13-C	ewabitmap.c	159	20	Use bitwise operators only on unsigned operands
INT14-C	ewabitmap.c	159	20	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	ewabitmap.c	167	9	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewabitmap.c	213	22	Use bitwise operators only on unsigned operands
INT13-C	ewabitmap.c	213	24	Use bitwise operators only on unsigned operands
DCL01-C	ewabitmap.c	219	33	Do not reuse variable names in subscopes: bitmap
MEM01-C	ewabitmap.c	225	2	Store a new value in pointers immediately after free()
DCL00-C	ewaewah_bitmap.c	36	2	Const-qualify immutable objects: rlw_offset
INT01-C	ewaewah_bitmap.c	37	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	37	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	37	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	37	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	37	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	37	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	ewaewah_bitmap.c	37	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	ewaewah_bitmap.c	43	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	68	10	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	ewaewah_bitmap.c	68	10	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	ewaewah_bitmap.c	68	29	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	68	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	71	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	73	16	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewaewah_bitmap.c	73	19	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	73	19	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewaewah_bitmap.c	77	34	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	77	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	78	10	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	ewaewah_bitmap.c	78	10	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	ewaewah_bitmap.c	78	13	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	78	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	81	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	94	13	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	ewaewah_bitmap.c	94	13	Ensure that return values are compared against the proper type
INT01-C	ewaewah_bitmap.c	97	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	97	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	ewaewah_bitmap.c	103	2	Const-qualify immutable objects: current_num
INT13-C	ewaewah_bitmap.c	105	21	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	105	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	105	21	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	ewaewah_bitmap.c	116	2	Detect and remove code that has no effect
EXP06-C	ewaewah_bitmap.c	116	2	Operands to the sizeof operator should not contain side effects
INT01-C	ewaewah_bitmap.c	129	12	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	ewaewah_bitmap.c	130	11	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	ewaewah_bitmap.c	130	56	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewaewah_bitmap.c	130	30	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	130	30	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	130	30	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	ewaewah_bitmap.c	139	39	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	ewaewah_bitmap.c	139	41	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	146	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	146	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	148	24	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	ewaewah_bitmap.c	148	24	Ensure that return values are compared against the proper type
DCL00-C	ewaewah_bitmap.c	160	2	Const-qualify immutable objects: run_len
EXP06-C	ewaewah_bitmap.c	164	3	Operands to the sizeof operator should not contain side effects
INT13-C	ewaewah_bitmap.c	168	13	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	168	13	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	ewaewah_bitmap.c	170	3	Detect and remove code that has no effect
EXP06-C	ewaewah_bitmap.c	170	3	Operands to the sizeof operator should not contain side effects
MSC12-C	ewaewah_bitmap.c	175	3	Detect and remove code that has no effect
EXP06-C	ewaewah_bitmap.c	175	3	Operands to the sizeof operator should not contain side effects
MSC12-C	ewaewah_bitmap.c	176	3	Detect and remove code that has no effect
EXP06-C	ewaewah_bitmap.c	176	3	Operands to the sizeof operator should not contain side effects
MSC12-C	ewaewah_bitmap.c	177	3	Detect and remove code that has no effect
EXP06-C	ewaewah_bitmap.c	177	3	Operands to the sizeof operator should not contain side effects
MSC12-C	ewaewah_bitmap.c	180	3	Detect and remove code that has no effect
EXP06-C	ewaewah_bitmap.c	180	3	Operands to the sizeof operator should not contain side effects
MSC12-C	ewaewah_bitmap.c	183	3	Detect and remove code that has no effect
EXP06-C	ewaewah_bitmap.c	183	3	Operands to the sizeof operator should not contain side effects
MSC12-C	ewaewah_bitmap.c	184	3	Detect and remove code that has no effect
EXP06-C	ewaewah_bitmap.c	184	3	Operands to the sizeof operator should not contain side effects
INT01-C	ewaewah_bitmap.c	191	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	191	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	205	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	205	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	205	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	205	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	205	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	205	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	206	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	206	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	206	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	206	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	206	3	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	ewaewah_bitmap.c	208	2	Detect and remove code that has no effect
INT01-C	ewaewah_bitmap.c	210	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	212	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	213	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	214	34	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	ewaewah_bitmap.c	216	3	Do not ignore values returned by functions: add_literal
INT01-C	ewaewah_bitmap.c	216	32	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewaewah_bitmap.c	216	32	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	216	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	216	40	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	ewaewah_bitmap.c	223	3	Do not ignore values returned by functions: add_literal
INT01-C	ewaewah_bitmap.c	223	32	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewaewah_bitmap.c	223	32	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	223	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	223	40	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewaewah_bitmap.c	227	38	Use bitwise operators only on unsigned operands
INT14-C	ewaewah_bitmap.c	227	38	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	ewaewah_bitmap.c	227	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	228	15	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewaewah_bitmap.c	228	15	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	228	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	228	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	231	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	ewaewah_bitmap.c	235	3	Do not ignore values returned by functions: add_empty_word
DCL05-C	ewaewah_bitmap.c	239	1	Use typedefs to improve code readability
DCL00-C	ewaewah_bitmap.c	249	4	Const-qualify immutable objects: len
INT01-C	ewaewah_bitmap.c	249	45	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	253	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	253	39	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	258	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	262	20	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	ewaewah_bitmap.c	263	32	Use bitwise operators only on unsigned operands
INT13-C	ewaewah_bitmap.c	263	46	Use bitwise operators only on unsigned operands
EXP36-C	ewaewah_bitmap.c	288	16	Do not convert pointers into more strictly aligned pointer types
EXP36-C	ewaewah_bitmap.c	290	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	ewaewah_bitmap.c	304	2	Store a new value in pointers immediately after free()
INT01-C	ewaewah_bitmap.c	324	37	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	ewaewah_bitmap.c	342	3	Detect and remove code that has no effect
MSC12-C	ewaewah_bitmap.c	347	3	Detect and remove code that has no effect
INT01-C	ewaewah_bitmap.c	388	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	388	64	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	ewaewah_bitmap.c	391	4	Do not reuse variable names in subscopes: index
EXP12-C	ewaewah_bitmap.c	406	4	Do not ignore values returned by functions: ewah_add_empty_words
INT01-C	ewaewah_bitmap.c	407	31	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	ewaewah_bitmap.c	421	5	Do not ignore values returned by functions: ewah_add
INT13-C	ewaewah_bitmap.c	422	49	Use bitwise operators only on unsigned operands
INT01-C	ewaewah_bitmap.c	432	30	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_bitmap.c	457	23	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	ewaewah_bitmap.c	457	23	Ensure that return values are compared against the proper type
INT01-C	ewaewah_bitmap.c	458	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	ewaewah_bitmap.c	458	20	Ensure that return values are compared against the proper type
EXP11-C	ewaewah_bitmap.c	469	21	Do not apply operators expecting one type to data of an incompatible type
INT14-C	ewaewah_bitmap.c	474	7	Avoid performing bitwise and arithmetic operations on the same data
DCL05-C	ewaewah_io.c	23	1	Use typedefs to improve code readability
INT01-C	ewaewah_io.c	53	43	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_io.c	63	45	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_io.c	63	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_io.c	63	59	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_io.c	69	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_io.c	74	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_io.c	74	38	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	ewaewah_io.c	79	22	Do not convert pointers into more strictly aligned pointer types
EXP36-C	ewaewah_io.c	107	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	ewaewah_io.c	133	15	Do not cast away a const qualification
INT01-C	ewaewah_rlw.c	29	14	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	ewaewah_rlw.c	45	2	Do not ignore values returned by functions: next_word
INT01-C	ewaewah_rlw.c	47	51	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_rlw.c	53	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_rlw.c	56	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_rlw.c	57	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_rlw.c	61	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_rlw.c	64	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_rlw.c	64	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_rlw.c	67	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_rlw.c	70	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ewaewah_rlw.c	70	36	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	ewaewah_rlw.c	70	36	Ensure that return values are compared against the proper type
INT01-C	ewaewah_rlw.c	75	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	ewaewah_rlw.c	83	2	Do not reuse variable names in subscopes: index
INT01-C	ewaewah_rlw.c	85	44	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	ewaewah_rlw.c	91	3	Do not ignore values returned by functions: ewah_add_empty_words
INT13-C	ewaewah_rlw.c	91	49	Use bitwise operators only on unsigned operands
EXP12-C	exec-cmd.c	280	2	Do not ignore values returned by functions: setenv
EXP12-C	exec-cmd.c	318	2	Do not ignore values returned by functions: setenv
EXP12-C	exec-cmd.c	325	2	Do not ignore values returned by functions: strvec_push
EXP12-C	exec-cmd.c	334	2	Do not ignore values returned by functions: prepare_git_cmd
EXP12-C	exec-cmd.c	338	2	Do not ignore values returned by functions: sane_execvp
DCL00-C	exec-cmd.c	351	2	Const-qualify immutable objects: param
EXP12-C	exec-cmd.c	353	2	Do not ignore values returned by functions: __builtin_va_start
EXP11-C	exec-cmd.c	357	24	Do not apply operators expecting one type to data of an incompatible type
INT36-C	exec-cmd.c	357	24	Take care when converting from pointer to integer or integer to pointer
EXP12-C	exec-cmd.c	361	2	Do not ignore values returned by functions: __builtin_va_end
ARR30-C	exec-cmd.c	365	6	Do not form or use out-of-bounds pointers or array subscripts
MSC01-C	fetch-negotiator.c	12	2	Strive for logical completeness
DCL00-C	fetch-pack.c	72	2	Const-qualify immutable objects: params
EXP12-C	fetch-pack.c	77	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	fetch-pack.c	79	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	fetch-pack.c	80	2	Do not ignore values returned by functions: fputc
EXP36-C	fetch-pack.c	91	41	Do not convert pointers into more strictly aligned pointer types
INT01-C	fetch-pack.c	98	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	98	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	98	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	98	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	98	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	98	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	98	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	98	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	98	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	fetch-pack.c	98	2	Do not convert pointers into more strictly aligned pointer types
DCL05-C	fetch-pack.c	102	1	Use typedefs to improve code readability
DCL01-C	fetch-pack.c	125	2	Do not reuse variable names in subscopes: commit
DCL01-C	fetch-pack.c	136	4	Do not reuse variable names in subscopes: tag
EXP11-C	fetch-pack.c	136	22	Do not apply operators expecting one type to data of an incompatible type
DCL02-C	fetch-pack.c	2183	4	Use visually distinct identifiers: commit
DCL01-C	fetch-pack.c	150	3	Do not reuse variable names in subscopes: commit
DCL02-C	fetch-pack.c	2183	4	Use visually distinct identifiers: commit
DCL00-C	fetch-pack.c	164	2	Const-qualify immutable objects: flags
EXP36-C	fetch-pack.c	184	29	Do not convert pointers into more strictly aligned pointer types
EXP12-C	fetch-pack.c	260	2	Do not ignore values returned by functions: rev_list_insert_ref
EXP12-C	fetch-pack.c	289	3	Do not ignore values returned by functions: for_each_rawref
INT01-C	fetch-pack.c	293	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fetch-pack.c	294	3	Do not ignore values returned by functions: rev_list_insert_ref
DCL01-C	fetch-pack.c	349	3	Do not reuse variable names in subscopes: remote
DCL00-C	fetch-pack.c	409	3	Const-qualify immutable objects: max_age
INT01-C	fetch-pack.c	414	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL01-C	fetch-pack.c	425	3	Do not reuse variable names in subscopes: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
EXP12-C	fetch-pack.c	432	5	Do not ignore values returned by functions: register_shallow
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
DCL02-C	fetch-pack.c	2111	2	Use visually distinct identifiers: oid
MSC01-C	fetch-pack.c	499	5	Strive for logical completeness
DCL01-C	fetch-pack.c	511	6	Do not reuse variable names in subscopes: commit
DCL00-C	fetch-pack.c	577	3	Const-qualify immutable objects: ack
DCL01-C	fetch-pack.c	596	2	Do not reuse variable names in subscopes: commit
EXP12-C	fetch-pack.c	600	3	Do not ignore values returned by functions: commit_list_insert
DCL13-C	fetch-pack.c	608	15	Declare function parameters that are pointers to values not changed by the function as const: cb_data
EXP12-C	fetch-pack.c	619	3	Do not ignore values returned by functions: pop_most_recent_commit
EXP12-C	fetch-pack.c	626	3	Do not ignore values returned by functions: oidset_insert
DCL01-C	fetch-pack.c	629	47	Do not reuse variable names in subscopes: ref
DCL05-C	fetch-pack.c	639	1	Use typedefs to improve code readability
DCL01-C	fetch-pack.c	646	2	Do not reuse variable names in subscopes: ref
DCL00-C	fetch-pack.c	649	2	Const-qualify immutable objects: strict
DCL00-C	fetch-pack.c	667	5	Const-qualify immutable objects: cmp
DCL13-C	fetch-pack.c	725	62	Declare function parameters that are pointers to values not changed by the function as const: unused
EXP12-C	fetch-pack.c	728	2	Do not ignore values returned by functions: mark_complete
DCL01-C	fetch-pack.c	748	2	Do not reuse variable names in subscopes: ref
DCL00-C	fetch-pack.c	749	2	Const-qualify immutable objects: old_save_commit_buffer
DCL01-C	fetch-pack.c	759	3	Do not reuse variable names in subscopes: commit
EXP11-C	fetch-pack.c	773	13	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	fetch-pack.c	792	3	Do not ignore values returned by functions: for_each_rawref
DCL01-C	fetch-pack.c	825	2	Do not reuse variable names in subscopes: ref
DCL01-C	fetch-pack.c	829	3	Do not reuse variable names in subscopes: remote
EXP36-C	fetch-pack.c	848	12	Do not convert pointers into more strictly aligned pointer types
DCL00-C	fetch-pack.c	876	2	Const-qualify immutable objects: len
INT01-C	fetch-pack.c	876	33	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	fetch-pack.c	880	3	Const-qualify immutable objects: read_len
EXP12-C	fetch-pack.c	890	3	Do not ignore values returned by functions: oidset_insert
EXP12-C	fetch-pack.c	900	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	fetch-pack.c	924	2	Do not ignore values returned by functions: memset
EXP12-C	fetch-pack.c	952	3	Do not ignore values returned by functions: strvec_push
EXP12-C	fetch-pack.c	953	3	Do not ignore values returned by functions: strvec_push
EXP12-C	fetch-pack.c	967	3	Do not ignore values returned by functions: strvec_push
EXP12-C	fetch-pack.c	968	3	Do not ignore values returned by functions: strvec_push
EXP12-C	fetch-pack.c	998	3	Do not ignore values returned by functions: strvec_push
INT01-C	fetch-pack.c	1024	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fetch-pack.c	1025	4	Do not ignore values returned by functions: strvec_push
EXP12-C	fetch-pack.c	1028	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	fetch-pack.c	1060	2	Do not ignore values returned by functions: sigchain_pop
INT01-C	fetch-pack.c	1066	32	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	fetch-pack.c	1077	1	Detect and remove code that has no effect
MSC12-C	fetch-pack.c	1077	1	Detect and remove code that has no effect
DCL05-C	fetch-pack.c	1077	1	Use typedefs to improve code readability
INT01-C	fetch-pack.c	1077	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	1077	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	1077	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fetch-pack.c	1077	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	fetch-pack.c	1077	1	Use typedefs to improve code readability
INT01-C	fetch-pack.c	1077	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	fetch-pack.c	1077	1	Use typedefs to improve code readability
EXP05-C	fetch-pack.c	1081	26	Do not cast away a const qualification
EXP05-C	fetch-pack.c	1082	26	Do not cast away a const qualification
DCL01-C	fetch-pack.c	1094	2	Do not reuse variable names in subscopes: ref
DCL00-C	fetch-pack.c	1241	3	Const-qualify immutable objects: max_age
INT01-C	fetch-pack.c	1246	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	fetch-pack.c	1257	2	Const-qualify immutable objects: use_ref_in_want
DCL01-C	fetch-pack.c	1260	3	Do not reuse variable names in subscopes: remote
INT01-C	fetch-pack.c	1329	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	fetch-pack.c	1335	3	Const-qualify immutable objects: hash_algo
INT01-C	fetch-pack.c	1384	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fetch-pack.c	1448	3	Do not ignore values returned by functions: packet_reader_read
DCL01-C	fetch-pack.c	1467	5	Do not reuse variable names in subscopes: commit
EXP12-C	fetch-pack.c	1517	2	Do not ignore values returned by functions: process_section_header
INT01-C	fetch-pack.c	1556	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fetch-pack.c	1557	4	Do not ignore values returned by functions: register_shallow
DCL01-C	fetch-pack.c	1580	55	Do not reuse variable names in subscopes: ref
EXP05-C	fetch-pack.c	1582	24	Do not cast away a const qualification
EXP12-C	fetch-pack.c	1588	2	Do not ignore values returned by functions: process_section_header
EXP36-C	fetch-pack.c	1597	18	Do not convert pointers into more strictly aligned pointer types
EXP12-C	fetch-pack.c	1611	2	Do not ignore values returned by functions: process_section_header
INT01-C	fetch-pack.c	1613	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fetch-pack.c	1617	3	Do not ignore values returned by functions: string_list_append
DCL01-C	fetch-pack.c	1647	2	Do not reuse variable names in subscopes: ref
MSC01-C	fetch-pack.c	1679	3	Strive for logical completeness
EXP12-C	fetch-pack.c	1728	4	Do not ignore values returned by functions: process_section_header
EXP12-C	fetch-pack.c	1733	5	Do not ignore values returned by functions: oidset_insert
EXP12-C	fetch-pack.c	1770	4	Do not ignore values returned by functions: process_section_header
INT01-C	fetch-pack.c	1793	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fetch-pack.c	1800	3	Do not ignore values returned by functions: strvec_push
EXP12-C	fetch-pack.c	1801	3	Do not ignore values returned by functions: strvec_pushf
INT01-C	fetch-pack.c	1804	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fetch-pack.c	1805	4	Do not ignore values returned by functions: strvec_pushf
EXP12-C	fetch-pack.c	1807	3	Do not ignore values returned by functions: strvec_push
INT01-C	fetch-pack.c	1819	27	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	fetch-pack.c	1823	34	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	fetch-pack.c	1838	3	Do not ignore values returned by functions: string_list_append_nodup
EXP05-C	fetch-pack.c	1865	8	Do not cast away a const qualification
EXP12-C	fetch-pack.c	1883	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	fetch-pack.c	1884	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	fetch-pack.c	1885	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	fetch-pack.c	1886	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	fetch-pack.c	1887	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	fetch-pack.c	1888	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	fetch-pack.c	1893	4	Do not ignore values returned by functions: string_list_split
MEM01-C	fetch-pack.c	1894	4	Store a new value in pointers immediately after free()
MEM34-C	fetch-pack.c	1894	4	Only free memory allocated dynamically
DCL01-C	fetch-pack.c	1914	51	Do not reuse variable names in subscopes: ref
DCL01-C	fetch-pack.c	1939	2	Do not reuse variable names in subscopes: ref
EXP12-C	fetch-pack.c	1945	4	Do not ignore values returned by functions: unlink_or_warn
INT01-C	fetch-pack.c	1965	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fetch-pack.c	1972	4	Do not ignore values returned by functions: commit_shallow_file
EXP12-C	fetch-pack.c	2010	3	Do not ignore values returned by functions: commit_shallow_file
EXP36-C	fetch-pack.c	2021	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	fetch-pack.c	2028	2	Store a new value in pointers immediately after free()
MEM34-C	fetch-pack.c	2028	2	Only free memory allocated dynamically
EXP36-C	fetch-pack.c	2034	20	Do not convert pointers into more strictly aligned pointer types
DCL01-C	fetch-pack.c	2035	2	Do not reuse variable names in subscopes: ref
DCL01-C	fetch-pack.c	2045	28	Do not reuse variable names in subscopes: ref
EXP12-C	fetch-pack.c	2066	3	Do not ignore values returned by functions: memset
MSC12-C	fetch-pack.c	2084	4	Detect and remove code that has no effect
EXP36-C	fetch-pack.c	2102	27	Do not convert pointers into more strictly aligned pointer types
EXP12-C	fetch-pack.c	2144	2	Do not ignore values returned by functions: oid_array_for_each
EXP05-C	fetch-pack.c	2144	21	Do not cast away a const qualification
EXP12-C	fetch-pack.c	2180	3	Do not ignore values returned by functions: process_section_header
DCL01-C	fetch-pack.c	2183	4	Do not reuse variable names in subscopes: commit
EXP12-C	fetch-pack.c	2196	4	Do not ignore values returned by functions: oidset_insert
MSC01-C	fetch-pack.c	2224	3	Strive for logical completeness
DCL01-C	fmt-merge-msg.c	50	2	Do not reuse variable names in subscopes: tag
DCL01-C	fmt-merge-msg.c	74	3	Do not reuse variable names in subscopes: commit
DCL01-C	fmt-merge-msg.c	85	30	Do not reuse variable names in subscopes: commit
DCL01-C	fmt-merge-msg.c	100	27	Do not reuse variable names in subscopes: commit
EXP36-C	fmt-merge-msg.c	104	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	fmt-merge-msg.c	111	58	Do not reuse variable names in subscopes: merge_parents
DCL00-C	fmt-merge-msg.c	113	2	Const-qualify immutable objects: len
DCL01-C	fmt-merge-msg.c	114	2	Do not reuse variable names in subscopes: origin_data
DCL01-C	fmt-merge-msg.c	118	2	Do not reuse variable names in subscopes: src_data
EXP36-C	fmt-merge-msg.c	140	2	Do not convert pointers into more strictly aligned pointer types
INT07-C	fmt-merge-msg.c	144	17	Use only explicitly signed or unsigned char type for numeric values
INT07-C	fmt-merge-msg.c	154	8	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	fmt-merge-msg.c	166	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	fmt-merge-msg.c	168	17	Do not convert pointers into more strictly aligned pointer types
EXP12-C	fmt-merge-msg.c	175	3	Do not ignore values returned by functions: string_list_append
EXP12-C	fmt-merge-msg.c	179	3	Do not ignore values returned by functions: string_list_append
EXP12-C	fmt-merge-msg.c	182	3	Do not ignore values returned by functions: string_list_append
EXP12-C	fmt-merge-msg.c	186	3	Do not ignore values returned by functions: string_list_append
DCL02-C	fmt-merge-msg.c	668	3	Use visually distinct identifiers: len
DCL00-C	fmt-merge-msg.c	191	3	Const-qualify immutable objects: len
DCL01-C	fmt-merge-msg.c	191	3	Do not reuse variable names in subscopes: len
DCL02-C	fmt-merge-msg.c	668	3	Use visually distinct identifiers: len
MEM34-C	fmt-merge-msg.c	199	2	Only free memory allocated dynamically
INT01-C	fmt-merge-msg.c	206	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	fmt-merge-msg.c	206	15	Ensure that return values are compared against the proper type
INT01-C	fmt-merge-msg.c	208	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	fmt-merge-msg.c	208	15	Ensure that return values are compared against the proper type
INT01-C	fmt-merge-msg.c	213	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fmt-merge-msg.c	213	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fmt-merge-msg.c	216	52	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	fmt-merge-msg.c	230	33	Do not cast away a const qualification
EXP11-C	fmt-merge-msg.c	266	15	Do not apply operators expecting one type to data of an incompatible type
INT36-C	fmt-merge-msg.c	266	15	Take care when converting from pointer to integer or integer to pointer
MEM34-C	fmt-merge-msg.c	267	2	Only free memory allocated dynamically
DCL01-C	fmt-merge-msg.c	272	21	Do not reuse variable names in subscopes: commit
EXP36-C	fmt-merge-msg.c	281	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	fmt-merge-msg.c	281	46	Do not convert pointers into more strictly aligned pointer types
INT01-C	fmt-merge-msg.c	287	17	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	fmt-merge-msg.c	287	17	Ensure that return values are compared against the proper type
INT01-C	fmt-merge-msg.c	289	22	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	fmt-merge-msg.c	289	22	Ensure that return values are compared against the proper type
INT01-C	fmt-merge-msg.c	317	16	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	fmt-merge-msg.c	317	16	Ensure that return values are compared against the proper type
DCL01-C	fmt-merge-msg.c	340	28	Do not reuse variable names in subscopes: origin_data
DCL01-C	fmt-merge-msg.c	347	2	Do not reuse variable names in subscopes: commit
DCL00-C	fmt-merge-msg.c	352	2	Const-qualify immutable objects: flags
DCL00-C	fmt-merge-msg.c	355	2	Const-qualify immutable objects: limit
EXP12-C	fmt-merge-msg.c	363	2	Do not ignore values returned by functions: setup_revisions
INT01-C	fmt-merge-msg.c	384	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fmt-merge-msg.c	408	16	Use rsize_t or size_t for all integer values representing the size of an object
STR05-C	fmt-merge-msg.c	447	2	Use pointers to const when referring to string literals
INT01-C	fmt-merge-msg.c	450	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	fmt-merge-msg.c	451	3	Do not reuse variable names in subscopes: src_data
EXP36-C	fmt-merge-msg.c	451	44	Do not convert pointers into more strictly aligned pointer types
INT01-C	fmt-merge-msg.c	518	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	fmt-merge-msg.c	519	43	Do not convert pointers into more strictly aligned pointer types
INT01-C	fmt-merge-msg.c	535	8	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	fmt-merge-msg.c	569	3	Only free memory allocated dynamically
INT01-C	fmt-merge-msg.c	586	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	fmt-merge-msg.c	608	12	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	fmt-merge-msg.c	611	3	Do not ignore values returned by functions: commit_list_insert
DCL01-C	fmt-merge-msg.c	644	2	Do not reuse variable names in subscopes: merge_parents
EXP12-C	fmt-merge-msg.c	647	3	Do not ignore values returned by functions: string_list_append
EXP12-C	fmt-merge-msg.c	648	3	Do not ignore values returned by functions: string_list_append
EXP12-C	fmt-merge-msg.c	651	2	Do not ignore values returned by functions: memset
INT01-C	fmt-merge-msg.c	667	13	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	fmt-merge-msg.c	675	10	Use only explicitly signed or unsigned char type for numeric values
INT01-C	fmt-merge-msg.c	680	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fmt-merge-msg.c	698	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	fmt-merge-msg.c	700	22	Do not convert pointers into more strictly aligned pointer types
MEM01-C	fmt-merge-msg.c	706	2	Store a new value in pointers immediately after free()
MEM34-C	fmt-merge-msg.c	706	2	Only free memory allocated dynamically
DCL00-C	fsck.c	46	3	Const-qualify immutable objects: len
INT07-C	fsck.c	54	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	fsck.c	55	6	Use only explicitly signed or unsigned char type for numeric values
INT07-C	fsck.c	66	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	fsck.c	69	6	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	fsck.c	99	2	Detect and remove code that has no effect
EXP06-C	fsck.c	99	2	Operands to the sizeof operator should not contain side effects
EXP12-C	fsck.c	128	2	Do not ignore values returned by functions: parse_msg_type
EXP36-C	fsck.c	139	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	fsck.c	151	2	Const-qualify immutable objects: msg_id
DCL00-C	fsck.c	152	2	Const-qualify immutable objects: msg_type
DCL00-C	fsck.c	169	3	Const-qualify immutable objects: len
INT07-C	fsck.c	176	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	fsck.c	181	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	fsck.c	182	14	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	fsck.c	198	2	Only free memory allocated dynamically
DCL01-C	fsck.c	209	51	Do not reuse variable names in subscopes: object_type
DCL00-C	fsck.c	212	2	Const-qualify immutable objects: ap
EXP12-C	fsck.c	231	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	fsck.c	236	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	fsck.c	263	2	Const-qualify immutable objects: ap
EXP12-C	fsck.c	274	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	fsck.c	277	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	fsck.c	291	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	fsck.c	300	40	Do not reuse variable names in subscopes: tree
EXP11-C	fsck.c	321	10	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	fsck.c	328	10	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	fsck.c	347	44	Do not reuse variable names in subscopes: commit
DCL01-C	fsck.c	416	38	Do not reuse variable names in subscopes: tag
INT01-C	fsck.c	458	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsck.c	458	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsck.c	458	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsck.c	458	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsck.c	458	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsck.c	458	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsck.c	458	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsck.c	458	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsck.c	458	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	fsck.c	458	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	fsck.c	493	2	Const-qualify immutable objects: len1
DCL00-C	fsck.c	494	2	Const-qualify immutable objects: len2
DCL00-C	fsck.c	495	2	Const-qualify immutable objects: len
INT13-C	fsck.c	598	17	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	599	17	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	600	18	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	601	11	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	602	14	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	603	14	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	604	16	Use bitwise operators only on unsigned operands
EXP05-C	fsck.c	604	20	Do not cast away a const qualification
INT13-C	fsck.c	638	16	Use bitwise operators only on unsigned operands
EXP05-C	fsck.c	749	23	Do not cast away a const qualification
MSC01-C	fsck.c	753	3	Strive for logical completeness
DCL01-C	fsck.c	894	2	Do not reuse variable names in subscopes: eol
MEM01-C	fsck.c	1081	3	Store a new value in pointers immediately after free()
MEM34-C	fsck.c	1081	3	Only free memory allocated dynamically
EXP36-C	fsck.c	1118	38	Do not convert pointers into more strictly aligned pointer types
INT13-C	fsck.c	1129	13	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	1136	13	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	1143	13	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	1150	13	Use bitwise operators only on unsigned operands
MEM34-C	fsck.c	1154	2	Only free memory allocated dynamically
EXP12-C	fsck.c	1167	2	Do not ignore values returned by functions: oidset_insert
INT13-C	fsck.c	1189	12	Use bitwise operators only on unsigned operands
DCL01-C	fsck.c	1219	21	Do not reuse variable names in subscopes: object_type
MSC12-C	fsck.c	1228	2	Detect and remove code that has no effect
INT13-C	fsck.c	1251	8	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	1259	8	Use bitwise operators only on unsigned operands
INT13-C	fsck.c	1261	8	Use bitwise operators only on unsigned operands
MEM34-C	fsck.c	1265	3	Only free memory allocated dynamically
EXP36-C	fsck.c	1276	33	Do not convert pointers into more strictly aligned pointer types
EXP05-C	fsck.c	1284	8	Do not cast away a const qualification
DCL01-C	fsck.c	1304	26	Do not reuse variable names in subscopes: object_type
EXP12-C	fsck.c	1310	3	Do not ignore values returned by functions: puts
DCL02-C	fsmonitor.c	15	1	Use visually distinct identifiers: trace_fsmonitor
INT01-C	fsmonitor.c	19	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsmonitor.c	29	35	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	fsmonitor.c	32	18	Use bitwise operators only on unsigned operands
DCL01-C	fsmonitor.c	54	2	Do not reuse variable names in subscopes: index
INT01-C	fsmonitor.c	62	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsmonitor.c	62	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsmonitor.c	73	28	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fsmonitor.c	134	2	Do not ignore values returned by functions: ewah_serialize_strbuf
INT01-C	fsmonitor.c	139	31	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	fsmonitor.c	163	2	Do not ignore values returned by functions: strvec_push
EXP12-C	fsmonitor.c	164	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	fsmonitor.c	165	2	Do not ignore values returned by functions: strvec_pushf
DCL00-C	fsmonitor.c	186	2	Const-qualify immutable objects: len
INT32-C	fsmonitor.c	208	10	Ensure that operations on signed integers do not result in overflow
INT13-C	fsmonitor.c	214	34	Use bitwise operators only on unsigned operands
INT07-C	fsmonitor.c	221	17	Use only explicitly signed or unsigned char type for numeric values
INT13-C	fsmonitor.c	227	35	Use bitwise operators only on unsigned operands
INT32-C	fsmonitor.c	240	9	Ensure that operations on signed integers do not result in overflow
INT13-C	fsmonitor.c	248	35	Use bitwise operators only on unsigned operands
DCL00-C	fsmonitor.c	308	2	Const-qualify immutable objects: fsm_mode
DCL00-C	fsmonitor.c	309	2	Const-qualify immutable objects: reason
MEM34-C	fsmonitor.c	315	3	Only free memory allocated dynamically
INT01-C	fsmonitor.c	343	32	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	fsmonitor.c	364	2	Detect and remove code that has no effect
INT01-C	fsmonitor.c	404	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	fsmonitor.c	459	19	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	fsmonitor.c	495	35	Use bitwise operators only on unsigned operands
INT13-C	fsmonitor.c	560	34	Use bitwise operators only on unsigned operands
DCL00-C	fsmonitor.c	585	2	Const-qualify immutable objects: fsmonitor_enabled
DCL13-C	fsmonitor-ipc.c	21	56	Declare function parameters that are pointers to values not changed by the function as const: r
DCL13-C	fsmonitor-ipc.c	32	25	Declare function parameters that are pointers to values not changed by the function as const: answer
DCL13-C	fsmonitor-ipc.c	38	20	Declare function parameters that are pointers to values not changed by the function as const: answer
EXP36-C	fsmonitor-settings.c	94	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	fsmonitor-settings.c	166	2	Const-qualify immutable objects: reason
DCL00-C	fsmonitor-settings.c	189	2	Const-qualify immutable objects: reason
MSC01-C	fsmonitor-settings.c	252	2	Strive for logical completeness
MEM01-C	fsmonitor-settings.c	263	3	Store a new value in pointers immediately after free()
MEM34-C	fsmonitor-settings.c	263	3	Only free memory allocated dynamically
EXP05-C	fsmonitor-settings.c	286	24	Do not cast away a const qualification
DCL00-C	gettext.c	73	2	Const-qualify immutable objects: ap
EXP12-C	gettext.c	74	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	gettext.c	76	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	gettext.c	83	2	Do not ignore values returned by functions: bind_textdomain_codeset
MEM34-C	gettext.c	112	3	Only free memory allocated dynamically
EXP12-C	gettext.c	116	2	Do not ignore values returned by functions: bindtextdomain
EXP12-C	gettext.c	117	2	Do not ignore values returned by functions: setlocale
EXP12-C	gettext.c	118	2	Do not ignore values returned by functions: setlocale
EXP12-C	gettext.c	120	2	Do not ignore values returned by functions: textdomain
MEM34-C	gettext.c	122	2	Only free memory allocated dynamically
DCL01-C	gettext.c	128	2	Do not reuse variable names in subscopes: is_utf8
DCL01-C	gpg-interface.c	25	2	Do not reuse variable names in subscopes: sign_buffer
INT01-C	gpg-interface.c	111	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	gpg-interface.c	121	18	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	gpg-interface.c	158	21	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	158	21	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	159	20	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	159	20	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	160	40	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	161	20	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	161	20	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	162	23	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	162	23	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	163	23	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	163	23	Use bitwise operators only on unsigned operands
INT01-C	gpg-interface.c	196	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	gpg-interface.c	196	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	gpg-interface.c	224	19	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	gpg-interface.c	247	16	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	gpg-interface.c	262	6	Const-qualify immutable objects: trust_size
MEM01-C	gpg-interface.c	266	7	Store a new value in pointers immediately after free()
MEM31-C	gpg-interface.c	266	7	Free dynamically allocated memory when no longer needed
MEM34-C	gpg-interface.c	266	7	Only free memory allocated dynamically
MEM30-C	gpg-interface.c	269	6	Do not access freed memory
MEM34-C	gpg-interface.c	269	6	Only free memory allocated dynamically
INT07-C	gpg-interface.c	310	15	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	gpg-interface.c	334	3	Detect and remove code that has no effect
EXP12-C	gpg-interface.c	340	2	Do not ignore values returned by functions: strvec_push
EXP12-C	gpg-interface.c	347	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	gpg-interface.c	350	2	Do not ignore values returned by functions: sigchain_pop
INT13-C	gpg-interface.c	354	6	Use bitwise operators only on unsigned operands
INT07-C	gpg-interface.c	385	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	gpg-interface.c	402	16	Use only explicitly signed or unsigned char type for numeric values
INT07-C	gpg-interface.c	407	16	Use only explicitly signed or unsigned char type for numeric values
INT07-C	gpg-interface.c	422	16	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	gpg-interface.c	426	2	Only free memory allocated dynamically
MSC12-C	gpg-interface.c	452	3	Detect and remove code that has no effect
MSC12-C	gpg-interface.c	461	3	Detect and remove code that has no effect
MSC12-C	gpg-interface.c	481	3	Detect and remove code that has no effect
EXP12-C	gpg-interface.c	496	3	Do not ignore values returned by functions: pipe_command
INT07-C	gpg-interface.c	515	21	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	gpg-interface.c	534	4	Do not ignore values returned by functions: strvec_push
EXP12-C	gpg-interface.c	557	4	Do not ignore values returned by functions: sigchain_push
EXP12-C	gpg-interface.c	560	4	Do not ignore values returned by functions: sigchain_pop
MEM34-C	gpg-interface.c	562	4	Only free memory allocated dynamically
INT07-C	gpg-interface.c	635	15	Use only explicitly signed or unsigned char type for numeric values
INT13-C	gpg-interface.c	650	9	Use bitwise operators only on unsigned operands
INT13-C	gpg-interface.c	651	9	Use bitwise operators only on unsigned operands
DCL01-C	gpg-interface.c	673	3	Do not reuse variable names in subscopes: eol
INT01-C	gpg-interface.c	679	7	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	gpg-interface.c	686	2	Const-qualify immutable objects: match
EXP12-C	gpg-interface.c	689	3	Do not ignore values returned by functions: remove_signature
DCL13-C	gpg-interface.c	702	62	Declare function parameters that are pointers to values not changed by the function as const: cb
MEM01-C	gpg-interface.c	733	3	Store a new value in pointers immediately after free()
MEM34-C	gpg-interface.c	733	3	Only free memory allocated dynamically
MEM01-C	gpg-interface.c	877	2	Store a new value in pointers immediately after free()
MEM34-C	gpg-interface.c	877	2	Only free memory allocated dynamically
MEM01-C	gpg-interface.c	878	2	Store a new value in pointers immediately after free()
MEM34-C	gpg-interface.c	878	2	Only free memory allocated dynamically
INT01-C	gpg-interface.c	914	28	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	gpg-interface.c	921	33	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	gpg-interface.c	968	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	gpg-interface.c	971	2	Do not ignore values returned by functions: sigchain_pop
EXP30-C	gpg-interface.c	974	7	Do not depend on order of evaluation for side effects
INT13-C	gpg-interface.c	979	6	Use bitwise operators only on unsigned operands
MSC12-C	gpg-interface.c	1015	4	Detect and remove code that has no effect
MSC12-C	gpg-interface.c	1027	3	Detect and remove code that has no effect
MSC12-C	gpg-interface.c	1033	3	Detect and remove code that has no effect
EXP12-C	gpg-interface.c	1045	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	gpg-interface.c	1047	2	Do not ignore values returned by functions: sigchain_pop
MSC12-C	gpg-interface.c	1053	3	Detect and remove code that has no effect
MEM34-C	gpg-interface.c	1079	2	Only free memory allocated dynamically
DCL01-C	graph.c	54	2	Do not reuse variable names in subscopes: commit
EXP12-C	graph.c	76	2	Do not ignore values returned by functions: fwrite
EXP05-C	graph.c	99	5	Do not cast away a const qualification
EXP12-C	graph.c	102	2	Do not ignore values returned by functions: strvec_push
DCL01-C	graph.c	158	2	Do not reuse variable names in subscopes: commit
EXP36-C	graph.c	316	28	Do not convert pointers into more strictly aligned pointer types
MSC12-C	graph.c	319	2	Detect and remove code that has no effect
EXP36-C	graph.c	344	35	Do not convert pointers into more strictly aligned pointer types
MEM01-C	graph.c	356	4	Store a new value in pointers immediately after free()
MEM34-C	graph.c	356	4	Only free memory allocated dynamically
INT01-C	graph.c	359	24	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	graph.c	389	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	graph.c	390	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	graph.c	391	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	graph.c	392	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	graph.c	413	2	Store a new value in pointers immediately after free()
EXP36-C	graph.c	431	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	graph.c	432	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	graph.c	433	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	graph.c	434	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	graph.c	441	73	Do not reuse variable names in subscopes: commit
INT33-C	graph.c	518	66	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL01-C	graph.c	523	33	Do not reuse variable names in subscopes: commit
DCL13-C	graph.c	534	24	Declare function parameters that are pointers to values not changed by the function as const: commit
DCL01-C	graph.c	534	24	Do not reuse variable names in subscopes: commit
DCL01-C	graph.c	545	23	Do not reuse variable names in subscopes: commit
INT01-C	graph.c	613	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	graph.c	613	2	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	graph.c	658	31	Do not form or use out-of-bounds pointers or array subscripts
DCL01-C	graph.c	737	59	Do not reuse variable names in subscopes: commit
DCL00-C	graph.c	809	3	Const-qualify immutable objects: target
INT01-C	graph.c	829	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	graph.c	830	47	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	graph.c	880	2	Detect and remove code that has no effect
MSC12-C	graph.c	886	2	Detect and remove code that has no effect
EXP06-C	graph.c	886	2	Operands to the sizeof operator should not contain side effects
EXP06-C	graph.c	886	2	Operands to the sizeof operator should not contain side effects
MSC12-C	graph.c	938	3	Detect and remove code that has no effect
DCL00-C	graph.c	983	2	Const-qualify immutable objects: dashed_parents
ARR30-C	graph.c	1017	31	Do not form or use out-of-bounds pointers or array subscripts
MSC12-C	graph.c	1109	5	Detect and remove code that has no effect
INT01-C	graph.c	1164	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	graph.c	1164	2	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	graph.c	1173	3	Const-qualify immutable objects: target
MSC12-C	graph.c	1187	3	Detect and remove code that has no effect
MSC12-C	graph.c	1194	4	Detect and remove code that has no effect
ARR30-C	graph.c	1194	4	Do not form or use out-of-bounds pointers or array subscripts
MSC12-C	graph.c	1240	4	Detect and remove code that has no effect
MSC12-C	graph.c	1241	4	Detect and remove code that has no effect
INT01-C	graph.c	1262	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	graph.c	1262	2	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	graph.c	1287	20	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	graph.c	1292	19	Do not form or use out-of-bounds pointers or array subscripts
MSC01-C	graph.c	1322	2	Strive for logical completeness
EXP12-C	graph.c	1354	3	Do not ignore values returned by functions: graph_next_line
DCL00-C	graph.c	1371	4	Const-qualify immutable objects: len
EXP12-C	graph.c	1413	3	Do not ignore values returned by functions: fwrite
EXP12-C	graph.c	1416	4	Do not ignore values returned by functions: _IO_putc
EXP12-C	graph.c	1434	2	Do not ignore values returned by functions: graph_next_line
EXP12-C	graph.c	1435	2	Do not ignore values returned by functions: fwrite
EXP12-C	graph.c	1449	2	Do not ignore values returned by functions: fwrite
EXP12-C	graph.c	1467	3	Do not ignore values returned by functions: graph_next_line
EXP12-C	graph.c	1468	3	Do not ignore values returned by functions: fwrite
EXP12-C	graph.c	1474	4	Do not ignore values returned by functions: _IO_putc
EXP12-C	graph.c	1505	3	Do not ignore values returned by functions: fwrite
INT01-C	graph.c	1526	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	graph.c	1526	51	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	graph.c	1540	3	Do not ignore values returned by functions: graph_show_remainder
DCL02-C	grep.c	1236	1	Use visually distinct identifiers: grep_use_locks
DCL02-C	grep.c	1242	1	Use visually distinct identifiers: grep_attr_mutex
DCL13-C	grep.c	17	41	Declare function parameters that are pointers to values not changed by the function as const: opt
EXP12-C	grep.c	19	2	Do not ignore values returned by functions: fwrite
INT01-C	grep.c	49	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	grep.c	49	1	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	grep.c	57	25	Do not convert pointers into more strictly aligned pointer types
DCL00-C	grep.c	95	3	Const-qualify immutable objects: i
INT01-C	grep.c	95	11	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	grep.c	123	30	Do not convert pointers into more strictly aligned pointer types
DCL05-C	grep.c	133	1	Use typedefs to improve code readability
INT01-C	grep.c	155	42	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	grep.c	161	8	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	grep.c	196	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	grep.c	216	15	Do not reuse variable names in subscopes: error
INT07-C	grep.c	225	12	Use only explicitly signed or unsigned char type for numeric values
INT13-C	grep.c	235	7	Use bitwise operators only on unsigned operands
DCL13-C	grep.c	396	52	Declare function parameters that are pointers to values not changed by the function as const: p
DCL13-C	grep.c	401	40	Declare function parameters that are pointers to values not changed by the function as const: p
DCL01-C	grep.c	401	73	Do not reuse variable names in subscopes: eol
DCL13-C	grep.c	402	15	Declare function parameters that are pointers to values not changed by the function as const: match
DCL13-C	grep.c	407	49	Declare function parameters that are pointers to values not changed by the function as const: p
INT13-C	grep.c	419	12	Use bitwise operators only on unsigned operands
EXP12-C	grep.c	424	3	Do not ignore values returned by functions: regerror
INT13-C	grep.c	502	12	Use bitwise operators only on unsigned operands
EXP12-C	grep.c	508	3	Do not ignore values returned by functions: regerror
EXP36-C	grep.c	515	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	grep.c	525	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	grep.c	555	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	grep.c	638	31	Do not convert pointers into more strictly aligned pointer types
DCL00-C	grep.c	693	2	Const-qualify immutable objects: z
MSC12-C	grep.c	696	3	Detect and remove code that has no effect
MSC01-C	grep.c	756	2	Strive for logical completeness
MEM01-C	grep.c	769	2	Store a new value in pointers immediately after free()
MEM34-C	grep.c	791	3	Only free memory allocated dynamically
INT13-C	grep.c	812	9	Use bitwise operators only on unsigned operands
DCL01-C	grep.c	841	37	Do not reuse variable names in subscopes: eol
DCL01-C	grep.c	857	2	Do not reuse variable names in subscopes: eol
DCL01-C	grep.c	877	35	Do not reuse variable names in subscopes: eol
DCL01-C	grep.c	939	38	Do not reuse variable names in subscopes: eol
MSC12-C	grep.c	947	3	Detect and remove code that has no effect
INT01-C	grep.c	947	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	grep.c	947	3	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	grep.c	969	36	Do not reuse variable names in subscopes: eol
INT13-C	grep.c	988	18	Use bitwise operators only on unsigned operands
INT13-C	grep.c	1006	6	Use bitwise operators only on unsigned operands
INT13-C	grep.c	1026	5	Use bitwise operators only on unsigned operands
DCL01-C	grep.c	1038	38	Do not reuse variable names in subscopes: eol
DCL01-C	grep.c	1047	38	Do not reuse variable names in subscopes: eol
DCL01-C	grep.c	1080	39	Do not reuse variable names in subscopes: eol
DCL01-C	grep.c	1102	36	Do not reuse variable names in subscopes: eol
INT13-C	grep.c	1122	9	Use bitwise operators only on unsigned operands
EXP12-C	grep.c	1148	3	Do not ignore values returned by functions: xsnprintf
EXP12-C	grep.c	1159	3	Do not ignore values returned by functions: xsnprintf
DCL01-C	grep.c	1166	38	Do not reuse variable names in subscopes: eol
DCL00-C	grep.c	1196	3	Const-qualify immutable objects: ctx
DCL01-C	grep.c	1257	35	Do not reuse variable names in subscopes: eol
EXP36-C	grep.c	1259	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	grep.c	1266	22	Do not convert pointers into more strictly aligned pointer types
DCL01-C	grep.c	1287	3	Do not reuse variable names in subscopes: eol
DCL01-C	grep.c	1327	3	Do not reuse variable names in subscopes: eol
DCL01-C	grep.c	1358	3	Do not reuse variable names in subscopes: eol
INT07-C	grep.c	1358	3	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	grep.c	1443	23	Do not convert pointers into more strictly aligned pointer types
INT01-C	grep.c	1479	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	grep.c	1484	55	Do not reuse variable names in subscopes: eol
EXP12-C	grep.c	1565	2	Do not ignore values returned by functions: memset
DCL01-C	grep.c	1576	3	Do not reuse variable names in subscopes: eol
EXP12-C	grep.c	1718	3	Do not ignore values returned by functions: xsnprintf
EXP12-C	grep.c	1765	2	Do not ignore values returned by functions: grep_source_1
MSC01-C	grep.c	1837	2	Strive for logical completeness
EXP05-C	grep.c	1841	8	Do not cast away a const qualification
EXP36-C	grep.c	1855	46	Do not convert pointers into more strictly aligned pointer types
EXP36-C	grep.c	1858	10	Do not convert pointers into more strictly aligned pointer types
POS35-C	grep.c	1881	6	Avoid race conditions while checking for the existence of a symbolic link
MSC12-C	grep.c	1886	3	Detect and remove code that has no effect
MEM34-C	grep.c	1888	3	Only free memory allocated dynamically
INT01-C	grep.c	1894	11	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	grep.c	1903	2	Strive for logical completeness
INT13-C	hash-lookup.c	6	32	Use bitwise operators only on unsigned operands
INT01-C	hash-lookup.c	6	48	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	hash-lookup.c	63	9	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	hash-lookup.c	63	9	Ensure that return values are compared against the proper type
INT01-C	hash-lookup.c	66	44	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	hash-lookup.c	66	53	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	hash-lookup.c	68	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	hash-lookup.c	81	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	hash-lookup.c	97	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	hash-lookup.c	98	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	hash-lookup.c	112	3	Const-qualify immutable objects: mi
DCL00-C	hash-lookup.c	113	3	Const-qualify immutable objects: cmp
INT01-C	hash-lookup.c	113	32	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	hashmap.c	14	8	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	hashmap.c	24	8	Avoid performing bitwise and arithmetic operations on the same data
EXP05-C	hashmap.c	32	25	Do not cast away a const qualification
DCL00-C	hashmap.c	34	3	Const-qualify immutable objects: c
INT14-C	hashmap.c	35	8	Avoid performing bitwise and arithmetic operations on the same data
EXP05-C	hashmap.c	43	25	Do not cast away a const qualification
INT14-C	hashmap.c	48	8	Avoid performing bitwise and arithmetic operations on the same data
EXP05-C	hashmap.c	60	25	Do not cast away a const qualification
INT14-C	hashmap.c	65	8	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	hashmap.c	79	2	Do not convert pointers into more strictly aligned pointer types
INT14-C	hashmap.c	91	18	Avoid performing bitwise and arithmetic operations on the same data
DCL00-C	hashmap.c	118	2	Const-qualify immutable objects: oldsize
DCL00-C	hashmap.c	126	4	Const-qualify immutable objects: b
MEM34-C	hashmap.c	132	2	Only free memory allocated dynamically
EXP12-C	hashmap.c	158	2	Do not ignore values returned by functions: memset
INT01-C	hashmap.c	166	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	hashmap.c	197	2	Do not ignore values returned by functions: memset
INT01-C	hashmap.c	197	39	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	hashmap.c	209	2	Do not ignore values returned by functions: memset
DCL00-C	hashmap.c	282	2	Const-qualify immutable objects: old
EXP11-C	hashmap.c	323	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	hashmap.c	323	7	Do not cast away a const qualification
EXP11-C	hashmap.c	324	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	hashmap.c	324	7	Do not cast away a const qualification
EXP36-C	hashmap.c	342	6	Do not convert pointers into more strictly aligned pointer types
DCL00-C	hashmap.c	345	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	hashmap.c	345	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	help.c	72	6	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	help.c	75	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	help.c	75	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	help.c	77	18	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	help.c	80	23	Use bitwise operators only on unsigned operands
INT13-C	help.c	98	24	Use bitwise operators only on unsigned operands
DCL00-C	help.c	99	4	Const-qualify immutable objects: len
INT01-C	help.c	101	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	help.c	102	28	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	help.c	103	4	Do not ignore values returned by functions: puts
EXP36-C	help.c	110	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	help.c	111	34	Do not convert pointers into more strictly aligned pointer types
INT13-C	help.c	125	8	Use bitwise operators only on unsigned operands
INT01-C	help.c	130	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	help.c	136	3	Use visually distinct identifiers: mask
DCL00-C	help.c	136	3	Const-qualify immutable objects: mask
DCL01-C	help.c	136	3	Do not reuse variable names in subscopes: mask
DCL02-C	help.c	136	3	Use visually distinct identifiers: mask
EXP12-C	help.c	141	3	Do not ignore values returned by functions: puts
MEM01-C	help.c	144	2	Store a new value in pointers immediately after free()
MEM34-C	help.c	144	2	Only free memory allocated dynamically
DCL00-C	help.c	152	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	help.c	152	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	help.c	155	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	help.c	171	23	Do not cast away a const qualification
EXP05-C	help.c	172	23	Do not cast away a const qualification
EXP12-C	help.c	223	3	Do not ignore values returned by functions: string_list_append
EXP12-C	help.c	229	2	Do not ignore values returned by functions: memset
EXP12-C	help.c	266	3	Do not ignore values returned by functions: strip_suffix
EXP12-C	help.c	270	2	Do not ignore values returned by functions: closedir
INT07-C	help.c	294	12	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	help.c	302	3	Store a new value in pointers immediately after free()
MEM34-C	help.c	302	3	Only free memory allocated dynamically
EXP36-C	help.c	312	26	Do not convert pointers into more strictly aligned pointer types
EXP12-C	help.c	327	3	Do not ignore values returned by functions: printf_ln
EXP12-C	help.c	328	3	Do not ignore values returned by functions: putchar
EXP12-C	help.c	330	3	Do not ignore values returned by functions: putchar
EXP12-C	help.c	334	3	Do not ignore values returned by functions: puts
EXP12-C	help.c	335	3	Do not ignore values returned by functions: putchar
EXP12-C	help.c	337	3	Do not ignore values returned by functions: putchar
EXP12-C	help.c	343	2	Do not ignore values returned by functions: puts
EXP12-C	help.c	344	2	Do not ignore values returned by functions: putchar
EXP12-C	help.c	353	2	Do not ignore values returned by functions: memset
EXP12-C	help.c	354	2	Do not ignore values returned by functions: memset
EXP12-C	help.c	358	3	Do not ignore values returned by functions: string_list_append
EXP12-C	help.c	369	2	Do not ignore values returned by functions: memset
EXP12-C	help.c	370	2	Do not ignore values returned by functions: memset
EXP12-C	help.c	374	3	Do not ignore values returned by functions: string_list_append
DCL00-C	help.c	383	2	Const-qualify immutable objects: n
INT01-C	help.c	383	13	Use rsize_t or size_t for all integer values representing the size of an object
INT34-C	help.c	388	17	Do not shift a negative number of bits or more bits than exist in the operand
INT13-C	help.c	398	23	Use bitwise operators only on unsigned operands
EXP12-C	help.c	400	3	Do not ignore values returned by functions: string_list_append
EXP12-C	help.c	437	2	Do not ignore values returned by functions: putchar
EXP12-C	help.c	447	2	Do not ignore values returned by functions: putchar
EXP12-C	help.c	457	2	Do not ignore values returned by functions: putchar
EXP36-C	help.c	462	29	Do not convert pointers into more strictly aligned pointer types
INT01-C	help.c	478	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	help.c	537	1	Use visually distinct identifiers: aliases
DCL01-C	help.c	486	2	Do not reuse variable names in subscopes: aliases
DCL02-C	help.c	537	1	Use visually distinct identifiers: aliases
INT01-C	help.c	492	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	help.c	537	1	Use visually distinct identifiers: aliases
DCL00-C	help.c	493	3	Const-qualify immutable objects: len
DCL02-C	help.c	537	1	Use visually distinct identifiers: aliases
INT01-C	help.c	494	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	help.c	537	1	Use visually distinct identifiers: aliases
DCL02-C	help.c	537	1	Use visually distinct identifiers: aliases
EXP36-C	help.c	500	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	help.c	500	3	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	help.c	537	1	Use visually distinct identifiers: aliases
INT01-C	help.c	501	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	help.c	537	1	Use visually distinct identifiers: aliases
MEM01-C	help.c	508	3	Store a new value in pointers immediately after free()
MEM34-C	help.c	508	3	Only free memory allocated dynamically
EXP12-C	help.c	517	2	Do not ignore values returned by functions: puts
EXP12-C	help.c	518	2	Do not ignore values returned by functions: putchar
DCL00-C	help.c	557	4	Const-qualify immutable objects: v
EXP36-C	help.c	571	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	help.c	571	53	Do not convert pointers into more strictly aligned pointer types
DCL00-C	help.c	573	2	Const-qualify immutable objects: l1
DCL00-C	help.c	574	2	Const-qualify immutable objects: l2
EXP36-C	help.c	581	2	Do not convert pointers into more strictly aligned pointer types
STR11-C	help.c	593	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	help.c	603	2	Do not ignore values returned by functions: memset
EXP12-C	help.c	604	2	Do not ignore values returned by functions: memset
EXP12-C	help.c	605	2	Do not ignore values returned by functions: memset
EXP12-C	help.c	616	3	Do not ignore values returned by functions: fprintf_ln
MEM34-C	help.c	659	2	Only free memory allocated dynamically
INT01-C	help.c	677	25	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	help.c	677	43	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	help.c	685	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	help.c	704	4	Do not ignore values returned by functions: fprintf_ln
EXP12-C	help.c	713	2	Do not ignore values returned by functions: fprintf_ln
EXP12-C	help.c	716	3	Do not ignore values returned by functions: fprintf_ln
DCL01-C	help.c	759	2	Do not reuse variable names in subscopes: usage
DCL01-C	help.c	799	50	Do not reuse variable names in subscopes: ref
EXP12-C	help.c	806	2	Do not ignore values returned by functions: for_each_ref
DCL01-C	help.c	810	44	Do not reuse variable names in subscopes: ref
DCL01-C	help.c	811	23	Do not reuse variable names in subscopes: error
EXP12-C	help.c	816	2	Do not ignore values returned by functions: fprintf_ln
INT01-C	help.c	818	24	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	help.c	819	3	Do not ignore values returned by functions: fprintf_ln
INT01-C	help.c	823	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	hex.c	3	1	Use visually distinct identifiers: hexval_table
DCL00-C	hex.c	41	3	Const-qualify immutable objects: val
INT01-C	hex.c	54	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	hex.c	55	3	Const-qualify immutable objects: val
DCL00-C	hex.c	72	2	Const-qualify immutable objects: ret
DCL00-C	hex.c	101	2	Const-qualify immutable objects: ret
DCL00-C	hex.c	109	2	Const-qualify immutable objects: ret
STR11-C	hex.c	123	2	Do not specify the dimension of a character array initialized with a string literal
INT01-C	hex.c	134	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	hex.c	135	3	Const-qualify immutable objects: val
INT14-C	hex.c	136	10	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	hex.c	137	10	Avoid performing bitwise and arithmetic operations on the same data
INT07-C	hex.c	139	7	Use only explicitly signed or unsigned char type for numeric values
INT01-C	hex.c	153	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	hook.c	13	3	Const-qualify immutable objects: err
EXP12-C	hook.c	27	5	Do not ignore values returned by functions: string_list_insert
DCL13-C	hook.c	46	21	Declare function parameters that are pointers to values not changed by the function as const: out
DCL13-C	hook.c	48	13	Declare function parameters that are pointers to values not changed by the function as const: pp_task_cb
EXP36-C	hook.c	50	33	Do not convert pointers into more strictly aligned pointer types
EXP12-C	hook.c	62	2	Do not ignore values returned by functions: strvec_push
DCL13-C	hook.c	75	48	Declare function parameters that are pointers to values not changed by the function as const: out
DCL13-C	hook.c	77	11	Declare function parameters that are pointers to values not changed by the function as const: pp_task_cp
EXP36-C	hook.c	79	33	Do not convert pointers into more strictly aligned pointer types
DCL13-C	hook.c	87	20	Declare function parameters that are pointers to values not changed by the function as const: out
DCL13-C	hook.c	89	11	Declare function parameters that are pointers to values not changed by the function as const: pp_task_cb
EXP36-C	hook.c	91	33	Do not convert pointers into more strictly aligned pointer types
INT13-C	hook.c	94	14	Use bitwise operators only on unsigned operands
DCL00-C	hook.c	170	2	Const-qualify immutable objects: ap
EXP12-C	hook.c	173	2	Do not ignore values returned by functions: __builtin_va_start
EXP11-C	hook.c	174	16	Do not apply operators expecting one type to data of an incompatible type
INT36-C	hook.c	174	16	Take care when converting from pointer to integer or integer to pointer
EXP12-C	hook.c	176	2	Do not ignore values returned by functions: __builtin_va_end
INT07-C	ident.c	65	32	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	ident.c	66	3	Const-qualify immutable objects: ch
EXP12-C	ident.c	106	2	Do not ignore values returned by functions: memset
EXP05-C	ident.c	179	9	Do not cast away a const qualification
INT01-C	ident.c	241	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ident.c	242	14	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	ident.c	257	3	Strive for logical completeness
INT07-C	ident.c	261	22	Use only explicitly signed or unsigned char type for numeric values
INT07-C	ident.c	263	19	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	ident.c	277	2	Const-qualify immutable objects: status
EXP12-C	ident.c	279	2	Do not ignore values returned by functions: memset
INT07-C	ident.c	282	22	Use only explicitly signed or unsigned char type for numeric values
INT01-C	ident.c	384	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ident.c	411	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ident.c	412	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	ident.c	453	2	Do not reuse variable names in subscopes: index
DCL00-C	ident.c	456	2	Const-qualify immutable objects: want_date
DCL00-C	ident.c	457	2	Const-qualify immutable objects: want_name
INT01-C	ident.c	460	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ident.c	463	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ident.c	465	48	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ident.c	484	41	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ident.c	486	49	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	ident.c	543	2	Strive for logical completeness
ENV30-C	ident.c	547	10	Do not modify the string returned by getenv()
ENV30-C	ident.c	548	11	Do not modify the string returned by getenv()
ENV00-C	ident.c	551	10	Do not store the pointer to the string returned by getenv()
ENV30-C	ident.c	551	10	Do not modify the string returned by getenv()
ENV30-C	ident.c	552	11	Do not modify the string returned by getenv()
DCL13-C	ident.c	671	64	Declare function parameters that are pointers to values not changed by the function as const: data
INT13-C	ident.c	683	14	Use bitwise operators only on unsigned operands
EXP12-C	ident.c	685	2	Do not ignore values returned by functions: setenv
INT13-C	ident.c	686	9	Use bitwise operators only on unsigned operands
DCL00-C	ident.c	704	2	Const-qualify immutable objects: a_len
DCL00-C	ident.c	705	2	Const-qualify immutable objects: b_len
DCL00-C	ident.c	706	2	Const-qualify immutable objects: min
INT01-C	json-writer.c	51	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	json-writer.c	76	44	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	json-writer.c	87	44	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	json-writer.c	210	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	json-writer.c	211	3	Const-qualify immutable objects: ch
INT01-C	json-writer.c	225	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	json-writer.c	226	3	Const-qualify immutable objects: ch
INT01-C	json-writer.c	254	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	json-writer.c	256	50	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	json-writer.c	397	27	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	kwset.c	57	3	Do not reuse variable names in subscopes: trie
DCL01-C	kwset.c	78	3	Do not reuse variable names in subscopes: obstack
DCL01-C	kwset.c	80	3	Do not reuse variable names in subscopes: trie
DCL01-C	kwset.c	95	3	Do not reuse variable names in subscopes: kwset
EXP12-C	kwset.c	99	3	Do not ignore values returned by functions: _obstack_begin
INT14-C	kwset.c	102	5	Avoid performing bitwise and arithmetic operations on the same data
MSC12-C	kwset.c	102	23	Detect and remove code that has no effect
EXP11-C	kwset.c	102	23	Do not apply operators expecting one type to data of an incompatible type
INT14-C	kwset.c	102	23	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	kwset.c	102	23	Use bitwise operators only on unsigned operands
INT13-C	kwset.c	102	23	Use bitwise operators only on unsigned operands
INT36-C	kwset.c	102	23	Take care when converting from pointer to integer or integer to pointer
INT13-C	kwset.c	102	23	Use bitwise operators only on unsigned operands
INT13-C	kwset.c	102	23	Use bitwise operators only on unsigned operands
DCL01-C	kwset.c	132	3	Do not reuse variable names in subscopes: kwset
DCL01-C	kwset.c	133	3	Do not reuse variable names in subscopes: trie
DCL01-C	kwset.c	135	3	Do not reuse variable names in subscopes: link
EXP11-C	kwset.c	141	11	Do not apply operators expecting one type to data of an incompatible type
INT14-C	kwset.c	173	9	Avoid performing bitwise and arithmetic operations on the same data
MSC12-C	kwset.c	173	27	Detect and remove code that has no effect
EXP11-C	kwset.c	173	27	Do not apply operators expecting one type to data of an incompatible type
INT14-C	kwset.c	173	27	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	kwset.c	173	27	Use bitwise operators only on unsigned operands
INT13-C	kwset.c	173	27	Use bitwise operators only on unsigned operands
INT36-C	kwset.c	173	27	Take care when converting from pointer to integer or integer to pointer
INT13-C	kwset.c	173	27	Use bitwise operators only on unsigned operands
INT13-C	kwset.c	173	27	Use bitwise operators only on unsigned operands
INT14-C	kwset.c	179	15	Avoid performing bitwise and arithmetic operations on the same data
MSC12-C	kwset.c	179	33	Detect and remove code that has no effect
EXP11-C	kwset.c	179	33	Do not apply operators expecting one type to data of an incompatible type
INT14-C	kwset.c	179	33	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	kwset.c	179	33	Use bitwise operators only on unsigned operands
INT13-C	kwset.c	179	33	Use bitwise operators only on unsigned operands
INT36-C	kwset.c	179	33	Take care when converting from pointer to integer or integer to pointer
INT13-C	kwset.c	179	33	Use bitwise operators only on unsigned operands
INT13-C	kwset.c	179	33	Use bitwise operators only on unsigned operands
MSC12-C	kwset.c	183	8	Detect and remove code that has no effect
INT07-C	kwset.c	194	18	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	kwset.c	223	9	Detect and remove code that has no effect
INT07-C	kwset.c	224	33	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	kwset.c	228	9	Detect and remove code that has no effect
MSC12-C	kwset.c	229	9	Detect and remove code that has no effect
INT07-C	kwset.c	230	20	Use only explicitly signed or unsigned char type for numeric values
INT07-C	kwset.c	231	20	Use only explicitly signed or unsigned char type for numeric values
INT07-C	kwset.c	232	20	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	kwset.c	243	9	Detect and remove code that has no effect
INT07-C	kwset.c	244	33	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	kwset.c	248	9	Detect and remove code that has no effect
MSC12-C	kwset.c	249	9	Detect and remove code that has no effect
INT07-C	kwset.c	250	20	Use only explicitly signed or unsigned char type for numeric values
INT07-C	kwset.c	251	20	Use only explicitly signed or unsigned char type for numeric values
INT07-C	kwset.c	252	20	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	kwset.c	290	23	Do not reuse variable names in subscopes: tree
DCL01-C	kwset.c	303	40	Do not reuse variable names in subscopes: tree
DCL01-C	kwset.c	306	3	Do not reuse variable names in subscopes: link
DCL01-C	kwset.c	338	40	Do not reuse variable names in subscopes: tree
DCL01-C	kwset.c	371	30	Do not reuse variable names in subscopes: tree
DCL01-C	kwset.c	385	3	Do not reuse variable names in subscopes: kwset
EXP11-C	kwset.c	391	11	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	kwset.c	396	3	Do not ignore values returned by functions: memset
INT14-C	kwset.c	405	21	Avoid performing bitwise and arithmetic operations on the same data
MSC12-C	kwset.c	405	23	Detect and remove code that has no effect
EXP11-C	kwset.c	405	23	Do not apply operators expecting one type to data of an incompatible type
INT14-C	kwset.c	405	23	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	kwset.c	405	23	Use bitwise operators only on unsigned operands
INT13-C	kwset.c	405	23	Use bitwise operators only on unsigned operands
INT36-C	kwset.c	405	23	Take care when converting from pointer to integer or integer to pointer
INT13-C	kwset.c	405	23	Use bitwise operators only on unsigned operands
INT13-C	kwset.c	405	23	Use bitwise operators only on unsigned operands
INT07-C	kwset.c	410	21	Use only explicitly signed or unsigned char type for numeric values
INT01-C	kwset.c	484	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	kwset.c	484	2	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	kwset.c	501	3	Do not reuse variable names in subscopes: kwset
EXP11-C	kwset.c	506	11	Do not apply operators expecting one type to data of an incompatible type
INT01-C	kwset.c	511	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	kwset.c	526	12	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	kwset.c	532	6	Detect and remove code that has no effect
MSC12-C	kwset.c	533	6	Detect and remove code that has no effect
MSC12-C	kwset.c	536	6	Detect and remove code that has no effect
MSC12-C	kwset.c	537	6	Detect and remove code that has no effect
MSC12-C	kwset.c	538	6	Detect and remove code that has no effect
MSC12-C	kwset.c	541	6	Detect and remove code that has no effect
MSC12-C	kwset.c	542	6	Detect and remove code that has no effect
MSC12-C	kwset.c	543	6	Detect and remove code that has no effect
MSC12-C	kwset.c	546	6	Detect and remove code that has no effect
INT32-C	kwset.c	553	30	Ensure that operations on signed integers do not result in overflow
INT32-C	kwset.c	553	43	Ensure that operations on signed integers do not result in overflow
INT32-C	kwset.c	572	28	Ensure that operations on signed integers do not result in overflow
INT32-C	kwset.c	572	41	Ensure that operations on signed integers do not result in overflow
DCL01-C	kwset.c	585	69	Do not reuse variable names in subscopes: kwsmatch
DCL01-C	kwset.c	587	3	Do not reuse variable names in subscopes: kwset
DCL01-C	kwset.c	589	3	Do not reuse variable names in subscopes: trie
DCL01-C	kwset.c	590	3	Do not reuse variable names in subscopes: accept
DCL01-C	kwset.c	596	3	Do not reuse variable names in subscopes: tree
EXP11-C	kwset.c	602	11	Do not apply operators expecting one type to data of an incompatible type
INT01-C	kwset.c	603	11	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	kwset.c	614	7	Detect and remove code that has no effect
INT01-C	kwset.c	618	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	kwset.c	748	20	Do not reuse variable names in subscopes: kwsmatch
DCL01-C	kwset.c	750	3	Do not reuse variable names in subscopes: kwset
EXP11-C	kwset.c	750	31	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	kwset.c	753	7	Const-qualify immutable objects: ret
DCL01-C	kwset.c	770	3	Do not reuse variable names in subscopes: kwset
EXP11-C	kwset.c	772	11	Do not apply operators expecting one type to data of an incompatible type
MSC12-C	kwset.c	773	3	Detect and remove code that has no effect
MEM01-C	kwset.c	774	3	Store a new value in pointers immediately after free()
DCL00-C	levenshtein.c	44	2	Const-qualify immutable objects: len1
DCL00-C	levenshtein.c	44	2	Const-qualify immutable objects: len2
EXP36-C	levenshtein.c	48	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	levenshtein.c	49	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	levenshtein.c	50	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	levenshtein.c	81	2	Store a new value in pointers immediately after free()
MEM34-C	levenshtein.c	81	2	Only free memory allocated dynamically
MEM01-C	levenshtein.c	82	2	Store a new value in pointers immediately after free()
MEM34-C	levenshtein.c	82	2	Only free memory allocated dynamically
MEM34-C	levenshtein.c	83	2	Only free memory allocated dynamically
INT01-C	line-log.c	22	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	line-log.c	22	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	line-log.c	22	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	line-log.c	22	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	line-log.c	46	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	line-log.c	46	2	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	line-log.c	63	2	Detect and remove code that has no effect
MSC12-C	line-log.c	72	2	Detect and remove code that has no effect
EXP06-C	line-log.c	72	2	Operands to the sizeof operator should not contain side effects
EXP36-C	line-log.c	78	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	line-log.c	79	26	Do not convert pointers into more strictly aligned pointer types
MSC12-C	line-log.c	103	3	Detect and remove code that has no effect
MSC12-C	line-log.c	131	2	Detect and remove code that has no effect
MSC12-C	line-log.c	153	2	Detect and remove code that has no effect
DCL00-C	line-log.c	193	3	Const-qualify immutable objects: end
EXP12-C	line-log.c	243	2	Do not ignore values returned by functions: memset
DCL00-C	line-log.c	272	3	Const-qualify immutable objects: cmp
EXP36-C	line-log.c	299	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	line-log.c	319	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	line-log.c	336	2	Do not ignore values returned by functions: memset
EXP12-C	line-log.c	337	2	Do not ignore values returned by functions: memset
EXP12-C	line-log.c	342	2	Do not ignore values returned by functions: memset
MSC12-C	line-log.c	403	2	Detect and remove code that has no effect
EXP36-C	line-log.c	458	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	line-log.c	475	2	Do not reuse variable names in subscopes: commit
DCL01-C	line-log.c	500	65	Do not reuse variable names in subscopes: commit
EXP36-C	line-log.c	526	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	line-log.c	531	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	line-log.c	538	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	line-log.c	551	26	Do not convert pointers into more strictly aligned pointer types
MSC12-C	line-log.c	552	2	Detect and remove code that has no effect
EXP06-C	line-log.c	552	2	Operands to the sizeof operator should not contain side effects
MSC12-C	line-log.c	553	2	Detect and remove code that has no effect
EXP06-C	line-log.c	553	2	Operands to the sizeof operator should not contain side effects
DCL01-C	line-log.c	562	50	Do not reuse variable names in subscopes: commit
MEM34-C	line-log.c	616	3	Only free memory allocated dynamically
EXP36-C	line-log.c	627	37	Do not convert pointers into more strictly aligned pointer types
MSC12-C	line-log.c	629	2	Detect and remove code that has no effect
MSC12-C	line-log.c	644	2	Detect and remove code that has no effect
EXP36-C	line-log.c	686	14	Do not convert pointers into more strictly aligned pointer types
DCL01-C	line-log.c	700	66	Do not reuse variable names in subscopes: commit
DCL01-C	line-log.c	701	29	Do not reuse variable names in subscopes: range
EXP36-C	line-log.c	706	30	Do not convert pointers into more strictly aligned pointer types
DCL01-C	line-log.c	717	75	Do not reuse variable names in subscopes: commit
EXP36-C	line-log.c	720	23	Do not convert pointers into more strictly aligned pointer types
EXP12-C	line-log.c	724	2	Do not ignore values returned by functions: add_decoration
DCL01-C	line-log.c	728	28	Do not reuse variable names in subscopes: commit
EXP36-C	line-log.c	733	25	Do not convert pointers into more strictly aligned pointer types
DCL01-C	line-log.c	741	62	Do not reuse variable names in subscopes: pathspec
DCL01-C	line-log.c	742	32	Do not reuse variable names in subscopes: range
DCL01-C	line-log.c	757	57	Do not reuse variable names in subscopes: pathspec
DCL01-C	line-log.c	758	34	Do not reuse variable names in subscopes: range
EXP12-C	line-log.c	765	3	Do not ignore values returned by functions: strvec_push
MEM34-C	line-log.c	770	2	Only free memory allocated dynamically
DCL01-C	line-log.c	775	2	Do not reuse variable names in subscopes: commit
DCL01-C	line-log.c	776	2	Do not reuse variable names in subscopes: range
MSC12-C	line-log.c	788	2	Detect and remove code that has no effect
DCL01-C	line-log.c	793	58	Do not reuse variable names in subscopes: range
DCL01-C	line-log.c	835	47	Do not reuse variable names in subscopes: range
DCL01-C	line-log.c	838	19	Do not reuse variable names in subscopes: commit
MSC12-C	line-log.c	842	2	Detect and remove code that has no effect
EXP12-C	line-log.c	891	2	Do not ignore values returned by functions: _IO_putc
EXP12-C	line-log.c	892	2	Do not ignore values returned by functions: fwrite
EXP12-C	line-log.c	894	2	Do not ignore values returned by functions: _IO_putc
STR05-C	line-log.c	901	2	Use pointers to const when referring to string literals
DCL01-C	line-log.c	911	77	Do not reuse variable names in subscopes: range
DCL00-C	line-log.c	943	3	Const-qualify immutable objects: t_start
DCL00-C	line-log.c	944	3	Const-qualify immutable objects: t_end
MEM01-C	line-log.c	1004	2	Store a new value in pointers immediately after free()
MEM34-C	line-log.c	1004	2	Only free memory allocated dynamically
MEM34-C	line-log.c	1005	2	Only free memory allocated dynamically
DCL01-C	line-log.c	1012	73	Do not reuse variable names in subscopes: range
DCL01-C	line-log.c	1027	28	Do not reuse variable names in subscopes: range
MSC12-C	line-log.c	1035	2	Detect and remove code that has no effect
MSC12-C	line-log.c	1037	3	Detect and remove code that has no effect
MSC12-C	line-log.c	1048	2	Detect and remove code that has no effect
EXP12-C	line-log.c	1049	2	Do not ignore values returned by functions: diff_populate_filespec
EXP12-C	line-log.c	1054	3	Do not ignore values returned by functions: diff_populate_filespec
EXP36-C	line-log.c	1082	46	Do not convert pointers into more strictly aligned pointer types
MEM01-C	line-log.c	1094	2	Store a new value in pointers immediately after free()
DCL01-C	line-log.c	1100	31	Do not reuse variable names in subscopes: range
MSC12-C	line-log.c	1127	4	Detect and remove code that has no effect
MEM30-C	line-log.c	1131	3	Do not access freed memory
MEM34-C	line-log.c	1131	3	Only free memory allocated dynamically
DCL01-C	line-log.c	1137	57	Do not reuse variable names in subscopes: commit
DCL01-C	line-log.c	1142	3	Do not reuse variable names in subscopes: range
DCL01-C	line-log.c	1149	25	Do not reuse variable names in subscopes: commit
DCL01-C	line-log.c	1150	32	Do not reuse variable names in subscopes: range
DCL01-C	line-log.c	1179	80	Do not reuse variable names in subscopes: commit
DCL01-C	line-log.c	1180	30	Do not reuse variable names in subscopes: range
DCL01-C	line-log.c	1200	77	Do not reuse variable names in subscopes: commit
DCL01-C	line-log.c	1201	34	Do not reuse variable names in subscopes: range
EXP36-C	line-log.c	1213	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	line-log.c	1214	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	line-log.c	1215	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	line-log.c	1235	4	Do not ignore values returned by functions: commit_list_append
MEM01-C	line-log.c	1236	4	Store a new value in pointers immediately after free()
MEM34-C	line-log.c	1236	4	Only free memory allocated dynamically
MEM01-C	line-log.c	1237	4	Store a new value in pointers immediately after free()
MEM34-C	line-log.c	1237	4	Only free memory allocated dynamically
MEM01-C	line-log.c	1253	2	Store a new value in pointers immediately after free()
MEM34-C	line-log.c	1253	2	Only free memory allocated dynamically
MEM01-C	line-log.c	1254	2	Store a new value in pointers immediately after free()
MEM34-C	line-log.c	1254	2	Only free memory allocated dynamically
DCL01-C	line-log.c	1262	83	Do not reuse variable names in subscopes: commit
DCL01-C	line-log.c	1264	2	Do not reuse variable names in subscopes: range
DCL13-C	line-log.c	1284	66	Declare function parameters that are pointers to values not changed by the function as const: rev
DCL01-C	line-log.c	1302	2	Do not reuse variable names in subscopes: commit
MEM34-C	line-log.c	1315	3	Only free memory allocated dynamically
EXP12-C	line-log.c	1320	3	Do not ignore values returned by functions: rewrite_parents
INT32-C	line-range.c	67	12	Ensure that operations on signed integers do not result in overflow
EXP05-C	line-range.c	78	14	Do not cast away a const qualification
INT07-C	line-range.c	78	39	Use only explicitly signed or unsigned char type for numeric values
INT07-C	line-range.c	90	8	Use only explicitly signed or unsigned char type for numeric values
EXP30-C	line-range.c	94	6	Do not depend on order of evaluation for side effects
INT14-C	line-range.c	94	18	Avoid performing bitwise and arithmetic operations on the same data
INT07-C	line-range.c	107	11	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	line-range.c	112	3	Do not ignore values returned by functions: regerror
DCL01-C	line-range.c	118	77	Do not reuse variable names in subscopes: eol
DCL01-C	line-range.c	139	3	Do not reuse variable names in subscopes: eol
EXP12-C	line-range.c	145	4	Do not ignore values returned by functions: regerror
INT07-C	line-range.c	155	15	Use only explicitly signed or unsigned char type for numeric values
EXP05-C	line-range.c	160	29	Do not cast away a const qualification
EXP05-C	line-range.c	160	42	Do not cast away a const qualification
MSC12-C	line-range.c	185	2	Detect and remove code that has no effect
INT07-C	line-range.c	187	15	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	line-range.c	205	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	line-range.c	212	3	Do not ignore values returned by functions: regerror
EXP05-C	line-range.c	216	43	Do not cast away a const qualification
DCL01-C	line-range.c	230	3	Do not reuse variable names in subscopes: eol
MEM01-C	line-range.c	237	2	Store a new value in pointers immediately after free()
MEM34-C	line-range.c	237	2	Only free memory allocated dynamically
MEM01-C	line-range.c	238	2	Store a new value in pointers immediately after free()
MEM34-C	line-range.c	238	2	Only free memory allocated dynamically
INT32-C	line-range.c	267	52	Ensure that operations on signed integers do not result in overflow
INT01-C	line-range.c	276	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	line-range.c	276	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	linear-assignment.c	23	3	Do not ignore values returned by functions: memset
INT01-C	linear-assignment.c	23	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	linear-assignment.c	24	3	Do not ignore values returned by functions: memset
INT01-C	linear-assignment.c	24	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	linear-assignment.c	28	2	Do not ignore values returned by functions: memset
INT01-C	linear-assignment.c	28	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	linear-assignment.c	29	2	Do not ignore values returned by functions: memset
INT01-C	linear-assignment.c	29	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	linear-assignment.c	30	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	linear-assignment.c	52	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	linear-assignment.c	54	3	Const-qualify immutable objects: j1
MEM01-C	linear-assignment.c	70	3	Store a new value in pointers immediately after free()
MEM34-C	linear-assignment.c	70	3	Only free memory allocated dynamically
MEM34-C	linear-assignment.c	71	3	Only free memory allocated dynamically
DCL00-C	linear-assignment.c	90	5	Const-qualify immutable objects: c
EXP36-C	linear-assignment.c	129	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	linear-assignment.c	130	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	linear-assignment.c	131	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	linear-assignment.c	133	3	Const-qualify immutable objects: i1
DCL00-C	linear-assignment.c	164	5	Const-qualify immutable objects: j1
DCL00-C	linear-assignment.c	188	4	Const-qualify immutable objects: j1
INT01-C	linear-assignment.c	198	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	linear-assignment.c	198	4	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	linear-assignment.c	202	2	Store a new value in pointers immediately after free()
MEM34-C	linear-assignment.c	202	2	Only free memory allocated dynamically
MEM01-C	linear-assignment.c	203	2	Store a new value in pointers immediately after free()
MEM34-C	linear-assignment.c	203	2	Only free memory allocated dynamically
MEM01-C	linear-assignment.c	204	2	Store a new value in pointers immediately after free()
MEM34-C	linear-assignment.c	204	2	Only free memory allocated dynamically
MEM01-C	linear-assignment.c	205	2	Store a new value in pointers immediately after free()
MEM34-C	linear-assignment.c	205	2	Only free memory allocated dynamically
MEM34-C	linear-assignment.c	206	2	Only free memory allocated dynamically
MSC01-C	list-objects-filter-options.c	20	2	Strive for logical completeness
DCL00-C	list-objects-filter-options.c	88	3	Const-qualify immutable objects: type
DCL00-C	list-objects-filter-options.c	144	2	Const-qualify immutable objects: new_nr
INT01-C	list-objects-filter-options.c	144	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	144	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	144	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	144	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	144	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	144	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	144	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	list-objects-filter-options.c	144	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	list-objects-filter-options.c	144	2	Do not ignore values returned by functions: memset
INT01-C	list-objects-filter-options.c	144	2	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	list-objects-filter-options.c	154	2	Only free memory allocated dynamically
INT01-C	list-objects-filter-options.c	174	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	list-objects-filter-options.c	179	4	Const-qualify immutable objects: last
INT01-C	list-objects-filter-options.c	179	37	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	list-objects-filter-options.c	180	4	Detect and remove code that has no effect
DCL01-C	list-objects-filter-options.c	204	38	Do not reuse variable names in subscopes: filter
DCL00-C	list-objects-filter-options.c	206	2	Const-qualify immutable objects: orig_len
MSC12-C	list-objects-filter-options.c	219	2	Detect and remove code that has no effect
EXP36-C	list-objects-filter-options.c	225	11	Do not convert pointers into more strictly aligned pointer types
DCL00-C	list-objects-filter-options.c	277	3	Const-qualify immutable objects: new_nr
INT01-C	list-objects-filter-options.c	277	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	277	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	277	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	277	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	277	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	277	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	277	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	list-objects-filter-options.c	277	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	list-objects-filter-options.c	277	3	Do not ignore values returned by functions: memset
INT01-C	list-objects-filter-options.c	277	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter-options.c	279	53	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	list-objects-filter-options.c	292	58	Do not convert pointers into more strictly aligned pointer types
DCL00-C	list-objects-filter-options.c	293	2	Const-qualify immutable objects: init
EXP11-C	list-objects-filter-options.c	293	22	Do not apply operators expecting one type to data of an incompatible type
INT36-C	list-objects-filter-options.c	293	22	Take care when converting from pointer to integer or integer to pointer
DCL01-C	list-objects-filter-options.c	305	74	Do not reuse variable names in subscopes: filter
DCL01-C	list-objects-filter-options.c	313	38	Do not reuse variable names in subscopes: filter
DCL01-C	list-objects-filter-options.c	343	2	Do not reuse variable names in subscopes: promisor_remote
MEM01-C	list-objects-filter-options.c	362	3	Store a new value in pointers immediately after free()
MEM34-C	list-objects-filter-options.c	362	3	Only free memory allocated dynamically
MEM01-C	list-objects-filter-options.c	373	2	Store a new value in pointers immediately after free()
MEM34-C	list-objects-filter-options.c	373	2	Only free memory allocated dynamically
EXP12-C	list-objects-filter-options.c	394	2	Do not ignore values returned by functions: gently_parse_list_objects_filter
EXP36-C	list-objects-filter-options.c	413	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	list-objects-filter-options.c	414	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	list-objects-filter.c	30	2	Do not reuse variable names in subscopes: filter
DCL13-C	list-objects-filter.c	73	21	Declare function parameters that are pointers to values not changed by the function as const: r
DCL13-C	list-objects-filter.c	79	8	Declare function parameters that are pointers to values not changed by the function as const: filter_data_
MSC12-C	list-objects-filter.c	106	3	Detect and remove code that has no effect
DCL13-C	list-objects-filter.c	115	38	Declare function parameters that are pointers to values not changed by the function as const: filter_options
DCL01-C	list-objects-filter.c	116	17	Do not reuse variable names in subscopes: filter
DCL13-C	list-objects-filter.c	162	21	Declare function parameters that are pointers to values not changed by the function as const: r
EXP36-C	list-objects-filter.c	170	48	Do not convert pointers into more strictly aligned pointer types
DCL00-C	list-objects-filter.c	172	2	Const-qualify immutable objects: include_it
EXP12-C	list-objects-filter.c	202	3	Do not ignore values returned by functions: filter_trees_update_omits
INT13-C	list-objects-filter.c	203	38	Use bitwise operators only on unsigned operands
EXP36-C	list-objects-filter.c	206	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	list-objects-filter.c	209	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	list-objects-filter.c	211	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	list-objects-filter.c	212	4	Do not ignore values returned by functions: oidmap_put
INT01-C	list-objects-filter.c	216	32	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	list-objects-filter.c	222	4	Const-qualify immutable objects: been_omitted
INT01-C	list-objects-filter.c	224	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	list-objects-filter.c	244	38	Do not convert pointers into more strictly aligned pointer types
MEM34-C	list-objects-filter.c	248	2	Only free memory allocated dynamically
DCL01-C	list-objects-filter.c	253	17	Do not reuse variable names in subscopes: filter
EXP36-C	list-objects-filter.c	255	45	Do not convert pointers into more strictly aligned pointer types
EXP36-C	list-objects-filter.c	282	48	Do not convert pointers into more strictly aligned pointer types
MSC12-C	list-objects-filter.c	311	3	Detect and remove code that has no effect
DCL01-C	list-objects-filter.c	340	17	Do not reuse variable names in subscopes: filter
EXP36-C	list-objects-filter.c	342	45	Do not convert pointers into more strictly aligned pointer types
EXP36-C	list-objects-filter.c	395	43	Do not convert pointers into more strictly aligned pointer types
DCL01-C	list-objects-filter.c	397	2	Do not reuse variable names in subscopes: frame
INT01-C	list-objects-filter.c	421	53	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	423	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	423	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	423	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	423	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	423	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	423	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	423	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	423	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	423	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	list-objects-filter.c	423	3	Do not convert pointers into more strictly aligned pointer types
INT13-C	list-objects-filter.c	445	18	Use bitwise operators only on unsigned operands
MSC12-C	list-objects-filter.c	452	3	Detect and remove code that has no effect
INT01-C	list-objects-filter.c	452	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	452	3	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	list-objects-filter.c	460	65	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	list-objects-filter.c	460	44	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	list-objects-filter.c	474	3	Detect and remove code that has no effect
INT01-C	list-objects-filter.c	476	53	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	list-objects-filter.c	516	33	Do not convert pointers into more strictly aligned pointer types
MEM34-C	list-objects-filter.c	518	2	Only free memory allocated dynamically
DCL01-C	list-objects-filter.c	523	17	Do not reuse variable names in subscopes: filter
EXP36-C	list-objects-filter.c	525	40	Do not convert pointers into more strictly aligned pointer types
INT01-C	list-objects-filter.c	538	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	538	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	538	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	538	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	538	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	538	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	538	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	538	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	list-objects-filter.c	538	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	list-objects-filter.c	538	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	list-objects-filter.c	553	2	Do not reuse variable names in subscopes: object_type
DCL13-C	list-objects-filter.c	557	21	Declare function parameters that are pointers to values not changed by the function as const: r
DCL13-C	list-objects-filter.c	562	17	Declare function parameters that are pointers to values not changed by the function as const: omits
EXP36-C	list-objects-filter.c	565	48	Do not convert pointers into more strictly aligned pointer types
DCL01-C	list-objects-filter.c	613	17	Do not reuse variable names in subscopes: filter
EXP36-C	list-objects-filter.c	615	45	Do not convert pointers into more strictly aligned pointer types
DCL13-C	list-objects-filter.c	678	17	Declare function parameters that are pointers to values not changed by the function as const: omits
EXP36-C	list-objects-filter.c	681	34	Do not convert pointers into more strictly aligned pointer types
DCL00-C	list-objects-filter.c	687	3	Const-qualify immutable objects: sub_result
EXP36-C	list-objects-filter.c	703	34	Do not convert pointers into more strictly aligned pointer types
MEM34-C	list-objects-filter.c	712	2	Only free memory allocated dynamically
EXP36-C	list-objects-filter.c	728	34	Do not convert pointers into more strictly aligned pointer types
DCL01-C	list-objects-filter.c	739	17	Do not reuse variable names in subscopes: filter
EXP36-C	list-objects-filter.c	741	41	Do not convert pointers into more strictly aligned pointer types
EXP36-C	list-objects-filter.c	745	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	list-objects-filter.c	778	2	Do not reuse variable names in subscopes: filter
MSC12-C	list-objects-filter.c	781	2	Detect and remove code that has no effect
EXP36-C	list-objects-filter.c	794	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	list-objects-filter.c	806	17	Do not reuse variable names in subscopes: filter
DCL01-C	list-objects-filter.c	823	47	Do not reuse variable names in subscopes: filter
MEM01-C	list-objects-filter.c	830	2	Store a new value in pointers immediately after free()
DCL01-C	list-objects.c	18	2	Do not reuse variable names in subscopes: show_object
DCL01-C	list-objects.c	19	2	Do not reuse variable names in subscopes: show_commit
DCL01-C	list-objects.c	21	2	Do not reuse variable names in subscopes: filter
DCL01-C	list-objects.c	25	19	Do not reuse variable names in subscopes: commit
DCL01-C	list-objects.c	33	19	Do not reuse variable names in subscopes: object
DCL01-C	list-objects.c	42	18	Do not reuse variable names in subscopes: blob
DCL13-C	list-objects.c	106	55	Declare function parameters that are pointers to values not changed by the function as const: ctx
DCL13-C	list-objects.c	108	23	Declare function parameters that are pointers to values not changed by the function as const: path
DCL01-C	list-objects.c	120	20	Do not reuse variable names in subscopes: tree
DCL01-C	list-objects.c	168	18	Do not reuse variable names in subscopes: tree
DCL01-C	list-objects.c	237	16	Do not reuse variable names in subscopes: tag
DCL01-C	list-objects.c	251	60	Do not reuse variable names in subscopes: commit
DCL01-C	list-objects.c	269	45	Do not reuse variable names in subscopes: commit
DCL01-C	list-objects.c	278	3	Do not reuse variable names in subscopes: tree
EXP12-C	list-objects.c	283	3	Do not ignore values returned by functions: oidset_insert
DCL01-C	list-objects.c	308	4	Do not reuse variable names in subscopes: commit
DCL01-C	list-objects.c	309	4	Do not reuse variable names in subscopes: tree
EXP12-C	list-objects.c	314	4	Do not ignore values returned by functions: oidset_insert
DCL01-C	list-objects.c	322	4	Do not reuse variable names in subscopes: commit
DCL01-C	list-objects.c	339	4	Do not reuse variable names in subscopes: commit
EXP11-C	list-objects.c	339	28	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	list-objects.c	352	66	Do not reuse variable names in subscopes: tree
MSC12-C	list-objects.c	362	2	Detect and remove code that has no effect
INT01-C	list-objects.c	362	2	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	list-objects.c	362	2	Ensure that return values are compared against the proper type
INT01-C	list-objects.c	362	2	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	list-objects.c	362	2	Ensure that return values are compared against the proper type
DCL01-C	list-objects.c	393	2	Do not reuse variable names in subscopes: commit
DCL01-C	list-objects.c	411	4	Do not reuse variable names in subscopes: tree
DCL01-C	list-objects.c	438	17	Do not reuse variable names in subscopes: show_commit
DCL01-C	list-objects.c	439	17	Do not reuse variable names in subscopes: show_object
MSC12-C	ll-merge.c	63	2	Detect and remove code that has no effect
MSC12-C	ll-merge.c	109	2	Detect and remove code that has no effect
EXP12-C	ll-merge.c	125	2	Do not ignore values returned by functions: memset
MSC12-C	ll-merge.c	152	2	Detect and remove code that has no effect
EXP12-C	ll-merge.c	173	2	Do not ignore values returned by functions: xsnprintf
MSC12-C	ll-merge.c	200	2	Detect and remove code that has no effect
EXP12-C	ll-merge.c	218	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	ll-merge.c	223	2	Do not ignore values returned by functions: strvec_push
EXP12-C	ll-merge.c	240	3	Do not ignore values returned by functions: unlink_or_warn
DCL13-C	ll-merge.c	254	15	Declare function parameters that are pointers to values not changed by the function as const: cb
EXP36-C	ll-merge.c	279	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	ll-merge.c	353	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	ll-merge.c	363	2	Do not reuse variable names in subscopes: strbuf
INT05-C	ll-merge.c	397	17	Use strtol() or a related function to convert a string token to an integer
INT05-C	ll-merge.c	424	17	Use strtol() or a related function to convert a string token to an integer
DCL01-C	lockfile.c	51	2	Do not reuse variable names in subscopes: link
MSC30-C	lockfile.c	136	20	Do not use the rand() function for generating pseudorandom numbers
DCL00-C	lockfile.c	177	2	Const-qualify immutable objects: fd
MSC12-C	lockfile.c	184	4	Detect and remove code that has no effect
INT01-C	lockfile.c	196	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	lockfile.c	200	30	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	lockfile.c	209	3	Const-qualify immutable objects: save_errno
MEM01-C	lockfile.c	210	3	Store a new value in pointers immediately after free()
MEM34-C	lockfile.c	210	3	Only free memory allocated dynamically
MEM34-C	lockfile.c	214	2	Only free memory allocated dynamically
INT01-C	log-tree.c	54	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	log-tree.c	58	2	Const-qualify immutable objects: slot
INT01-C	log-tree.c	58	13	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	log-tree.c	76	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	log-tree.c	76	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	log-tree.c	78	28	Do not convert pointers into more strictly aligned pointer types
EXP36-C	log-tree.c	84	26	Do not convert pointers into more strictly aligned pointer types
INT01-C	log-tree.c	171	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	log-tree.c	199	73	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL01-C	log-tree.c	201	2	Do not reuse variable names in subscopes: commit
EXP12-C	log-tree.c	225	3	Do not ignore values returned by functions: for_each_ref
EXP12-C	log-tree.c	226	3	Do not ignore values returned by functions: head_ref
EXP12-C	log-tree.c	227	3	Do not ignore values returned by functions: for_each_commit_graft
DCL01-C	log-tree.c	231	41	Do not reuse variable names in subscopes: commit
DCL01-C	log-tree.c	240	64	Do not reuse variable names in subscopes: commit
EXP36-C	log-tree.c	242	43	Do not convert pointers into more strictly aligned pointer types
DCL01-C	log-tree.c	252	92	Do not reuse variable names in subscopes: decoration
DCL01-C	log-tree.c	285	72	Do not reuse variable names in subscopes: decoration
DCL01-C	log-tree.c	298	25	Do not reuse variable names in subscopes: commit
DCL01-C	log-tree.c	304	2	Do not reuse variable names in subscopes: decoration
DCL01-C	log-tree.c	350	60	Do not reuse variable names in subscopes: commit
DCL00-C	log-tree.c	382	2	Const-qualify immutable objects: nr
DCL00-C	log-tree.c	383	2	Const-qualify immutable objects: start_len
DCL00-C	log-tree.c	384	2	Const-qualify immutable objects: max_len
INT01-C	log-tree.c	384	49	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	log-tree.c	384	67	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	log-tree.c	396	14	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	log-tree.c	402	25	Do not reuse variable names in subscopes: commit
DCL01-C	log-tree.c	429	67	Do not reuse variable names in subscopes: commit
INT01-C	log-tree.c	446	55	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	log-tree.c	504	2	Do not reuse variable names in subscopes: eol
EXP05-C	log-tree.c	511	51	Do not cast away a const qualification
DCL01-C	log-tree.c	518	65	Do not reuse variable names in subscopes: commit
DCL01-C	log-tree.c	542	75	Do not reuse variable names in subscopes: commit
DCL01-C	log-tree.c	555	49	Do not reuse variable names in subscopes: commit
DCL01-C	log-tree.c	562	45	Do not reuse variable names in subscopes: commit
DCL01-C	log-tree.c	568	2	Do not reuse variable names in subscopes: tag
DCL01-C	log-tree.c	617	63	Do not reuse variable names in subscopes: commit
DCL01-C	log-tree.c	636	2	Do not reuse variable names in subscopes: commit
DCL00-C	log-tree.c	637	2	Const-qualify immutable objects: abbrev_commit
EXP12-C	log-tree.c	654	4	Do not ignore values returned by functions: _IO_putc
EXP12-C	log-tree.c	655	4	Do not ignore values returned by functions: graph_show_remainder
EXP12-C	log-tree.c	657	3	Do not ignore values returned by functions: _IO_putc
EXP12-C	log-tree.c	683	3	Do not ignore values returned by functions: _IO_putc
EXP12-C	log-tree.c	722	4	Do not ignore values returned by functions: _IO_putc
EXP12-C	log-tree.c	724	4	Do not ignore values returned by functions: _IO_putc
EXP12-C	log-tree.c	745	3	Do not ignore values returned by functions: show_mergetag
INT01-C	log-tree.c	802	43	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	log-tree.c	811	3	Do not ignore values returned by functions: _IO_putc
EXP12-C	log-tree.c	824	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	log-tree.c	844	3	Do not ignore values returned by functions: fprintf_ln
EXP12-C	log-tree.c	853	3	Do not ignore values returned by functions: show_range_diff
DCL00-C	log-tree.c	865	3	Const-qualify immutable objects: saved_fmt
INT13-C	log-tree.c	874	35	Use bitwise operators only on unsigned operands
DCL00-C	log-tree.c	884	4	Const-qualify immutable objects: pch
EXP12-C	log-tree.c	889	5	Do not ignore values returned by functions: fwrite
INT13-C	log-tree.c	904	13	Use bitwise operators only on unsigned operands
EXP12-C	log-tree.c	906	4	Do not ignore values returned by functions: _IO_putc
DCL01-C	log-tree.c	913	66	Do not reuse variable names in subscopes: commit
EXP36-C	log-tree.c	936	38	Do not convert pointers into more strictly aligned pointer types
EXP30-C	log-tree.c	938	2	Do not depend on order of evaluation for side effects
EXP36-C	log-tree.c	938	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	log-tree.c	938	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	log-tree.c	1001	2	Do not ignore values returned by functions: log_tree_diff_flush
DCL01-C	log-tree.c	1023	63	Do not reuse variable names in subscopes: commit
DCL00-C	log-tree.c	1029	2	Const-qualify immutable objects: all_need_diff
EXP12-C	log-tree.c	1046	4	Do not ignore values returned by functions: log_tree_diff_flush
DCL00-C	log-tree.c	1052	3	Const-qualify immutable objects: octopus
EXP12-C	log-tree.c	1082	3	Do not ignore values returned by functions: log_tree_diff_flush
INT13-C	log-tree.c	1084	14	Use bitwise operators only on unsigned operands
DCL01-C	log-tree.c	1096	58	Do not reuse variable names in subscopes: commit
DCL00-C	log-tree.c	1101	2	Const-qualify immutable objects: no_free
INT01-C	ls-refs.c	62	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	ls-refs.c	84	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	ls-refs.c	144	30	Do not convert pointers into more strictly aligned pointer types
DCL13-C	ls-refs.c	153	32	Declare function parameters that are pointers to values not changed by the function as const: r
EXP12-C	ls-refs.c	157	2	Do not ignore values returned by functions: memset
INT01-C	ls-refs.c	174	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ls-refs.c	191	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	ls-refs.c	197	2	Do not ignore values returned by functions: for_each_fullref_in_prefixes
DCL13-C	ls-refs.c	206	42	Declare function parameters that are pointers to values not changed by the function as const: r
INT07-C	mailinfo.c	12	17	Use only explicitly signed or unsigned char type for numeric values
INT01-C	mailinfo.c	13	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	14	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	22	23	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	mailinfo.c	68	4	Strive for logical completeness
MSC01-C	mailinfo.c	96	4	Strive for logical completeness
MSC01-C	mailinfo.c	120	3	Strive for logical completeness
DCL00-C	mailinfo.c	164	3	Const-qualify immutable objects: c
INT07-C	mailinfo.c	168	11	Use only explicitly signed or unsigned char type for numeric values
INT01-C	mailinfo.c	176	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	192	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	192	46	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	194	27	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	mailinfo.c	205	17	Do not convert pointers into more strictly aligned pointer types
DCL00-C	mailinfo.c	242	2	Const-qualify immutable objects: rc
EXP36-C	mailinfo.c	249	35	Do not convert pointers into more strictly aligned pointer types
MSC12-C	mailinfo.c	258	4	Detect and remove code that has no effect
EXP12-C	mailinfo.c	266	2	Do not ignore values returned by functions: slurp_attr
MEM01-C	mailinfo.c	270	3	Store a new value in pointers immediately after free()
MEM34-C	mailinfo.c	270	3	Only free memory allocated dynamically
DCL01-C	mailinfo.c	299	3	Do not reuse variable names in subscopes: remove
MSC01-C	mailinfo.c	301	3	Strive for logical completeness
INT01-C	mailinfo.c	303	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	305	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	306	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	307	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	322	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	334	9	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	mailinfo.c	363	2	Do not specify the dimension of a character array initialized with a string literal
INT01-C	mailinfo.c	367	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	371	37	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	mailinfo.c	371	37	Ensure that return values are compared against the proper type
INT01-C	mailinfo.c	374	58	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	mailinfo.c	381	30	Do not convert pointers into more strictly aligned pointer types
DCL00-C	mailinfo.c	386	4	Const-qualify immutable objects: d
EXP36-C	mailinfo.c	409	30	Do not convert pointers into more strictly aligned pointer types
MSC01-C	mailinfo.c	425	3	Strive for logical completeness
INT13-C	mailinfo.c	430	27	Use bitwise operators only on unsigned operands
INT13-C	mailinfo.c	434	27	Use bitwise operators only on unsigned operands
INT13-C	mailinfo.c	438	27	Use bitwise operators only on unsigned operands
INT01-C	mailinfo.c	476	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	508	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	511	24	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	mailinfo.c	537	3	Store a new value in pointers immediately after free()
MEM34-C	mailinfo.c	537	3	Only free memory allocated dynamically
MEM34-C	mailinfo.c	646	2	Only free memory allocated dynamically
INT01-C	mailinfo.c	665	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	mailinfo.c	674	4	Const-qualify immutable objects: c
INT01-C	mailinfo.c	748	34	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	mailinfo.c	758	3	Do not ignore values returned by functions: strbuf_strip_suffix
INT01-C	mailinfo.c	766	61	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	mailinfo.c	785	2	Detect and remove code that has no effect
INT01-C	mailinfo.c	788	32	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	mailinfo.c	788	32	Ensure that return values are compared against the proper type
EXP12-C	mailinfo.c	842	2	Do not ignore values returned by functions: fwrite
MSC01-C	mailinfo.c	848	2	Strive for logical completeness
EXP12-C	mailinfo.c	917	3	Do not ignore values returned by functions: ungetc
INT07-C	mailinfo.c	922	23	Use only explicitly signed or unsigned char type for numeric values
INT01-C	mailinfo.c	946	45	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	mailinfo.c	957	4	Detect and remove code that has no effect
INT01-C	mailinfo.c	997	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	998	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	999	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1002	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1011	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1013	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1013	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1018	63	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1028	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1034	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1034	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1035	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mailinfo.c	1098	26	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	mailinfo.c	1162	4	Detect and remove code that has no effect
EXP36-C	mailinfo.c	1203	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	mailinfo.c	1204	26	Do not convert pointers into more strictly aligned pointer types
EXP12-C	mailinfo.c	1213	2	Do not ignore values returned by functions: ungetc
DCL02-C	mailmap.c	16	1	Use visually distinct identifiers: git_mailmap_file
DCL02-C	mailmap.c	17	1	Use visually distinct identifiers: git_mailmap_blob
MEM34-C	mailmap.c	40	2	Only free memory allocated dynamically
MEM34-C	mailmap.c	56	2	Only free memory allocated dynamically
EXP36-C	mailmap.c	89	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	mailmap.c	108	36	Do not convert pointers into more strictly aligned pointer types
DCL05-C	mailmap.c	120	1	Use typedefs to improve code readability
INT07-C	mailmap.c	143	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	mailmap.c	144	11	Use only explicitly signed or unsigned char type for numeric values
FIO42-C	mailmap.c	179	8	Close files when they are no longer needed
INT07-C	mailmap.c	200	11	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	mailmap.c	227	2	Only free memory allocated dynamically
INT13-C	mailmap.c	242	7	Use bitwise operators only on unsigned operands
INT13-C	mailmap.c	246	7	Use bitwise operators only on unsigned operands
INT13-C	mailmap.c	247	6	Use bitwise operators only on unsigned operands
INT01-C	mailmap.c	291	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	mailmap.c	292	3	Const-qualify immutable objects: cmp
DCL05-C	mailmap.c	311	1	Use typedefs to improve code readability
MEM01-C	match-trees.c	122	2	Store a new value in pointers immediately after free()
MEM34-C	match-trees.c	122	2	Only free memory allocated dynamically
MEM34-C	match-trees.c	123	2	Only free memory allocated dynamically
MEM30-C	match-trees.c	159	4	Do not access freed memory
MEM34-C	match-trees.c	159	4	Only free memory allocated dynamically
MEM34-C	match-trees.c	165	2	Only free memory allocated dynamically
EXP12-C	match-trees.c	201	3	Do not ignore values returned by functions: tree_entry_extract
INT01-C	match-trees.c	202	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	match-trees.c	202	20	Ensure that return values are compared against the proper type
EXP11-C	match-trees.c	217	19	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	match-trees.c	217	19	Do not cast away a const qualification
MEM34-C	match-trees.c	239	2	Only free memory allocated dynamically
EXP12-C	match-trees.c	303	2	Do not ignore values returned by functions: splice_tree
INT01-C	mem-pool.c	41	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	mem-pool.c	42	13	Do not convert pointers into more strictly aligned pointer types
EXP11-C	mem-pool.c	44	17	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	mem-pool.c	60	2	Do not ignore values returned by functions: memset
INT01-C	mem-pool.c	61	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mem-pool.c	61	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mem-pool.c	63	19	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	mem-pool.c	80	3	Store a new value in pointers immediately after free()
MEM34-C	mem-pool.c	80	3	Only free memory allocated dynamically
INT01-C	mem-pool.c	93	10	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	mem-pool.c	93	10	Use bitwise operators only on unsigned operands
INT01-C	mem-pool.c	94	7	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	mem-pool.c	94	7	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	mem-pool.c	94	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mem-pool.c	94	35	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	mem-pool.c	94	35	Use bitwise operators only on unsigned operands
INT01-C	mem-pool.c	97	54	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	mem-pool.c	101	33	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	mem-pool.c	114	2	Const-qualify immutable objects: len
EXP12-C	mem-pool.c	116	2	Do not ignore values returned by functions: memset
DCL00-C	mem-pool.c	122	2	Const-qualify immutable objects: len
INT01-C	mem-pool.c	122	27	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	mem-pool.c	131	2	Const-qualify immutable objects: actual_len
INT01-C	mem-pool.c	132	45	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	mem-pool.c	134	18	Use only explicitly signed or unsigned char type for numeric values
DCL13-C	mem-pool.c	138	52	Declare function parameters that are pointers to values not changed by the function as const: mem
MEM34-C	merge-blobs.c	19	3	Only free memory allocated dynamically
DCL01-C	merge-ort.c	207	2	Do not reuse variable names in subscopes: merge_trees
EXP36-C	merge-ort.c	402	43	Do not convert pointers into more strictly aligned pointer types
MEM34-C	merge-ort.c	405	2	Only free memory allocated dynamically
EXP30-C	merge-ort.c	623	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	623	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	623	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	merge-ort.c	624	8	Do not cast away a const qualification
ARR30-C	merge-ort.c	661	51	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	merge-ort.c	679	3	Const-qualify immutable objects: e
DCL01-C	merge-ort.c	679	3	Do not reuse variable names in subscopes: e
EXP30-C	merge-ort.c	682	3	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	682	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	682	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	683	32	Do not convert pointers into more strictly aligned pointer types
DCL02-C	merge-ort.c	4767	2	Use visually distinct identifiers: i
DCL01-C	merge-ort.c	684	9	Do not reuse variable names in subscopes: i
INT01-C	merge-ort.c	684	22	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	merge-ort.c	4767	2	Use visually distinct identifiers: i
EXP36-C	merge-ort.c	686	20	Do not convert pointers into more strictly aligned pointer types
MEM34-C	merge-ort.c	698	4	Only free memory allocated dynamically
DCL13-C	merge-ort.c	714	38	Declare function parameters that are pointers to values not changed by the function as const: opt
DCL01-C	merge-ort.c	714	55	Do not reuse variable names in subscopes: err
DCL00-C	merge-ort.c	716	2	Const-qualify immutable objects: params
EXP12-C	merge-ort.c	720	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	merge-ort.c	722	2	Do not ignore values returned by functions: __builtin_va_end
MSC12-C	merge-ort.c	724	2	Detect and remove code that has no effect
DCL01-C	merge-ort.c	733	21	Do not reuse variable names in subscopes: commit
DCL00-C	merge-ort.c	760	2	Const-qualify immutable objects: ap
MSC12-C	merge-ort.c	768	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	768	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	768	2	Operands to the sizeof operator should not contain side effects
EXP36-C	merge-ort.c	777	29	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	779	27	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-ort.c	781	3	Do not ignore values returned by functions: strmap_put
EXP36-C	merge-ort.c	785	16	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-ort.c	790	2	Do not ignore values returned by functions: strvec_push
INT01-C	merge-ort.c	796	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	merge-ort.c	797	3	Do not ignore values returned by functions: strvec_push
EXP12-C	merge-ort.c	802	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	merge-ort.c	809	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	merge-ort.c	820	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	820	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	821	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	823	20	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	merge-ort.c	827	21	Use only explicitly signed or unsigned char type for numeric values
INT01-C	merge-ort.c	830	11	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	merge-ort.c	831	20	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	merge-ort.c	845	24	Do not convert pointers into more strictly aligned pointer types
EXP05-C	merge-ort.c	846	15	Do not cast away a const qualification
EXP36-C	merge-ort.c	861	22	Do not convert pointers into more strictly aligned pointer types
INT07-C	merge-ort.c	876	16	Use only explicitly signed or unsigned char type for numeric values
INT01-C	merge-ort.c	899	53	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	900	39	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	913	34	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	917	2	Detect and remove code that has no effect
EXP36-C	merge-ort.c	925	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-ort.c	929	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	929	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	951	34	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	954	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	954	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	999	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	999	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1000	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1000	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1001	2	Detect and remove code that has no effect
EXP36-C	merge-ort.c	1003	22	Do not convert pointers into more strictly aligned pointer types
EXP11-C	merge-ort.c	1017	3	Do not apply operators expecting one type to data of an incompatible type
EXP06-C	merge-ort.c	1017	3	Operands to the sizeof operator should not contain side effects
EXP12-C	merge-ort.c	1038	2	Do not ignore values returned by functions: strmap_put
MSC12-C	merge-ort.c	1056	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1056	3	Operands to the sizeof operator should not contain side effects
DCL00-C	merge-ort.c	1062	3	Const-qualify immutable objects: location_relevant
MSC12-C	merge-ort.c	1064	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1064	3	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	1064	3	Operands to the sizeof operator should not contain side effects
EXP12-C	merge-ort.c	1106	2	Do not ignore values returned by functions: pool_diff_queue
DCL01-C	merge-ort.c	1111	17	Do not reuse variable names in subscopes: dirname
MSC12-C	merge-ort.c	1144	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1144	3	Operands to the sizeof operator should not contain side effects
DCL00-C	merge-ort.c	1153	3	Const-qualify immutable objects: sides
DCL00-C	merge-ort.c	1154	3	Const-qualify immutable objects: relevance
DCL02-C	merge-ort.c	4187	3	Use visually distinct identifiers: side
DCL01-C	merge-ort.c	1186	3	Do not reuse variable names in subscopes: side
DCL00-C	merge-ort.c	1195	3	Const-qualify immutable objects: side_mask
EXP36-C	merge-ort.c	1223	34	Do not convert pointers into more strictly aligned pointer types
DCL01-C	merge-ort.c	1231	2	Do not reuse variable names in subscopes: dirname
DCL00-C	merge-ort.c	1232	2	Const-qualify immutable objects: prev_dir_rename_mask
DCL00-C	merge-ort.c	1233	2	Const-qualify immutable objects: filemask
DCL00-C	merge-ort.c	1235	2	Const-qualify immutable objects: mbase_null
DCL00-C	merge-ort.c	1236	2	Const-qualify immutable objects: side1_null
DCL00-C	merge-ort.c	1237	2	Const-qualify immutable objects: side2_null
DCL00-C	merge-ort.c	1262	2	Const-qualify immutable objects: df_conflict
MSC12-C	merge-ort.c	1273	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1273	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1274	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1274	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1275	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1275	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1276	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1276	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	1276	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1277	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1277	2	Operands to the sizeof operator should not contain side effects
INT01-C	merge-ort.c	1297	50	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	merge-ort.c	1298	2	Do not ignore values returned by functions: make_traverse_path
INT01-C	merge-ort.c	1298	35	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	1373	9	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	1374	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1374	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1390	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1390	3	Operands to the sizeof operator should not contain side effects
ARR30-C	merge-ort.c	1406	36	Do not form or use out-of-bounds pointers or array subscripts
MSC12-C	merge-ort.c	1468	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1468	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1469	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1469	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	1469	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	1469	2	Operands to the sizeof operator should not contain side effects
ARR30-C	merge-ort.c	1471	44	Do not form or use out-of-bounds pointers or array subscripts
EXP30-C	merge-ort.c	1493	3	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	1493	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	1493	3	Do not convert pointers into more strictly aligned pointer types
INT07-C	merge-ort.c	1529	17	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	merge-ort.c	1533	5	Do not ignore values returned by functions: strset_add
MEM34-C	merge-ort.c	1536	4	Only free memory allocated dynamically
EXP30-C	merge-ort.c	1554	3	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	1554	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	1554	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-ort.c	1556	4	Const-qualify immutable objects: dir_rename_mask
EXP36-C	merge-ort.c	1563	19	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	1564	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1564	4	Operands to the sizeof operator should not contain side effects
INT01-C	merge-ort.c	1576	34	Use rsize_t or size_t for all integer values representing the size of an object
EXP30-C	merge-ort.c	1610	3	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	1610	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	1610	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	1615	19	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	1616	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1616	4	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1618	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1618	4	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	1618	4	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	1641	3	Detect and remove code that has no effect
INT33-C	merge-ort.c	1643	24	Ensure that division and remainder operations do not result in divide-by-zero errors
EXP12-C	merge-ort.c	1668	2	Do not ignore values returned by functions: parse_tree
EXP12-C	merge-ort.c	1669	2	Do not ignore values returned by functions: parse_tree
EXP12-C	merge-ort.c	1670	2	Do not ignore values returned by functions: parse_tree
DCL01-C	merge-ort.c	1694	2	Do not reuse variable names in subscopes: commit
EXP12-C	merge-ort.c	1703	2	Do not ignore values returned by functions: memset
EXP12-C	merge-ort.c	1704	2	Do not ignore values returned by functions: memset
EXP12-C	merge-ort.c	1707	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	merge-ort.c	1712	2	Do not ignore values returned by functions: setup_revisions
INT01-C	merge-ort.c	1712	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	merge-ort.c	1729	23	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	merge-ort.c	1733	24	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	merge-ort.c	1764	2	Const-qualify immutable objects: search
EXP36-C	merge-ort.c	1884	17	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	1916	17	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-ort.c	1921	3	Const-qualify immutable objects: len
EXP12-C	merge-ort.c	1928	3	Do not ignore values returned by functions: add_index_entry
EXP12-C	merge-ort.c	1930	3	Do not ignore values returned by functions: get_stream_filter
EXP11-C	merge-ort.c	1935	3	Do not apply operators expecting one type to data of an incompatible type
EXP06-C	merge-ort.c	1935	3	Operands to the sizeof operator should not contain side effects
DCL00-C	merge-ort.c	1937	4	Const-qualify immutable objects: stage_mask
EXP12-C	merge-ort.c	1948	4	Do not ignore values returned by functions: add_index_entry
EXP12-C	merge-ort.c	1950	4	Do not ignore values returned by functions: get_stream_filter
MSC12-C	merge-ort.c	1994	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	1994	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	1994	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	1994	2	Operands to the sizeof operator should not contain side effects
MEM01-C	merge-ort.c	2018	2	Store a new value in pointers immediately after free()
MEM34-C	merge-ort.c	2018	2	Only free memory allocated dynamically
MEM01-C	merge-ort.c	2019	2	Store a new value in pointers immediately after free()
MEM34-C	merge-ort.c	2019	2	Only free memory allocated dynamically
MEM01-C	merge-ort.c	2020	2	Store a new value in pointers immediately after free()
MEM34-C	merge-ort.c	2020	2	Only free memory allocated dynamically
MSC12-C	merge-ort.c	2056	2	Detect and remove code that has no effect
MSC12-C	merge-ort.c	2063	3	Detect and remove code that has no effect
DCL00-C	merge-ort.c	2129	3	Const-qualify immutable objects: two_way
MSC01-C	merge-ort.c	2143	4	Strive for logical completeness
DCL01-C	merge-ort.c	2180	52	Do not reuse variable names in subscopes: rename_info
INT01-C	merge-ort.c	2200	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	2200	43	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	2210	37	Do not convert pointers into more strictly aligned pointer types
INT13-C	merge-ort.c	2215	49	Use bitwise operators only on unsigned operands
DCL01-C	merge-ort.c	2227	28	Do not reuse variable names in subscopes: rename_info
EXP36-C	merge-ort.c	2248	21	Do not convert pointers into more strictly aligned pointer types
INT34-C	merge-ort.c	2261	56	Do not shift a negative number of bits or more bits than exist in the operand
INT01-C	merge-ort.c	2273	37	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	merge-ort.c	2289	3	Only free memory allocated dynamically
EXP30-C	merge-ort.c	2311	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	2311	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2311	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2313	35	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-ort.c	2315	3	Const-qualify immutable objects: count_entry
DCL01-C	merge-ort.c	2315	3	Do not reuse variable names in subscopes: count_entry
EXP30-C	merge-ort.c	2320	3	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	2320	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2320	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-ort.c	2322	4	Const-qualify immutable objects: count
EXP12-C	merge-ort.c	2346	4	Do not ignore values returned by functions: strmap_put
EXP05-C	merge-ort.c	2347	20	Do not cast away a const qualification
EXP30-C	merge-ort.c	2362	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	2362	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2362	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-ort.c	2367	16	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	merge-ort.c	2382	8	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	merge-ort.c	2387	2	Only free memory allocated dynamically
DCL01-C	merge-ort.c	2418	3	Do not reuse variable names in subscopes: rename_info
DCL01-C	merge-ort.c	2419	3	Do not reuse variable names in subscopes: collision_info
MSC12-C	merge-ort.c	2430	3	Detect and remove code that has no effect
EXP36-C	merge-ort.c	2431	30	Do not convert pointers into more strictly aligned pointer types
MEM01-C	merge-ort.c	2433	4	Store a new value in pointers immediately after free()
MEM34-C	merge-ort.c	2433	4	Only free memory allocated dynamically
EXP36-C	merge-ort.c	2435	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-ort.c	2437	4	Do not ignore values returned by functions: strmap_put
EXP12-C	merge-ort.c	2439	3	Do not ignore values returned by functions: string_list_insert
EXP30-C	merge-ort.c	2450	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	2450	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2450	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2451	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	merge-ort.c	2474	2	Do not reuse variable names in subscopes: rename_info
INT13-C	merge-ort.c	2529	15	Use bitwise operators only on unsigned operands
EXP36-C	merge-ort.c	2572	12	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	2573	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2573	2	Operands to the sizeof operator should not contain side effects
EXP05-C	merge-ort.c	2578	13	Do not cast away a const qualification
EXP12-C	merge-ort.c	2600	3	Do not ignore values returned by functions: string_list_append
INT01-C	merge-ort.c	2605	28	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	2609	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-ort.c	2616	3	Do not ignore values returned by functions: strmap_put
MSC12-C	merge-ort.c	2621	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2621	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2622	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2622	2	Operands to the sizeof operator should not contain side effects
EXP36-C	merge-ort.c	2632	27	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	2634	3	Detect and remove code that has no effect
INT13-C	merge-ort.c	2646	20	Use bitwise operators only on unsigned operands
EXP36-C	merge-ort.c	2664	21	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-ort.c	2667	3	Do not ignore values returned by functions: strmap_put
DCL01-C	merge-ort.c	2669	3	Do not reuse variable names in subscopes: index
MSC12-C	merge-ort.c	2672	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2672	3	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2673	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2673	3	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2674	3	Detect and remove code that has no effect
INT13-C	merge-ort.c	2674	3	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	2674	3	Use bitwise operators only on unsigned operands
MSC12-C	merge-ort.c	2675	3	Detect and remove code that has no effect
EXP36-C	merge-ort.c	2760	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2765	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2796	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2797	22	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2798	22	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	2800	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2800	4	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2801	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2801	4	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2802	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2802	4	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2809	5	Detect and remove code that has no effect
MSC12-C	merge-ort.c	2894	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2894	3	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2895	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2895	3	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2897	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2897	3	Operands to the sizeof operator should not contain side effects
INT34-C	merge-ort.c	2899	21	Do not shift a negative number of bits or more bits than exist in the operand
MSC12-C	merge-ort.c	2944	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2944	3	Operands to the sizeof operator should not contain side effects
EXP36-C	merge-ort.c	2959	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2960	22	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	2961	22	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	2963	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2963	4	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2964	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2964	4	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	2965	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	2965	4	Operands to the sizeof operator should not contain side effects
INT34-C	merge-ort.c	3036	29	Do not shift a negative number of bits or more bits than exist in the operand
INT07-C	merge-ort.c	3078	13	Use only explicitly signed or unsigned char type for numeric values
INT07-C	merge-ort.c	3080	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	merge-ort.c	3082	14	Use only explicitly signed or unsigned char type for numeric values
INT07-C	merge-ort.c	3084	14	Use only explicitly signed or unsigned char type for numeric values
EXP30-C	merge-ort.c	3096	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	3096	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	3096	2	Do not convert pointers into more strictly aligned pointer types
EXP30-C	merge-ort.c	3101	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	3101	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	3101	2	Do not convert pointers into more strictly aligned pointer types
EXP30-C	merge-ort.c	3118	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	3118	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	3118	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-ort.c	3141	3	Do not ignore values returned by functions: pool_diff_queue
INT07-C	merge-ort.c	3142	37	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	merge-ort.c	3156	2	Do not ignore values returned by functions: strset_add
MEM34-C	merge-ort.c	3158	3	Only free memory allocated dynamically
DCL00-C	merge-ort.c	3177	3	Const-qualify immutable objects: val
MSC12-C	merge-ort.c	3180	4	Detect and remove code that has no effect
EXP12-C	merge-ort.c	3181	4	Do not ignore values returned by functions: strset_add
EXP12-C	merge-ort.c	3193	3	Do not ignore values returned by functions: strmap_put
EXP05-C	merge-ort.c	3209	36	Do not cast away a const qualification
EXP05-C	merge-ort.c	3210	36	Do not cast away a const qualification
DCL13-C	merge-ort.c	3335	24	Declare function parameters that are pointers to values not changed by the function as const: merge_base
DCL13-C	merge-ort.c	3336	24	Declare function parameters that are pointers to values not changed by the function as const: side1
DCL13-C	merge-ort.c	3337	24	Declare function parameters that are pointers to values not changed by the function as const: side2
DCL02-C	merge-ort.c	4767	2	Use visually distinct identifiers: i
DCL01-C	merge-ort.c	3356	3	Do not reuse variable names in subscopes: i
DCL02-C	merge-ort.c	4767	2	Use visually distinct identifiers: i
DCL02-C	merge-ort.c	4767	2	Use visually distinct identifiers: i
DCL02-C	merge-ort.c	4767	2	Use visually distinct identifiers: i
DCL02-C	merge-ort.c	4767	2	Use visually distinct identifiers: i
EXP36-C	merge-ort.c	3388	2	Do not convert pointers into more strictly aligned pointer types
INT13-C	merge-ort.c	3397	8	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	3401	8	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	3411	8	Use bitwise operators only on unsigned operands
INT07-C	merge-ort.c	3486	14	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	merge-ort.c	3512	3	Only free memory allocated dynamically
INT13-C	merge-ort.c	3545	72	Use bitwise operators only on unsigned operands
EXP36-C	merge-ort.c	3601	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	3602	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	3604	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	3605	35	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	3620	2	Detect and remove code that has no effect
INT01-C	merge-ort.c	3620	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	3620	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	3621	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	3627	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	3635	53	Do not convert pointers into more strictly aligned pointer types
DCL01-C	merge-ort.c	3654	2	Do not reuse variable names in subscopes: __xpg_basename
MSC12-C	merge-ort.c	3661	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	3661	2	Operands to the sizeof operator should not contain side effects
DCL02-C	merge-ort.c	3769	3	Use visually distinct identifiers: offset
DCL00-C	merge-ort.c	3769	3	Const-qualify immutable objects: offset
DCL01-C	merge-ort.c	3769	3	Do not reuse variable names in subscopes: offset
EXP11-C	merge-ort.c	3779	38	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	merge-ort.c	3790	23	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	3791	2	Detect and remove code that has no effect
INT01-C	merge-ort.c	3792	58	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	3793	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	3829	30	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	merge-ort.c	3829	30	Ensure that return values are compared against the proper type
INT01-C	merge-ort.c	3830	42	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	merge-ort.c	3832	3	Const-qualify immutable objects: c
EXP11-C	merge-ort.c	3834	36	Do not apply operators expecting one type to data of an incompatible type
MSC12-C	merge-ort.c	3852	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	3852	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	3853	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	3853	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	3855	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	3855	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	3855	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	3855	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	3875	3	Detect and remove code that has no effect
INT13-C	merge-ort.c	3879	36	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	3879	38	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	3882	21	Use bitwise operators only on unsigned operands
MSC12-C	merge-ort.c	3899	3	Detect and remove code that has no effect
EXP36-C	merge-ort.c	3917	27	Do not convert pointers into more strictly aligned pointer types
INT13-C	merge-ort.c	3925	44	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	3925	46	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	3928	25	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	3941	32	Use bitwise operators only on unsigned operands
EXP12-C	merge-ort.c	3944	3	Do not ignore values returned by functions: strmap_put
DCL00-C	merge-ort.c	3979	4	Const-qualify immutable objects: othermask
INT13-C	merge-ort.c	3979	33	Use bitwise operators only on unsigned operands
MSC12-C	merge-ort.c	3988	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	3988	4	Operands to the sizeof operator should not contain side effects
DCL00-C	merge-ort.c	4004	4	Const-qualify immutable objects: o_mode
DCL00-C	merge-ort.c	4005	4	Const-qualify immutable objects: a_mode
DCL00-C	merge-ort.c	4006	4	Const-qualify immutable objects: b_mode
EXP36-C	merge-ort.c	4011	27	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	4075	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4075	4	Operands to the sizeof operator should not contain side effects
EXP12-C	merge-ort.c	4081	4	Do not ignore values returned by functions: strmap_put
EXP12-C	merge-ort.c	4090	4	Do not ignore values returned by functions: strmap_put
MSC12-C	merge-ort.c	4121	4	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4121	4	Operands to the sizeof operator should not contain side effects
INT34-C	merge-ort.c	4122	21	Do not shift a negative number of bits or more bits than exist in the operand
DCL01-C	merge-ort.c	4141	3	Do not reuse variable names in subscopes: index
ARR30-C	merge-ort.c	4151	54	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	merge-ort.c	4170	44	Do not form or use out-of-bounds pointers or array subscripts
MSC12-C	merge-ort.c	4196	3	Detect and remove code that has no effect
INT01-C	merge-ort.c	4222	34	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	4224	31	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-ort.c	4246	4	Const-qualify immutable objects: side_mask
INT01-C	merge-ort.c	4281	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4281	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4281	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4281	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4281	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4281	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4281	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4281	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	4281	2	Do not convert pointers into more strictly aligned pointer types
EXP30-C	merge-ort.c	4286	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	4286	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	4286	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-ort.c	4309	36	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	4316	33	Do not convert pointers into more strictly aligned pointer types
EXP11-C	merge-ort.c	4326	31	Do not apply operators expecting one type to data of an incompatible type
INT01-C	merge-ort.c	4336	30	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	merge-ort.c	4336	30	Ensure that return values are compared against the proper type
EXP12-C	merge-ort.c	4368	2	Do not ignore values returned by functions: memset
EXP12-C	merge-ort.c	4391	2	Do not ignore values returned by functions: parse_tree
EXP12-C	merge-ort.c	4393	2	Do not ignore values returned by functions: parse_tree
DCL01-C	merge-ort.c	4405	2	Do not reuse variable names in subscopes: index
EXP30-C	merge-ort.c	4421	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	4421	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	4421	2	Do not convert pointers into more strictly aligned pointer types
EXP30-C	merge-ort.c	4436	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	4436	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	4436	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	4438	31	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	4443	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4443	3	Operands to the sizeof operator should not contain side effects
INT01-C	merge-ort.c	4459	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4459	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4461	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4461	3	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	merge-ort.c	4479	10	Use bitwise operators only on unsigned operands
INT34-C	merge-ort.c	4496	30	Do not shift a negative number of bits or more bits than exist in the operand
EXP12-C	merge-ort.c	4501	4	Do not ignore values returned by functions: add_index_entry
EXP36-C	merge-ort.c	4532	48	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	4582	46	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-ort.c	4593	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4593	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4593	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4593	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4593	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4593	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4593	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4593	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	4593	2	Do not convert pointers into more strictly aligned pointer types
EXP30-C	merge-ort.c	4597	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	4597	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	4597	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-ort.c	4603	32	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	4604	55	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-ort.c	4605	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-ort.c	4607	24	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-ort.c	4611	5	Do not ignore values returned by functions: putchar
INT01-C	merge-ort.c	4612	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	merge-ort.c	4614	6	Do not ignore values returned by functions: putchar
EXP12-C	merge-ort.c	4618	5	Do not ignore values returned by functions: putchar
EXP12-C	merge-ort.c	4620	4	Do not ignore values returned by functions: puts
EXP36-C	merge-ort.c	4641	46	Do not convert pointers into more strictly aligned pointer types
EXP30-C	merge-ort.c	4643	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-ort.c	4643	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	4643	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	4645	31	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	4648	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4648	3	Operands to the sizeof operator should not contain side effects
INT34-C	merge-ort.c	4653	30	Do not shift a negative number of bits or more bits than exist in the operand
EXP36-C	merge-ort.c	4656	16	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	4673	2	Detect and remove code that has no effect
EXP36-C	merge-ort.c	4689	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-ort.c	4718	46	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	4722	2	Detect and remove code that has no effect
MEM34-C	merge-ort.c	4725	2	Only free memory allocated dynamically
DCL01-C	merge-ort.c	4753	21	Do not reuse variable names in subscopes: tree
DCL01-C	merge-ort.c	4756	2	Do not reuse variable names in subscopes: commit
EXP36-C	merge-ort.c	4756	43	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	4772	2	Detect and remove code that has no effect
MSC12-C	merge-ort.c	4774	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4774	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	4776	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4776	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	4778	2	Detect and remove code that has no effect
MSC12-C	merge-ort.c	4779	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4779	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	4780	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4780	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	4782	2	Detect and remove code that has no effect
MSC12-C	merge-ort.c	4783	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4783	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	4794	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4794	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	4796	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4796	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	4797	2	Detect and remove code that has no effect
MSC12-C	merge-ort.c	4798	2	Detect and remove code that has no effect
INT01-C	merge-ort.c	4798	2	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	merge-ort.c	4798	2	Ensure that return values are compared against the proper type
INT01-C	merge-ort.c	4798	2	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	merge-ort.c	4798	2	Ensure that return values are compared against the proper type
MSC12-C	merge-ort.c	4800	2	Detect and remove code that has no effect
MSC12-C	merge-ort.c	4804	2	Detect and remove code that has no effect
EXP36-C	merge-ort.c	4806	21	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	4813	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4814	3	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	4814	3	Operands to the sizeof operator should not contain side effects
INT01-C	merge-ort.c	4814	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-ort.c	4814	3	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	merge-ort.c	4820	18	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	4820	18	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	4820	18	Use bitwise operators only on unsigned operands
INT13-C	merge-ort.c	4820	18	Use bitwise operators only on unsigned operands
EXP36-C	merge-ort.c	4834	21	Do not convert pointers into more strictly aligned pointer types
DCL13-C	merge-ort.c	4894	64	Declare function parameters that are pointers to values not changed by the function as const: opt
DCL01-C	merge-ort.c	4901	2	Do not reuse variable names in subscopes: merge_trees
EXP36-C	merge-ort.c	4902	46	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-ort.c	4915	3	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4915	3	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	4915	3	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-ort.c	4925	2	Detect and remove code that has no effect
EXP06-C	merge-ort.c	4925	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-ort.c	4925	2	Operands to the sizeof operator should not contain side effects
EXP12-C	merge-ort.c	4965	3	Do not ignore values returned by functions: err
INT13-C	merge-ort.c	4996	17	Use bitwise operators only on unsigned operands
DCL01-C	merge-ort.c	5028	3	Do not reuse variable names in subscopes: tree
EXP12-C	merge-ort.c	5071	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	merge-ort.c	5072	3	Do not ignore values returned by functions: commit_list_insert
MSC12-C	merge-ort.c	5097	2	Detect and remove code that has no effect
MSC12-C	merge-ort.c	5123	2	Detect and remove code that has no effect
MSC12-C	merge-ort-wrappers.c	13	3	Detect and remove code that has no effect
EXP12-C	merge-ort-wrappers.c	33	3	Do not ignore values returned by functions: printf_ln
EXP12-C	merge-ort-wrappers.c	37	2	Do not ignore values returned by functions: memset
EXP12-C	merge-ort-wrappers.c	56	2	Do not ignore values returned by functions: memset
EXP11-C	merge-recursive.c	56	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	merge-recursive.c	56	6	Do not cast away a const qualification
EXP11-C	merge-recursive.c	57	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	merge-recursive.c	57	6	Do not cast away a const qualification
DCL01-C	merge-recursive.c	80	71	Do not reuse variable names in subscopes: hashmap
EXP36-C	merge-recursive.c	89	9	Do not convert pointers into more strictly aligned pointer types
EXP11-C	merge-recursive.c	99	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	merge-recursive.c	99	7	Do not cast away a const qualification
EXP11-C	merge-recursive.c	100	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	merge-recursive.c	100	7	Do not cast away a const qualification
DCL01-C	merge-recursive.c	127	69	Do not reuse variable names in subscopes: hashmap
EXP36-C	merge-recursive.c	134	9	Do not convert pointers into more strictly aligned pointer types
EXP11-C	merge-recursive.c	144	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	merge-recursive.c	144	7	Do not cast away a const qualification
EXP11-C	merge-recursive.c	145	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	merge-recursive.c	145	7	Do not cast away a const qualification
INT01-C	merge-recursive.c	157	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	merge-recursive.c	164	55	Do not reuse variable names in subscopes: err
DCL00-C	merge-recursive.c	166	2	Const-qualify immutable objects: params
EXP12-C	merge-recursive.c	174	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	merge-recursive.c	176	2	Do not ignore values returned by functions: __builtin_va_end
MSC12-C	merge-recursive.c	180	3	Detect and remove code that has no effect
DCL01-C	merge-recursive.c	210	21	Do not reuse variable names in subscopes: tree
DCL01-C	merge-recursive.c	213	2	Do not reuse variable names in subscopes: commit
EXP36-C	merge-recursive.c	213	43	Do not convert pointers into more strictly aligned pointer types
DCL01-C	merge-recursive.c	237	2	Do not reuse variable names in subscopes: rename_conflict_info
DCL01-C	merge-recursive.c	276	2	Do not reuse variable names in subscopes: rename_type
DCL01-C	merge-recursive.c	281	64	Do not reuse variable names in subscopes: rename_type
EXP36-C	merge-recursive.c	300	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-recursive.c	321	2	Const-qualify immutable objects: ap
EXP12-C	merge-recursive.c	328	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	merge-recursive.c	330	2	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	merge-recursive.c	339	25	Do not reuse variable names in subscopes: commit
DCL00-C	merge-recursive.c	357	4	Const-qualify immutable objects: len
DCL01-C	merge-recursive.c	366	75	Do not reuse variable names in subscopes: commit
DCL01-C	merge-recursive.c	372	33	Do not reuse variable names in subscopes: blob
DCL01-C	merge-recursive.c	402	75	Do not reuse variable names in subscopes: tree
EXP12-C	merge-recursive.c	404	2	Do not ignore values returned by functions: parse_tree
EXP12-C	merge-recursive.c	417	2	Do not ignore values returned by functions: memset
DCL00-C	merge-recursive.c	464	2	Const-qualify immutable objects: baselen
EXP36-C	merge-recursive.c	465	30	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-recursive.c	469	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	merge-recursive.c	469	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	merge-recursive.c	477	68	Do not reuse variable names in subscopes: tree
EXP12-C	merge-recursive.c	480	2	Do not ignore values returned by functions: memset
EXP12-C	merge-recursive.c	481	2	Do not ignore values returned by functions: read_tree
DCL01-C	merge-recursive.c	486	31	Do not reuse variable names in subscopes: tree
EXP36-C	merge-recursive.c	510	32	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-recursive.c	511	2	Do not ignore values returned by functions: get_tree_entry_if_blob
EXP12-C	merge-recursive.c	512	2	Do not ignore values returned by functions: get_tree_entry_if_blob
EXP12-C	merge-recursive.c	513	2	Do not ignore values returned by functions: get_tree_entry_if_blob
EXP36-C	merge-recursive.c	525	40	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	544	11	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-recursive.c	554	2	Const-qualify immutable objects: onelen
DCL00-C	merge-recursive.c	555	2	Const-qualify immutable objects: twolen
DCL00-C	merge-recursive.c	568	2	Const-qualify immutable objects: cmp
INT01-C	merge-recursive.c	608	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-recursive.c	617	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	merge-recursive.c	619	3	Const-qualify immutable objects: len
EXP36-C	merge-recursive.c	620	52	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-recursive.c	632	4	Do not ignore values returned by functions: string_list_insert
DCL00-C	merge-recursive.c	665	2	Const-qualify immutable objects: clear
DCL00-C	merge-recursive.c	666	2	Const-qualify immutable objects: options
DCL00-C	merge-recursive.c	699	2	Const-qualify immutable objects: update_cache
DCL00-C	merge-recursive.c	700	2	Const-qualify immutable objects: update_working_directory
INT07-C	merge-recursive.c	727	16	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	merge-recursive.c	750	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	merge-recursive.c	750	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	merge-recursive.c	793	36	Do not reuse variable names in subscopes: blob
DCL00-C	merge-recursive.c	795	2	Const-qualify immutable objects: pos
DCL00-C	merge-recursive.c	812	2	Const-qualify immutable objects: pos
MSC01-C	merge-recursive.c	854	3	Strive for logical completeness
INT01-C	merge-recursive.c	884	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	merge-recursive.c	886	3	Const-qualify immutable objects: pathlen
DCL00-C	merge-recursive.c	887	3	Const-qualify immutable objects: df_pathlen
EXP12-C	merge-recursive.c	894	4	Do not ignore values returned by functions: unlink
DCL01-C	merge-recursive.c	966	4	Do not reuse variable names in subscopes: strbuf
MEM01-C	merge-recursive.c	969	5	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	969	5	Only free memory allocated dynamically
INT01-C	merge-recursive.c	970	10	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	merge-recursive.c	982	4	Const-qualify immutable objects: mode
EXP12-C	merge-recursive.c	990	4	Do not ignore values returned by functions: write_in_full
EXP12-C	merge-recursive.c	994	4	Do not ignore values returned by functions: safe_create_leading_directories_const
EXP12-C	merge-recursive.c	995	4	Do not ignore values returned by functions: unlink
MEM34-C	merge-recursive.c	999	4	Only free memory allocated dynamically
MEM34-C	merge-recursive.c	1005	3	Only free memory allocated dynamically
DCL00-C	merge-recursive.c	1009	3	Const-qualify immutable objects: refresh
DCL01-C	merge-recursive.c	1030	2	Do not reuse variable names in subscopes: blob
MSC12-C	merge-recursive.c	1070	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	1070	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-recursive.c	1070	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-recursive.c	1070	2	Operands to the sizeof operator should not contain side effects
MEM01-C	merge-recursive.c	1097	2	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1097	2	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	1098	2	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1098	2	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	1099	2	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1099	2	Only free memory allocated dynamically
DCL01-C	merge-recursive.c	1112	2	Do not reuse variable names in subscopes: commit
EXP12-C	merge-recursive.c	1121	2	Do not ignore values returned by functions: memset
EXP12-C	merge-recursive.c	1122	2	Do not ignore values returned by functions: memset
EXP12-C	merge-recursive.c	1125	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	merge-recursive.c	1130	2	Do not ignore values returned by functions: setup_revisions
INT01-C	merge-recursive.c	1130	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	merge-recursive.c	1147	23	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	merge-recursive.c	1151	24	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	merge-recursive.c	1167	66	Do not reuse variable names in subscopes: commit
MSC12-C	merge-recursive.c	1173	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	1173	2	Operands to the sizeof operator should not contain side effects
DCL00-C	merge-recursive.c	1196	2	Const-qualify immutable objects: search
MSC01-C	merge-recursive.c	1396	4	Strive for logical completeness
MSC12-C	merge-recursive.c	1433	2	Detect and remove code that has no effect
MEM01-C	merge-recursive.c	1452	4	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1452	4	Only free memory allocated dynamically
MEM34-C	merge-recursive.c	1542	2	Only free memory allocated dynamically
EXP12-C	merge-recursive.c	1638	3	Do not ignore values returned by functions: remove_file
EXP05-C	merge-recursive.c	1642	14	Do not cast away a const qualification
MEM34-C	merge-recursive.c	1655	2	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	1694	2	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1694	2	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	1757	2	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1757	2	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	1783	3	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1783	3	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	1817	3	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1817	3	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	1864	2	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1864	2	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	1865	2	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	1865	2	Only free memory allocated dynamically
DCL01-C	merge-recursive.c	1879	26	Do not reuse variable names in subscopes: tree
EXP36-C	merge-recursive.c	1906	15	Do not convert pointers into more strictly aligned pointer types
DCL01-C	merge-recursive.c	1916	61	Do not reuse variable names in subscopes: tree
INT01-C	merge-recursive.c	1944	25	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	merge-recursive.c	1944	25	Ensure that return values are compared against the proper type
INT01-C	merge-recursive.c	1954	60	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-recursive.c	1954	50	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	merge-recursive.c	1962	1	Use typedefs to improve code readability
INT01-C	merge-recursive.c	2071	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-recursive.c	2072	36	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-recursive.c	2073	3	Do not ignore values returned by functions: hashmap_remove
DCL01-C	merge-recursive.c	2087	20	Do not reuse variable names in subscopes: tree
INT01-C	merge-recursive.c	2142	44	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	merge-recursive.c	2156	3	Only free memory allocated dynamically
EXP30-C	merge-recursive.c	2196	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-recursive.c	2196	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2196	2	Do not convert pointers into more strictly aligned pointer types
EXP30-C	merge-recursive.c	2221	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-recursive.c	2221	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2221	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2279	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2299	19	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-recursive.c	2301	4	Do not ignore values returned by functions: hashmap_put
MEM01-C	merge-recursive.c	2303	4	Store a new value in pointers immediately after free()
MEM30-C	merge-recursive.c	2303	4	Do not access freed memory
MEM34-C	merge-recursive.c	2303	4	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	2311	4	Store a new value in pointers immediately after free()
MEM30-C	merge-recursive.c	2311	4	Do not access freed memory
MEM34-C	merge-recursive.c	2311	4	Only free memory allocated dynamically
EXP36-C	merge-recursive.c	2313	15	Do not convert pointers into more strictly aligned pointer types
EXP30-C	merge-recursive.c	2326	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-recursive.c	2326	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2326	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-recursive.c	2332	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-recursive.c	2333	50	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-recursive.c	2345	4	Detect and remove code that has no effect
INT01-C	merge-recursive.c	2345	4	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	merge-recursive.c	2345	4	Ensure that return values are compared against the proper type
INT01-C	merge-recursive.c	2345	4	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	merge-recursive.c	2345	4	Ensure that return values are compared against the proper type
INT07-C	merge-recursive.c	2371	8	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	merge-recursive.c	2376	2	Only free memory allocated dynamically
EXP36-C	merge-recursive.c	2428	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-recursive.c	2431	4	Do not ignore values returned by functions: hashmap_put
MEM01-C	merge-recursive.c	2434	4	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	2434	4	Only free memory allocated dynamically
EXP12-C	merge-recursive.c	2436	3	Do not ignore values returned by functions: string_list_insert
DCL01-C	merge-recursive.c	2443	19	Do not reuse variable names in subscopes: tree
INT13-C	merge-recursive.c	2488	16	Use bitwise operators only on unsigned operands
DCL01-C	merge-recursive.c	2498	21	Do not reuse variable names in subscopes: tree
EXP12-C	merge-recursive.c	2521	2	Do not ignore values returned by functions: remove_file
EXP36-C	merge-recursive.c	2539	23	Do not convert pointers into more strictly aligned pointer types
EXP12-C	merge-recursive.c	2576	2	Do not ignore values returned by functions: get_tree_entry
INT07-C	merge-recursive.c	2598	15	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	merge-recursive.c	2618	25	Do not reuse variable names in subscopes: tree
EXP36-C	merge-recursive.c	2632	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2654	15	Do not convert pointers into more strictly aligned pointer types
INT07-C	merge-recursive.c	2658	32	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	merge-recursive.c	2666	24	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2674	24	Do not convert pointers into more strictly aligned pointer types
EXP30-C	merge-recursive.c	2684	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-recursive.c	2684	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2684	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-recursive.c	2710	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-recursive.c	2711	28	Do not convert pointers into more strictly aligned pointer types
EXP11-C	merge-recursive.c	2713	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	merge-recursive.c	2713	6	Do not cast away a const qualification
INT01-C	merge-recursive.c	2715	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-recursive.c	2716	28	Do not convert pointers into more strictly aligned pointer types
EXP11-C	merge-recursive.c	2718	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	merge-recursive.c	2718	6	Do not cast away a const qualification
INT01-C	merge-recursive.c	2721	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-recursive.c	2721	44	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-recursive.c	2727	9	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-recursive.c	2728	32	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-recursive.c	2729	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-recursive.c	2730	32	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-recursive.c	2732	4	Const-qualify immutable objects: compare
ARR30-C	merge-recursive.c	2733	27	Do not form or use out-of-bounds pointers or array subscripts
EXP36-C	merge-recursive.c	2735	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2737	33	Do not convert pointers into more strictly aligned pointer types
INT01-C	merge-recursive.c	2747	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	merge-recursive.c	2747	4	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	merge-recursive.c	2766	4	Do not reuse variable names in subscopes: rename_type
EXP12-C	merge-recursive.c	2780	5	Do not ignore values returned by functions: remove_file
EXP36-C	merge-recursive.c	2790	17	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-recursive.c	2818	4	Const-qualify immutable objects: renamed_stage
DCL00-C	merge-recursive.c	2824	4	Const-qualify immutable objects: renamed_to_self
EXP05-C	merge-recursive.c	2886	22	Do not cast away a const qualification
EXP30-C	merge-recursive.c	2920	2	Do not depend on order of evaluation for side effects
EXP36-C	merge-recursive.c	2920	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2920	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	merge-recursive.c	2927	2	Store a new value in pointers immediately after free()
MEM01-C	merge-recursive.c	2930	2	Store a new value in pointers immediately after free()
EXP36-C	merge-recursive.c	2963	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	merge-recursive.c	2964	25	Do not convert pointers into more strictly aligned pointer types
INT13-C	merge-recursive.c	2981	8	Use bitwise operators only on unsigned operands
DCL01-C	merge-recursive.c	2995	54	Do not reuse variable names in subscopes: rename
INT01-C	merge-recursive.c	3003	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-recursive.c	3004	24	Do not convert pointers into more strictly aligned pointer types
MEM01-C	merge-recursive.c	3008	2	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	3028	3	Only free memory allocated dynamically
INT13-C	merge-recursive.c	3060	63	Use bitwise operators only on unsigned operands
MSC12-C	merge-recursive.c	3111	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3111	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-recursive.c	3111	2	Operands to the sizeof operator should not contain side effects
EXP12-C	merge-recursive.c	3165	4	Do not ignore values returned by functions: remove_file_from_index
DCL00-C	merge-recursive.c	3171	5	Const-qualify immutable objects: file_from_stage2
MEM34-C	merge-recursive.c	3187	4	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	3190	3	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	3190	3	Only free memory allocated dynamically
MSC12-C	merge-recursive.c	3256	2	Detect and remove code that has no effect
MSC12-C	merge-recursive.c	3257	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3257	2	Operands to the sizeof operator should not contain side effects
DCL00-C	merge-recursive.c	3291	2	Const-qualify immutable objects: normalize
DCL00-C	merge-recursive.c	3298	2	Const-qualify immutable objects: b_valid
EXP05-C	merge-recursive.c	3299	32	Do not cast away a const qualification
INT13-C	merge-recursive.c	3308	14	Use bitwise operators only on unsigned operands
EXP12-C	merge-recursive.c	3391	4	Do not ignore values returned by functions: remove_file
MEM34-C	merge-recursive.c	3431	4	Only free memory allocated dynamically
DCL00-C	merge-recursive.c	3452	4	Const-qualify immutable objects: is_dirty
EXP12-C	merge-recursive.c	3462	3	Do not ignore values returned by functions: remove_file
INT01-C	merge-recursive.c	3524	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-recursive.c	3526	44	Do not convert pointers into more strictly aligned pointer types
DCL00-C	merge-recursive.c	3528	5	Const-qualify immutable objects: ret
INT01-C	merge-recursive.c	3537	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	merge-recursive.c	3538	44	Do not convert pointers into more strictly aligned pointer types
MEM01-C	merge-recursive.c	3548	3	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	3548	3	Only free memory allocated dynamically
DCL00-C	merge-recursive.c	3600	3	Const-qualify immutable objects: cnt
DCL01-C	merge-recursive.c	3611	3	Do not reuse variable names in subscopes: tree
EXP12-C	merge-recursive.c	3685	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	merge-recursive.c	3686	3	Do not ignore values returned by functions: commit_list_insert
MSC12-C	merge-recursive.c	3696	2	Detect and remove code that has no effect
MSC12-C	merge-recursive.c	3698	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3698	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-recursive.c	3700	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3700	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-recursive.c	3702	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3702	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-recursive.c	3704	2	Detect and remove code that has no effect
MSC12-C	merge-recursive.c	3705	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3705	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-recursive.c	3706	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3706	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-recursive.c	3708	2	Detect and remove code that has no effect
MSC12-C	merge-recursive.c	3709	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3709	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-recursive.c	3712	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3712	2	Operands to the sizeof operator should not contain side effects
MSC12-C	merge-recursive.c	3713	2	Detect and remove code that has no effect
MSC12-C	merge-recursive.c	3714	2	Detect and remove code that has no effect
INT01-C	merge-recursive.c	3714	2	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	merge-recursive.c	3714	2	Ensure that return values are compared against the proper type
INT01-C	merge-recursive.c	3714	2	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	merge-recursive.c	3714	2	Ensure that return values are compared against the proper type
MSC12-C	merge-recursive.c	3716	2	Detect and remove code that has no effect
MSC12-C	merge-recursive.c	3719	2	Detect and remove code that has no effect
MSC12-C	merge-recursive.c	3720	2	Detect and remove code that has no effect
EXP12-C	merge-recursive.c	3724	3	Do not ignore values returned by functions: err
EXP36-C	merge-recursive.c	3730	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	merge-recursive.c	3754	2	Detect and remove code that has no effect
MSC12-C	merge-recursive.c	3772	2	Detect and remove code that has no effect
EXP06-C	merge-recursive.c	3772	2	Operands to the sizeof operator should not contain side effects
EXP06-C	merge-recursive.c	3772	2	Operands to the sizeof operator should not contain side effects
DCL01-C	merge-recursive.c	3790	2	Do not reuse variable names in subscopes: object
DCL05-C	merge-recursive.c	3805	1	Use typedefs to improve code readability
EXP12-C	merge-recursive.c	3826	4	Do not ignore values returned by functions: commit_list_insert
EXP12-C	merge-recursive.c	3832	2	Do not ignore values returned by functions: repo_hold_locked_index
INT13-C	merge-recursive.c	3841	23	Use bitwise operators only on unsigned operands
EXP12-C	merge-recursive.c	3851	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	merge-recursive.c	3852	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	merge-recursive.c	3853	2	Do not ignore values returned by functions: git_config_get_int
EXP12-C	merge-recursive.c	3854	2	Do not ignore values returned by functions: git_config_get_bool
MEM01-C	merge-recursive.c	3858	3	Store a new value in pointers immediately after free()
MEM30-C	merge-recursive.c	3858	3	Do not access freed memory
MEM31-C	merge-recursive.c	3858	3	Free dynamically allocated memory when no longer needed
MEM34-C	merge-recursive.c	3858	3	Only free memory allocated dynamically
MEM01-C	merge-recursive.c	3862	3	Store a new value in pointers immediately after free()
MEM30-C	merge-recursive.c	3862	3	Do not access freed memory
MEM31-C	merge-recursive.c	3862	3	Free dynamically allocated memory when no longer needed
MEM34-C	merge-recursive.c	3862	3	Only free memory allocated dynamically
DCL00-C	merge-recursive.c	3865	3	Const-qualify immutable objects: boolval
MEM01-C	merge-recursive.c	3874	3	Store a new value in pointers immediately after free()
MEM34-C	merge-recursive.c	3874	3	Only free memory allocated dynamically
EXP12-C	merge-recursive.c	3883	2	Do not ignore values returned by functions: memset
INT13-C	merge-recursive.c	3920	19	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3920	19	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3920	19	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3920	19	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3922	19	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3922	19	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3922	19	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3922	19	Use bitwise operators only on unsigned operands
DCL00-C	merge-recursive.c	3924	3	Const-qualify immutable objects: value
INT13-C	merge-recursive.c	3928	3	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3928	3	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3929	17	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3929	20	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3929	21	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3930	17	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3933	3	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3935	3	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3937	3	Use bitwise operators only on unsigned operands
INT13-C	merge-recursive.c	3939	3	Use bitwise operators only on unsigned operands
DCL01-C	merge.c	12	50	Do not reuse variable names in subscopes: commit
EXP12-C	merge.c	26	2	Do not ignore values returned by functions: strvec_pushf
INT01-C	merge.c	27	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	merge.c	28	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	merge.c	30	3	Do not ignore values returned by functions: strvec_push
EXP12-C	merge.c	31	2	Do not ignore values returned by functions: strvec_push
EXP12-C	merge.c	32	2	Do not ignore values returned by functions: strvec_push
EXP12-C	merge.c	34	3	Do not ignore values returned by functions: strvec_push
DCL01-C	merge.c	56	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	merge.c	58	2	Do not ignore values returned by functions: refresh_index
EXP12-C	merge.c	63	2	Do not ignore values returned by functions: memset
EXP12-C	merge.c	64	2	Do not ignore values returned by functions: memset
EXP12-C	merge.c	77	3	Do not ignore values returned by functions: parse_tree
EXP12-C	merge.c	81	2	Do not ignore values returned by functions: memset
EXP36-C	midx.c	63	31	Do not convert pointers into more strictly aligned pointer types
EXP11-C	midx.c	64	24	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	midx.c	64	24	Do not cast away a const qualification
EXP36-C	midx.c	64	36	Do not convert pointers into more strictly aligned pointer types
INT01-C	midx.c	66	17	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	midx.c	66	17	Ensure that return values are compared against the proper type
MSC12-C	midx.c	67	3	Detect and remove code that has no effect
MSC12-C	midx.c	93	3	Detect and remove code that has no effect
INT01-C	midx.c	99	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	99	18	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	midx.c	100	3	Detect and remove code that has no effect
DCL00-C	midx.c	109	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	midx.c	109	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	midx.c	126	3	Detect and remove code that has no effect
EXP12-C	midx.c	151	2	Do not ignore values returned by functions: pair_chunk
EXP36-C	midx.c	158	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	159	2	Do not convert pointers into more strictly aligned pointer types
EXP11-C	midx.c	161	18	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	midx.c	161	18	Do not cast away a const qualification
INT01-C	midx.c	165	42	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	midx.c	180	2	Store a new value in pointers immediately after free()
MEM34-C	midx.c	180	2	Only free memory allocated dynamically
EXP12-C	midx.c	199	2	Do not ignore values returned by functions: munmap
EXP05-C	midx.c	199	9	Do not cast away a const qualification
MEM01-C	midx.c	207	2	Store a new value in pointers immediately after free()
INT01-C	midx.c	261	55	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	269	61	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	278	17	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	midx.c	327	19	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	midx.c	359	3	Const-qualify immutable objects: mid
EXP05-C	midx.c	428	24	Do not cast away a const qualification
EXP05-C	midx.c	429	24	Do not cast away a const qualification
EXP36-C	midx.c	436	35	Do not convert pointers into more strictly aligned pointer types
DCL01-C	midx.c	446	2	Do not reuse variable names in subscopes: progress
EXP36-C	midx.c	465	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	490	3	Do not convert pointers into more strictly aligned pointer types
EXP05-C	midx.c	527	36	Do not cast away a const qualification
EXP05-C	midx.c	528	36	Do not cast away a const qualification
DCL00-C	midx.c	529	2	Const-qualify immutable objects: cmp
MSC05-C	midx.c	540	20	Do not manipulate time_t typed values directly
MSC05-C	midx.c	542	25	Do not manipulate time_t typed values directly
EXP12-C	midx.c	555	2	Do not ignore values returned by functions: nth_midxed_object_oid
EXP36-C	midx.c	588	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	midx.c	619	3	Do not ignore values returned by functions: nth_midxed_pack_midx_entry
DCL00-C	midx.c	673	2	Const-qualify immutable objects: start_pack
EXP36-C	midx.c	685	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	686	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	midx.c	697	4	Const-qualify immutable objects: preferred
EXP36-C	midx.c	719	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	733	35	Do not convert pointers into more strictly aligned pointer types
INT01-C	midx.c	749	45	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	755	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	755	38	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	midx.c	757	3	Do not ignore values returned by functions: memset
EXP36-C	midx.c	767	35	Do not convert pointers into more strictly aligned pointer types
DCL00-C	midx.c	769	2	Const-qualify immutable objects: last
EXP36-C	midx.c	796	35	Do not convert pointers into more strictly aligned pointer types
DCL00-C	midx.c	797	2	Const-qualify immutable objects: hash_len
EXP36-C	midx.c	821	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	851	35	Do not convert pointers into more strictly aligned pointer types
DCL00-C	midx.c	853	2	Const-qualify immutable objects: end
EXP12-C	midx.c	869	3	Do not ignore values returned by functions: hashwrite_be64
EXP36-C	midx.c	880	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	897	41	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	897	50	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	918	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	930	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	midx.c	933	2	Store a new value in pointers immediately after free()
MEM34-C	midx.c	933	2	Only free memory allocated dynamically
EXP12-C	midx.c	976	2	Do not ignore values returned by functions: memset
DCL01-C	midx.c	996	2	Do not reuse variable names in subscopes: object
DCL01-C	midx.c	1023	57	Do not reuse variable names in subscopes: index
EXP36-C	midx.c	1026	42	Do not convert pointers into more strictly aligned pointer types
DCL01-C	midx.c	1030	47	Do not reuse variable names in subscopes: commit
EXP36-C	midx.c	1032	34	Do not convert pointers into more strictly aligned pointer types
DCL00-C	midx.c	1033	2	Const-qualify immutable objects: pos
INT01-C	midx.c	1039	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1039	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1039	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1039	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1039	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1039	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1039	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1039	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1039	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	midx.c	1039	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	midx.c	1051	3	Do not reuse variable names in subscopes: object
INT01-C	midx.c	1056	15	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	midx.c	1092	3	Do not ignore values returned by functions: read_refs_snapshot
EXP12-C	midx.c	1094	3	Do not ignore values returned by functions: setup_revisions
EXP12-C	midx.c	1095	3	Do not ignore values returned by functions: for_each_ref
DCL01-C	midx.c	1138	2	Do not reuse variable names in subscopes: index
INT13-C	midx.c	1145	11	Use bitwise operators only on unsigned operands
INT13-C	midx.c	1148	11	Use bitwise operators only on unsigned operands
EXP36-C	midx.c	1155	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	midx.c	1187	2	Store a new value in pointers immediately after free()
MEM34-C	midx.c	1187	2	Only free memory allocated dynamically
MEM01-C	midx.c	1188	2	Store a new value in pointers immediately after free()
MEM34-C	midx.c	1188	2	Only free memory allocated dynamically
EXP12-C	midx.c	1204	2	Do not ignore values returned by functions: find_odb
EXP12-C	midx.c	1207	3	Do not ignore values returned by functions: strbuf_realpath
MEM01-C	midx.c	1215	2	Store a new value in pointers immediately after free()
MEM34-C	midx.c	1215	2	Only free memory allocated dynamically
EXP36-C	midx.c	1262	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	midx.c	1266	4	Do not convert pointers into more strictly aligned pointer types
MSC12-C	midx.c	1280	6	Detect and remove code that has no effect
DCL00-C	midx.c	1310	3	Const-qualify immutable objects: want_bitmap
INT13-C	midx.c	1343	37	Use bitwise operators only on unsigned operands
MSC05-C	midx.c	1359	41	Do not manipulate time_t typed values directly
MSC12-C	midx.c	1385	4	Detect and remove code that has no effect
INT01-C	midx.c	1409	40	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	midx.c	1410	4	Const-qualify immutable objects: cmp
MSC12-C	midx.c	1417	5	Detect and remove code that has no effect
EXP36-C	midx.c	1439	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	midx.c	1451	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1451	58	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	midx.c	1456	40	Do not convert pointers into more strictly aligned pointer types
DCL00-C	midx.c	1461	4	Const-qualify immutable objects: perm
EXP12-C	midx.c	1472	2	Do not ignore values returned by functions: hold_lock_file_for_update
MSC12-C	midx.c	1476	3	Detect and remove code that has no effect
INT13-C	midx.c	1484	12	Use bitwise operators only on unsigned operands
INT13-C	midx.c	1484	35	Use bitwise operators only on unsigned operands
INT01-C	midx.c	1491	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1497	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	midx.c	1497	30	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	midx.c	1505	36	Use bitwise operators only on unsigned operands
INT01-C	midx.c	1508	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	midx.c	1512	2	Do not ignore values returned by functions: write_midx_header
EXP12-C	midx.c	1513	2	Do not ignore values returned by functions: write_chunkfile
EXP12-C	midx.c	1515	2	Do not ignore values returned by functions: finalize_hashfile
MSC12-C	midx.c	1547	4	Detect and remove code that has no effect
EXP36-C	midx.c	1613	33	Do not convert pointers into more strictly aligned pointer types
EXP12-C	midx.c	1629	2	Do not ignore values returned by functions: memset
DCL00-C	midx.c	1668	2	Const-qualify immutable objects: ap
EXP12-C	midx.c	1670	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	midx.c	1673	2	Do not ignore values returned by functions: __builtin_va_end
EXP05-C	midx.c	1684	29	Do not cast away a const qualification
EXP05-C	midx.c	1685	29	Do not cast away a const qualification
DCL01-C	midx.c	1706	2	Do not reuse variable names in subscopes: progress
MSC12-C	midx.c	1718	4	Detect and remove code that has no effect
DCL00-C	midx.c	1740	3	Const-qualify immutable objects: oid_fanout1
DCL00-C	midx.c	1741	3	Const-qualify immutable objects: oid_fanout2
EXP12-C	midx.c	1763	3	Do not ignore values returned by functions: nth_midxed_object_oid
EXP12-C	midx.c	1764	3	Do not ignore values returned by functions: nth_midxed_object_oid
DCL00-C	midx.c	1770	3	Const-qualify immutable objects: _n
EXP36-C	midx.c	1780	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	midx.c	1803	4	Do not ignore values returned by functions: close_pack_fd
EXP12-C	midx.c	1807	3	Do not ignore values returned by functions: nth_midxed_object_oid
DCL00-C	midx.c	1828	3	Const-qualify immutable objects: _n
MEM01-C	midx.c	1833	2	Store a new value in pointers immediately after free()
MEM34-C	midx.c	1833	2	Only free memory allocated dynamically
DCL01-C	midx.c	1844	2	Do not reuse variable names in subscopes: progress
EXP36-C	midx.c	1849	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	midx.c	1855	3	Const-qualify immutable objects: pack_int_id
EXP12-C	midx.c	1880	3	Do not ignore values returned by functions: string_list_insert
MEM34-C	midx.c	1882	3	Only free memory allocated dynamically
MEM01-C	midx.c	1886	2	Store a new value in pointers immediately after free()
MEM34-C	midx.c	1886	2	Only free memory allocated dynamically
EXP05-C	midx.c	1906	6	Do not cast away a const qualification
EXP05-C	midx.c	1907	6	Do not cast away a const qualification
EXP12-C	midx.c	1923	2	Do not ignore values returned by functions: repo_config_get_bool
DCL01-C	midx.c	1947	2	Do not reuse variable names in subscopes: pack_info
EXP36-C	midx.c	1950	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	midx.c	1952	2	Do not ignore values returned by functions: repo_config_get_bool
DCL00-C	midx.c	1964	3	Const-qualify immutable objects: pack_int_id
DCL00-C	midx.c	1973	3	Const-qualify immutable objects: pack_int_id
INT01-C	midx.c	1988	17	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	midx.c	1998	2	Store a new value in pointers immediately after free()
MEM34-C	midx.c	1998	2	Only free memory allocated dynamically
EXP12-C	midx.c	2035	2	Do not ignore values returned by functions: repo_config_get_bool
EXP12-C	midx.c	2036	2	Do not ignore values returned by functions: repo_config_get_bool
EXP12-C	midx.c	2038	2	Do not ignore values returned by functions: strvec_push
EXP12-C	midx.c	2042	2	Do not ignore values returned by functions: strvec_push
MSC12-C	midx.c	2060	3	Detect and remove code that has no effect
DCL00-C	midx.c	2069	3	Const-qualify immutable objects: pack_int_id
EXP12-C	midx.c	2074	3	Do not ignore values returned by functions: nth_midxed_object_oid
MSC12-C	midx.c	2080	3	Detect and remove code that has no effect
MEM34-C	midx.c	2088	2	Only free memory allocated dynamically
EXP11-C	name-hash.c	29	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	name-hash.c	29	7	Do not cast away a const qualification
EXP11-C	name-hash.c	30	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	name-hash.c	30	7	Do not cast away a const qualification
EXP36-C	name-hash.c	42	9	Do not convert pointers into more strictly aligned pointer types
DCL00-C	name-hash.c	74	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	name-hash.c	74	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	name-hash.c	102	3	Do not ignore values returned by functions: hashmap_remove
MEM34-C	name-hash.c	103	3	Only free memory allocated dynamically
DCL01-C	name-hash.c	126	19	Do not reuse variable names in subscopes: remove
EXP11-C	name-hash.c	130	8	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	name-hash.c	130	8	Do not cast away a const qualification
EXP11-C	name-hash.c	131	8	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	name-hash.c	131	8	Do not cast away a const qualification
EXP36-C	name-hash.c	232	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	name-hash.c	235	3	Do not ignore values returned by functions: init_recursive_mutex
EXP12-C	name-hash.c	243	3	Do not ignore values returned by functions: pthread_mutex_destroy
MEM01-C	name-hash.c	245	2	Store a new value in pointers immediately after free()
MSC12-C	name-hash.c	278	2	Detect and remove code that has no effect
EXP06-C	name-hash.c	278	2	Operands to the sizeof operator should not contain side effects
INT13-C	name-hash.c	278	2	Use bitwise operators only on unsigned operands
INT13-C	name-hash.c	278	2	Use bitwise operators only on unsigned operands
INT01-C	name-hash.c	283	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	name-hash.c	292	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	name-hash.c	292	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	name-hash.c	338	2	Const-qualify immutable objects: input_prefix_len
MSC12-C	name-hash.c	358	3	Detect and remove code that has no effect
DCL00-C	name-hash.c	360	4	Const-qualify immutable objects: mid
DCL00-C	name-hash.c	361	4	Const-qualify immutable objects: cmp
DCL00-C	name-hash.c	391	2	Const-qualify immutable objects: input_prefix_len
INT01-C	name-hash.c	398	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	name-hash.c	405	4	Const-qualify immutable objects: len
EXP36-C	name-hash.c	464	35	Do not convert pointers into more strictly aligned pointer types
EXP12-C	name-hash.c	466	2	Do not ignore values returned by functions: handle_range_1
EXP36-C	name-hash.c	479	36	Do not convert pointers into more strictly aligned pointer types
INT33-C	name-hash.c	519	12	Ensure that division and remainder operations do not result in divide-by-zero errors
EXP36-C	name-hash.c	521	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	name-hash.c	522	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	name-hash.c	523	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	name-hash.c	574	2	Store a new value in pointers immediately after free()
MEM34-C	name-hash.c	574	2	Only free memory allocated dynamically
MEM01-C	name-hash.c	575	2	Store a new value in pointers immediately after free()
MEM34-C	name-hash.c	575	2	Only free memory allocated dynamically
MEM34-C	name-hash.c	576	2	Only free memory allocated dynamically
EXP12-C	name-hash.c	584	2	Do not ignore values returned by functions: trace_performance_enter
INT13-C	name-hash.c	639	18	Use bitwise operators only on unsigned operands
EXP12-C	name-hash.c	640	2	Do not ignore values returned by functions: hashmap_remove
DCL00-C	name-hash.c	667	2	Const-qualify immutable objects: len
INT07-C	name-hash.c	700	15	Use only explicitly signed or unsigned char type for numeric values
EXP05-C	name-hash.c	708	12	Do not cast away a const qualification
DCL00-C	name-hash.c	719	2	Const-qualify immutable objects: hash
EXP36-C	name-hash.c	726	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	negotiatodefault.c	23	21	Do not reuse variable names in subscopes: commit
INT13-C	negotiatodefault.c	25	29	Use bitwise operators only on unsigned operands
DCL13-C	negotiatodefault.c	40	16	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL01-C	negotiatodefault.c	55	70	Do not reuse variable names in subscopes: commit
EXP11-C	negotiatodefault.c	59	22	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	negotiatodefault.c	89	2	Do not reuse variable names in subscopes: commit
EXP36-C	negotiatodefault.c	98	26	Do not convert pointers into more strictly aligned pointer types
EXP12-C	negotiatodefault.c	99	3	Do not ignore values returned by functions: repo_parse_commit
EXP36-C	negotiatodefault.c	132	18	Do not convert pointers into more strictly aligned pointer types
EXP36-C	negotiatodefault.c	133	16	Do not convert pointers into more strictly aligned pointer types
EXP36-C	negotiatodefault.c	140	17	Do not convert pointers into more strictly aligned pointer types
EXP36-C	negotiatodefault.c	147	18	Do not convert pointers into more strictly aligned pointer types
DCL00-C	negotiatodefault.c	152	2	Const-qualify immutable objects: known_to_be_common
EXP36-C	negotiatodefault.c	153	15	Do not convert pointers into more strictly aligned pointer types
EXP36-C	negotiatodefault.c	171	21	Do not convert pointers into more strictly aligned pointer types
DCL13-C	negotiatonoop.c	6	51	Declare function parameters that are pointers to values not changed by the function as const: n
DCL13-C	negotiatonoop.c	6	69	Declare function parameters that are pointers to values not changed by the function as const: c
DCL13-C	negotiatonoop.c	11	46	Declare function parameters that are pointers to values not changed by the function as const: n
DCL13-C	negotiatonoop.c	11	64	Declare function parameters that are pointers to values not changed by the function as const: c
DCL13-C	negotiatonoop.c	16	62	Declare function parameters that are pointers to values not changed by the function as const: n
DCL13-C	negotiatonoop.c	21	41	Declare function parameters that are pointers to values not changed by the function as const: n
DCL13-C	negotiatonoop.c	21	59	Declare function parameters that are pointers to values not changed by the function as const: c
DCL13-C	negotiatonoop.c	31	46	Declare function parameters that are pointers to values not changed by the function as const: n
DCL01-C	negotiatoskipping.c	35	2	Do not reuse variable names in subscopes: commit
DCL13-C	negotiatoskipping.c	53	58	Declare function parameters that are pointers to values not changed by the function as const: unused
EXP36-C	negotiatoskipping.c	55	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	negotiatoskipping.c	56	26	Do not convert pointers into more strictly aligned pointer types
DCL01-C	negotiatoskipping.c	60	49	Do not reuse variable names in subscopes: data
DCL01-C	negotiatoskipping.c	60	70	Do not reuse variable names in subscopes: commit
DCL01-C	negotiatoskipping.c	62	2	Do not reuse variable names in subscopes: entry
EXP36-C	negotiatoskipping.c	65	2	Do not convert pointers into more strictly aligned pointer types
DCL13-C	negotiatoskipping.c	76	16	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL01-C	negotiatoskipping.c	89	38	Do not reuse variable names in subscopes: data
EXP36-C	negotiatoskipping.c	95	28	Do not convert pointers into more strictly aligned pointer types
DCL01-C	negotiatoskipping.c	119	37	Do not reuse variable names in subscopes: data
DCL01-C	negotiatoskipping.c	119	57	Do not reuse variable names in subscopes: entry
EXP36-C	negotiatoskipping.c	137	42	Do not convert pointers into more strictly aligned pointer types
DCL00-C	negotiatoskipping.c	151	3	Const-qualify immutable objects: new_original_ttl
DCL00-C	negotiatoskipping.c	153	3	Const-qualify immutable objects: new_ttl
DCL01-C	negotiatoskipping.c	164	53	Do not reuse variable names in subscopes: data
DCL01-C	negotiatoskipping.c	169	3	Do not reuse variable names in subscopes: entry
DCL01-C	negotiatoskipping.c	170	3	Do not reuse variable names in subscopes: commit
EXP36-C	negotiatoskipping.c	177	25	Do not convert pointers into more strictly aligned pointer types
EXP12-C	negotiatoskipping.c	186	3	Do not ignore values returned by functions: repo_parse_commit
INT13-C	negotiatoskipping.c	188	18	Use bitwise operators only on unsigned operands
MEM34-C	negotiatoskipping.c	198	3	Only free memory allocated dynamically
EXP12-C	negotiatoskipping.c	208	2	Do not ignore values returned by functions: rev_list_push
EXP36-C	negotiatoskipping.c	208	17	Do not convert pointers into more strictly aligned pointer types
EXP12-C	negotiatoskipping.c	216	2	Do not ignore values returned by functions: rev_list_push
EXP36-C	negotiatoskipping.c	216	17	Do not convert pointers into more strictly aligned pointer types
EXP36-C	negotiatoskipping.c	223	18	Do not convert pointers into more strictly aligned pointer types
DCL00-C	negotiatoskipping.c	228	2	Const-qualify immutable objects: known_to_be_common
EXP36-C	negotiatoskipping.c	232	15	Do not convert pointers into more strictly aligned pointer types
DCL01-C	negotiatoskipping.c	244	2	Do not reuse variable names in subscopes: data
EXP36-C	negotiatoskipping.c	250	21	Do not convert pointers into more strictly aligned pointer types
DCL01-C	notes-cache.c	9	23	Do not reuse variable names in subscopes: ref
DCL01-C	notes-cache.c	13	2	Do not reuse variable names in subscopes: commit
EXP12-C	notes-cache.c	25	2	Do not ignore values returned by functions: memset
DCL01-C	notes-cache.c	38	2	Do not reuse variable names in subscopes: ref
EXP12-C	notes-cache.c	41	2	Do not ignore values returned by functions: memset
INT01-C	notes-cache.c	86	11	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	notes-merge.c	24	2	Do not ignore values returned by functions: memset
INT07-C	notes-merge.c	34	15	Use only explicitly signed or unsigned char type for numeric values
INT01-C	notes-merge.c	34	20	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	notes-merge.c	39	12	Use only explicitly signed or unsigned char type for numeric values
INT01-C	notes-merge.c	39	17	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	notes-merge.c	49	3	Detect and remove code that has no effect
EXP06-C	notes-merge.c	49	3	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	50	3	Detect and remove code that has no effect
EXP06-C	notes-merge.c	50	3	Operands to the sizeof operator should not contain side effects
EXP06-C	notes-merge.c	53	3	Operands to the sizeof operator should not contain side effects
EXP06-C	notes-merge.c	56	3	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	61	2	Detect and remove code that has no effect
EXP06-C	notes-merge.c	61	2	Operands to the sizeof operator should not contain side effects
INT01-C	notes-merge.c	107	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes-merge.c	107	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	notes-merge.c	108	4	Do not ignore values returned by functions: memset
EXP36-C	notes-merge.c	140	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	notes-merge.c	158	4	Detect and remove code that has no effect
EXP06-C	notes-merge.c	158	4	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	160	5	Detect and remove code that has no effect
EXP06-C	notes-merge.c	160	5	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	163	5	Detect and remove code that has no effect
EXP06-C	notes-merge.c	163	5	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	224	3	Detect and remove code that has no effect
EXP06-C	notes-merge.c	224	3	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	246	4	Detect and remove code that has no effect
EXP06-C	notes-merge.c	246	4	Operands to the sizeof operator should not contain side effects
EXP06-C	notes-merge.c	246	4	Operands to the sizeof operator should not contain side effects
EXP06-C	notes-merge.c	246	4	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	255	4	Detect and remove code that has no effect
EXP06-C	notes-merge.c	255	4	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	256	4	Detect and remove code that has no effect
EXP06-C	notes-merge.c	256	4	Operands to the sizeof operator should not contain side effects
DCL00-C	notes-merge.c	309	3	Const-qualify immutable objects: ret
MEM34-C	notes-merge.c	321	2	Only free memory allocated dynamically
MEM34-C	notes-merge.c	338	2	Only free memory allocated dynamically
MSC12-C	notes-merge.c	395	3	Detect and remove code that has no effect
EXP06-C	notes-merge.c	395	3	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	404	3	Detect and remove code that has no effect
EXP06-C	notes-merge.c	404	3	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	416	3	Detect and remove code that has no effect
EXP06-C	notes-merge.c	416	3	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	417	3	Detect and remove code that has no effect
EXP06-C	notes-merge.c	417	3	Operands to the sizeof operator should not contain side effects
EXP12-C	notes-merge.c	422	3	Do not ignore values returned by functions: ll_merge_in_worktree
EXP12-C	notes-merge.c	426	2	Do not ignore values returned by functions: remove_note
MSC01-C	notes-merge.c	439	2	Strive for logical completeness
MEM01-C	notes-merge.c	529	2	Store a new value in pointers immediately after free()
MEM34-C	notes-merge.c	529	2	Only free memory allocated dynamically
FIO30-C	notes-merge.c	532	3	Exclude user input from format strings
MSC12-C	notes-merge.c	550	2	Detect and remove code that has no effect
EXP06-C	notes-merge.c	550	2	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	551	2	Detect and remove code that has no effect
EXP06-C	notes-merge.c	551	2	Operands to the sizeof operator should not contain side effects
MSC12-C	notes-merge.c	600	2	Detect and remove code that has no effect
EXP06-C	notes-merge.c	600	2	Operands to the sizeof operator should not contain side effects
EXP12-C	notes-merge.c	652	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	notes-merge.c	653	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	notes-merge.c	685	2	Do not ignore values returned by functions: git_path_buf
EXP12-C	notes-merge.c	733	2	Do not ignore values returned by functions: closedir
EXP12-C	notes-merge.c	747	2	Do not ignore values returned by functions: git_path_buf
MSC12-C	notes-utils.c	16	2	Detect and remove code that has no effect
EXP12-C	notes-utils.c	28	4	Do not ignore values returned by functions: commit_list_insert
EXP12-C	notes-utils.c	56	2	Do not ignore values returned by functions: update_ref
EXP36-C	notes-utils.c	96	32	Do not convert pointers into more strictly aligned pointer types
MSC12-C	notes-utils.c	105	4	Detect and remove code that has no effect
EXP36-C	notes-utils.c	126	39	Do not convert pointers into more strictly aligned pointer types
ENV00-C	notes-utils.c	127	33	Do not store the pointer to the string returned by getenv()
EXP36-C	notes-utils.c	132	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	notes-utils.c	156	3	Only free memory allocated dynamically
MEM01-C	notes-utils.c	185	2	Store a new value in pointers immediately after free()
DCL02-C	notes.c	76	1	Use visually distinct identifiers: default_notes_tree
DCL01-C	notes.c	99	72	Do not reuse variable names in subscopes: tree
INT01-C	notes.c	108	8	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	notes.c	112	4	Only free memory allocated dynamically
INT13-C	notes.c	117	6	Use bitwise operators only on unsigned operands
INT13-C	notes.c	117	6	Use bitwise operators only on unsigned operands
EXP11-C	notes.c	121	11	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	notes.c	121	11	Do not convert pointers into more strictly aligned pointer types
INT01-C	notes.c	126	8	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	notes.c	130	4	Only free memory allocated dynamically
DCL01-C	notes.c	145	20	Do not reuse variable names in subscopes: tree
DCL01-C	notes.c	164	51	Do not reuse variable names in subscopes: tree
DCL01-C	notes.c	165	41	Do not reuse variable names in subscopes: index
MSC12-C	notes.c	170	2	Detect and remove code that has no effect
EXP06-C	notes.c	170	2	Operands to the sizeof operator should not contain side effects
MSC12-C	notes.c	171	2	Detect and remove code that has no effect
DCL01-C	notes.c	198	20	Do not reuse variable names in subscopes: tree
MSC12-C	notes.c	206	2	Detect and remove code that has no effect
MEM01-C	notes.c	215	2	Store a new value in pointers immediately after free()
MEM34-C	notes.c	215	2	Only free memory allocated dynamically
EXP11-C	notes.c	216	7	Do not apply operators expecting one type to data of an incompatible type
INT13-C	notes.c	224	7	Use bitwise operators only on unsigned operands
INT13-C	notes.c	224	7	Use bitwise operators only on unsigned operands
EXP11-C	notes.c	225	25	Do not apply operators expecting one type to data of an incompatible type
INT14-C	notes.c	225	23	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	notes.c	225	25	Do not convert pointers into more strictly aligned pointer types
MSC12-C	notes.c	227	2	Detect and remove code that has no effect
EXP06-C	notes.c	227	2	Operands to the sizeof operator should not contain side effects
INT13-C	notes.c	231	11	Use bitwise operators only on unsigned operands
INT13-C	notes.c	231	11	Use bitwise operators only on unsigned operands
DCL01-C	notes.c	248	68	Do not reuse variable names in subscopes: tree
MSC12-C	notes.c	257	2	Detect and remove code that has no effect
MSC01-C	notes.c	259	2	Strive for logical completeness
EXP11-C	notes.c	265	9	Do not apply operators expecting one type to data of an incompatible type
MSC01-C	notes.c	268	3	Strive for logical completeness
INT01-C	notes.c	286	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	297	8	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	notes.c	301	4	Only free memory allocated dynamically
MSC12-C	notes.c	309	2	Detect and remove code that has no effect
EXP06-C	notes.c	309	2	Operands to the sizeof operator should not contain side effects
INT14-C	notes.c	316	6	Avoid performing bitwise and arithmetic operations on the same data
EXP11-C	notes.c	320	7	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	notes.c	325	45	Do not reuse variable names in subscopes: tree
MSC01-C	notes.c	330	3	Strive for logical completeness
EXP36-C	notes.c	332	19	Do not convert pointers into more strictly aligned pointer types
MSC12-C	notes.c	379	3	Detect and remove code that has no effect
EXP06-C	notes.c	379	3	Operands to the sizeof operator should not contain side effects
MEM01-C	notes.c	382	3	Store a new value in pointers immediately after free()
MEM34-C	notes.c	382	3	Only free memory allocated dynamically
INT01-C	notes.c	407	37	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	408	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	410	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	410	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	notes.c	416	3	Const-qualify immutable objects: path_len
INT01-C	notes.c	418	16	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	notes.c	418	16	Ensure that return values are compared against the proper type
INT01-C	notes.c	418	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	426	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	430	23	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	notes.c	430	23	Ensure that return values are compared against the proper type
EXP12-C	notes.c	446	4	Do not ignore values returned by functions: memset
INT01-C	notes.c	446	44	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	447	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	notes.c	455	3	Do not convert pointers into more strictly aligned pointer types
MEM34-C	notes.c	494	2	Only free memory allocated dynamically
DCL01-C	notes.c	511	56	Do not reuse variable names in subscopes: tree
MSC12-C	notes.c	545	2	Detect and remove code that has no effect
INT01-C	notes.c	545	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	545	2	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	notes.c	549	13	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	notes.c	552	2	Do not ignore values returned by functions: xsnprintf
DCL01-C	notes.c	555	72	Do not reuse variable names in subscopes: tree
MSC01-C	notes.c	569	3	Strive for logical completeness
INT14-C	notes.c	572	8	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	notes.c	572	34	Do not convert pointers into more strictly aligned pointer types
INT01-C	notes.c	595	22	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	notes.c	596	5	Detect and remove code that has no effect
INT07-C	notes.c	602	23	Use only explicitly signed or unsigned char type for numeric values
INT07-C	notes.c	603	20	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	notes.c	613	5	Store a new value in pointers immediately after free()
MEM34-C	notes.c	613	5	Only free memory allocated dynamically
MSC12-C	notes.c	657	2	Detect and remove code that has no effect
MSC12-C	notes.c	658	2	Detect and remove code that has no effect
EXP06-C	notes.c	658	2	Operands to the sizeof operator should not contain side effects
INT01-C	notes.c	662	33	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	notes.c	663	26	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	notes.c	682	3	Store a new value in pointers immediately after free()
MEM34-C	notes.c	682	3	Only free memory allocated dynamically
INT07-C	notes.c	685	31	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	notes.c	694	2	Const-qualify immutable objects: path_len
INT01-C	notes.c	699	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	711	19	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	notes.c	718	2	Detect and remove code that has no effect
EXP06-C	notes.c	718	2	Operands to the sizeof operator should not contain side effects
INT01-C	notes.c	718	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	718	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	721	59	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	764	30	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	notes.c	767	28	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	notes.c	770	2	Detect and remove code that has no effect
INT01-C	notes.c	770	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	770	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	770	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	770	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	770	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	notes.c	770	2	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	notes.c	783	43	Declare function parameters that are pointers to values not changed by the function as const: note_path
MEM34-C	notes.c	812	3	Only free memory allocated dynamically
MEM01-C	notes.c	818	3	Store a new value in pointers immediately after free()
MEM34-C	notes.c	818	3	Only free memory allocated dynamically
MEM01-C	notes.c	819	3	Store a new value in pointers immediately after free()
MEM34-C	notes.c	819	3	Only free memory allocated dynamically
INT07-C	notes.c	832	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	notes.c	833	19	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	notes.c	835	2	Store a new value in pointers immediately after free()
MEM34-C	notes.c	835	2	Only free memory allocated dynamically
MEM01-C	notes.c	836	2	Store a new value in pointers immediately after free()
MEM34-C	notes.c	836	2	Only free memory allocated dynamically
MEM34-C	notes.c	840	2	Only free memory allocated dynamically
DCL13-C	notes.c	851	44	Declare function parameters that are pointers to values not changed by the function as const: cur_oid
MEM34-C	notes.c	874	3	Only free memory allocated dynamically
EXP12-C	notes.c	884	2	Do not ignore values returned by functions: string_list_split
MEM34-C	notes.c	885	2	Only free memory allocated dynamically
EXP36-C	notes.c	892	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	notes.c	931	29	Do not convert pointers into more strictly aligned pointer types
MSC12-C	notes.c	942	2	Detect and remove code that has no effect
EXP12-C	notes.c	944	3	Do not ignore values returned by functions: for_each_glob_ref
EXP12-C	notes.c	961	2	Do not ignore values returned by functions: string_list_split_in_place
INT01-C	notes.c	964	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	notes.c	968	2	Only free memory allocated dynamically
EXP36-C	notes.c	973	19	Do not convert pointers into more strictly aligned pointer types
MSC12-C	notes.c	1005	2	Detect and remove code that has no effect
EXP36-C	notes.c	1042	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	notes.c	1042	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	notes.c	1044	33	Do not convert pointers into more strictly aligned pointer types
EXP12-C	notes.c	1054	2	Do not ignore values returned by functions: memset
DCL01-C	notes.c	1065	15	Do not reuse variable names in subscopes: ref
EXP12-C	notes.c	1069	2	Do not ignore values returned by functions: string_list_append
MSC12-C	notes.c	1091	2	Detect and remove code that has no effect
EXP12-C	notes.c	1095	3	Do not ignore values returned by functions: string_list_append
ENV30-C	notes.c	1096	21	Do not modify the string returned by getenv()
MSC12-C	notes.c	1125	2	Detect and remove code that has no effect
MSC12-C	notes.c	1141	2	Detect and remove code that has no effect
MSC12-C	notes.c	1158	2	Detect and remove code that has no effect
MSC12-C	notes.c	1168	2	Detect and remove code that has no effect
MSC12-C	notes.c	1181	2	Detect and remove code that has no effect
INT01-C	notes.c	1185	35	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	notes.c	1186	30	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	notes.c	1208	2	Detect and remove code that has no effect
EXP12-C	notes.c	1210	2	Do not ignore values returned by functions: for_each_note
EXP12-C	notes.c	1235	2	Do not ignore values returned by functions: memset
STR11-C	notes.c	1252	2	Do not specify the dimension of a character array initialized with a string literal
MEM34-C	notes.c	1268	3	Only free memory allocated dynamically
MEM34-C	notes.c	1276	4	Only free memory allocated dynamically
INT01-C	notes.c	1278	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	notes.c	1287	3	Do not reuse variable names in subscopes: ref
EXP12-C	notes.c	1291	4	Do not ignore values returned by functions: skip_prefix
EXP12-C	notes.c	1292	4	Do not ignore values returned by functions: skip_prefix
MEM34-C	notes.c	1306	2	Only free memory allocated dynamically
MSC12-C	notes.c	1313	2	Detect and remove code that has no effect
DCL01-C	notes.c	1349	2	Do not reuse variable names in subscopes: object
DCL02-C	object-file.c	173	1	Use visually distinct identifiers: hash_algos
DCL02-C	object-file.c	1512	1	Use visually distinct identifiers: obj_read_use_lock
DCL02-C	object-file.c	1513	1	Use visually distinct identifiers: obj_read_mutex
DCL02-C	object-file.c	1533	1	Use visually distinct identifiers: fetch_if_missing
EXP12-C	object-file.c	107	2	Do not ignore values returned by functions: memset
EXP12-C	object-file.c	139	2	Do not ignore values returned by functions: memset
DCL13-C	object-file.c	143	49	Declare function parameters that are pointers to values not changed by the function as const: ctx
DCL13-C	object-file.c	148	50	Declare function parameters that are pointers to values not changed by the function as const: dst
DCL13-C	object-file.c	154	51	Declare function parameters that are pointers to values not changed by the function as const: ctx
DCL13-C	object-file.c	161	51	Declare function parameters that are pointers to values not changed by the function as const: hash
DCL13-C	object-file.c	162	22	Declare function parameters that are pointers to values not changed by the function as const: ctx
DCL13-C	object-file.c	167	58	Declare function parameters that are pointers to values not changed by the function as const: oid
DCL13-C	object-file.c	168	26	Declare function parameters that are pointers to values not changed by the function as const: ctx
INT01-C	object-file.c	262	11	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	object-file.c	309	32	Use bitwise operators only on unsigned operands
DCL00-C	object-file.c	318	3	Const-qualify immutable objects: saved_errno
INT07-C	object-file.c	353	17	Use only explicitly signed or unsigned char type for numeric values
INT07-C	object-file.c	366	10	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	object-file.c	413	2	Const-qualify immutable objects: result
MEM01-C	object-file.c	416	2	Store a new value in pointers immediately after free()
MEM34-C	object-file.c	416	2	Only free memory allocated dynamically
INT01-C	object-file.c	424	16	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	object-file.c	425	3	Do not specify the dimension of a character array initialized with a string literal
DCL00-C	object-file.c	426	3	Const-qualify immutable objects: val
MSC12-C	object-file.c	462	3	Detect and remove code that has no effect
MSC12-C	object-file.c	476	3	Detect and remove code that has no effect
MSC12-C	object-file.c	478	3	Detect and remove code that has no effect
EXP12-C	object-file.c	516	3	Do not ignore values returned by functions: strbuf_realpath
MSC12-C	object-file.c	522	3	Detect and remove code that has no effect
INT01-C	object-file.c	532	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-file.c	532	48	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-file.c	533	39	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	object-file.c	538	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	object-file.c	546	2	Detect and remove code that has no effect
MSC12-C	object-file.c	597	3	Detect and remove code that has no effect
EXP12-C	object-file.c	602	2	Do not ignore values returned by functions: strbuf_realpath
EXP12-C	object-file.c	608	3	Do not ignore values returned by functions: link_alt_odb_entry
EXP12-C	object-file.c	624	3	Do not ignore values returned by functions: warn_on_fopen_errors
MEM34-C	object-file.c	625	3	Only free memory allocated dynamically
MEM34-C	object-file.c	631	2	Only free memory allocated dynamically
EXP12-C	object-file.c	641	2	Do not ignore values returned by functions: hold_lock_file_for_update
MEM34-C	object-file.c	674	2	Only free memory allocated dynamically
EXP36-C	object-file.c	703	19	Do not convert pointers into more strictly aligned pointer types
MEM34-C	object-file.c	755	3	Only free memory allocated dynamically
MEM34-C	object-file.c	761	3	Only free memory allocated dynamically
MEM34-C	object-file.c	796	3	Only free memory allocated dynamically
EXP12-C	object-file.c	810	3	Do not ignore values returned by functions: strbuf_realpath
MEM01-C	object-file.c	815	2	Store a new value in pointers immediately after free()
MEM34-C	object-file.c	815	2	Only free memory allocated dynamically
EXP12-C	object-file.c	831	3	Do not ignore values returned by functions: strvec_push
EXP12-C	object-file.c	832	3	Do not ignore values returned by functions: strvec_push
EXP12-C	object-file.c	836	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	object-file.c	837	3	Do not ignore values returned by functions: strvec_push
EXP12-C	object-file.c	838	3	Do not ignore values returned by functions: strvec_push
EXP12-C	object-file.c	841	4	Do not ignore values returned by functions: strvec_push
EXP05-C	object-file.c	846	26	Do not cast away a const qualification
EXP12-C	object-file.c	878	2	Do not ignore values returned by functions: finish_command
EXP36-C	object-file.c	892	35	Do not convert pointers into more strictly aligned pointer types
EXP12-C	object-file.c	918	2	Do not ignore values returned by functions: foreach_alt_odb
EXP12-C	object-file.c	973	2	Do not ignore values returned by functions: odb_loose_path
INT01-C	object-file.c	1014	9	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	object-file.c	1041	3	Do not specify the dimension of a character array initialized with a string literal
DCL00-C	object-file.c	1052	2	Const-qualify immutable objects: ret
DCL00-C	object-file.c	1108	3	Const-qualify immutable objects: readlen
EXP12-C	object-file.c	1111	4	Do not ignore values returned by functions: close_istream
EXP12-C	object-file.c	1119	2	Do not ignore values returned by functions: close_istream
INT13-C	object-file.c	1128	24	Use bitwise operators only on unsigned operands
INT13-C	object-file.c	1131	13	Use bitwise operators only on unsigned operands
INT13-C	object-file.c	1132	25	Use bitwise operators only on unsigned operands
DCL02-C	object-file.c	2666	33	Use visually distinct identifiers: flags
DCL00-C	object-file.c	1141	4	Const-qualify immutable objects: flags
DCL01-C	object-file.c	1141	4	Do not reuse variable names in subscopes: flags
DCL02-C	object-file.c	2666	33	Use visually distinct identifiers: flags
INT13-C	object-file.c	1142	33	Use bitwise operators only on unsigned operands
INT01-C	object-file.c	1232	10	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	object-file.c	1235	5	Detect and remove code that has no effect
EXP12-C	object-file.c	1263	2	Do not ignore values returned by functions: memset
INT01-C	object-file.c	1316	29	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	object-file.c	1358	2	Only free memory allocated dynamically
DCL00-C	object-file.c	1378	3	Const-qualify immutable objects: c
INT01-C	object-file.c	1397	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	object-file.c	1401	4	Const-qualify immutable objects: c
DCL00-C	object-file.c	1437	2	Const-qualify immutable objects: allow_unknown
MSC01-C	object-file.c	1474	2	Strive for logical completeness
EXP12-C	object-file.c	1502	2	Do not ignore values returned by functions: munmap
EXP12-C	object-file.c	1521	2	Do not ignore values returned by functions: init_recursive_mutex
EXP12-C	object-file.c	1530	2	Do not ignore values returned by functions: pthread_mutex_destroy
EXP36-C	object-file.c	1686	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	object-file.c	1771	4	Only free memory allocated dynamically
INT01-C	object-file.c	1776	18	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	object-file.c	1779	4	Only free memory allocated dynamically
MEM01-C	object-file.c	1782	3	Store a new value in pointers immediately after free()
MEM34-C	object-file.c	1782	3	Only free memory allocated dynamically
DCL01-C	object-file.c	1827	38	Do not reuse variable names in subscopes: tmpfile
EXP12-C	object-file.c	1853	2	Do not ignore values returned by functions: unlink_or_warn
DCL00-C	object-file.c	1928	2	Const-qualify immutable objects: dirlen
INT01-C	object-file.c	1991	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	object-file.c	1995	20	Do not apply operators expecting one type to data of an incompatible type
INT01-C	object-file.c	2021	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	object-file.c	2060	2	Do not ignore values returned by functions: loose_object_path
EXP05-C	object-file.c	2069	19	Do not cast away a const qualification
EXP05-C	object-file.c	2165	21	Do not cast away a const qualification
EXP05-C	object-file.c	2166	10	Do not cast away a const qualification
INT01-C	object-file.c	2181	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-file.c	2181	29	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	object-file.c	2200	3	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	object-file.c	2204	2	Do not ignore values returned by functions: loose_object_path
INT01-C	object-file.c	2252	24	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	object-file.c	2264	2	Only free memory allocated dynamically
MEM34-C	object-file.c	2284	2	Only free memory allocated dynamically
DCL00-C	object-file.c	2292	2	Const-qualify immutable objects: quick
DCL00-C	object-file.c	2293	2	Const-qualify immutable objects: object_info_flags
EXP12-C	object-file.c	2330	2	Do not ignore values returned by functions: memset
EXP12-C	object-file.c	2338	2	Do not ignore values returned by functions: memset
DCL00-C	object-file.c	2350	2	Const-qualify immutable objects: write_object
MSC12-C	object-file.c	2394	2	Detect and remove code that has no effect
MSC12-C	object-file.c	2395	2	Detect and remove code that has no effect
EXP06-C	object-file.c	2395	2	Operands to the sizeof operator should not contain side effects
INT01-C	object-file.c	2436	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	object-file.c	2438	3	Const-qualify immutable objects: read_result
INT01-C	object-file.c	2442	24	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	object-file.c	2447	3	Only free memory allocated dynamically
EXP12-C	object-file.c	2451	3	Do not ignore values returned by functions: munmap
FIO42-C	object-file.c	2512	8	Close files when they are no longer needed
INT01-C	object-file.c	2539	48	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	object-file.c	2554	2	Const-qualify immutable objects: type
INT01-C	object-file.c	2600	39	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-file.c	2602	28	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	object-file.c	2618	2	Do not ignore values returned by functions: closedir
INT01-C	object-file.c	2620	30	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	object-file.c	2672	3	Const-qualify immutable objects: r
EXP36-C	object-file.c	2687	17	Do not convert pointers into more strictly aligned pointer types
DCL00-C	object-file.c	2694	2	Const-qualify immutable objects: subdir_nr
DCL00-C	object-file.c	2696	2	Const-qualify immutable objects: word_bits
INT01-C	object-file.c	2696	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-file.c	2697	32	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	object-file.c	2697	32	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL00-C	object-file.c	2698	2	Const-qualify immutable objects: mask
INT01-C	object-file.c	2698	27	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	object-file.c	2698	27	Use bitwise operators only on unsigned operands
INT01-C	object-file.c	2698	41	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	object-file.c	2698	41	Ensure that division and remainder operations do not result in divide-by-zero errors
INT01-C	object-file.c	2702	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-file.c	2706	14	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	object-file.c	2709	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	object-file.c	2713	2	Do not ignore values returned by functions: for_each_file_in_obj_subdir
INT01-C	object-file.c	2717	10	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	object-file.c	2717	10	Use bitwise operators only on unsigned operands
EXP12-C	object-file.c	2726	2	Do not ignore values returned by functions: memset
INT01-C	object-file.c	2749	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-file.c	2759	21	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	object-file.c	2769	3	Detect and remove code that has no effect
MSC12-C	object-file.c	2773	3	Detect and remove code that has no effect
MSC12-C	object-file.c	2780	3	Detect and remove code that has no effect
MSC12-C	object-file.c	2803	3	Detect and remove code that has no effect
MSC12-C	object-file.c	2809	3	Detect and remove code that has no effect
MSC12-C	object-file.c	2814	3	Detect and remove code that has no effect
MSC12-C	object-file.c	2825	4	Detect and remove code that has no effect
EXP36-C	object-name.c	93	34	Do not convert pointers into more strictly aligned pointer types
INT13-C	object-name.c	118	11	Use bitwise operators only on unsigned operands
EXP12-C	object-name.c	133	2	Do not ignore values returned by functions: bsearch_midx
EXP12-C	object-name.c	161	2	Do not ignore values returned by functions: bsearch_pack
EXP12-C	object-name.c	170	3	Do not ignore values returned by functions: nth_packed_object_id
DCL13-C	object-name.c	226	15	Declare function parameters that are pointers to values not changed by the function as const: cb_data_unused
DCL00-C	object-name.c	228	2	Const-qualify immutable objects: kind
DCL13-C	object-name.c	234	12	Declare function parameters that are pointers to values not changed by the function as const: cb_data_unused
DCL13-C	object-name.c	254	13	Declare function parameters that are pointers to values not changed by the function as const: cb_data_unused
DCL00-C	object-name.c	256	2	Const-qualify immutable objects: kind
DCL13-C	object-name.c	262	16	Declare function parameters that are pointers to values not changed by the function as const: cb_data_unused
DCL13-C	object-name.c	282	13	Declare function parameters that are pointers to values not changed by the function as const: cb_data_unused
DCL00-C	object-name.c	284	2	Const-qualify immutable objects: kind
INT01-C	object-name.c	308	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-name.c	324	34	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	object-name.c	327	2	Do not ignore values returned by functions: memset
INT07-C	object-name.c	342	18	Use only explicitly signed or unsigned char type for numeric values
INT07-C	object-name.c	349	19	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	object-name.c	363	35	Do not convert pointers into more strictly aligned pointer types
MSC12-C	object-name.c	386	2	Detect and remove code that has no effect
EXP06-C	object-name.c	386	2	Operands to the sizeof operator should not contain side effects
EXP06-C	object-name.c	386	2	Operands to the sizeof operator should not contain side effects
EXP06-C	object-name.c	386	2	Operands to the sizeof operator should not contain side effects
DCL01-C	object-name.c	392	3	Do not reuse variable names in subscopes: commit
DCL01-C	object-name.c	413	3	Do not reuse variable names in subscopes: tag
EXP36-C	object-name.c	472	19	Do not convert pointers into more strictly aligned pointer types
DCL13-C	object-name.c	476	54	Declare function parameters that are pointers to values not changed by the function as const: r
EXP36-C	object-name.c	485	43	Do not convert pointers into more strictly aligned pointer types
DCL00-C	object-name.c	486	2	Const-qualify immutable objects: a_type
EXP36-C	object-name.c	486	52	Do not convert pointers into more strictly aligned pointer types
DCL00-C	object-name.c	487	2	Const-qualify immutable objects: b_type
EXP36-C	object-name.c	487	52	Do not convert pointers into more strictly aligned pointer types
EXP36-C	object-name.c	496	17	Do not convert pointers into more strictly aligned pointer types
EXP36-C	object-name.c	496	20	Do not convert pointers into more strictly aligned pointer types
DCL00-C	object-name.c	524	2	Const-qualify immutable objects: quietly
MSC12-C	object-name.c	569	3	Detect and remove code that has no effect
EXP12-C	object-name.c	580	3	Do not ignore values returned by functions: repo_for_each_abbrev
STR11-C	object-name.c	646	2	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	object-name.c	656	32	Do not convert pointers into more strictly aligned pointer types
INT07-C	object-name.c	659	21	Use only explicitly signed or unsigned char type for numeric values
DCL13-C	object-name.c	668	54	Declare function parameters that are pointers to values not changed by the function as const: r
DCL00-C	object-name.c	770	3	Const-qualify immutable objects: count
EXP12-C	object-name.c	791	2	Do not ignore values returned by functions: oid_to_hex_r
EXP11-C	object-name.c	808	15	Do not apply operators expecting one type to data of an incompatible type
MSC12-C	object-name.c	811	2	Detect and remove code that has no effect
INT07-C	object-name.c	813	19	Use only explicitly signed or unsigned char type for numeric values
INT01-C	object-name.c	824	24	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	object-name.c	825	2	Do not ignore values returned by functions: repo_find_unique_abbrev_r
DCL00-C	object-name.c	860	3	Const-qualify immutable objects: suffix_len
INT01-C	object-name.c	871	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-name.c	877	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-name.c	902	10	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	object-name.c	910	4	Only free memory allocated dynamically
DCL00-C	object-name.c	977	4	Const-qualify immutable objects: ch
MEM01-C	object-name.c	992	4	Store a new value in pointers immediately after free()
MEM34-C	object-name.c	992	4	Only free memory allocated dynamically
MEM34-C	object-name.c	994	5	Only free memory allocated dynamically
MEM34-C	object-name.c	1022	2	Only free memory allocated dynamically
DCL00-C	object-name.c	1031	2	Const-qualify immutable objects: ret
DCL01-C	object-name.c	1033	2	Do not reuse variable names in subscopes: commit
DCL01-C	object-name.c	1062	2	Do not reuse variable names in subscopes: commit
DCL00-C	object-name.c	1126	3	Const-qualify immutable objects: ch
INT13-C	object-name.c	1151	18	Use bitwise operators only on unsigned operands
EXP12-C	object-name.c	1195	3	Do not ignore values returned by functions: commit_list_insert
MEM34-C	object-name.c	1197	3	Only free memory allocated dynamically
DCL00-C	object-name.c	1208	2	Const-qualify immutable objects: flags
DCL00-C	object-name.c	1211	3	Const-qualify immutable objects: ch
DCL00-C	object-name.c	1240	3	Const-qualify immutable objects: ch
DCL00-C	object-name.c	1250	3	Const-qualify immutable objects: len1
DCL00-C	object-name.c	1253	4	Const-qualify immutable objects: digit
INT33-C	object-name.c	1254	8	Ensure that division and remainder operations do not result in divide-by-zero errors
INT01-C	object-name.c	1254	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-name.c	1254	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-name.c	1257	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object-name.c	1257	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	object-name.c	1312	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	object-name.c	1314	2	Do not reuse variable names in subscopes: object
EXP12-C	object-name.c	1325	2	Do not ignore values returned by functions: commit_list_insert
EXP12-C	object-name.c	1354	3	Do not ignore values returned by functions: commit_list_insert
DCL01-C	object-name.c	1358	3	Do not reuse variable names in subscopes: commit
INT14-C	object-name.c	1366	11	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	object-name.c	1366	22	Use bitwise operators only on unsigned operands
DCL13-C	object-name.c	1388	53	Declare function parameters that are pointers to values not changed by the function as const: ooid
DCL13-C	object-name.c	1389	25	Declare function parameters that are pointers to values not changed by the function as const: noid
EXP36-C	object-name.c	1395	45	Do not convert pointers into more strictly aligned pointer types
DCL00-C	object-name.c	1524	2	Const-qualify immutable objects: used
DCL01-C	object-name.c	1544	85	Do not reuse variable names in subscopes: ref
MEM34-C	object-name.c	1549	2	Only free memory allocated dynamically
DCL05-C	object-name.c	1567	1	Use typedefs to improve code readability
DCL01-C	object-name.c	1576	2	Do not reuse variable names in subscopes: branch
MEM34-C	object-name.c	1590	3	Only free memory allocated dynamically
DCL00-C	object-name.c	1665	2	Const-qualify immutable objects: len
DCL00-C	object-name.c	1714	2	Const-qualify immutable objects: ap
EXP12-C	object-name.c	1718	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	object-name.c	1720	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	object-name.c	1827	2	Const-qualify immutable objects: namelen
INT32-C	object-name.c	1836	9	Ensure that operations on signed integers do not result in overflow
ARR30-C	object-name.c	1838	21	Do not form or use out-of-bounds pointers or array subscripts
INT32-C	object-name.c	1853	9	Ensure that operations on signed integers do not result in overflow
ARR30-C	object-name.c	1855	21	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	object-name.c	1857	22	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	object-name.c	1876	55	Declare function parameters that are pointers to values not changed by the function as const: r
EXP12-C	object-name.c	1916	2	Do not ignore values returned by functions: memset
EXP12-C	object-name.c	1943	4	Do not ignore values returned by functions: refs_for_each_ref
EXP12-C	object-name.c	1944	4	Do not ignore values returned by functions: refs_head_ref
INT32-C	object-name.c	1971	10	Ensure that operations on signed integers do not result in overflow
MEM01-C	object-name.c	1978	5	Store a new value in pointers immediately after free()
MEM34-C	object-name.c	1978	5	Only free memory allocated dynamically
MEM34-C	object-name.c	1990	3	Only free memory allocated dynamically
DCL00-C	object-name.c	2003	3	Const-qualify immutable objects: len
INT13-C	object-name.c	2006	16	Use bitwise operators only on unsigned operands
MEM34-C	object-name.c	2033	4	Only free memory allocated dynamically
EXP12-C	object-name.c	2056	2	Do not ignore values returned by functions: get_oid_with_context_1
INT01-C	object.c	33	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object.c	45	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object.c	109	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	object.c	109	3	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	object.c	127	2	Const-qualify immutable objects: new_hash_size
EXP36-C	object.c	130	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	object.c	145	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	object.c	184	22	Do not convert pointers into more strictly aligned pointer types
DCL01-C	object.c	213	3	Do not reuse variable names in subscopes: blob
DCL01-C	object.c	220	3	Do not reuse variable names in subscopes: tree
DCL01-C	object.c	232	3	Do not reuse variable names in subscopes: commit
DCL01-C	object.c	244	3	Do not reuse variable names in subscopes: tag
DCL00-C	object.c	260	2	Const-qualify immutable objects: o
DCL00-C	object.c	271	2	Const-qualify immutable objects: skip_hash
DCL01-C	object.c	284	3	Do not reuse variable names in subscopes: commit
MSC12-C	object.c	292	4	Detect and remove code that has no effect
EXP12-C	object.c	295	3	Do not ignore values returned by functions: parse_blob_buffer
MEM01-C	object.c	303	4	Store a new value in pointers immediately after free()
MEM34-C	object.c	303	4	Only free memory allocated dynamically
MSC12-C	object.c	304	4	Detect and remove code that has no effect
MEM34-C	object.c	311	4	Only free memory allocated dynamically
EXP36-C	object.c	325	40	Do not convert pointers into more strictly aligned pointer types
DCL13-C	object.c	332	67	Declare function parameters that are pointers to values not changed by the function as const: obj
MEM30-C	object.c	347	3	Do not access freed memory
MEM34-C	object.c	347	3	Only free memory allocated dynamically
EXP36-C	object.c	368	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	object.c	421	2	Const-qualify immutable objects: nr
DCL00-C	object.c	451	2	Const-qualify immutable objects: nr
DCL01-C	object.c	452	2	Do not reuse variable names in subscopes: object
DCL00-C	object.c	462	2	Const-qualify immutable objects: nr
EXP36-C	object.c	502	40	Do not convert pointers into more strictly aligned pointer types
EXP12-C	object.c	503	2	Do not ignore values returned by functions: memset
EXP36-C	object.c	512	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	object.c	521	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	object.c	523	2	Do not ignore values returned by functions: memset
EXP12-C	object.c	526	2	Do not ignore values returned by functions: pthread_mutex_init
MEM01-C	object.c	534	2	Store a new value in pointers immediately after free()
EXP12-C	object.c	556	2	Do not ignore values returned by functions: pthread_mutex_destroy
INT01-C	oid-array.c	7	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oid-array.c	7	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oid-array.c	7	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oid-array.c	7	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oid-array.c	7	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oid-array.c	7	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oid-array.c	7	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oid-array.c	7	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oid-array.c	7	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	oid-array.c	7	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	oid-array.c	14	16	Do not convert pointers into more strictly aligned pointer types
EXP36-C	oid-array.c	14	19	Do not convert pointers into more strictly aligned pointer types
DCL01-C	oid-array.c	25	50	Do not reuse variable names in subscopes: index
EXP36-C	oid-array.c	27	34	Do not convert pointers into more strictly aligned pointer types
DCL00-C	oid-array.c	55	3	Const-qualify immutable objects: ret
DCL00-C	oid-array.c	71	3	Const-qualify immutable objects: ret
DCL00-C	oid-array.c	82	2	Const-qualify immutable objects: nr
EXP11-C	oidmap.c	11	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	oidmap.c	11	6	Do not cast away a const qualification
EXP11-C	oidmap.c	12	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	oidmap.c	12	6	Do not cast away a const qualification
EXP05-C	oidmap.c	15	26	Do not cast away a const qualification
EXP36-C	oidmap.c	54	32	Do not convert pointers into more strictly aligned pointer types
EXP12-C	oidset.c	6	2	Do not ignore values returned by functions: memset
DCL00-C	oidset.c	13	2	Const-qualify immutable objects: pos
EXP12-C	oidset.c	20	2	Do not ignore values returned by functions: kh_put_oid_set
DCL00-C	oidset.c	26	2	Const-qualify immutable objects: pos
EXP12-C	oidset.c	74	3	Do not ignore values returned by functions: oidset_insert
EXP36-C	oidtree.c	39	21	Do not convert pointers into more strictly aligned pointer types
EXP12-C	oidtree.c	54	2	Do not ignore values returned by functions: cb_insert
INT01-C	oidtree.c	69	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oidtree.c	69	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	oidtree.c	77	32	Do not convert pointers into more strictly aligned pointer types
INT13-C	oidtree.c	87	35	Use bitwise operators only on unsigned operands
INT01-C	oidtree.c	97	25	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	oidtree.c	99	2	Detect and remove code that has no effect
INT01-C	oidtree.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oidtree.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	oidtree.c	104	15	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	oidtree.c	108	21	Do not cast away a const qualification
DCL01-C	pack-bitmap-write.c	18	2	Do not reuse variable names in subscopes: commit
DCL01-C	pack-bitmap-write.c	19	2	Do not reuse variable names in subscopes: bitmap
DCL01-C	pack-bitmap-write.c	38	2	Do not reuse variable names in subscopes: progress
DCL01-C	pack-bitmap-write.c	54	33	Do not reuse variable names in subscopes: index
EXP36-C	pack-bitmap-write.c	63	2	Do not convert pointers into more strictly aligned pointer types
EXP11-C	pack-bitmap-write.c	66	32	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	pack-bitmap-write.c	114	57	Do not reuse variable names in subscopes: commit
EXP36-C	pack-bitmap-write.c	118	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-bitmap-write.c	159	4	Const-qualify immutable objects: curr
DCL01-C	pack-bitmap-write.c	188	2	Do not reuse variable names in subscopes: bitmap
INT01-C	pack-bitmap-write.c	194	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	pack-bitmap-write.c	194	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	pack-bitmap-write.c	194	1	Use typedefs to improve code readability
EXP36-C	pack-bitmap-write.c	194	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-bitmap-write.c	194	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	pack-bitmap-write.c	194	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pack-bitmap-write.c	203	27	Do not reuse variable names in subscopes: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL01-C	pack-bitmap-write.c	207	2	Do not reuse variable names in subscopes: commit
EXP12-C	pack-bitmap-write.c	212	2	Do not ignore values returned by functions: memset
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
EXP12-C	pack-bitmap-write.c	266	4	Do not ignore values returned by functions: commit_list_insert
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
INT01-C	pack-bitmap-write.c	272	4	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
INT01-C	pack-bitmap-write.c	272	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	272	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	272	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	272	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	272	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	272	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	272	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	272	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-bitmap-write.c	272	4	Do not convert pointers into more strictly aligned pointer types
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
EXP12-C	pack-bitmap-write.c	303	5	Do not ignore values returned by functions: commit_list_insert
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
INT01-C	pack-bitmap-write.c	320	3	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
DCL02-C	pack-bitmap-write.c	203	27	Use visually distinct identifiers: writer
INT01-C	pack-bitmap-write.c	320	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	320	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	320	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	320	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	320	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	320	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	320	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	320	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-bitmap-write.c	320	3	Do not convert pointers into more strictly aligned pointer types
DCL01-C	pack-bitmap-write.c	340	44	Do not reuse variable names in subscopes: bitmap
DCL01-C	pack-bitmap-write.c	341	21	Do not reuse variable names in subscopes: tree
DCL01-C	pack-bitmap-write.c	390	25	Do not reuse variable names in subscopes: commit
EXP36-C	pack-bitmap-write.c	405	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-bitmap-write.c	443	24	Do not convert pointers into more strictly aligned pointer types
DCL01-C	pack-bitmap-write.c	449	66	Do not reuse variable names in subscopes: commit
INT01-C	pack-bitmap-write.c	490	28	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pack-bitmap-write.c	491	3	Do not reuse variable names in subscopes: commit
INT01-C	pack-bitmap-write.c	491	39	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	pack-bitmap-write.c	529	2	Store a new value in pointers immediately after free()
MEM34-C	pack-bitmap-write.c	529	2	Only free memory allocated dynamically
EXP05-C	pack-bitmap-write.c	572	22	Do not cast away a const qualification
EXP05-C	pack-bitmap-write.c	573	22	Do not cast away a const qualification
EXP36-C	pack-bitmap-write.c	638	12	Do not convert pointers into more strictly aligned pointer types
DCL01-C	pack-bitmap-write.c	645	72	Do not reuse variable names in subscopes: bitmap
DCL01-C	pack-bitmap-write.c	653	2	Do not reuse variable names in subscopes: index
EXP36-C	pack-bitmap-write.c	653	47	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-bitmap-write.c	679	31	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-bitmap-write.c	680	2	Const-qualify immutable objects: a
EXP05-C	pack-bitmap-write.c	680	33	Do not cast away a const qualification
DCL00-C	pack-bitmap-write.c	681	2	Const-qualify immutable objects: b
EXP05-C	pack-bitmap-write.c	681	33	Do not cast away a const qualification
EXP36-C	pack-bitmap-write.c	698	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-bitmap-write.c	699	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-bitmap-write.c	720	3	Const-qualify immutable objects: xor_offset
DCL00-C	pack-bitmap-write.c	734	4	Const-qualify immutable objects: xor_index
EXP12-C	pack-bitmap-write.c	741	3	Do not ignore values returned by functions: hashwrite_be64
MEM01-C	pack-bitmap-write.c	746	2	Store a new value in pointers immediately after free()
MEM34-C	pack-bitmap-write.c	746	2	Only free memory allocated dynamically
MEM34-C	pack-bitmap-write.c	747	2	Only free memory allocated dynamically
DCL01-C	pack-bitmap-write.c	751	33	Do not reuse variable names in subscopes: index
EXP11-C	pack-bitmap-write.c	757	32	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	pack-bitmap-write.c	767	51	Do not reuse variable names in subscopes: index
DCL00-C	pack-bitmap-write.c	772	2	Const-qualify immutable objects: default_version
DCL00-C	pack-bitmap-write.c	773	2	Const-qualify immutable objects: flags
DCL00-C	pack-bitmap-write.c	782	2	Const-qualify immutable objects: fd
INT13-C	pack-bitmap-write.c	787	19	Use bitwise operators only on unsigned operands
INT13-C	pack-bitmap-write.c	788	19	Use bitwise operators only on unsigned operands
INT13-C	pack-bitmap-write.c	788	19	Use bitwise operators only on unsigned operands
INT01-C	pack-bitmap-write.c	792	55	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap-write.c	792	39	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-bitmap-write.c	798	14	Use bitwise operators only on unsigned operands
EXP36-C	pack-bitmap-write.c	799	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-bitmap-write.c	801	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-bitmap-write.c	805	3	Const-qualify immutable objects: commit_pos
INT13-C	pack-bitmap-write.c	815	14	Use bitwise operators only on unsigned operands
INT13-C	pack-bitmap-write.c	818	14	Use bitwise operators only on unsigned operands
EXP12-C	pack-bitmap-write.c	821	2	Do not ignore values returned by functions: finalize_hashfile
MEM01-C	pack-bitmap-write.c	831	2	Store a new value in pointers immediately after free()
MEM34-C	pack-bitmap-write.c	831	2	Only free memory allocated dynamically
MEM34-C	pack-bitmap-write.c	832	2	Only free memory allocated dynamically
DCL01-C	pack-bitmap.c	139	63	Do not reuse variable names in subscopes: index
DCL00-C	pack-bitmap.c	143	2	Const-qualify immutable objects: bitmap_size
MSC12-C	pack-bitmap.c	148	3	Detect and remove code that has no effect
INT01-C	pack-bitmap.c	153	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pack-bitmap.c	157	57	Do not reuse variable names in subscopes: index
DCL01-C	pack-bitmap.c	164	52	Do not reuse variable names in subscopes: index
EXP11-C	pack-bitmap.c	166	38	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	pack-bitmap.c	166	38	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-bitmap.c	167	2	Const-qualify immutable objects: header_size
INT01-C	pack-bitmap.c	167	55	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	167	39	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-bitmap.c	175	19	Use bitwise operators only on unsigned operands
DCL00-C	pack-bitmap.c	181	3	Const-qualify immutable objects: flags
INT13-C	pack-bitmap.c	181	20	Use bitwise operators only on unsigned operands
DCL00-C	pack-bitmap.c	182	3	Const-qualify immutable objects: cache_size
INT01-C	pack-bitmap.c	190	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	190	44	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	pack-bitmap.c	192	20	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	pack-bitmap.c	192	20	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-bitmap.c	197	4	Const-qualify immutable objects: table_size
INT01-C	pack-bitmap.c	199	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	199	44	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pack-bitmap.c	213	64	Do not reuse variable names in subscopes: index
EXP36-C	pack-bitmap.c	223	18	Do not convert pointers into more strictly aligned pointer types
MSC12-C	pack-bitmap.c	237	3	Detect and remove code that has no effect
DCL00-C	pack-bitmap.c	247	2	Const-qualify immutable objects: result
DCL01-C	pack-bitmap.c	259	55	Do not reuse variable names in subscopes: index
DCL01-C	pack-bitmap.c	268	56	Do not reuse variable names in subscopes: index
DCL01-C	pack-bitmap.c	275	3	Do not reuse variable names in subscopes: bitmap
INT01-C	pack-bitmap.c	280	40	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pack-bitmap.c	336	2	Const-qualify immutable objects: fd
MEM34-C	pack-bitmap.c	343	3	Only free memory allocated dynamically
MEM01-C	pack-bitmap.c	346	2	Store a new value in pointers immediately after free()
MEM34-C	pack-bitmap.c	346	2	Only free memory allocated dynamically
MSC12-C	pack-bitmap.c	349	3	Detect and remove code that has no effect
MSC12-C	pack-bitmap.c	375	3	Detect and remove code that has no effect
EXP12-C	pack-bitmap.c	400	2	Do not ignore values returned by functions: munmap
MEM34-C	pack-bitmap.c	423	3	Only free memory allocated dynamically
MEM01-C	pack-bitmap.c	426	2	Store a new value in pointers immediately after free()
MEM34-C	pack-bitmap.c	426	2	Only free memory allocated dynamically
MSC12-C	pack-bitmap.c	429	3	Detect and remove code that has no effect
EXP12-C	pack-bitmap.c	453	3	Do not ignore values returned by functions: munmap
MSC12-C	pack-bitmap.c	489	2	Detect and remove code that has no effect
EXP12-C	pack-bitmap.c	509	2	Do not ignore values returned by functions: munmap
MSC12-C	pack-bitmap.c	528	2	Detect and remove code that has no effect
MSC12-C	pack-bitmap.c	544	2	Detect and remove code that has no effect
MSC12-C	pack-bitmap.c	556	2	Detect and remove code that has no effect
EXP36-C	pack-bitmap.c	565	43	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-bitmap.c	576	43	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-bitmap.c	648	2	Const-qualify immutable objects: a
EXP05-C	pack-bitmap.c	648	16	Do not cast away a const qualification
DCL00-C	pack-bitmap.c	649	2	Const-qualify immutable objects: b
DCL01-C	pack-bitmap.c	692	26	Do not reuse variable names in subscopes: commit
DCL01-C	pack-bitmap.c	699	2	Do not reuse variable names in subscopes: bitmap
INT01-C	pack-bitmap.c	723	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	723	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	723	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	723	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	723	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	723	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	723	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	723	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	723	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-bitmap.c	723	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	pack-bitmap.c	725	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	725	20	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	pack-bitmap.c	726	4	Detect and remove code that has no effect
MSC12-C	pack-bitmap.c	737	4	Detect and remove code that has no effect
EXP36-C	pack-bitmap.c	752	18	Do not convert pointers into more strictly aligned pointer types
INT01-C	pack-bitmap.c	759	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	760	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	761	50	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	pack-bitmap.c	762	4	Detect and remove code that has no effect
INT01-C	pack-bitmap.c	767	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	778	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	779	49	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	pack-bitmap.c	780	3	Detect and remove code that has no effect
INT01-C	pack-bitmap.c	808	22	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	pack-bitmap.c	818	2	Store a new value in pointers immediately after free()
DCL01-C	pack-bitmap.c	824	26	Do not reuse variable names in subscopes: commit
DCL00-C	pack-bitmap.c	826	2	Const-qualify immutable objects: hash_pos
DCL01-C	pack-bitmap.c	829	3	Do not reuse variable names in subscopes: bitmap
EXP36-C	pack-bitmap.c	840	30	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-bitmap.c	847	2	Const-qualify immutable objects: pos
DCL00-C	pack-bitmap.c	850	3	Const-qualify immutable objects: bitmap_pos
DCL00-C	pack-bitmap.c	861	2	Const-qualify immutable objects: offset
DCL01-C	pack-bitmap.c	894	20	Do not reuse variable names in subscopes: object
DCL01-C	pack-bitmap.c	896	2	Do not reuse variable names in subscopes: eindex
EXP36-C	pack-bitmap.c	906	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-bitmap.c	907	4	Do not convert pointers into more strictly aligned pointer types
DCL01-C	pack-bitmap.c	927	40	Do not reuse variable names in subscopes: object
EXP36-C	pack-bitmap.c	929	34	Do not convert pointers into more strictly aligned pointer types
DCL13-C	pack-bitmap.c	941	40	Declare function parameters that are pointers to values not changed by the function as const: commit
DCL01-C	pack-bitmap.c	941	40	Do not reuse variable names in subscopes: commit
DCL13-C	pack-bitmap.c	941	54	Declare function parameters that are pointers to values not changed by the function as const: data
DCL01-C	pack-bitmap.c	947	25	Do not reuse variable names in subscopes: commit
DCL01-C	pack-bitmap.c	968	42	Do not reuse variable names in subscopes: commit
EXP36-C	pack-bitmap.c	970	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-bitmap.c	995	30	Do not convert pointers into more strictly aligned pointer types
DCL01-C	pack-bitmap.c	1011	20	Do not reuse variable names in subscopes: commit
DCL01-C	pack-bitmap.c	1045	3	Do not reuse variable names in subscopes: object
EXP12-C	pack-bitmap.c	1054	3	Do not ignore values returned by functions: object_list_insert
DCL01-C	pack-bitmap.c	1076	3	Do not reuse variable names in subscopes: object
DCL01-C	pack-bitmap.c	1129	2	Do not reuse variable names in subscopes: eindex
DCL01-C	pack-bitmap.c	1177	19	Do not reuse variable names in subscopes: object_type
DCL00-C	pack-bitmap.c	1192	3	Const-qualify immutable objects: word
INT13-C	pack-bitmap.c	1192	36	Use bitwise operators only on unsigned operands
DCL00-C	pack-bitmap.c	1193	3	Const-qualify immutable objects: pos
INT01-C	pack-bitmap.c	1193	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1193	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1198	29	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-bitmap.c	1204	14	Use bitwise operators only on unsigned operands
INT34-C	pack-bitmap.c	1204	14	Do not shift a negative number of bits or more bits than exist in the operand
INT14-C	pack-bitmap.c	1207	11	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	pack-bitmap.c	1207	14	Use bitwise operators only on unsigned operands
INT34-C	pack-bitmap.c	1207	14	Do not shift a negative number of bits or more bits than exist in the operand
INT01-C	pack-bitmap.c	1213	41	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	pack-bitmap.c	1215	5	Do not ignore values returned by functions: nth_midxed_object_oid
INT01-C	pack-bitmap.c	1220	57	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1221	52	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	pack-bitmap.c	1222	5	Do not ignore values returned by functions: nth_bitmap_object_oid
DCL01-C	pack-bitmap.c	1239	3	Do not reuse variable names in subscopes: object
DCL01-C	pack-bitmap.c	1282	2	Do not reuse variable names in subscopes: eindex
INT01-C	pack-bitmap.c	1301	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1303	9	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-bitmap.c	1304	9	Use bitwise operators only on unsigned operands
INT13-C	pack-bitmap.c	1304	12	Use bitwise operators only on unsigned operands
INT13-C	pack-bitmap.c	1305	23	Use bitwise operators only on unsigned operands
INT13-C	pack-bitmap.c	1305	26	Use bitwise operators only on unsigned operands
DCL00-C	pack-bitmap.c	1314	3	Const-qualify immutable objects: pos
DCL00-C	pack-bitmap.c	1345	4	Const-qualify immutable objects: midx_pos
DCL00-C	pack-bitmap.c	1346	4	Const-qualify immutable objects: pack_id
EXP12-C	pack-bitmap.c	1357	4	Do not ignore values returned by functions: nth_bitmap_object_oid
DCL01-C	pack-bitmap.c	1362	3	Do not reuse variable names in subscopes: eindex
DCL01-C	pack-bitmap.c	1376	2	Do not reuse variable names in subscopes: eindex
INT01-C	pack-bitmap.c	1385	9	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pack-bitmap.c	1387	3	Const-qualify immutable objects: word
INT13-C	pack-bitmap.c	1387	38	Use bitwise operators only on unsigned operands
INT01-C	pack-bitmap.c	1390	29	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-bitmap.c	1393	14	Use bitwise operators only on unsigned operands
INT34-C	pack-bitmap.c	1393	14	Do not shift a negative number of bits or more bits than exist in the operand
INT14-C	pack-bitmap.c	1395	11	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	pack-bitmap.c	1395	14	Use bitwise operators only on unsigned operands
INT34-C	pack-bitmap.c	1395	14	Do not shift a negative number of bits or more bits than exist in the operand
INT01-C	pack-bitmap.c	1396	14	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pack-bitmap.c	1405	3	Const-qualify immutable objects: pos
DCL01-C	pack-bitmap.c	1433	28	Do not reuse variable names in subscopes: object_type
INT01-C	pack-bitmap.c	1490	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-bitmap.c	1533	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	pack-bitmap.c	1538	3	Do not reuse variable names in subscopes: object
DCL01-C	pack-bitmap.c	1544	4	Do not reuse variable names in subscopes: tag
EXP11-C	pack-bitmap.c	1544	22	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	pack-bitmap.c	1601	2	Do not ignore values returned by functions: filter_bitmap
INT01-C	pack-bitmap.c	1657	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1693	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	pack-bitmap.c	1723	1	Use typedefs to improve code readability
MSC12-C	pack-bitmap.c	1736	2	Detect and remove code that has no effect
EXP12-C	pack-bitmap.c	1738	2	Do not ignore values returned by functions: load_reverse_index
INT01-C	pack-bitmap.c	1757	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1757	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1758	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1758	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	pack-bitmap.c	1761	2	Do not ignore values returned by functions: memset
DCL00-C	pack-bitmap.c	1764	3	Const-qualify immutable objects: word
DCL00-C	pack-bitmap.c	1765	3	Const-qualify immutable objects: pos
INT01-C	pack-bitmap.c	1765	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1765	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	1767	29	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-bitmap.c	1768	14	Use bitwise operators only on unsigned operands
INT14-C	pack-bitmap.c	1771	11	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	pack-bitmap.c	1771	14	Use bitwise operators only on unsigned operands
INT34-C	pack-bitmap.c	1771	14	Do not shift a negative number of bits or more bits than exist in the operand
INT01-C	pack-bitmap.c	1772	36	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pack-bitmap.c	1808	20	Do not reuse variable names in subscopes: bitmap
MSC12-C	pack-bitmap.c	1823	2	Detect and remove code that has no effect
DCL01-C	pack-bitmap.c	1840	2	Do not reuse variable names in subscopes: eindex
INT01-C	pack-bitmap.c	1848	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pack-bitmap.c	1849	3	Const-qualify immutable objects: word
INT13-C	pack-bitmap.c	1849	38	Use bitwise operators only on unsigned operands
MSC12-C	pack-bitmap.c	1866	2	Detect and remove code that has no effect
DCL01-C	pack-bitmap.c	1930	45	Do not reuse variable names in subscopes: object
EXP36-C	pack-bitmap.c	1933	35	Do not convert pointers into more strictly aligned pointer types
DCL01-C	pack-bitmap.c	1945	45	Do not reuse variable names in subscopes: commit
EXP36-C	pack-bitmap.c	1947	35	Do not convert pointers into more strictly aligned pointer types
EXP12-C	pack-bitmap.c	1975	2	Do not ignore values returned by functions: fprintf_ln
EXP12-C	pack-bitmap.c	1984	3	Do not ignore values returned by functions: fprintf_ln
INT13-C	pack-bitmap.c	2047	2	Use bitwise operators only on unsigned operands
EXP12-C	pack-bitmap.c	2047	2	Do not ignore values returned by functions: printf_ln
EXP12-C	pack-bitmap.c	2071	3	Do not ignore values returned by functions: nth_bitmap_object_oid
EXP12-C	pack-bitmap.c	2073	3	Do not ignore values returned by functions: printf_ln
INT01-C	pack-bitmap.c	2096	29	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-bitmap.c	2097	14	Use bitwise operators only on unsigned operands
INT14-C	pack-bitmap.c	2100	11	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	pack-bitmap.c	2100	14	Use bitwise operators only on unsigned operands
INT34-C	pack-bitmap.c	2100	14	Do not shift a negative number of bits or more bits than exist in the operand
INT01-C	pack-bitmap.c	2109	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-bitmap.c	2127	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	pack-bitmap.c	2138	3	Do not ignore values returned by functions: nth_bitmap_object_oid
INT13-C	pack-bitmap.c	2164	3	Use bitwise operators only on unsigned operands
EXP36-C	pack-bitmap.c	2164	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	pack-bitmap.c	2164	3	Store a new value in pointers immediately after free()
MEM34-C	pack-bitmap.c	2164	3	Only free memory allocated dynamically
EXP12-C	pack-bitmap.c	2186	3	Do not ignore values returned by functions: close_midx_revindex
MEM01-C	pack-bitmap.c	2188	2	Store a new value in pointers immediately after free()
DCL01-C	pack-bitmap.c	2199	27	Do not reuse variable names in subscopes: object_type
DCL00-C	pack-bitmap.c	2210	3	Const-qualify immutable objects: word
INT13-C	pack-bitmap.c	2210	35	Use bitwise operators only on unsigned operands
DCL00-C	pack-bitmap.c	2211	3	Const-qualify immutable objects: base
INT01-C	pack-bitmap.c	2211	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	2211	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	2217	29	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-bitmap.c	2218	14	Use bitwise operators only on unsigned operands
INT14-C	pack-bitmap.c	2221	11	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	pack-bitmap.c	2221	14	Use bitwise operators only on unsigned operands
INT34-C	pack-bitmap.c	2221	14	Do not shift a negative number of bits or more bits than exist in the operand
DCL02-C	pack-bitmap.c	2226	5	Use visually distinct identifiers: offset
DCL00-C	pack-bitmap.c	2225	5	Const-qualify immutable objects: midx_pos
INT01-C	pack-bitmap.c	2225	65	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pack-bitmap.c	2226	5	Const-qualify immutable objects: offset
DCL01-C	pack-bitmap.c	2226	5	Do not reuse variable names in subscopes: offset
DCL00-C	pack-bitmap.c	2228	5	Const-qualify immutable objects: pack_id
DCL02-C	pack-bitmap.c	2226	5	Use visually distinct identifiers: offset
DCL02-C	pack-bitmap.c	2226	5	Use visually distinct identifiers: offset
EXP12-C	pack-bitmap.c	2233	6	Do not ignore values returned by functions: nth_midxed_object_oid
DCL00-C	pack-bitmap.c	2243	5	Const-qualify immutable objects: pos
INT01-C	pack-bitmap.c	2243	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	2244	55	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pack-bitmap.c	2256	2	Do not reuse variable names in subscopes: eindex
INT01-C	pack-bitmap.c	2264	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-bitmap.c	2267	58	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-check.c	16	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-check.c	17	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-check.c	41	15	Do not convert pointers into more strictly aligned pointer types
INT01-C	pack-check.c	42	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-check.c	42	71	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pack-check.c	51	24	Do not reuse variable names in subscopes: progress
DCL00-C	pack-check.c	54	2	Const-qualify immutable objects: index_size
INT01-C	pack-check.c	72	32	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-check.c	92	2	Do not convert pointers into more strictly aligned pointer types
DCL02-C	pack-check.c	114	4	Use visually distinct identifiers: offset
DCL00-C	pack-check.c	114	4	Const-qualify immutable objects: offset
DCL01-C	pack-check.c	114	4	Do not reuse variable names in subscopes: offset
DCL00-C	pack-check.c	115	4	Const-qualify immutable objects: len
DCL00-C	pack-check.c	116	4	Const-qualify immutable objects: nr
DCL02-C	pack-check.c	114	4	Use visually distinct identifiers: offset
INT13-C	pack-check.c	154	8	Use bitwise operators only on unsigned operands
MEM34-C	pack-check.c	160	3	Only free memory allocated dynamically
MEM34-C	pack-check.c	164	2	Only free memory allocated dynamically
DCL01-C	pack-check.c	184	20	Do not reuse variable names in subscopes: progress
INT13-C	pack-check.c	189	6	Use bitwise operators only on unsigned operands
INT13-C	pack-check.c	193	6	Use bitwise operators only on unsigned operands
INT01-C	pack-mtimes.c	45	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-mtimes.c	50	14	Do not convert pointers into more strictly aligned pointer types
MEM34-C	pack-mtimes.c	117	2	Only free memory allocated dynamically
DCL00-C	pack-objects.c	12	2	Const-qualify immutable objects: mask
INT14-C	pack-objects.c	24	5	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	pack-objects.c	24	15	Use bitwise operators only on unsigned operands
INT13-C	pack-objects.c	34	4	Use bitwise operators only on unsigned operands
INT13-C	pack-objects.c	35	4	Use bitwise operators only on unsigned operands
INT13-C	pack-objects.c	36	4	Use bitwise operators only on unsigned operands
INT13-C	pack-objects.c	37	4	Use bitwise operators only on unsigned operands
INT13-C	pack-objects.c	38	4	Use bitwise operators only on unsigned operands
EXP36-C	pack-objects.c	52	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-objects.c	58	3	Const-qualify immutable objects: ix
DCL00-C	pack-objects.c	90	2	Const-qualify immutable objects: nr
EXP36-C	pack-objects.c	92	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	pack-objects.c	100	4	Only free memory allocated dynamically
EXP36-C	pack-objects.c	125	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	pack-objects.c	151	2	Do not ignore values returned by functions: init_recursive_mutex
EXP36-C	pack-objects.c	161	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-objects.c	164	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-objects.c	166	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-objects.c	169	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-objects.c	175	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	pack-objects.c	180	2	Do not ignore values returned by functions: memset
DCL00-C	pack-objects.c	187	3	Const-qualify immutable objects: pos
EXP36-C	pack-objects.c	216	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	pack-objects.c	218	2	Do not ignore values returned by functions: memset
EXP36-C	pack-revindex.c	60	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pack-revindex.c	61	2	Do not convert pointers into more strictly aligned pointer types
INT13-C	pack-revindex.c	70	21	Use bitwise operators only on unsigned operands
INT34-C	pack-revindex.c	70	21	Do not shift a negative number of bits or more bits than exist in the operand
EXP12-C	pack-revindex.c	73	3	Do not ignore values returned by functions: memset
INT01-C	pack-revindex.c	73	26	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-revindex.c	84	8	Use bitwise operators only on unsigned operands
INT13-C	pack-revindex.c	84	8	Use bitwise operators only on unsigned operands
INT34-C	pack-revindex.c	84	8	Do not shift a negative number of bits or more bits than exist in the operand
INT14-C	pack-revindex.c	102	41	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	pack-revindex.c	102	13	Use bitwise operators only on unsigned operands
INT13-C	pack-revindex.c	102	13	Use bitwise operators only on unsigned operands
INT34-C	pack-revindex.c	102	13	Do not shift a negative number of bits or more bits than exist in the operand
INT01-C	pack-revindex.c	108	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-revindex.c	108	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-revindex.c	116	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-revindex.c	116	3	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	pack-revindex.c	117	2	Store a new value in pointers immediately after free()
MEM34-C	pack-revindex.c	117	2	Only free memory allocated dynamically
MEM34-C	pack-revindex.c	118	2	Only free memory allocated dynamically
DCL01-C	pack-revindex.c	132	2	Do not reuse variable names in subscopes: index
EXP36-C	pack-revindex.c	135	2	Do not convert pointers into more strictly aligned pointer types
EXP11-C	pack-revindex.c	140	4	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	pack-revindex.c	140	4	Do not cast away a const qualification
EXP36-C	pack-revindex.c	140	27	Do not convert pointers into more strictly aligned pointer types
INT01-C	pack-revindex.c	140	52	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	pack-revindex.c	154	26	Do not cast away a const qualification
EXP36-C	pack-revindex.c	154	45	Do not convert pointers into more strictly aligned pointer types
INT01-C	pack-revindex.c	220	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-revindex.c	220	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-revindex.c	225	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-revindex.c	225	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-revindex.c	231	8	Do not convert pointers into more strictly aligned pointer types
EXP11-C	pack-revindex.c	278	21	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	pack-revindex.c	278	21	Do not cast away a const qualification
EXP36-C	pack-revindex.c	278	70	Do not convert pointers into more strictly aligned pointer types
EXP05-C	pack-revindex.c	278	40	Do not cast away a const qualification
MEM34-C	pack-revindex.c	281	2	Only free memory allocated dynamically
EXP11-C	pack-revindex.c	317	22	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	pack-revindex.c	317	22	Do not cast away a const qualification
EXP36-C	pack-revindex.c	317	41	Do not convert pointers into more strictly aligned pointer types
EXP11-C	pack-revindex.c	333	21	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	pack-revindex.c	333	21	Do not cast away a const qualification
EXP36-C	pack-revindex.c	333	70	Do not convert pointers into more strictly aligned pointer types
EXP05-C	pack-revindex.c	333	40	Do not cast away a const qualification
EXP12-C	pack-revindex.c	345	2	Do not ignore values returned by functions: munmap
EXP05-C	pack-revindex.c	345	9	Do not cast away a const qualification
DCL00-C	pack-revindex.c	366	3	Const-qualify immutable objects: got
MSC12-C	pack-revindex.c	377	2	Detect and remove code that has no effect
INT01-C	pack-revindex.c	404	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pack-revindex.c	428	36	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-revindex.c	431	2	Const-qualify immutable objects: versus
EXP05-C	pack-revindex.c	431	43	Do not cast away a const qualification
EXP05-C	pack-revindex.c	431	59	Do not cast away a const qualification
DCL00-C	pack-revindex.c	432	2	Const-qualify immutable objects: versus_pack
DCL00-C	pack-revindex.c	436	2	Const-qualify immutable objects: versus_preferred
EXP36-C	pack-revindex.c	487	17	Do not convert pointers into more strictly aligned pointer types
EXP12-C	pack-write.c	13	2	Do not ignore values returned by functions: memset
EXP05-C	pack-write.c	20	30	Do not cast away a const qualification
EXP05-C	pack-write.c	21	30	Do not cast away a const qualification
DCL00-C	pack-write.c	27	2	Const-qualify immutable objects: a
EXP05-C	pack-write.c	27	17	Do not cast away a const qualification
DCL00-C	pack-write.c	28	2	Const-qualify immutable objects: b
EXP05-C	pack-write.c	28	17	Do not cast away a const qualification
MSC12-C	pack-write.c	74	3	Detect and remove code that has no effect
EXP12-C	pack-write.c	82	4	Do not ignore values returned by functions: unlink
INT14-C	pack-write.c	147	11	Avoid performing bitwise and arithmetic operations on the same data
DCL00-C	pack-write.c	157	4	Const-qualify immutable objects: offset
EXP12-C	pack-write.c	161	4	Do not ignore values returned by functions: hashwrite_be64
EXP12-C	pack-write.c	167	2	Do not ignore values returned by functions: finalize_hashfile
INT13-C	pack-write.c	168	39	Use bitwise operators only on unsigned operands
EXP36-C	pack-write.c	175	36	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pack-write.c	177	2	Const-qualify immutable objects: oa
EXP05-C	pack-write.c	177	22	Do not cast away a const qualification
DCL00-C	pack-write.c	178	2	Const-qualify immutable objects: ob
EXP05-C	pack-write.c	178	22	Do not cast away a const qualification
EXP36-C	pack-write.c	221	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	pack-write.c	229	2	Only free memory allocated dynamically
EXP12-C	pack-write.c	252	4	Do not ignore values returned by functions: unlink
EXP12-C	pack-write.c	277	2	Do not ignore values returned by functions: finalize_hashfile
INT13-C	pack-write.c	278	39	Use bitwise operators only on unsigned operands
EXP11-C	pack-write.c	303	28	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	pack-write.c	337	2	Do not ignore values returned by functions: finalize_hashfile
DCL00-C	pack-write.c	377	2	Const-qualify immutable objects: buf_sz
INT01-C	pack-write.c	391	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-write.c	400	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pack-write.c	403	22	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pack-write.c	436	26	Use bitwise operators only on unsigned operands
INT14-C	pack-write.c	437	24	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	pack-write.c	437	27	Use bitwise operators only on unsigned operands
INT01-C	pack-write.c	437	27	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	pack-write.c	440	2	Store a new value in pointers immediately after free()
MEM34-C	pack-write.c	440	2	Only free memory allocated dynamically
INT01-C	pack-write.c	452	39	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	pack-write.c	466	19	Use only explicitly signed or unsigned char type for numeric values
INT14-C	pack-write.c	498	10	Avoid performing bitwise and arithmetic operations on the same data
DCL00-C	pack-write.c	520	2	Const-qualify immutable objects: name_prefix_len
DCL05-C	pack-write.c	535	1	Use typedefs to improve code readability
EXP05-C	pack-write.c	550	18	Do not cast away a const qualification
INT13-C	pack-write.c	581	6	Use bitwise operators only on unsigned operands
DCL02-C	packfile.c	765	1	Use visually distinct identifiers: report_garbage
DCL02-C	packfile.c	1644	1	Use visually distinct identifiers: do_check_packed_object_crc
DCL00-C	packfile.c	85	2	Const-qualify immutable objects: fd
INT01-C	packfile.c	96	15	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	packfile.c	114	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	packfile.c	115	2	Do not reuse variable names in subscopes: index
INT01-C	packfile.c	117	15	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	packfile.c	133	10	Do not convert pointers into more strictly aligned pointer types
DCL00-C	packfile.c	137	3	Const-qualify immutable objects: n
DCL00-C	packfile.c	167	3	Const-qualify immutable objects: min_size
INT01-C	packfile.c	179	22	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	packfile.c	204	2	Only free memory allocated dynamically
EXP36-C	packfile.c	210	32	Do not convert pointers into more strictly aligned pointer types
EXP36-C	packfile.c	215	17	Do not convert pointers into more strictly aligned pointer types
EXP36-C	packfile.c	227	32	Do not convert pointers into more strictly aligned pointer types
EXP12-C	packfile.c	228	2	Do not ignore values returned by functions: memset
DCL00-C	packfile.c	236	2	Const-qualify immutable objects: alloc
MEM34-C	packfile.c	242	3	Only free memory allocated dynamically
DCL05-C	packfile.c	249	1	Use typedefs to improve code readability
EXP12-C	packfile.c	278	3	Do not ignore values returned by functions: munmap
MEM01-C	packfile.c	284	3	Store a new value in pointers immediately after free()
MEM34-C	packfile.c	284	3	Only free memory allocated dynamically
EXP12-C	packfile.c	299	3	Do not ignore values returned by functions: munmap
MEM30-C	packfile.c	303	3	Do not access freed memory
MEM34-C	packfile.c	303	3	Only free memory allocated dynamically
EXP12-C	packfile.c	322	3	Do not ignore values returned by functions: munmap
EXP05-C	packfile.c	322	10	Do not cast away a const qualification
EXP12-C	packfile.c	332	2	Do not ignore values returned by functions: munmap
EXP05-C	packfile.c	332	9	Do not cast away a const qualification
EXP12-C	packfile.c	342	2	Do not ignore values returned by functions: munmap
EXP05-C	packfile.c	342	9	Do not cast away a const qualification
EXP12-C	packfile.c	349	2	Do not ignore values returned by functions: close_pack_fd
EXP12-C	packfile.c	382	2	Do not ignore values returned by functions: strip_suffix_mem
INT01-C	packfile.c	393	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	packfile.c	396	3	Do not ignore values returned by functions: unlink
DCL05-C	packfile.c	406	1	Use typedefs to improve code readability
MSC05-C	packfile.c	416	51	Do not manipulate time_t typed values directly
DCL00-C	packfile.c	488	3	Const-qualify immutable objects: open_max
DCL00-C	packfile.c	543	3	Const-qualify immutable objects: max_fds
INT01-C	packfile.c	572	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	packfile.c	593	14	Do not cast away a const qualification
EXP12-C	packfile.c	603	2	Do not ignore values returned by functions: close_pack_fd
DCL00-C	packfile.c	615	2	Const-qualify immutable objects: win_off
INT01-C	packfile.c	617	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	617	50	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	634	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	packfile.c	647	4	Const-qualify immutable objects: window_align
INT01-C	packfile.c	647	49	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	packfile.c	653	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	packfile.c	654	42	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	654	26	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	packfile.c	654	26	Ensure that division and remainder operations do not result in divide-by-zero errors
INT01-C	packfile.c	656	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	669	33	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	packfile.c	669	33	Ensure that return values are compared against the proper type
INT01-C	packfile.c	689	9	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	packfile.c	723	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	packfile.c	727	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	packfile.c	731	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	packfile.c	735	2	Do not ignore values returned by functions: xsnprintf
MEM34-C	packfile.c	737	3	Only free memory allocated dynamically
INT01-C	packfile.c	786	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	packfile.c	839	2	Do not ignore values returned by functions: closedir
DCL00-C	packfile.c	861	3	Const-qualify immutable objects: hash
MEM34-C	packfile.c	870	3	Only free memory allocated dynamically
MSC12-C	packfile.c	944	1	Detect and remove code that has no effect
MSC12-C	packfile.c	944	1	Detect and remove code that has no effect
DCL05-C	packfile.c	944	1	Use typedefs to improve code readability
INT01-C	packfile.c	944	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	944	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	944	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	944	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	packfile.c	944	1	Use typedefs to improve code readability
INT01-C	packfile.c	944	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	packfile.c	944	1	Use typedefs to improve code readability
INT32-C	packfile.c	958	10	Ensure that operations on signed integers do not result in overflow
MSC05-C	packfile.c	965	15	Do not manipulate time_t typed values directly
DCL00-C	packfile.c	996	3	Const-qualify immutable objects: local
EXP12-C	packfile.c	997	3	Do not ignore values returned by functions: prepare_multi_pack_index_one
EXP12-C	packfile.c	1051	4	Do not ignore values returned by functions: prepare_midx_pack
INT01-C	packfile.c	1071	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1072	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1074	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1075	23	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	packfile.c	1076	4	Detect and remove code that has no effect
INT01-C	packfile.c	1077	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1081	39	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	packfile.c	1097	2	Do not ignore values returned by functions: memset
INT01-C	packfile.c	1099	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1124	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1126	47	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	packfile.c	1127	3	Detect and remove code that has no effect
EXP12-C	packfile.c	1137	2	Do not ignore values returned by functions: get_delta_hdr_size
EXP12-C	packfile.c	1171	2	Do not ignore values returned by functions: oidset_insert
INT13-C	packfile.c	1206	24	Use bitwise operators only on unsigned operands
INT01-C	packfile.c	1206	24	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	packfile.c	1209	16	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	packfile.c	1218	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	packfile.c	1243	3	Const-qualify immutable objects: base_offset
EXP12-C	packfile.c	1267	2	Do not ignore values returned by functions: nth_packed_object_id
EXP36-C	packfile.c	1294	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	packfile.c	1295	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1295	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	packfile.c	1297	4	Do not convert pointers into more strictly aligned pointer types
MEM34-C	packfile.c	1331	3	Only free memory allocated dynamically
INT14-C	packfile.c	1369	7	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	packfile.c	1401	43	Do not convert pointers into more strictly aligned pointer types
EXP11-C	packfile.c	1403	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	packfile.c	1403	6	Do not cast away a const qualification
EXP11-C	packfile.c	1404	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	packfile.c	1404	6	Do not cast away a const qualification
EXP12-C	packfile.c	1424	2	Do not ignore values returned by functions: hashmap_remove
INT01-C	packfile.c	1426	20	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	packfile.c	1427	2	Store a new value in pointers immediately after free()
EXP11-C	packfile.c	1458	4	Do not apply operators expecting one type to data of an incompatible type
INT01-C	packfile.c	1479	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	packfile.c	1483	4	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	packfile.c	1489	15	Do not convert pointers into more strictly aligned pointer types
DCL00-C	packfile.c	1527	4	Const-qualify immutable objects: base_offset
MSC12-C	packfile.c	1546	4	Detect and remove code that has no effect
EXP12-C	packfile.c	1604	2	Do not ignore values returned by functions: memset
MEM34-C	packfile.c	1627	3	Only free memory allocated dynamically
MSC12-C	packfile.c	1705	5	Detect and remove code that has no effect
EXP12-C	packfile.c	1715	5	Do not ignore values returned by functions: nth_packed_object_id
MSC12-C	packfile.c	1716	5	Detect and remove code that has no effect
MSC12-C	packfile.c	1730	4	Detect and remove code that has no effect
EXP36-C	packfile.c	1742	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	packfile.c	1743	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1743	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	packfile.c	1746	4	Do not convert pointers into more strictly aligned pointer types
DCL00-C	packfile.c	1787	3	Const-qualify immutable objects: base_obj_offset
EXP12-C	packfile.c	1801	5	Do not ignore values returned by functions: nth_packed_object_id
MSC12-C	packfile.c	1803	5	Detect and remove code that has no effect
MSC12-C	packfile.c	1824	4	Detect and remove code that has no effect
MEM01-C	packfile.c	1856	3	Store a new value in pointers immediately after free()
MEM34-C	packfile.c	1856	3	Only free memory allocated dynamically
MEM34-C	packfile.c	1857	3	Only free memory allocated dynamically
MEM34-C	packfile.c	1869	3	Only free memory allocated dynamically
EXP05-C	packfile.c	1894	33	Do not cast away a const qualification
EXP36-C	packfile.c	1894	50	Do not convert pointers into more strictly aligned pointer types
DCL01-C	packfile.c	1902	2	Do not reuse variable names in subscopes: index
DCL01-C	packfile.c	1937	2	Do not reuse variable names in subscopes: index
EXP05-C	packfile.c	1941	10	Do not cast away a const qualification
EXP36-C	packfile.c	1941	10	Do not convert pointers into more strictly aligned pointer types
INT01-C	packfile.c	1941	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1944	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1944	39	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	packfile.c	1945	9	Do not cast away a const qualification
EXP36-C	packfile.c	1945	9	Do not convert pointers into more strictly aligned pointer types
INT14-C	packfile.c	1948	9	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	packfile.c	1948	39	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	1948	35	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	packfile.c	1957	2	Do not reuse variable names in subscopes: index
INT01-C	packfile.c	1985	28	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	packfile.c	1985	28	Ensure that return values are compared against the proper type
EXP11-C	packfile.c	2049	26	Do not apply operators expecting one type to data of an incompatible type
INT01-C	packfile.c	2089	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2089	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2089	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2089	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2089	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2089	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2089	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2089	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2089	5	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	packfile.c	2089	5	Do not convert pointers into more strictly aligned pointer types
INT01-C	packfile.c	2093	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2093	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2093	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2093	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2093	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2093	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2093	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2093	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	packfile.c	2093	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	packfile.c	2093	3	Do not convert pointers into more strictly aligned pointer types
DCL13-C	packfile.c	2215	30	Declare function parameters that are pointers to values not changed by the function as const: pack
EXP36-C	packfile.c	2219	23	Do not convert pointers into more strictly aligned pointer types
EXP12-C	packfile.c	2234	2	Do not ignore values returned by functions: oidset_insert
DCL01-C	packfile.c	2241	3	Do not reuse variable names in subscopes: tree
EXP11-C	packfile.c	2241	23	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	packfile.c	2255	3	Do not reuse variable names in subscopes: commit
EXP11-C	packfile.c	2255	27	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	packfile.c	2258	3	Do not ignore values returned by functions: oidset_insert
EXP12-C	packfile.c	2260	4	Do not ignore values returned by functions: oidset_insert
DCL01-C	packfile.c	2262	3	Do not reuse variable names in subscopes: tag
EXP11-C	packfile.c	2262	21	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	packfile.c	2263	3	Do not ignore values returned by functions: oidset_insert
EXP12-C	packfile.c	2275	4	Do not ignore values returned by functions: for_each_packed_object
EXP12-C	pager.c	30	2	Do not ignore values returned by functions: finish_command
EXP12-C	pager.c	36	2	Do not ignore values returned by functions: finish_command_in_signal
EXP12-C	pager.c	37	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	pager.c	38	2	Do not ignore values returned by functions: raise
DCL13-C	pager.c	42	15	Declare function parameters that are pointers to values not changed by the function as const: data
DCL00-C	pager.c	77	2	Const-qualify immutable objects: n
INT07-C	pager.c	89	7	Use only explicitly signed or unsigned char type for numeric values
INT07-C	pager.c	91	8	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	pager.c	92	4	Do not ignore values returned by functions: strvec_push
MEM01-C	pager.c	95	2	Store a new value in pointers immediately after free()
MEM34-C	pager.c	95	2	Only free memory allocated dynamically
MEM34-C	pager.c	96	2	Only free memory allocated dynamically
DCL01-C	pager.c	99	47	Do not reuse variable names in subscopes: pager_process
DCL02-C	pager.c	99	47	Use visually distinct identifiers: pager_process
DCL02-C	pager.c	99	47	Use visually distinct identifiers: pager_process
EXP12-C	pager.c	101	2	Do not ignore values returned by functions: strvec_push
EXP12-C	pager.c	121	3	Do not ignore values returned by functions: xsnprintf
EXP12-C	pager.c	126	2	Do not ignore values returned by functions: setenv
EXP12-C	pager.c	133	2	Do not ignore values returned by functions: strvec_push
EXP12-C	pager.c	138	2	Do not ignore values returned by functions: dup2
EXP12-C	pager.c	145	2	Do not ignore values returned by functions: atexit
ENV30-C	pager.c	171	15	Do not modify the string returned by getenv()
INT05-C	pager.c	172	30	Use strtol() or a related function to convert a string token to an integer
EXP36-C	pager.c	229	43	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pager.c	233	3	Const-qualify immutable objects: b
DCL01-C	parallel-checkout.c	22	2	Do not reuse variable names in subscopes: progress
ENV30-C	parallel-checkout.c	38	22	Do not modify the string returned by getenv()
EXP12-C	parallel-checkout.c	75	2	Do not ignore values returned by functions: memset
INT01-C	parallel-checkout.c	93	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	93	75	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	93	58	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	102	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	155	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	155	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	155	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	155	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	155	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	155	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	155	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	155	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	155	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	parallel-checkout.c	155	2	Do not convert pointers into more strictly aligned pointer types
INT13-C	parallel-checkout.c	230	8	Use bitwise operators only on unsigned operands
MSC12-C	parallel-checkout.c	272	2	Detect and remove code that has no effect
EXP06-C	parallel-checkout.c	272	2	Operands to the sizeof operator should not contain side effects
MEM34-C	parallel-checkout.c	301	3	Only free memory allocated dynamically
MEM01-C	parallel-checkout.c	307	2	Store a new value in pointers immediately after free()
MEM34-C	parallel-checkout.c	307	2	Only free memory allocated dynamically
DCL00-C	parallel-checkout.c	329	2	Const-qualify immutable objects: mode
FIO42-C	parallel-checkout.c	352	7	Close files when they are no longer needed
MSC12-C	parallel-checkout.c	367	4	Detect and remove code that has no effect
EXP12-C	parallel-checkout.c	376	3	Do not ignore values returned by functions: close_and_clear
EXP12-C	parallel-checkout.c	377	3	Do not ignore values returned by functions: unlink
MSC12-C	parallel-checkout.c	384	3	Detect and remove code that has no effect
MSC12-C	parallel-checkout.c	390	3	Detect and remove code that has no effect
DCL00-C	parallel-checkout.c	407	2	Const-qualify immutable objects: name_len
DCL00-C	parallel-checkout.c	408	2	Const-qualify immutable objects: working_tree_encoding_len
INT01-C	parallel-checkout.c	415	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	415	61	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	parallel-checkout.c	420	18	Do not apply operators expecting one type to data of an incompatible type
MEM34-C	parallel-checkout.c	444	2	Only free memory allocated dynamically
EXP12-C	parallel-checkout.c	450	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	parallel-checkout.c	454	2	Do not ignore values returned by functions: sigchain_pop
EXP36-C	parallel-checkout.c	463	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	parallel-checkout.c	473	3	Do not ignore values returned by functions: strvec_push
INT01-C	parallel-checkout.c	480	41	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	parallel-checkout.c	480	41	Ensure that division and remainder operations do not result in divide-by-zero errors
INT01-C	parallel-checkout.c	481	53	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	parallel-checkout.c	481	53	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL00-C	parallel-checkout.c	518	3	Const-qualify immutable objects: rc
MEM01-C	parallel-checkout.c	529	2	Store a new value in pointers immediately after free()
EXP11-C	parallel-checkout.c	550	8	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	parallel-checkout.c	550	8	Do not cast away a const qualification
EXP36-C	parallel-checkout.c	587	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	parallel-checkout.c	610	5	Const-qualify immutable objects: len
INT13-C	parallel-checkout.c	625	28	Use bitwise operators only on unsigned operands
MEM34-C	parallel-checkout.c	633	2	Only free memory allocated dynamically
DCL01-C	parallel-checkout.c	649	23	Do not reuse variable names in subscopes: progress
INT01-C	parallel-checkout.c	660	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parallel-checkout.c	663	47	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options-cb.c	29	14	Use rsize_t or size_t for all integer values representing the size of an object
INT36-C	parse-options-cb.c	52	27	Take care when converting from pointer to integer or integer to pointer
EXP36-C	parse-options-cb.c	64	19	Do not convert pointers into more strictly aligned pointer types
DCL01-C	parse-options-cb.c	88	2	Do not reuse variable names in subscopes: commit
EXP12-C	parse-options-cb.c	99	2	Do not ignore values returned by functions: commit_list_insert
EXP36-C	parse-options-cb.c	99	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	parse-options-cb.c	106	2	Do not reuse variable names in subscopes: commit
EXP36-C	parse-options-cb.c	107	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	parse-options-cb.c	127	22	Do not convert pointers into more strictly aligned pointer types
EXP36-C	parse-options-cb.c	134	22	Do not convert pointers into more strictly aligned pointer types
EXP36-C	parse-options-cb.c	141	32	Do not convert pointers into more strictly aligned pointer types
EXP36-C	parse-options-cb.c	157	19	Do not convert pointers into more strictly aligned pointer types
DCL00-C	parse-options-cb.c	185	2	Const-qualify immutable objects: a_len
DCL00-C	parse-options-cb.c	186	2	Const-qualify immutable objects: b_len
EXP36-C	parse-options-cb.c	188	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	parse-options-cb.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options-cb.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options-cb.c	190	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options-cb.c	190	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options-cb.c	190	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	parse-options-cb.c	197	29	Do not convert pointers into more strictly aligned pointer types
EXP12-C	parse-options-cb.c	207	2	Do not ignore values returned by functions: string_list_append
DCL13-C	parse-options-cb.c	223	68	Declare function parameters that are pointers to values not changed by the function as const: ctx
EXP36-C	parse-options-cb.c	267	24	Do not convert pointers into more strictly aligned pointer types
EXP36-C	parse-options-cb.c	288	32	Do not convert pointers into more strictly aligned pointer types
EXP12-C	parse-options-cb.c	293	2	Do not ignore values returned by functions: strvec_push
EXP11-C	parse-options.c	53	10	Do not apply operators expecting one type to data of an incompatible type
INT36-C	parse-options.c	53	10	Take care when converting from pointer to integer or integer to pointer
MSC12-C	parse-options.c	93	3	Detect and remove code that has no effect
INT13-C	parse-options.c	132	23	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	132	26	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	134	23	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	139	23	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	141	23	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	141	26	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	147	22	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	147	25	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	148	22	Use bitwise operators only on unsigned operands
EXP11-C	parse-options.c	165	33	Do not apply operators expecting one type to data of an incompatible type
INT36-C	parse-options.c	165	33	Take care when converting from pointer to integer or integer to pointer
EXP11-C	parse-options.c	175	33	Do not apply operators expecting one type to data of an incompatible type
INT36-C	parse-options.c	175	33	Take care when converting from pointer to integer or integer to pointer
EXP36-C	parse-options.c	236	32	Do not convert pointers into more strictly aligned pointer types
MEM34-C	parse-options.c	279	3	Only free memory allocated dynamically
DCL01-C	parse-options.c	297	2	Do not reuse variable names in subscopes: group
EXP05-C	parse-options.c	392	7	Do not cast away a const qualification
MSC12-C	parse-options.c	395	3	Detect and remove code that has no effect
INT01-C	parse-options.c	439	18	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	parse-options.c	443	3	Detect and remove code that has no effect
MSC12-C	parse-options.c	451	4	Detect and remove code that has no effect
EXP12-C	parse-options.c	462	2	Do not ignore values returned by functions: memset
EXP12-C	parse-options.c	578	2	Do not ignore values returned by functions: memset
INT13-C	parse-options.c	594	37	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	643	60	Use bitwise operators only on unsigned operands
INT13-C	parse-options.c	643	37	Use bitwise operators only on unsigned operands
EXP12-C	parse-options.c	677	2	Do not ignore values returned by functions: fputc
EXP36-C	parse-options.c	705	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	parse-options.c	706	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options.c	706	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	parse-options.c	709	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	parse-options.c	767	9	Do not cast away a const qualification
MEM01-C	parse-options.c	769	2	Store a new value in pointers immediately after free()
MSC01-C	parse-options.c	802	4	Strive for logical completeness
MSC12-C	parse-options.c	818	5	Detect and remove code that has no effect
MSC01-C	parse-options.c	845	4	Strive for logical completeness
MSC01-C	parse-options.c	865	5	Strive for logical completeness
INT07-C	parse-options.c	878	28	Use only explicitly signed or unsigned char type for numeric values
EXP05-C	parse-options.c	878	7	Do not cast away a const qualification
MSC01-C	parse-options.c	905	3	Strive for logical completeness
INT01-C	parse-options.c	951	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options.c	951	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	parse-options.c	968	2	Do not ignore values returned by functions: memset
MSC01-C	parse-options.c	973	2	Strive for logical completeness
MSC12-C	parse-options.c	985	4	Detect and remove code that has no effect
INT13-C	parse-options.c	992	14	Use bitwise operators only on unsigned operands
EXP12-C	parse-options.c	1001	2	Do not ignore values returned by functions: precompose_argv_prefix
DCL00-C	parse-options.c	1010	2	Const-qualify immutable objects: literal
DCL00-C	parse-options.c	1043	2	Const-qualify immutable objects: usage_len
EXP12-C	parse-options.c	1087	3	Do not ignore values returned by functions: string_list_split
INT01-C	parse-options.c	1088	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	parse-options.c	1115	4	Do not ignore values returned by functions: fputc
EXP12-C	parse-options.c	1125	4	Do not ignore values returned by functions: fputc
INT01-C	parse-options.c	1132	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options.c	1134	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options.c	1137	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options.c	1139	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options.c	1141	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options.c	1145	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options.c	1147	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	parse-options.c	1148	27	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	parse-options.c	1150	4	Do not ignore values returned by functions: fputc
EXP12-C	parse-options.c	1155	4	Do not ignore values returned by functions: fprintf_ln
EXP12-C	parse-options.c	1161	2	Do not ignore values returned by functions: fputc
EXP12-C	parse-options.c	1172	2	Do not ignore values returned by functions: usage_with_options_internal
EXP12-C	parse-options.c	1180	2	Do not ignore values returned by functions: die_message
DCL00-C	parse-options.c	1189	2	Const-qualify immutable objects: ap
EXP12-C	parse-options.c	1190	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	parse-options.c	1192	2	Do not ignore values returned by functions: __builtin_va_end
EXP05-C	patch-delta.c	27	8	Do not cast away a const qualification
INT14-C	patch-delta.c	49	4	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	patch-delta.c	50	4	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	patch-delta.c	51	4	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	patch-delta.c	52	4	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	patch-delta.c	53	4	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	patch-delta.c	54	4	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	patch-delta.c	55	4	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	patch-delta.c	58	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	patch-delta.c	58	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	patch-delta.c	62	16	Do not cast away a const qualification
MSC12-C	patch-delta.c	78	4	Detect and remove code that has no effect
MEM34-C	patch-delta.c	88	3	Only free memory allocated dynamically
DCL01-C	patch-ids.c	7	44	Do not reuse variable names in subscopes: commit
DCL01-C	patch-ids.c	13	36	Do not reuse variable names in subscopes: commit
EXP36-C	patch-ids.c	44	29	Do not convert pointers into more strictly aligned pointer types
EXP05-C	patch-ids.c	44	29	Do not cast away a const qualification
EXP11-C	patch-ids.c	47	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	patch-ids.c	47	6	Do not cast away a const qualification
EXP11-C	patch-ids.c	48	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	patch-ids.c	48	6	Do not cast away a const qualification
EXP12-C	patch-ids.c	63	2	Do not ignore values returned by functions: memset
DCL01-C	patch-ids.c	79	26	Do not reuse variable names in subscopes: commit
DCL01-C	patch-ids.c	92	53	Do not reuse variable names in subscopes: commit
EXP12-C	patch-ids.c	100	2	Do not ignore values returned by functions: memset
EXP36-C	patch-ids.c	104	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	patch-ids.c	110	9	Do not convert pointers into more strictly aligned pointer types
DCL01-C	patch-ids.c	113	40	Do not reuse variable names in subscopes: commit
DCL01-C	patch-ids.c	119	53	Do not reuse variable names in subscopes: commit
EXP36-C	patch-ids.c	127	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	patch-ids.c	129	3	Only free memory allocated dynamically
STR11-C	path.c	26	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	path.c	33	2	Do not reuse variable names in subscopes: index
INT01-C	path.c	35	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	path.c	59	2	Const-qualify immutable objects: args
EXP12-C	path.c	62	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	64	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	path.c	65	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	path.c	66	3	Do not ignore values returned by functions: gitstrlcpy
EXP05-C	path.c	69	9	Do not cast away a const qualification
DCL00-C	path.c	74	2	Const-qualify immutable objects: len
DCL00-C	path.c	92	2	Const-qualify immutable objects: newlen
DCL00-C	path.c	93	2	Const-qualify immutable objects: need_sep
INT07-C	path.c	93	32	Use only explicitly signed or unsigned char type for numeric values
INT07-C	path.c	99	20	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	path.c	168	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	path.c	203	18	Do not convert pointers into more strictly aligned pointer types
EXP12-C	path.c	215	3	Do not ignore values returned by functions: memset
EXP12-C	path.c	341	3	Do not ignore values returned by functions: add_to_trie
DCL13-C	path.c	350	67	Declare function parameters that are pointers to values not changed by the function as const: baton
EXP36-C	path.c	352	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	path.c	364	22	Do not reuse variable names in subscopes: common_dir
DCL00-C	path.c	367	2	Const-qualify immutable objects: has_lock_suffix
INT01-C	path.c	435	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	path.c	435	48	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	path.c	448	2	Const-qualify immutable objects: args
EXP12-C	path.c	449	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	451	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	459	2	Const-qualify immutable objects: args
EXP12-C	path.c	460	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	462	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	467	2	Const-qualify immutable objects: args
EXP12-C	path.c	469	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	471	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	477	2	Const-qualify immutable objects: args
EXP12-C	path.c	478	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	480	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	486	2	Const-qualify immutable objects: args
EXP12-C	path.c	487	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	489	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	496	2	Const-qualify immutable objects: args
EXP12-C	path.c	497	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	499	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	506	2	Const-qualify immutable objects: args
EXP12-C	path.c	507	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	509	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	516	2	Const-qualify immutable objects: args
EXP12-C	path.c	518	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	520	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	527	2	Const-qualify immutable objects: args
EXP12-C	path.c	528	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	530	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	path.c	539	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	path.c	539	47	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	path.c	549	2	Const-qualify immutable objects: args
EXP12-C	path.c	554	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	556	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	565	2	Const-qualify immutable objects: args
EXP12-C	path.c	570	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	572	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	605	2	Const-qualify immutable objects: args
EXP12-C	path.c	607	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	609	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	621	2	Const-qualify immutable objects: args
EXP12-C	path.c	622	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	624	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	path.c	635	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	path.c	635	48	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	path.c	644	2	Const-qualify immutable objects: args
EXP12-C	path.c	645	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	647	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	path.c	655	2	Const-qualify immutable objects: args
EXP12-C	path.c	656	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	path.c	658	2	Do not ignore values returned by functions: __builtin_va_end
POS30-C	path.c	675	9	Use the readlink() function properly
INT01-C	path.c	675	46	Use rsize_t or size_t for all integer values representing the size of an object
POS35-C	path.c	684	7	Avoid race conditions while checking for the existence of a symbolic link
INT01-C	path.c	687	47	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	path.c	692	14	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	path.c	718	2	Only free memory allocated dynamically
DCL00-C	path.c	745	3	Const-qualify immutable objects: username_len
INT01-C	path.c	746	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	path.c	746	20	Ensure that return values are compared against the proper type
DCL00-C	path.c	830	4	Const-qualify immutable objects: baselen
INT13-C	path.c	878	9	Use bitwise operators only on unsigned operands
INT13-C	path.c	881	9	Use bitwise operators only on unsigned operands
INT13-C	path.c	883	25	Use bitwise operators only on unsigned operands
INT13-C	path.c	883	16	Use bitwise operators only on unsigned operands
INT13-C	path.c	885	8	Use bitwise operators only on unsigned operands
INT13-C	path.c	903	12	Use bitwise operators only on unsigned operands
INT13-C	path.c	913	29	Use bitwise operators only on unsigned operands
INT13-C	path.c	913	17	Use bitwise operators only on unsigned operands
INT13-C	path.c	914	26	Use bitwise operators only on unsigned operands
DCL00-C	path.c	951	2	Const-qualify immutable objects: prefix_len
INT07-C	path.c	1075	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	path.c	1130	6	Use only explicitly signed or unsigned char type for numeric values
INT07-C	path.c	1178	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	path.c	1200	7	Use only explicitly signed or unsigned char type for numeric values
INT01-C	path.c	1230	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	path.c	1304	2	Const-qualify immutable objects: offset
DCL00-C	path.c	1328	3	Const-qualify immutable objects: ch
EXP30-C	path.c	1406	7	Do not depend on order of evaluation for side effects
EXP30-C	path.c	1412	7	Do not depend on order of evaluation for side effects
INT01-C	path.c	1438	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	path.c	1441	4	Const-qualify immutable objects: c
INT01-C	path.c	1463	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	path.c	1473	16	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	path.c	1527	2	Detect and remove code that has no effect
MSC12-C	path.c	1528	2	Detect and remove code that has no effect
MSC12-C	path.c	1549	2	Detect and remove code that has no effect
DCL01-C	pathspec.c	22	64	Do not reuse variable names in subscopes: pathspec
EXP12-C	pathspec.c	45	3	Do not ignore values returned by functions: ce_path_match
DCL01-C	pathspec.c	57	68	Do not reuse variable names in subscopes: pathspec
DCL01-C	pathspec.c	66	68	Do not reuse variable names in subscopes: pathspec
INT01-C	pathspec.c	108	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pathspec.c	110	24	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	pathspec.c	136	6	Use bitwise operators only on unsigned operands
INT07-C	pathspec.c	158	7	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	pathspec.c	173	2	Do not ignore values returned by functions: string_list_split
EXP36-C	pathspec.c	177	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	pathspec.c	204	36	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	pathspec.c	216	3	Do not ignore values returned by functions: attr_check_append
MEM34-C	pathspec.c	218	3	Only free memory allocated dynamically
INT13-C	pathspec.c	272	16	Use bitwise operators only on unsigned operands
INT13-C	pathspec.c	275	43	Use bitwise operators only on unsigned operands
INT13-C	pathspec.c	276	16	Use bitwise operators only on unsigned operands
INT13-C	pathspec.c	282	16	Use bitwise operators only on unsigned operands
INT13-C	pathspec.c	284	20	Use bitwise operators only on unsigned operands
INT13-C	pathspec.c	285	20	Use bitwise operators only on unsigned operands
INT13-C	pathspec.c	285	22	Use bitwise operators only on unsigned operands
INT13-C	pathspec.c	290	45	Use bitwise operators only on unsigned operands
INT13-C	pathspec.c	291	16	Use bitwise operators only on unsigned operands
INT07-C	pathspec.c	310	28	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	pathspec.c	311	3	Const-qualify immutable objects: len
INT01-C	pathspec.c	325	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pathspec.c	331	44	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	pathspec.c	334	4	Store a new value in pointers immediately after free()
MEM30-C	pathspec.c	334	4	Do not access freed memory
MEM34-C	pathspec.c	334	4	Only free memory allocated dynamically
INT01-C	pathspec.c	338	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pathspec.c	346	7	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	pathspec.c	369	28	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	pathspec.c	370	3	Const-qualify immutable objects: ch
ARR30-C	pathspec.c	379	8	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	pathspec.c	382	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pathspec.c	389	7	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	pathspec.c	523	6	Do not cast away a const qualification
EXP05-C	pathspec.c	524	6	Do not cast away a const qualification
INT01-C	pathspec.c	533	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pathspec.c	555	38	Do not reuse variable names in subscopes: pathspec
EXP12-C	pathspec.c	563	2	Do not ignore values returned by functions: memset
EXP36-C	pathspec.c	584	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	pathspec.c	602	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	pathspec.c	631	3	Const-qualify immutable objects: plen
DCL01-C	pathspec.c	643	43	Do not reuse variable names in subscopes: pathspec
DCL00-C	pathspec.c	648	2	Const-qualify immutable objects: getline_fn
EXP12-C	pathspec.c	666	3	Do not ignore values returned by functions: strvec_push
EXP36-C	pathspec.c	684	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	pathspec.c	685	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pathspec.c	685	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pathspec.c	694	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	pathspec.c	695	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pathspec.c	695	3	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pathspec.c	705	38	Do not reuse variable names in subscopes: pathspec
MEM01-C	pathspec.c	737	2	Store a new value in pointers immediately after free()
MEM34-C	pathspec.c	737	2	Only free memory allocated dynamically
DCL01-C	pathspec.c	764	30	Do not reuse variable names in subscopes: pathspec
INT01-C	pathspec.c	808	57	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	pathspec.c	808	57	Ensure that return values are compared against the proper type
MEM34-C	pathspec.c	848	2	Only free memory allocated dynamically
DCL02-C	pkt-line.c	5	1	Use visually distinct identifiers: packet_buffer
DCL01-C	pkt-line.c	34	65	Do not reuse variable names in subscopes: write
EXP12-C	pkt-line.c	49	3	Do not ignore values returned by functions: packet_trace_pack
STR11-C	pkt-line.c	131	2	Do not specify the dimension of a character array initialized with a string literal
INT01-C	pkt-line.c	152	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pkt-line.c	156	42	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pkt-line.c	179	2	Const-qualify immutable objects: args
EXP12-C	pkt-line.c	181	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	pkt-line.c	182	2	Do not ignore values returned by functions: packet_write_fmt_1
EXP12-C	pkt-line.c	183	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	pkt-line.c	189	2	Const-qualify immutable objects: args
EXP12-C	pkt-line.c	191	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	pkt-line.c	193	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	pkt-line.c	203	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pkt-line.c	209	21	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	pkt-line.c	232	3	Detect and remove code that has no effect
INT01-C	pkt-line.c	251	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pkt-line.c	255	21	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pkt-line.c	265	8	Const-qualify immutable objects: args
EXP12-C	pkt-line.c	269	8	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	pkt-line.c	271	8	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	pkt-line.c	285	2	Const-qualify immutable objects: args
EXP12-C	pkt-line.c	287	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	pkt-line.c	289	2	Do not ignore values returned by functions: __builtin_va_end
MEM34-C	pkt-line.c	301	4	Only free memory allocated dynamically
MEM34-C	pkt-line.c	308	2	Only free memory allocated dynamically
INT01-C	pkt-line.c	320	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pkt-line.c	324	22	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	pkt-line.c	324	22	Ensure that return values are compared against the proper type
INT01-C	pkt-line.c	344	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pkt-line.c	347	13	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pkt-line.c	372	2	Const-qualify immutable objects: val
INT13-C	pkt-line.c	373	38	Use bitwise operators only on unsigned operands
INT07-C	pkt-line.c	459	14	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	pkt-line.c	485	2	Do not ignore values returned by functions: packet_read_with_status
DCL00-C	pkt-line.c	493	2	Const-qualify immutable objects: len
DCL00-C	pkt-line.c	502	2	Const-qualify immutable objects: len
DCL00-C	pkt-line.c	515	2	Const-qualify immutable objects: orig_len
DCL00-C	pkt-line.c	516	2	Const-qualify immutable objects: orig_alloc
INT01-C	pkt-line.c	530	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pkt-line.c	534	18	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	pkt-line.c	534	18	Ensure that return values are compared against the proper type
DCL01-C	pkt-line.c	548	2	Do not reuse variable names in subscopes: sideband_type
DCL00-C	pkt-line.c	551	3	Const-qualify immutable objects: status
INT01-C	pkt-line.c	563	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	pkt-line.c	576	2	Do not ignore values returned by functions: memset
DCL01-C	pkt-line.c	602	3	Do not reuse variable names in subscopes: sideband_type
EXP12-C	pkt-line.c	635	2	Do not ignore values returned by functions: packet_reader_read
DCL00-C	pkt-line.c	648	2	Const-qualify immutable objects: args
EXP12-C	pkt-line.c	650	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	pkt-line.c	651	2	Do not ignore values returned by functions: packet_write_fmt_1
EXP12-C	pkt-line.c	653	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	pkt-line.c	658	2	Const-qualify immutable objects: args
EXP12-C	pkt-line.c	660	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	pkt-line.c	661	2	Do not ignore values returned by functions: packet_write_fmt_1
EXP12-C	pkt-line.c	663	2	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	preload-index.c	24	2	Do not reuse variable names in subscopes: progress
DCL01-C	preload-index.c	30	2	Do not reuse variable names in subscopes: index
DCL01-C	preload-index.c	31	2	Do not reuse variable names in subscopes: pathspec
DCL01-C	preload-index.c	32	2	Do not reuse variable names in subscopes: progress
EXP36-C	preload-index.c	40	26	Do not convert pointers into more strictly aligned pointer types
DCL01-C	preload-index.c	41	2	Do not reuse variable names in subscopes: index
DCL01-C	preload-index.c	96	40	Do not reuse variable names in subscopes: index
DCL01-C	preload-index.c	97	29	Do not reuse variable names in subscopes: pathspec
EXP12-C	preload-index.c	116	2	Do not ignore values returned by functions: trace_performance_enter
INT33-C	preload-index.c	120	9	Ensure that division and remainder operations do not result in divide-by-zero errors
EXP12-C	preload-index.c	121	2	Do not ignore values returned by functions: memset
EXP12-C	preload-index.c	123	2	Do not ignore values returned by functions: memset
EXP12-C	preload-index.c	126	3	Do not ignore values returned by functions: pthread_mutex_init
DCL01-C	preload-index.c	167	31	Do not reuse variable names in subscopes: pathspec
DCL00-C	preload-index.c	170	2	Const-qualify immutable objects: retval
DCL01-C	pretty.c	25	2	Do not reuse variable names in subscopes: user_format
DCL13-C	pretty.c	47	16	Declare function parameters that are pointers to values not changed by the function as const: cb
INT01-C	pretty.c	57	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	62	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	70	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	70	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	70	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	70	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	70	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	70	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	70	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	70	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	70	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pretty.c	70	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	pretty.c	73	3	Do not ignore values returned by functions: memset
INT01-C	pretty.c	111	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	111	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	113	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	113	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	113	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	113	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	113	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	113	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pretty.c	113	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	pretty.c	114	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	114	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	114	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	128	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	133	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pretty.c	205	3	Const-qualify immutable objects: c
INT13-C	pretty.c	218	10	Use bitwise operators only on unsigned operands
INT01-C	pretty.c	269	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	272	17	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	pretty.c	326	6	Do not form or use out-of-bounds pointers or array subscripts
INT13-C	pretty.c	350	11	Use bitwise operators only on unsigned operands
DCL00-C	pretty.c	358	3	Const-qualify immutable objects: ch
INT01-C	pretty.c	375	45	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	375	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	377	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	377	31	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	pretty.c	387	28	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	pretty.c	387	28	Do not cast away a const qualification
DCL00-C	pretty.c	388	3	Const-qualify immutable objects: chrlen
DCL00-C	pretty.c	389	3	Const-qualify immutable objects: is_special
DCL00-C	pretty.c	393	3	Const-qualify immutable objects: encoded_len
INT01-C	pretty.c	406	36	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	406	32	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pretty.c	449	2	Do not reuse variable names in subscopes: eol
EXP12-C	pretty.c	525	4	Do not ignore values returned by functions: string_list_append
INT01-C	pretty.c	552	53	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	552	43	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	552	28	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pretty.c	610	3	Const-qualify immutable objects: linelen
DCL01-C	pretty.c	622	47	Do not reuse variable names in subscopes: commit
INT01-C	pretty.c	669	52	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pretty.c	683	27	Do not reuse variable names in subscopes: commit
EXP05-C	pretty.c	721	10	Do not cast away a const qualification
MEM34-C	pretty.c	743	3	Only free memory allocated dynamically
DCL05-C	pretty.c	751	1	Use typedefs to improve code readability
EXP36-C	pretty.c	756	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	pretty.c	757	3	Do not ignore values returned by functions: read_mailmap
INT01-C	pretty.c	759	22	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	pretty.c	806	2	Strive for logical completeness
DCL01-C	pretty.c	864	2	Do not reuse variable names in subscopes: repository
DCL01-C	pretty.c	865	2	Do not reuse variable names in subscopes: commit
DCL01-C	pretty.c	869	2	Do not reuse variable names in subscopes: signature_check
DCL01-C	pretty.c	870	2	Do not reuse variable names in subscopes: flush_type
DCL01-C	pretty.c	871	2	Do not reuse variable names in subscopes: truncate
DCL01-C	pretty.c	896	3	Do not reuse variable names in subscopes: eol
INT07-C	pretty.c	897	26	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	pretty.c	924	2	Const-qualify immutable objects: start_len
INT01-C	pretty.c	928	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	944	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	945	22	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pretty.c	1091	2	Do not reuse variable names in subscopes: flush_type
INT32-C	pretty.c	1134	28	Ensure that operations on signed integers do not result in overflow
DCL05-C	pretty.c	1158	1	Use typedefs to improve code readability
MEM01-C	pretty.c	1207	2	Store a new value in pointers immediately after free()
MEM34-C	pretty.c	1207	2	Only free memory allocated dynamically
EXP36-C	pretty.c	1219	35	Do not convert pointers into more strictly aligned pointer types
ERR33-C	pretty.c	1223	16	Ensure that return values are compared against the proper type
DCL05-C	pretty.c	1230	1	Use typedefs to improve code readability
EXP11-C	pretty.c	1252	52	Do not apply operators expecting one type to data of an incompatible type
MEM01-C	pretty.c	1263	4	Store a new value in pointers immediately after free()
MEM34-C	pretty.c	1263	4	Only free memory allocated dynamically
MEM01-C	pretty.c	1271	4	Store a new value in pointers immediately after free()
MEM34-C	pretty.c	1271	4	Only free memory allocated dynamically
DCL00-C	pretty.c	1278	5	Const-qualify immutable objects: len
DCL01-C	pretty.c	1289	2	Do not reuse variable names in subscopes: option
INT01-C	pretty.c	1311	29	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	pretty.c	1312	4	Strive for logical completeness
EXP12-C	pretty.c	1328	6	Do not ignore values returned by functions: strtol
INT01-C	pretty.c	1329	26	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	pretty.c	1331	6	Do not ignore values returned by functions: strvec_pushf
EXP12-C	pretty.c	1340	6	Do not ignore values returned by functions: strvec_pushf
EXP36-C	pretty.c	1357	36	Do not convert pointers into more strictly aligned pointer types
DCL01-C	pretty.c	1358	2	Do not reuse variable names in subscopes: commit
DCL01-C	pretty.c	1361	2	Do not reuse variable names in subscopes: eol
MSC01-C	pretty.c	1370	2	Strive for logical completeness
INT01-C	pretty.c	1374	22	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pretty.c	1378	4	Const-qualify immutable objects: ret
EXP12-C	pretty.c	1432	3	Do not ignore values returned by functions: strvec_push
EXP12-C	pretty.c	1444	3	Do not ignore values returned by functions: strvec_push
EXP12-C	pretty.c	1445	3	Do not ignore values returned by functions: pipe_command
MSC01-C	pretty.c	1457	2	Strive for logical completeness
MSC01-C	pretty.c	1510	3	Strive for logical completeness
MSC01-C	pretty.c	1551	4	Strive for logical completeness
MSC01-C	pretty.c	1605	2	Strive for logical completeness
MSC01-C	pretty.c	1628	2	Strive for logical completeness
EXP12-C	pretty.c	1630	3	Do not ignore values returned by functions: format_subject
INT32-C	pretty.c	1681	14	Ensure that operations on signed integers do not result in overflow
DCL00-C	pretty.c	1684	3	Const-qualify immutable objects: modifier
DCL00-C	pretty.c	1685	3	Const-qualify immutable objects: consumed
INT01-C	pretty.c	1715	19	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	pretty.c	1729	3	Strive for logical completeness
DCL00-C	pretty.c	1751	3	Const-qualify immutable objects: sb_len
INT01-C	pretty.c	1760	27	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	pretty.c	1801	53	Do not convert pointers into more strictly aligned pointer types
INT01-C	pretty.c	1808	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	1808	37	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	1809	30	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	pretty.c	1819	51	Declare function parameters that are pointers to values not changed by the function as const: sb
EXP36-C	pretty.c	1822	30	Do not convert pointers into more strictly aligned pointer types
MSC01-C	pretty.c	1827	2	Strive for logical completeness
DCL01-C	pretty.c	1856	26	Do not reuse variable names in subscopes: commit
INT01-C	pretty.c	1891	40	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pretty.c	1900	30	Do not reuse variable names in subscopes: commit
DCL00-C	pretty.c	1908	3	Const-qualify immutable objects: linelen
INT01-C	pretty.c	1924	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	1924	40	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pretty.c	1930	4	Const-qualify immutable objects: num
INT01-C	pretty.c	1967	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	1985	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	2009	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	pretty.c	2026	3	Const-qualify immutable objects: n
DCL00-C	pretty.c	2041	3	Const-qualify immutable objects: width
INT33-C	pretty.c	2058	46	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL01-C	pretty.c	2150	26	Do not reuse variable names in subscopes: commit
INT01-C	pretty.c	2206	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	pretty.c	2220	43	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	pretty.c	2226	61	Do not reuse variable names in subscopes: commit
INT01-C	prio-queue.c	15	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	prio-queue.c	15	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	prio-queue.c	41	2	Do not convert pointers into more strictly aligned pointer types
DCL02-C	progress.c	54	1	Use visually distinct identifiers: progress_testing
DCL02-C	progress.c	55	1	Use visually distinct identifiers: progress_test_ns
DCL01-C	progress.c	31	2	Do not reuse variable names in subscopes: display
DCL01-C	progress.c	41	2	Do not reuse variable names in subscopes: throughput
EXP12-C	progress.c	77	2	Do not ignore values returned by functions: memset
EXP12-C	progress.c	79	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	progress.c	81	2	Do not ignore values returned by functions: sigaction
EXP12-C	progress.c	86	2	Do not ignore values returned by functions: setitimer
EXP12-C	progress.c	96	2	Do not ignore values returned by functions: setitimer
EXP12-C	progress.c	97	2	Do not ignore values returned by functions: signal
DCL00-C	progress.c	103	2	Const-qualify immutable objects: tpgrp
DCL01-C	progress.c	107	38	Do not reuse variable names in subscopes: progress
DCL00-C	progress.c	112	2	Const-qualify immutable objects: last_count_len
DCL00-C	progress.c	120	3	Const-qualify immutable objects: percent
DCL01-C	progress.c	139	4	Do not reuse variable names in subscopes: eol
INT01-C	progress.c	140	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	progress.c	141	21	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	progress.c	144	4	Const-qualify immutable objects: progress_line_len
INT01-C	progress.c	144	51	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	progress.c	146	4	Const-qualify immutable objects: cols
INT01-C	progress.c	151	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	progress.c	178	55	Do not reuse variable names in subscopes: progress
DCL01-C	progress.c	186	42	Do not reuse variable names in subscopes: progress
EXP36-C	progress.c	199	26	Do not convert pointers into more strictly aligned pointer types
INT14-C	progress.c	227	9	Avoid performing bitwise and arithmetic operations on the same data
DCL01-C	progress.c	246	40	Do not reuse variable names in subscopes: progress
DCL01-C	progress.c	255	2	Do not reuse variable names in subscopes: progress
EXP36-C	progress.c	255	37	Do not convert pointers into more strictly aligned pointer types
DCL01-C	progress.c	312	47	Do not reuse variable names in subscopes: progress
DCL01-C	progress.c	319	48	Do not reuse variable names in subscopes: progress
DCL00-C	progress.c	325	3	Const-qualify immutable objects: now_ns
INT14-C	progress.c	327	10	Avoid performing bitwise and arithmetic operations on the same data
MEM34-C	progress.c	334	2	Only free memory allocated dynamically
DCL01-C	progress.c	337	41	Do not reuse variable names in subscopes: progress
DCL01-C	progress.c	351	2	Do not reuse variable names in subscopes: progress
MEM34-C	progress.c	371	2	Only free memory allocated dynamically
DCL00-C	promisor-remote.c	60	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	promisor-remote.c	60	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	promisor-remote.c	60	2	Do not cast away a const qualification
EXP36-C	promisor-remote.c	102	42	Do not convert pointers into more strictly aligned pointer types
MEM34-C	promisor-remote.c	121	3	Only free memory allocated dynamically
MEM01-C	promisor-remote.c	132	3	Store a new value in pointers immediately after free()
MEM34-C	promisor-remote.c	132	3	Only free memory allocated dynamically
EXP36-C	promisor-remote.c	150	10	Do not convert pointers into more strictly aligned pointer types
MEM34-C	promisor-remote.c	173	3	Only free memory allocated dynamically
EXP36-C	promisor-remote.c	207	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	promisor-remote.c	220	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	promisor-remote.c	226	4	Store a new value in pointers immediately after free()
MEM34-C	promisor-remote.c	226	4	Only free memory allocated dynamically
MEM34-C	promisor-remote.c	229	2	Only free memory allocated dynamically
EXP05-C	promisor-remote.c	239	37	Do not cast away a const qualification
MEM34-C	promisor-remote.c	271	3	Only free memory allocated dynamically
EXP12-C	prompt.c	14	2	Do not ignore values returned by functions: strvec_push
EXP12-C	prompt.c	15	2	Do not ignore values returned by functions: strvec_push
MSC12-C	prompt.c	32	3	Detect and remove code that has no effect
INT13-C	prompt.c	46	12	Use bitwise operators only on unsigned operands
INT13-C	prompt.c	62	42	Use bitwise operators only on unsigned operands
DCL00-C	protocol.c	24	3	Const-qualify immutable objects: version
DCL00-C	protocol.c	35	3	Const-qualify immutable objects: env
EXP12-C	protocol.c	60	3	Do not ignore values returned by functions: string_list_split
EXP12-C	protocol-caps.c	27	2	Do not ignore values returned by functions: string_list_append
EXP36-C	prune-packed.c	10	14	Do not convert pointers into more strictly aligned pointer types
EXP36-C	prune-packed.c	20	14	Do not convert pointers into more strictly aligned pointer types
EXP12-C	prune-packed.c	37	2	Do not ignore values returned by functions: for_each_loose_file_in_objdir
DCL02-C	quote.c	5	1	Use visually distinct identifiers: quote_path_fully
DCL00-C	quote.c	33	3	Const-qualify immutable objects: len
MEM34-C	quote.c	43	2	Only free memory allocated dynamically
STR11-C	quote.c	48	2	Do not specify the dimension of a character array initialized with a string literal
INT13-C	quote.c	58	8	Use bitwise operators only on unsigned operands
DCL00-C	quote.c	72	2	Const-qualify immutable objects: ap
EXP12-C	quote.c	73	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	quote.c	75	2	Do not ignore values returned by functions: __builtin_va_end
INT07-C	quote.c	138	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	quote.c	158	9	Use only explicitly signed or unsigned char type for numeric values
DCL05-C	quote.c	170	1	Use typedefs to improve code readability
EXP36-C	quote.c	191	4	Do not convert pointers into more strictly aligned pointer types
DCL05-C	quote.c	201	1	Use typedefs to improve code readability
INT01-C	quote.c	245	21	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	quote.c	280	2	Const-qualify immutable objects: no_dq
INT01-C	quote.c	288	11	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	quote.c	288	11	Ensure that return values are compared against the proper type
INT01-C	quote.c	299	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	quote.c	299	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	quote.c	326	2	Const-qualify immutable objects: nodq
EXP12-C	quote.c	331	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	quote.c	332	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	quote.c	344	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	quote.c	348	2	Do not ignore values returned by functions: fputc
DCL00-C	quote.c	367	2	Const-qualify immutable objects: force_dq
EXP12-C	quote.c	378	2	Do not ignore values returned by functions: quote_c_style_counted
DCL00-C	quote.c	401	2	Const-qualify immutable objects: oldlen
INT14-C	quote.c	437	9	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	quote.c	440	9	Use bitwise operators only on unsigned operands
INT14-C	quote.c	440	9	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	quote.c	443	9	Use bitwise operators only on unsigned operands
INT14-C	quote.c	443	9	Avoid performing bitwise and arithmetic operations on the same data
INT07-C	quote.c	461	2	Use only explicitly signed or unsigned char type for numeric values
INT07-C	quote.c	462	2	Use only explicitly signed or unsigned char type for numeric values
INT07-C	quote.c	476	2	Use only explicitly signed or unsigned char type for numeric values
INT07-C	quote.c	477	2	Use only explicitly signed or unsigned char type for numeric values
INT07-C	quote.c	493	2	Use only explicitly signed or unsigned char type for numeric values
INT07-C	quote.c	494	2	Use only explicitly signed or unsigned char type for numeric values
INT07-C	quote.c	495	2	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	range-diff.c	19	2	Do not reuse variable names in subscopes: patch
DCL01-C	range-diff.c	22	2	Do not reuse variable names in subscopes: diffsize
EXP12-C	range-diff.c	60	2	Do not ignore values returned by functions: strvec_push
MSC12-C	range-diff.c	70	3	Detect and remove code that has no effect
EXP12-C	range-diff.c	71	3	Do not ignore values returned by functions: finish_command
INT01-C	range-diff.c	79	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	range-diff.c	79	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	range-diff.c	81	3	Do not reuse variable names in subscopes: eol
INT07-C	range-diff.c	85	9	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	range-diff.c	96	4	Do not convert pointers into more strictly aligned pointer types
MSC12-C	range-diff.c	98	5	Detect and remove code that has no effect
MEM34-C	range-diff.c	99	5	Only free memory allocated dynamically
MSC12-C	range-diff.c	109	4	Detect and remove code that has no effect
DCL01-C	range-diff.c	117	4	Do not reuse variable names in subscopes: patch
INT07-C	range-diff.c	127	10	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	range-diff.c	132	5	Detect and remove code that has no effect
MEM34-C	range-diff.c	134	5	Only free memory allocated dynamically
MEM01-C	range-diff.c	148	4	Store a new value in pointers immediately after free()
MEM34-C	range-diff.c	148	4	Only free memory allocated dynamically
INT01-C	range-diff.c	168	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	range-diff.c	172	29	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	range-diff.c	222	2	Only free memory allocated dynamically
INT01-C	range-diff.c	241	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	range-diff.c	242	3	Do not reuse variable names in subscopes: util
EXP36-C	range-diff.c	242	40	Do not convert pointers into more strictly aligned pointer types
INT01-C	range-diff.c	252	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	range-diff.c	253	3	Const-qualify immutable objects: util
DCL01-C	range-diff.c	253	3	Do not reuse variable names in subscopes: util
EXP36-C	range-diff.c	253	40	Do not convert pointers into more strictly aligned pointer types
EXP36-C	range-diff.c	259	11	Do not convert pointers into more strictly aligned pointer types
DCL13-C	range-diff.c	272	47	Declare function parameters that are pointers to values not changed by the function as const: line
EXP12-C	range-diff.c	281	2	Do not ignore values returned by functions: diffsize_consume
EXP05-C	range-diff.c	291	12	Do not cast away a const qualification
EXP05-C	range-diff.c	293	12	Do not cast away a const qualification
MSC12-C	range-diff.c	302	2	Detect and remove code that has no effect
DCL00-C	range-diff.c	309	2	Const-qualify immutable objects: n
EXP36-C	range-diff.c	313	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	range-diff.c	314	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	range-diff.c	315	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	range-diff.c	317	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	range-diff.c	318	42	Do not convert pointers into more strictly aligned pointer types
INT01-C	range-diff.c	320	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	range-diff.c	321	43	Do not convert pointers into more strictly aligned pointer types
INT14-C	range-diff.c	332	5	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	range-diff.c	338	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	range-diff.c	339	40	Do not convert pointers into more strictly aligned pointer types
INT14-C	range-diff.c	341	5	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	range-diff.c	353	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	range-diff.c	354	29	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	range-diff.c	355	43	Do not convert pointers into more strictly aligned pointer types
EXP36-C	range-diff.c	356	48	Do not convert pointers into more strictly aligned pointer types
MEM01-C	range-diff.c	362	2	Store a new value in pointers immediately after free()
MEM34-C	range-diff.c	362	2	Only free memory allocated dynamically
MEM01-C	range-diff.c	363	2	Store a new value in pointers immediately after free()
MEM34-C	range-diff.c	363	2	Only free memory allocated dynamically
MEM34-C	range-diff.c	364	2	Only free memory allocated dynamically
DCL01-C	range-diff.c	375	2	Do not reuse variable names in subscopes: commit
INT07-C	range-diff.c	390	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	range-diff.c	393	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	range-diff.c	396	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	range-diff.c	399	10	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	range-diff.c	432	2	Do not ignore values returned by functions: fwrite
EXP11-C	range-diff.c	445	15	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	range-diff.c	445	15	Do not cast away a const qualification
INT01-C	range-diff.c	446	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	range-diff.c	457	2	Do not ignore values returned by functions: diff_queue
DCL13-C	range-diff.c	464	61	Declare function parameters that are pointers to values not changed by the function as const: opt
DCL13-C	range-diff.c	464	72	Declare function parameters that are pointers to values not changed by the function as const: data
EXP36-C	range-diff.c	466	9	Do not convert pointers into more strictly aligned pointer types
DCL00-C	range-diff.c	473	2	Const-qualify immutable objects: patch_no_width
INT01-C	range-diff.c	473	39	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	range-diff.c	503	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	range-diff.c	503	24	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	range-diff.c	505	22	Do not convert pointers into more strictly aligned pointer types
INT01-C	range-diff.c	505	14	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	range-diff.c	506	22	Do not convert pointers into more strictly aligned pointer types
INT01-C	range-diff.c	506	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	range-diff.c	509	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	range-diff.c	510	25	Do not convert pointers into more strictly aligned pointer types
INT01-C	range-diff.c	510	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	range-diff.c	513	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	range-diff.c	522	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	range-diff.c	526	25	Do not convert pointers into more strictly aligned pointer types
INT01-C	range-diff.c	526	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	range-diff.c	530	9	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	range-diff.c	531	39	Do not convert pointers into more strictly aligned pointer types
MEM01-C	range-diff.c	600	2	Store a new value in pointers immediately after free()
MEM34-C	range-diff.c	600	2	Only free memory allocated dynamically
DCL01-C	reachable.c	19	2	Do not reuse variable names in subscopes: progress
DCL01-C	reachable.c	34	2	Do not reuse variable names in subscopes: object
DCL13-C	reachable.c	51	40	Declare function parameters that are pointers to values not changed by the function as const: obj
EXP36-C	reachable.c	53	18	Do not convert pointers into more strictly aligned pointer types
EXP11-C	reachable.c	97	9	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	reachable.c	100	9	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	reachable.c	130	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reachable.c	150	47	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reachable.c	161	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reachable.c	173	69	Do not convert pointers into more strictly aligned pointer types
DCL13-C	reachable.c	207	28	Declare function parameters that are pointers to values not changed by the function as const: found_pack
DCL01-C	reachable.c	219	50	Do not reuse variable names in subscopes: progress
EXP12-C	reachable.c	236	2	Do not ignore values returned by functions: for_each_ref
EXP12-C	reachable.c	239	2	Do not ignore values returned by functions: head_ref
EXP12-C	reachable.c	240	2	Do not ignore values returned by functions: other_head_refs
DCL02-C	read-cache.c	1810	1	Use visually distinct identifiers: verify_index_checksum
DCL02-C	read-cache.c	1813	1	Use visually distinct identifiers: verify_ce_order
DCL01-C	read-cache.c	77	71	Do not reuse variable names in subscopes: mem_pool
EXP36-C	read-cache.c	80	21	Do not convert pointers into more strictly aligned pointer types
INT01-C	read-cache.c	80	32	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	read-cache.c	85	72	Do not reuse variable names in subscopes: mem_pool
EXP36-C	read-cache.c	88	22	Do not convert pointers into more strictly aligned pointer types
INT01-C	read-cache.c	88	36	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	read-cache.c	103	22	Do not convert pointers into more strictly aligned pointer types
INT13-C	read-cache.c	128	18	Use bitwise operators only on unsigned operands
DCL00-C	read-cache.c	138	2	Const-qualify immutable objects: namelen
INT13-C	read-cache.c	142	25	Use bitwise operators only on unsigned operands
EXP12-C	read-cache.c	149	2	Do not ignore values returned by functions: remove_index_entry_at
EXP12-C	read-cache.c	160	3	Do not ignore values returned by functions: add_index_entry
DCL00-C	read-cache.c	244	2	Const-qualify immutable objects: fd
INT01-C	read-cache.c	268	12	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	read-cache.c	270	3	Store a new value in pointers immediately after free()
MEM34-C	read-cache.c	270	3	Only free memory allocated dynamically
DCL00-C	read-cache.c	395	2	Const-qualify immutable objects: ignore_valid
DCL00-C	read-cache.c	396	2	Const-qualify immutable objects: ignore_skip_worktree
DCL00-C	read-cache.c	397	2	Const-qualify immutable objects: assume_racy_is_modified
DCL00-C	read-cache.c	398	2	Const-qualify immutable objects: ignore_fsmonitor
INT13-C	read-cache.c	464	14	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	487	18	Use bitwise operators only on unsigned operands
DCL00-C	read-cache.c	495	2	Const-qualify immutable objects: len
DCL00-C	read-cache.c	523	2	Const-qualify immutable objects: len
DCL00-C	read-cache.c	547	2	Const-qualify immutable objects: min_len
DCL00-C	read-cache.c	548	2	Const-qualify immutable objects: cmp
DCL00-C	read-cache.c	583	3	Const-qualify immutable objects: next
DCL00-C	read-cache.c	585	3	Const-qualify immutable objects: cmp
INT32-C	read-cache.c	615	9	Ensure that operations on signed integers do not result in overflow
INT01-C	read-cache.c	644	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	644	2	Use rsize_t or size_t for all integer values representing the size of an object
INT32-C	read-cache.c	683	9	Ensure that operations on signed integers do not result in overflow
DCL00-C	read-cache.c	721	2	Const-qualify immutable objects: len
DCL00-C	read-cache.c	765	2	Const-qualify immutable objects: st_mode
DCL00-C	read-cache.c	767	2	Const-qualify immutable objects: ce_option
INT13-C	read-cache.c	768	22	Use bitwise operators only on unsigned operands
DCL00-C	read-cache.c	769	2	Const-qualify immutable objects: pretend
DCL00-C	read-cache.c	770	2	Const-qualify immutable objects: intent_only
DCL00-C	read-cache.c	771	2	Const-qualify immutable objects: add_option
INT13-C	read-cache.c	771	63	Use bitwise operators only on unsigned operands
DCL00-C	read-cache.c	805	3	Const-qualify immutable objects: pos
EXP36-C	read-cache.c	881	16	Do not convert pointers into more strictly aligned pointer types
INT01-C	read-cache.c	881	20	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	read-cache.c	908	3	Detect and remove code that has no effect
MSC12-C	read-cache.c	937	3	Detect and remove code that has no effect
DCL00-C	read-cache.c	985	2	Const-qualify immutable objects: len
MSC01-C	read-cache.c	1009	2	Strive for logical completeness
INT07-C	read-cache.c	1044	2	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	read-cache.c	1112	2	Const-qualify immutable objects: len
DCL00-C	read-cache.c	1113	2	Const-qualify immutable objects: stage
EXP12-C	read-cache.c	1132	3	Do not ignore values returned by functions: remove_index_entry_at
DCL00-C	read-cache.c	1168	2	Const-qualify immutable objects: stage
INT01-C	read-cache.c	1189	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	read-cache.c	1189	20	Ensure that return values are compared against the proper type
INT01-C	read-cache.c	1234	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	read-cache.c	1286	5	Do not ignore values returned by functions: remove_index_entry_at
INT32-C	read-cache.c	1291	10	Ensure that operations on signed integers do not result in overflow
INT01-C	read-cache.c	1300	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	read-cache.c	1353	95	Do not reuse variable names in subscopes: option
DCL00-C	read-cache.c	1357	2	Const-qualify immutable objects: ok_to_replace
DCL00-C	read-cache.c	1358	2	Const-qualify immutable objects: skip_df_check
DCL00-C	read-cache.c	1359	2	Const-qualify immutable objects: new_only
INT32-C	read-cache.c	1384	8	Ensure that operations on signed integers do not result in overflow
ARR30-C	read-cache.c	1394	36	Do not form or use out-of-bounds pointers or array subscripts
INT32-C	read-cache.c	1412	9	Ensure that operations on signed integers do not result in overflow
DCL01-C	read-cache.c	1417	77	Do not reuse variable names in subscopes: option
EXP36-C	read-cache.c	1432	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	read-cache.c	1437	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	1437	3	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	read-cache.c	1465	2	Const-qualify immutable objects: refresh
DCL00-C	read-cache.c	1467	2	Const-qualify immutable objects: ignore_skip_worktree
DCL00-C	read-cache.c	1469	2	Const-qualify immutable objects: ignore_fsmonitor
DCL01-C	read-cache.c	1580	29	Do not reuse variable names in subscopes: pathspec
DCL01-C	read-cache.c	1583	2	Do not reuse variable names in subscopes: lock_file
DCL01-C	read-cache.c	1598	28	Do not reuse variable names in subscopes: pathspec
DCL00-C	read-cache.c	1604	2	Const-qualify immutable objects: allow_unmerged
DCL00-C	read-cache.c	1605	2	Const-qualify immutable objects: quiet
DCL00-C	read-cache.c	1606	2	Const-qualify immutable objects: not_new
DCL00-C	read-cache.c	1610	2	Const-qualify immutable objects: in_porcelain
DCL00-C	read-cache.c	1611	2	Const-qualify immutable objects: options
INT13-C	read-cache.c	1612	42	Use bitwise operators only on unsigned operands
DCL01-C	read-cache.c	1619	2	Do not reuse variable names in subscopes: progress
EXP12-C	read-cache.c	1627	2	Do not ignore values returned by functions: trace_performance_enter
ENV30-C	read-cache.c	1746	21	Do not modify the string returned by getenv()
INT07-C	read-cache.c	1764	12	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	read-cache.c	1782	2	Do not reuse variable names in subscopes: ctime
INT01-C	read-cache.c	1831	41	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	read-cache.c	1833	20	Do not cast away a const qualification
INT13-C	read-cache.c	1841	10	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	1841	10	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	1841	10	Use bitwise operators only on unsigned operands
EXP12-C	read-cache.c	1856	3	Do not ignore values returned by functions: read_fsmonitor_extension
EXP12-C	read-cache.c	1870	3	Do not ignore values returned by functions: fprintf_ln
DCL00-C	read-cache.c	1907	2	Const-qualify immutable objects: expand_name_field
INT14-C	read-cache.c	1915	18	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	read-cache.c	1917	22	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	1917	24	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	1917	25	Use bitwise operators only on unsigned operands
EXP05-C	read-cache.c	1920	10	Do not cast away a const qualification
INT01-C	read-cache.c	1920	36	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	read-cache.c	1923	10	Do not cast away a const qualification
EXP11-C	read-cache.c	1926	29	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	read-cache.c	1926	29	Do not cast away a const qualification
INT01-C	read-cache.c	1930	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	read-cache.c	1938	10	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	read-cache.c	1938	10	Do not cast away a const qualification
INT01-C	read-cache.c	1941	10	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	read-cache.c	1941	10	Ensure that return values are compared against the proper type
EXP05-C	read-cache.c	1974	20	Do not cast away a const qualification
INT01-C	read-cache.c	1979	41	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	1980	51	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	1980	41	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	read-cache.c	1980	24	Do not cast away a const qualification
INT01-C	read-cache.c	1982	30	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	read-cache.c	1983	13	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	read-cache.c	1983	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	1983	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	1983	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	1983	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	read-cache.c	1998	3	Const-qualify immutable objects: name_compare
DCL01-C	read-cache.c	1998	3	Do not reuse variable names in subscopes: name_compare
MSC01-C	read-cache.c	2019	2	Strive for logical completeness
INT01-C	read-cache.c	2063	47	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	read-cache.c	2073	12	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	read-cache.c	2073	15	Use bitwise operators only on unsigned operands
INT01-C	read-cache.c	2074	21	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	read-cache.c	2099	2	Do not reuse variable names in subscopes: mmap
EXP36-C	read-cache.c	2106	36	Do not convert pointers into more strictly aligned pointer types
INT01-C	read-cache.c	2109	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	2109	59	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	read-cache.c	2116	3	Const-qualify immutable objects: extsize
EXP12-C	read-cache.c	2121	4	Do not ignore values returned by functions: munmap
EXP05-C	read-cache.c	2121	11	Do not cast away a const qualification
DCL01-C	read-cache.c	2136	66	Do not reuse variable names in subscopes: mmap
DCL01-C	read-cache.c	2158	16	Do not reuse variable names in subscopes: mmap
EXP36-C	read-cache.c	2162	31	Do not convert pointers into more strictly aligned pointer types
DCL01-C	read-cache.c	2191	2	Do not reuse variable names in subscopes: mmap
EXP36-C	read-cache.c	2204	45	Do not convert pointers into more strictly aligned pointer types
DCL01-C	read-cache.c	2216	90	Do not reuse variable names in subscopes: mmap
EXP36-C	read-cache.c	2227	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	read-cache.c	2233	2	Do not convert pointers into more strictly aligned pointer types
INT33-C	read-cache.c	2236	16	Ensure that division and remainder operations do not result in divide-by-zero errors
EXP36-C	read-cache.c	2255	27	Do not convert pointers into more strictly aligned pointer types
MEM34-C	read-cache.c	2284	2	Only free memory allocated dynamically
DCL01-C	read-cache.c	2310	2	Do not reuse variable names in subscopes: mmap
INT01-C	read-cache.c	2337	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	read-cache.c	2346	8	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	read-cache.c	2346	8	Do not cast away a const qualification
EXP05-C	read-cache.c	2350	24	Do not cast away a const qualification
EXP36-C	read-cache.c	2354	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	read-cache.c	2361	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	2382	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	2395	23	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	read-cache.c	2400	3	Store a new value in pointers immediately after free()
MEM34-C	read-cache.c	2400	3	Only free memory allocated dynamically
DCL00-C	read-cache.c	2410	3	Const-qualify immutable objects: ret
EXP12-C	read-cache.c	2415	3	Do not ignore values returned by functions: load_index_extensions
EXP12-C	read-cache.c	2417	2	Do not ignore values returned by functions: munmap
EXP05-C	read-cache.c	2417	9	Do not cast away a const qualification
EXP12-C	read-cache.c	2445	2	Do not ignore values returned by functions: munmap
EXP05-C	read-cache.c	2445	9	Do not cast away a const qualification
DCL01-C	read-cache.c	2464	2	Do not reuse variable names in subscopes: split_index
EXP12-C	read-cache.c	2479	2	Do not ignore values returned by functions: trace_performance_enter
EXP12-C	read-cache.c	2491	2	Do not ignore values returned by functions: trace_performance_enter
EXP36-C	read-cache.c	2495	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	read-cache.c	2508	3	Store a new value in pointers immediately after free()
MEM34-C	read-cache.c	2508	3	Only free memory allocated dynamically
MEM34-C	read-cache.c	2514	3	Only free memory allocated dynamically
MEM34-C	read-cache.c	2525	2	Only free memory allocated dynamically
DCL01-C	read-cache.c	2610	20	Do not reuse variable names in subscopes: tree
EXP12-C	read-cache.c	2627	3	Do not ignore values returned by functions: do_diff_cache
EXP11-C	read-cache.c	2721	21	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	read-cache.c	2721	47	Do not convert pointers into more strictly aligned pointer types
INT13-C	read-cache.c	2737	14	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	2739	15	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	2739	15	Use bitwise operators only on unsigned operands
INT14-C	read-cache.c	2757	7	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	read-cache.c	2757	50	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	2757	52	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	2757	52	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	2757	52	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	read-cache.c	2760	3	Const-qualify immutable objects: len
INT13-C	read-cache.c	2764	25	Use bitwise operators only on unsigned operands
INT07-C	read-cache.c	2769	26	Use only explicitly signed or unsigned char type for numeric values
INT01-C	read-cache.c	2770	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	2774	34	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	read-cache.c	2788	19	Use bitwise operators only on unsigned operands
INT01-C	read-cache.c	2818	63	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	2819	8	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	read-cache.c	2840	2	Const-qualify immutable objects: entries
DCL01-C	read-cache.c	2899	72	Do not reuse variable names in subscopes: tempfile
DCL00-C	read-cache.c	2902	2	Const-qualify immutable objects: start
DCL00-C	read-cache.c	2908	2	Const-qualify immutable objects: entries
INT13-C	read-cache.c	2927	28	Use bitwise operators only on unsigned operands
EXP36-C	read-cache.c	2975	18	Do not convert pointers into more strictly aligned pointer types
INT01-C	read-cache.c	2976	5	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	2976	20	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	read-cache.c	2977	19	Ensure that division and remainder operations do not result in divide-by-zero errors
STR11-C	read-cache.c	2993	4	Do not specify the dimension of a character array initialized with a string literal
INT33-C	read-cache.c	3005	23	Ensure that division and remainder operations do not result in divide-by-zero errors
INT07-C	read-cache.c	3015	27	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	read-cache.c	3035	3	Only free memory allocated dynamically
EXP36-C	read-cache.c	3046	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	read-cache.c	3064	3	Store a new value in pointers immediately after free()
MEM34-C	read-cache.c	3064	3	Only free memory allocated dynamically
EXP12-C	read-cache.c	3152	2	Do not ignore values returned by functions: finalize_hashfile
MSC12-C	read-cache.c	3156	3	Detect and remove code that has no effect
DCL00-C	read-cache.c	3194	2	Const-qualify immutable objects: was_full
EXP12-C	read-cache.c	3223	2	Do not ignore values returned by functions: run_hooks_l
EXP12-C	read-cache.c	3251	3	Do not ignore values returned by functions: git_config_get_expiry
EXP12-C	read-cache.c	3297	2	Do not ignore values returned by functions: closedir
DCL00-C	read-cache.c	3306	2	Const-qualify immutable objects: was_full
EXP12-C	read-cache.c	3309	2	Do not ignore values returned by functions: convert_to_sparse
MSC12-C	read-cache.c	3324	3	Detect and remove code that has no effect
EXP12-C	read-cache.c	3331	3	Do not ignore values returned by functions: clean_shared_index_files
INT13-C	read-cache.c	3389	31	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3389	32	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3389	32	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3389	32	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3389	32	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3389	32	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3389	32	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3389	32	Use bitwise operators only on unsigned operands
DCL00-C	read-cache.c	3401	4	Const-qualify immutable objects: v
EXP12-C	read-cache.c	3464	2	Do not ignore values returned by functions: repo_read_index
INT32-C	read-cache.c	3505	8	Ensure that operations on signed integers do not result in overflow
ARR30-C	read-cache.c	3507	41	Do not form or use out-of-bounds pointers or array subscripts
INT32-C	read-cache.c	3531	12	Ensure that operations on signed integers do not result in overflow
MEM34-C	read-cache.c	3542	3	Only free memory allocated dynamically
EXP36-C	read-cache.c	3574	4	Do not convert pointers into more strictly aligned pointer types
DCL00-C	read-cache.c	3590	2	Const-qualify immutable objects: size
MEM01-C	read-cache.c	3608	2	Store a new value in pointers immediately after free()
DCL01-C	read-cache.c	3628	47	Do not reuse variable names in subscopes: mmap
DCL01-C	read-cache.c	3639	2	Do not reuse variable names in subscopes: index
INT01-C	read-cache.c	3646	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	3646	70	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	3646	46	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	read-cache.c	3651	6	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3651	6	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3651	6	Use bitwise operators only on unsigned operands
INT01-C	read-cache.c	3683	55	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	read-cache.c	3733	2	Use visually distinct identifiers: extsize
DCL01-C	read-cache.c	3690	3	Do not reuse variable names in subscopes: extsize
DCL02-C	read-cache.c	3733	2	Use visually distinct identifiers: extsize
INT01-C	read-cache.c	3695	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	3695	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	3700	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	3701	14	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	read-cache.c	3704	20	Do not cast away a const qualification
INT01-C	read-cache.c	3708	53	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	read-cache.c	3730	73	Do not reuse variable names in subscopes: mmap
DCL01-C	read-cache.c	3732	2	Do not reuse variable names in subscopes: index
INT01-C	read-cache.c	3740	52	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	read-cache.c	3742	7	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3742	7	Use bitwise operators only on unsigned operands
INT13-C	read-cache.c	3742	7	Use bitwise operators only on unsigned operands
INT01-C	read-cache.c	3746	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	3747	10	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	read-cache.c	3755	3	Detect and remove code that has no effect
INT01-C	read-cache.c	3761	16	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	read-cache.c	3763	3	Detect and remove code that has no effect
EXP36-C	read-cache.c	3766	16	Do not convert pointers into more strictly aligned pointer types
INT01-C	read-cache.c	3767	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	read-cache.c	3767	16	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	rebase-interactive.c	10	1	Do not specify the dimension of a character array initialized with a string literal
DCL00-C	rebase-interactive.c	65	2	Const-qualify immutable objects: edit_todo
DCL01-C	rebase-interactive.c	98	60	Do not reuse variable names in subscopes: todo_list
INT13-C	rebase-interactive.c	111	77	Use bitwise operators only on unsigned operands
INT01-C	rebase-interactive.c	128	35	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	rebase-interactive.c	128	35	Ensure that return values are compared against the proper type
INT01-C	rebase-interactive.c	158	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	rebase-interactive.c	158	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	rebase-interactive.c	158	1	Use typedefs to improve code readability
EXP36-C	rebase-interactive.c	158	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	rebase-interactive.c	158	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	rebase-interactive.c	167	2	Const-qualify immutable objects: check_level
DCL01-C	rebase-interactive.c	170	2	Do not reuse variable names in subscopes: commit_seen
DCL01-C	rebase-interactive.c	179	3	Do not reuse variable names in subscopes: commit
DCL01-C	rebase-interactive.c	187	3	Do not reuse variable names in subscopes: commit
DCL01-C	rebase-interactive.c	225	76	Do not reuse variable names in subscopes: todo_list
EXP12-C	rebase-interactive.c	231	3	Do not ignore values returned by functions: todo_list_parse_insn_buffer
DCL00-C	rebase.c	18	2	Const-qualify immutable objects: v
DCL01-C	ref-filter.c	58	2	Do not reuse variable names in subscopes: cmp_status
DCL01-C	ref-filter.c	66	2	Do not reuse variable names in subscopes: option
EXP11-C	ref-filter.c	99	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	ref-filter.c	99	6	Do not cast away a const qualification
EXP11-C	ref-filter.c	100	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	ref-filter.c	100	6	Do not cast away a const qualification
DCL01-C	ref-filter.c	174	2	Do not reuse variable names in subscopes: atom_type
DCL01-C	ref-filter.c	180	3	Do not reuse variable names in subscopes: align
DCL01-C	ref-filter.c	182	4	Do not reuse variable names in subscopes: option
DCL01-C	ref-filter.c	189	4	Do not reuse variable names in subscopes: option
DCL01-C	ref-filter.c	195	4	Do not reuse variable names in subscopes: option
DCL01-C	ref-filter.c	198	4	Do not reuse variable names in subscopes: cmp_status
DCL01-C	ref-filter.c	197	3	Do not reuse variable names in subscopes: if_then_else
DCL01-C	ref-filter.c	202	4	Do not reuse variable names in subscopes: option
DCL01-C	ref-filter.c	206	4	Do not reuse variable names in subscopes: option
DCL01-C	ref-filter.c	209	4	Do not reuse variable names in subscopes: option
DCL01-C	ref-filter.c	208	3	Do not reuse variable names in subscopes: email_option
DCL00-C	ref-filter.c	224	2	Const-qualify immutable objects: ap
EXP12-C	ref-filter.c	225	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	ref-filter.c	227	2	Do not ignore values returned by functions: __builtin_va_end
DCL13-C	ref-filter.c	269	54	Declare function parameters that are pointers to values not changed by the function as const: format
EXP12-C	ref-filter.c	285	2	Do not ignore values returned by functions: string_list_split
INT01-C	ref-filter.c	287	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	ref-filter.c	316	54	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	328	54	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	348	53	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	360	48	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	369	51	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	381	52	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	435	47	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	447	47	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	466	56	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	480	51	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	497	49	Declare function parameters that are pointers to values not changed by the function as const: format
DCL01-C	ref-filter.c	500	2	Do not reuse variable names in subscopes: align
EXP12-C	ref-filter.c	510	2	Do not ignore values returned by functions: string_list_split
INT01-C	ref-filter.c	511	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	ref-filter.c	549	46	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	564	74	Declare function parameters that are pointers to values not changed by the function as const: atom
DCL13-C	ref-filter.c	573	48	Declare function parameters that are pointers to values not changed by the function as const: format
DCL13-C	ref-filter.c	574	40	Declare function parameters that are pointers to values not changed by the function as const: unused_err
DCL01-C	ref-filter.c	583	2	Do not reuse variable names in subscopes: cmp_type
EXP05-C	ref-filter.c	681	12	Do not cast away a const qualification
DCL00-C	ref-filter.c	694	3	Const-qualify immutable objects: len
INT01-C	ref-filter.c	700	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	ref-filter.c	701	3	Const-qualify immutable objects: len
INT01-C	ref-filter.c	706	6	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	ref-filter.c	708	12	Do not cast away a const qualification
ARR30-C	ref-filter.c	709	16	Do not form or use out-of-bounds pointers or array subscripts
EXP05-C	ref-filter.c	712	12	Do not cast away a const qualification
EXP36-C	ref-filter.c	717	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	ref-filter.c	738	2	Do not ignore values returned by functions: memset
MSC01-C	ref-filter.c	750	2	Strive for logical completeness
DCL13-C	ref-filter.c	776	25	Declare function parameters that are pointers to values not changed by the function as const: unused_err
EXP36-C	ref-filter.c	795	42	Do not convert pointers into more strictly aligned pointer types
MEM01-C	ref-filter.c	810	2	Store a new value in pointers immediately after free()
MEM34-C	ref-filter.c	810	2	Only free memory allocated dynamically
DCL01-C	ref-filter.c	817	2	Do not reuse variable names in subscopes: align
DCL13-C	ref-filter.c	826	25	Declare function parameters that are pointers to values not changed by the function as const: unused_err
DCL01-C	ref-filter.c	841	2	Do not reuse variable names in subscopes: if_then_else
MEM34-C	ref-filter.c	869	2	Only free memory allocated dynamically
DCL13-C	ref-filter.c	873	22	Declare function parameters that are pointers to values not changed by the function as const: unused_err
DCL01-C	ref-filter.c	876	2	Do not reuse variable names in subscopes: if_then_else
EXP36-C	ref-filter.c	876	45	Do not convert pointers into more strictly aligned pointer types
DCL13-C	ref-filter.c	900	49	Declare function parameters that are pointers to values not changed by the function as const: atomv
DCL01-C	ref-filter.c	904	2	Do not reuse variable names in subscopes: if_then_else
INT01-C	ref-filter.c	931	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	ref-filter.c	937	49	Declare function parameters that are pointers to values not changed by the function as const: atomv
DCL01-C	ref-filter.c	941	2	Do not reuse variable names in subscopes: if_then_else
DCL13-C	ref-filter.c	958	48	Declare function parameters that are pointers to values not changed by the function as const: atomv
DCL01-C	ref-filter.c	1007	39	Do not reuse variable names in subscopes: atom_type
INT07-C	ref-filter.c	1021	32	Use only explicitly signed or unsigned char type for numeric values
EXP05-C	ref-filter.c	1033	48	Do not cast away a const qualification
EXP05-C	ref-filter.c	1041	39	Do not cast away a const qualification
DCL01-C	ref-filter.c	1079	87	Do not reuse variable names in subscopes: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL00-C	ref-filter.c	1085	3	Const-qualify immutable objects: atom_type
DCL01-C	ref-filter.c	1085	3	Do not reuse variable names in subscopes: atom_type
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL01-C	ref-filter.c	1112	2	Do not reuse variable names in subscopes: tag
EXP11-C	ref-filter.c	1112	20	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	ref-filter.c	1116	3	Const-qualify immutable objects: atom_type
DCL01-C	ref-filter.c	1116	3	Do not reuse variable names in subscopes: atom_type
DCL01-C	ref-filter.c	1135	2	Do not reuse variable names in subscopes: commit
EXP11-C	ref-filter.c	1135	26	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	ref-filter.c	1139	3	Const-qualify immutable objects: atom_type
DCL01-C	ref-filter.c	1139	3	Do not reuse variable names in subscopes: atom_type
DCL01-C	ref-filter.c	1168	2	Do not reuse variable names in subscopes: eol
DCL01-C	ref-filter.c	1186	2	Do not reuse variable names in subscopes: eol
INT07-C	ref-filter.c	1193	21	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	ref-filter.c	1254	2	Do not reuse variable names in subscopes: date_mode
DCL00-C	ref-filter.c	1290	2	Const-qualify immutable objects: wholen
DCL00-C	ref-filter.c	1333	3	Const-qualify immutable objects: atom_type
DCL01-C	ref-filter.c	1333	3	Do not reuse variable names in subscopes: atom_type
DCL05-C	ref-filter.c	1347	1	Use typedefs to improve code readability
DCL01-C	ref-filter.c	1355	2	Do not reuse variable names in subscopes: eol
EXP12-C	ref-filter.c	1360	2	Do not ignore values returned by functions: parse_signature
INT07-C	ref-filter.c	1363	14	Use only explicitly signed or unsigned char type for numeric values
EXP30-C	ref-filter.c	1378	6	Do not depend on order of evaluation for side effects
INT01-C	ref-filter.c	1388	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ref-filter.c	1388	36	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ref-filter.c	1389	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ref-filter.c	1390	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	ref-filter.c	1407	2	Do not reuse variable names in subscopes: eol
INT01-C	ref-filter.c	1416	7	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	ref-filter.c	1436	3	Const-qualify immutable objects: atom_type
DCL01-C	ref-filter.c	1436	3	Do not reuse variable names in subscopes: atom_type
DCL00-C	ref-filter.c	1444	4	Const-qualify immutable objects: buf_size
MEM34-C	ref-filter.c	1500	2	Only free memory allocated dynamically
EXP05-C	ref-filter.c	1500	7	Do not cast away a const qualification
MSC01-C	ref-filter.c	1583	3	Strive for logical completeness
EXP05-C	ref-filter.c	1585	9	Do not cast away a const qualification
EXP05-C	ref-filter.c	1594	7	Do not cast away a const qualification
EXP05-C	ref-filter.c	1623	9	Do not cast away a const qualification
INT07-C	ref-filter.c	1626	9	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	ref-filter.c	1644	24	Do not reuse variable names in subscopes: branch
MEM34-C	ref-filter.c	1666	4	Only free memory allocated dynamically
EXP05-C	ref-filter.c	1666	9	Do not cast away a const qualification
DCL01-C	ref-filter.c	1685	3	Do not reuse variable names in subscopes: remote
EXP12-C	ref-filter.c	1702	2	Do not ignore values returned by functions: memset
DCL01-C	ref-filter.c	1730	78	Do not reuse variable names in subscopes: ref
DCL01-C	ref-filter.c	1738	79	Do not reuse variable names in subscopes: ref
DCL01-C	ref-filter.c	1745	46	Do not reuse variable names in subscopes: ref
DCL01-C	ref-filter.c	1746	29	Do not reuse variable names in subscopes: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
DCL02-C	ref-filter.c	1746	29	Use visually distinct identifiers: oi
EXP36-C	ref-filter.c	1786	19	Do not convert pointers into more strictly aligned pointer types
DCL01-C	ref-filter.c	1806	91	Do not reuse variable names in subscopes: ref
EXP11-C	ref-filter.c	1819	18	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	ref-filter.c	1827	50	Do not reuse variable names in subscopes: ref
EXP36-C	ref-filter.c	1833	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	ref-filter.c	1845	3	Const-qualify immutable objects: atom_type
DCL01-C	ref-filter.c	1845	3	Do not reuse variable names in subscopes: atom_type
DCL01-C	ref-filter.c	1850	3	Do not reuse variable names in subscopes: branch
EXP05-C	ref-filter.c	1904	9	Do not cast away a const qualification
INT07-C	ref-filter.c	1919	9	Use only explicitly signed or unsigned char type for numeric values
EXP05-C	ref-filter.c	1969	8	Do not cast away a const qualification
EXP04-C	ref-filter.c	1981	7	Do not perform byte-by-byte comparisons between structures
EXP04-C	ref-filter.c	1982	7	Do not perform byte-by-byte comparisons between structures
DCL01-C	ref-filter.c	2016	54	Do not reuse variable names in subscopes: ref
MSC12-C	ref-filter.c	2046	2	Detect and remove code that has no effect
DCL00-C	ref-filter.c	2067	2	Const-qualify immutable objects: namelen
DCL00-C	ref-filter.c	2075	3	Const-qualify immutable objects: plen
DCL01-C	ref-filter.c	2174	2	Do not reuse variable names in subscopes: ref
DCL00-C	ref-filter.c	2176	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	ref-filter.c	2176	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	ref-filter.c	2187	2	Do not reuse variable names in subscopes: ref
EXP36-C	ref-filter.c	2189	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	ref-filter.c	2211	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	ref-filter.c	2231	2	Do not reuse variable names in subscopes: contains_cache
EXP36-C	ref-filter.c	2241	41	Do not convert pointers into more strictly aligned pointer types
DCL01-C	ref-filter.c	2243	2	Do not reuse variable names in subscopes: ref
DCL01-C	ref-filter.c	2244	2	Do not reuse variable names in subscopes: commit
INT01-C	ref-filter.c	2265	27	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	ref-filter.c	2304	7	Do not cast away a const qualification
EXP05-C	ref-filter.c	2308	9	Do not cast away a const qualification
MEM01-C	ref-filter.c	2311	2	Store a new value in pointers immediately after free()
EXP05-C	ref-filter.c	2328	8	Do not cast away a const qualification
EXP36-C	ref-filter.c	2355	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	ref-filter.c	2380	3	Do not reuse variable names in subscopes: commit
DCL00-C	ref-filter.c	2382	3	Const-qualify immutable objects: is_merged
MEM34-C	ref-filter.c	2398	2	Only free memory allocated dynamically
DCL00-C	ref-filter.c	2475	3	Const-qualify immutable objects: diff
DCL00-C	ref-filter.c	2493	2	Const-qualify immutable objects: cmp_type
DCL01-C	ref-filter.c	2493	2	Do not reuse variable names in subscopes: cmp_type
DCL00-C	ref-filter.c	2514	4	Const-qualify immutable objects: a_size
DCL00-C	ref-filter.c	2516	4	Const-qualify immutable objects: b_size
INT32-C	ref-filter.c	2541	5	Ensure that operations on signed integers do not result in overflow
DCL01-C	ref-filter.c	2544	63	Do not reuse variable names in subscopes: ref_sorting
EXP05-C	ref-filter.c	2546	31	Do not cast away a const qualification
EXP05-C	ref-filter.c	2547	31	Do not cast away a const qualification
EXP36-C	ref-filter.c	2550	11	Do not convert pointers into more strictly aligned pointer types
DCL00-C	ref-filter.c	2551	3	Const-qualify immutable objects: cmp
EXP36-C	ref-filter.c	2555	6	Do not convert pointers into more strictly aligned pointer types
INT07-C	ref-filter.c	2581	13	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	ref-filter.c	2586	5	Const-qualify immutable objects: ch
INT07-C	ref-filter.c	2610	32	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	ref-filter.c	2656	2	Do not ignore values returned by functions: fwrite
EXP12-C	ref-filter.c	2657	2	Do not ignore values returned by functions: putchar
DCL00-C	ref-filter.c	2673	2	Const-qualify immutable objects: res
STR11-C	ref-filter.c	2683	2	Do not specify the dimension of a character array initialized with a string literal
EXP36-C	ref-filter.c	2685	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	ref-filter.c	2696	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	ref-filter.c	2742	29	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reflog-walk.c	10	2	Do not reuse variable names in subscopes: ref
EXP36-C	reflog-walk.c	26	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reflog-walk.c	29	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	reflog-walk.c	55	2	Store a new value in pointers immediately after free()
EXP36-C	reflog-walk.c	60	35	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reflog-walk.c	64	66	Do not reuse variable names in subscopes: ref
EXP36-C	reflog-walk.c	67	10	Do not convert pointers into more strictly aligned pointer types
EXP12-C	reflog-walk.c	69	2	Do not ignore values returned by functions: for_each_reflog_ent
EXP12-C	reflog-walk.c	76	4	Do not ignore values returned by functions: for_each_reflog_ent
MEM01-C	reflog-walk.c	77	4	Store a new value in pointers immediately after free()
MEM34-C	reflog-walk.c	77	4	Only free memory allocated dynamically
EXP12-C	reflog-walk.c	82	3	Do not ignore values returned by functions: for_each_reflog_ent
MEM34-C	reflog-walk.c	84	4	Only free memory allocated dynamically
EXP12-C	reflog-walk.c	86	4	Do not ignore values returned by functions: for_each_reflog_ent
MEM34-C	reflog-walk.c	88	3	Only free memory allocated dynamically
DCL01-C	reflog-walk.c	116	2	Do not reuse variable names in subscopes: complete_reflogs
EXP36-C	reflog-walk.c	122	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	reflog-walk.c	138	2	Store a new value in pointers immediately after free()
DCL01-C	reflog-walk.c	142	18	Do not reuse variable names in subscopes: commit
DCL01-C	reflog-walk.c	149	2	Do not reuse variable names in subscopes: commit_reflog
INT07-C	reflog-walk.c	158	21	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	reflog-walk.c	172	17	Do not convert pointers into more strictly aligned pointer types
MEM34-C	reflog-walk.c	175	4	Only free memory allocated dynamically
DCL00-C	reflog-walk.c	184	4	Const-qualify immutable objects: ret
MEM34-C	reflog-walk.c	187	5	Only free memory allocated dynamically
MEM34-C	reflog-walk.c	190	5	Only free memory allocated dynamically
MEM34-C	reflog-walk.c	197	4	Only free memory allocated dynamically
MEM01-C	reflog-walk.c	203	2	Store a new value in pointers immediately after free()
MEM34-C	reflog-walk.c	203	2	Only free memory allocated dynamically
EXP36-C	reflog-walk.c	205	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	reflog-walk.c	209	4	Only free memory allocated dynamically
INT01-C	reflog-walk.c	217	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reflog-walk.c	217	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reflog-walk.c	217	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reflog-walk.c	217	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reflog-walk.c	217	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reflog-walk.c	217	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reflog-walk.c	217	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reflog-walk.c	217	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reflog-walk.c	217	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reflog-walk.c	217	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reflog-walk.c	224	30	Do not reuse variable names in subscopes: reflog_info
DCL01-C	reflog-walk.c	228	2	Do not reuse variable names in subscopes: commit_reflog
DCL01-C	reflog-walk.c	258	29	Do not reuse variable names in subscopes: reflog_info
DCL01-C	reflog-walk.c	260	2	Do not reuse variable names in subscopes: commit_reflog
INT01-C	reflog-walk.c	269	10	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	reflog-walk.c	274	55	Do not reuse variable names in subscopes: reflog_info
DCL01-C	reflog-walk.c	276	2	Do not reuse variable names in subscopes: commit_reflog
DCL01-C	reflog-walk.c	286	59	Do not reuse variable names in subscopes: reflog_info
DCL01-C	reflog-walk.c	288	2	Do not reuse variable names in subscopes: commit_reflog
DCL01-C	reflog-walk.c	298	51	Do not reuse variable names in subscopes: reflog_info
DCL01-C	reflog-walk.c	302	3	Do not reuse variable names in subscopes: commit_reflog
DCL01-C	reflog-walk.c	351	3	Do not reuse variable names in subscopes: commit
DCL01-C	reflog.c	18	2	Do not reuse variable names in subscopes: tree
DCL01-C	reflog.c	55	46	Do not reuse variable names in subscopes: commit
EXP12-C	reflog.c	74	2	Do not ignore values returned by functions: memset
EXP12-C	reflog.c	75	2	Do not ignore values returned by functions: memset
EXP11-C	reflog.c	83	7	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	reflog.c	109	5	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	reflog.c	146	2	Do not reuse variable names in subscopes: commit
DCL00-C	reflog.c	177	2	Const-qualify immutable objects: expire_limit
DCL01-C	reflog.c	186	3	Do not reuse variable names in subscopes: commit
EXP12-C	reflog.c	193	4	Do not ignore values returned by functions: commit_list_insert
EXP12-C	reflog.c	203	4	Do not ignore values returned by functions: commit_list_insert
DCL01-C	reflog.c	209	75	Do not reuse variable names in subscopes: commit
EXP36-C	reflog.c	247	39	Do not convert pointers into more strictly aligned pointer types
MSC01-C	reflog.c	259	3	Strive for logical completeness
EXP36-C	reflog.c	282	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reflog.c	302	30	Do not convert pointers into more strictly aligned pointer types
EXP12-C	reflog.c	309	2	Do not ignore values returned by functions: commit_list_insert
EXP12-C	reflog.c	316	2	Do not ignore values returned by functions: parse_worktree_ref
EXP36-C	reflog.c	324	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reflog.c	326	2	Do not reuse variable names in subscopes: commit
MSC01-C	reflog.c	340	2	Strive for logical completeness
EXP12-C	reflog.c	344	3	Do not ignore values returned by functions: for_each_ref
EXP12-C	reflog.c	346	4	Do not ignore values returned by functions: commit_list_insert
EXP12-C	reflog.c	349	3	Do not ignore values returned by functions: commit_list_insert
EXP36-C	reflog.c	359	39	Do not convert pointers into more strictly aligned pointer types
MSC01-C	reflog.c	362	2	Strive for logical completeness
DCL13-C	reflog.c	376	40	Declare function parameters that are pointers to values not changed by the function as const: ooid
DCL13-C	reflog.c	377	26	Declare function parameters that are pointers to values not changed by the function as const: noid
EXP36-C	reflog.c	382	36	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reflog.c	394	2	Do not reuse variable names in subscopes: ref
INT13-C	reflog.c	407	10	Use bitwise operators only on unsigned operands
INT32-C	reflog.c	413	15	Ensure that operations on signed integers do not result in overflow
EXP12-C	reflog.c	414	3	Do not ignore values returned by functions: for_each_reflog_ent
EXP12-C	reflog.c	417	3	Do not ignore values returned by functions: for_each_reflog_ent
INT13-C	reflog.c	422	9	Use bitwise operators only on unsigned operands
MEM34-C	reflog.c	429	2	Only free memory allocated dynamically
DCL02-C	refs.c	60	1	Use visually distinct identifiers: ref_namespace
DCL01-C	refs.c	133	63	Do not reuse variable names in subscopes: ref
INT07-C	refs.c	165	2	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	refs.c	172	3	Const-qualify immutable objects: ch
DCL00-C	refs.c	173	3	Const-qualify immutable objects: disp
MSC01-C	refs.c	178	3	Strive for logical completeness
INT01-C	refs.c	185	46	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	refs.c	193	39	Use only explicitly signed or unsigned char type for numeric values
INT01-C	refs.c	193	35	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	refs.c	201	38	Use only explicitly signed or unsigned char type for numeric values
INT01-C	refs.c	201	34	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	refs.c	209	39	Use only explicitly signed or unsigned char type for numeric values
INT01-C	refs.c	209	35	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	refs.c	218	11	Use bitwise operators only on unsigned operands
INT07-C	refs.c	221	8	Use only explicitly signed or unsigned char type for numeric values
INT07-C	refs.c	229	36	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	refs.c	307	3	Const-qualify immutable objects: restlen
INT01-C	refs.c	310	48	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	refs.c	320	3	Only free memory allocated dynamically
MSC12-C	refs.c	345	3	Detect and remove code that has no effect
DCL00-C	refs.c	421	3	Const-qualify immutable objects: type
EXP36-C	refs.c	448	36	Do not convert pointers into more strictly aligned pointer types
EXP12-C	refs.c	463	2	Do not ignore values returned by functions: fputc
EXP12-C	refs.c	475	2	Do not ignore values returned by functions: for_each_rawref
EXP12-C	refs.c	486	2	Do not ignore values returned by functions: for_each_rawref
EXP12-C	refs.c	553	2	Do not ignore values returned by functions: strbuf_strip_suffix
INT01-C	refs.c	627	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	refs.c	643	2	Const-qualify immutable objects: len
EXP12-C	refs.c	646	3	Do not ignore values returned by functions: strvec_pushf
STR11-C	refs.c	649	1	Do not specify the dimension of a character array initialized with a string literal
MEM34-C	refs.c	683	2	Only free memory allocated dynamically
DCL00-C	refs.c	711	2	Const-qualify immutable objects: ret
EXP05-C	refs.c	717	10	Do not cast away a const qualification
DCL01-C	refs.c	724	35	Do not reuse variable names in subscopes: ref
DCL00-C	refs.c	728	2	Const-qualify immutable objects: refs_found
MEM34-C	refs.c	729	2	Only free memory allocated dynamically
DCL13-C	refs.c	734	27	Declare function parameters that are pointers to values not changed by the function as const: oid
DCL01-C	refs.c	734	39	Do not reuse variable names in subscopes: ref
DCL01-C	refs.c	780	3	Do not reuse variable names in subscopes: ref
MEM34-C	refs.c	805	2	Only free memory allocated dynamically
DCL01-C	refs.c	837	48	Do not reuse variable names in subscopes: ref
DCL05-C	refs.c	841	1	Use typedefs to improve code readability
EXP12-C	refs.c	897	3	Do not ignore values returned by functions: git_config_get_int
MSC12-C	refs.c	917	3	Detect and remove code that has no effect
INT07-C	refs.c	944	6	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	refs.c	1015	30	Do not convert pointers into more strictly aligned pointer types
DCL13-C	refs.c	1053	53	Declare function parameters that are pointers to values not changed by the function as const: ooid
EXP36-C	refs.c	1059	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	refs.c	1072	30	Do not convert pointers into more strictly aligned pointer types
EXP12-C	refs.c	1089	2	Do not ignore values returned by functions: memset
EXP12-C	refs.c	1100	3	Do not ignore values returned by functions: refs_for_each_reflog_ent_reverse
EXP12-C	refs.c	1104	2	Do not ignore values returned by functions: refs_for_each_reflog_ent_reverse
EXP12-C	refs.c	1115	2	Do not ignore values returned by functions: refs_for_each_reflog_ent
DCL13-C	refs.c	1121	26	Declare function parameters that are pointers to values not changed by the function as const: err
MSC12-C	refs.c	1124	2	Detect and remove code that has no effect
EXP36-C	refs.c	1126	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	refs.c	1161	2	Store a new value in pointers immediately after free()
DCL00-C	refs.c	1176	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	refs.c	1176	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	refs.c	1176	2	Do not cast away a const qualification
INT01-C	refs.c	1177	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1177	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1177	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1177	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1177	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1177	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1177	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1177	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1177	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	refs.c	1177	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	refs.c	1197	2	Detect and remove code that has no effect
INT13-C	refs.c	1208	14	Use bitwise operators only on unsigned operands
INT13-C	refs.c	1208	15	Use bitwise operators only on unsigned operands
INT13-C	refs.c	1208	15	Use bitwise operators only on unsigned operands
INT13-C	refs.c	1208	15	Use bitwise operators only on unsigned operands
INT13-C	refs.c	1216	11	Use bitwise operators only on unsigned operands
INT13-C	refs.c	1216	11	Use bitwise operators only on unsigned operands
INT13-C	refs.c	1216	11	Use bitwise operators only on unsigned operands
INT13-C	refs.c	1218	40	Use bitwise operators only on unsigned operands
EXP12-C	refs.c	1220	2	Do not ignore values returned by functions: ref_transaction_add_update
MSC01-C	refs.c	1285	3	Strive for logical completeness
INT01-C	refs.c	1335	59	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1335	55	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	refs.c	1337	23	Do not convert pointers into more strictly aligned pointer types
MSC12-C	refs.c	1341	4	Detect and remove code that has no effect
INT01-C	refs.c	1343	11	Use rsize_t or size_t for all integer values representing the size of an object
FIO30-C	refs.c	1361	12	Exclude user input from format strings
MEM34-C	refs.c	1407	2	Only free memory allocated dynamically
DCL01-C	refs.c	1424	3	Do not reuse variable names in subscopes: ref
INT07-C	refs.c	1432	15	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	refs.c	1433	3	Do not ignore values returned by functions: string_list_append_nodup
INT01-C	refs.c	1443	25	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	refs.c	1470	45	Do not reuse variable names in subscopes: dirname
INT01-C	refs.c	1486	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	refs.c	1578	54	Declare function parameters that are pointers to values not changed by the function as const: r
EXP36-C	refs.c	1584	36	Do not convert pointers into more strictly aligned pointer types
DCL13-C	refs.c	1591	47	Declare function parameters that are pointers to values not changed by the function as const: cb_data
EXP05-C	refs.c	1670	19	Do not cast away a const qualification
EXP05-C	refs.c	1671	19	Do not cast away a const qualification
DCL00-C	refs.c	1683	3	Const-qualify immutable objects: c
EXP12-C	refs.c	1685	4	Do not ignore values returned by functions: string_list_append
INT01-C	refs.c	1698	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	1705	37	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	refs.c	1754	53	Do not reuse variable names in subscopes: ref_store
DCL01-C	refs.c	1776	41	Do not reuse variable names in subscopes: ref_store
MSC12-C	refs.c	1780	2	Detect and remove code that has no effect
DCL01-C	refs.c	1790	46	Do not reuse variable names in subscopes: ref_store
INT13-C	refs.c	1878	11	Use bitwise operators only on unsigned operands
DCL01-C	refs.c	1900	37	Do not reuse variable names in subscopes: submodule
EXP11-C	refs.c	1935	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	refs.c	1935	7	Do not cast away a const qualification
EXP11-C	refs.c	1936	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	refs.c	1936	7	Do not cast away a const qualification
DCL00-C	refs.c	1947	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	refs.c	1947	2	Do not convert pointers into more strictly aligned pointer types
INT13-C	refs.c	2006	49	Use bitwise operators only on unsigned operands
INT13-C	refs.c	2006	49	Use bitwise operators only on unsigned operands
INT13-C	refs.c	2006	49	Use bitwise operators only on unsigned operands
DCL01-C	refs.c	2030	55	Do not reuse variable names in subscopes: submodule
INT01-C	refs.c	2042	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	2042	41	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	refs.c	2062	19	Do not convert pointers into more strictly aligned pointer types
MEM01-C	refs.c	2071	3	Store a new value in pointers immediately after free()
MEM34-C	refs.c	2071	3	Only free memory allocated dynamically
INT13-C	refs.c	2075	25	Use bitwise operators only on unsigned operands
MEM34-C	refs.c	2081	2	Only free memory allocated dynamically
INT13-C	refs.c	2102	11	Use bitwise operators only on unsigned operands
INT13-C	refs.c	2102	11	Use bitwise operators only on unsigned operands
INT13-C	refs.c	2102	11	Use bitwise operators only on unsigned operands
INT13-C	refs.c	2106	11	Use bitwise operators only on unsigned operands
INT13-C	refs.c	2106	11	Use bitwise operators only on unsigned operands
INT13-C	refs.c	2106	11	Use bitwise operators only on unsigned operands
MEM34-C	refs.c	2149	2	Only free memory allocated dynamically
DCL00-C	refs.c	2163	2	Const-qualify immutable objects: n
MSC12-C	refs.c	2165	2	Detect and remove code that has no effect
DCL00-C	refs.c	2168	3	Const-qualify immutable objects: cmp
INT01-C	refs.c	2168	38	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	refs.c	2204	2	Do not ignore values returned by functions: sigchain_push
INT01-C	refs.c	2206	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	refs.c	2226	2	Do not ignore values returned by functions: sigchain_pop
INT13-C	refs.c	2229	6	Use bitwise operators only on unsigned operands
EXP12-C	refs.c	2266	3	Do not ignore values returned by functions: ref_transaction_abort
EXP12-C	refs.c	2294	2	Do not ignore values returned by functions: run_transaction_hook
DCL01-C	refs.c	2338	2	Do not reuse variable names in subscopes: dirname
MSC12-C	refs.c	2351	2	Detect and remove code that has no effect
INT01-C	refs.c	2353	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refs.c	2363	63	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	refs.c	2407	3	Do not ignore values returned by functions: ref_iterator_abort
DCL13-C	refs.c	2427	72	Declare function parameters that are pointers to values not changed by the function as const: cb_data
INT01-C	refs.c	2544	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	refs.c	2562	2	Only free memory allocated dynamically
MEM34-C	refs.c	2580	2	Only free memory allocated dynamically
MEM34-C	refs.c	2597	2	Only free memory allocated dynamically
DCL02-C	refdebug.c	439	1	Use visually distinct identifiers: refs_be_debug
EXP36-C	refdebug.c	22	15	Do not convert pointers into more strictly aligned pointer types
EXP36-C	refdebug.c	23	19	Do not convert pointers into more strictly aligned pointer types
EXP11-C	refdebug.c	36	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	37	2	Const-qualify immutable objects: res
EXP11-C	refdebug.c	46	34	Do not apply operators expecting one type to data of an incompatible type
STR11-C	refdebug.c	61	2	Do not specify the dimension of a character array initialized with a string literal
STR11-C	refdebug.c	62	2	Do not specify the dimension of a character array initialized with a string literal
INT13-C	refdebug.c	69	54	Use bitwise operators only on unsigned operands
INT13-C	refdebug.c	69	39	Use bitwise operators only on unsigned operands
INT13-C	refdebug.c	69	24	Use bitwise operators only on unsigned operands
INT01-C	refdebug.c	79	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	refdebug.c	91	34	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	refdebug.c	105	34	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	refdebug.c	116	34	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refdebug.c	124	46	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	126	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	127	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	132	50	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	136	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	137	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	144	48	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	147	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	148	2	Const-qualify immutable objects: res
INT01-C	refdebug.c	152	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	refdebug.c	158	47	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	161	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	162	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	169	45	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	172	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	173	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	185	60	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refdebug.c	188	3	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	189	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	203	57	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refdebug.c	207	3	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	208	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	213	58	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refdebug.c	216	3	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	217	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	229	44	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	232	34	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	refdebug.c	235	44	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refdebug.c	243	49	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	247	34	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refdebug.c	265	54	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	268	34	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refdebug.c	284	47	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	286	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	287	2	Const-qualify immutable objects: res
STR11-C	refdebug.c	306	2	Do not specify the dimension of a character array initialized with a string literal
STR11-C	refdebug.c	307	2	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	refdebug.c	323	56	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	327	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	334	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	340	64	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	345	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	351	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	357	50	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	359	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	360	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	365	50	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	368	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	369	2	Const-qualify immutable objects: res
DCL01-C	refdebug.c	374	50	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	376	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	377	2	Const-qualify immutable objects: res
EXP36-C	refdebug.c	393	51	Do not convert pointers into more strictly aligned pointer types
EXP36-C	refdebug.c	403	51	Do not convert pointers into more strictly aligned pointer types
DCL00-C	refdebug.c	405	2	Const-qualify immutable objects: result
EXP36-C	refdebug.c	412	51	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refdebug.c	416	50	Do not reuse variable names in subscopes: ref_store
EXP11-C	refdebug.c	423	34	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refdebug.c	430	2	Const-qualify immutable objects: res
DCL02-C	reffiles-backend.c	3276	1	Use visually distinct identifiers: refs_be_files
EXP36-C	reffiles-backend.c	85	40	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reffiles-backend.c	86	2	Do not reuse variable names in subscopes: ref_store
EXP11-C	reffiles-backend.c	86	32	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	reffiles-backend.c	91	2	Do not ignore values returned by functions: get_common_dir_noenv
DCL01-C	reffiles-backend.c	122	65	Do not reuse variable names in subscopes: ref_store
EXP11-C	reffiles-backend.c	132	9	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	reffiles-backend.c	148	2	Const-qualify immutable objects: wt_type
DCL00-C	reffiles-backend.c	175	2	Const-qualify immutable objects: wt_type
DCL01-C	reffiles-backend.c	199	78	Do not reuse variable names in subscopes: dirname
INT01-C	reffiles-backend.c	207	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reffiles-backend.c	209	3	Const-qualify immutable objects: prefix_len
DCL01-C	reffiles-backend.c	226	50	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	227	44	Do not reuse variable names in subscopes: dirname
DCL00-C	reffiles-backend.c	233	2	Const-qualify immutable objects: dirnamelen
INT13-C	reffiles-backend.c	292	10	Use bitwise operators only on unsigned operands
EXP12-C	reffiles-backend.c	302	2	Do not ignore values returned by functions: closedir
DCL01-C	reffiles-backend.c	330	48	Do not reuse variable names in subscopes: ref_store
POS35-C	reffiles-backend.c	431	7	Avoid race conditions while checking for the existence of a symbolic link
DCL01-C	reffiles-backend.c	463	49	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	470	54	Do not reuse variable names in subscopes: ref_store
MEM01-C	reffiles-backend.c	515	2	Store a new value in pointers immediately after free()
MSC12-C	reffiles-backend.c	561	2	Detect and remove code that has no effect
EXP36-C	reffiles-backend.c	568	12	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reffiles-backend.c	630	3	Const-qualify immutable objects: myerr
DCL01-C	reffiles-backend.c	755	60	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	reffiles-backend.c	758	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	reffiles-backend.c	792	57	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	reffiles-backend.c	796	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	reffiles-backend.c	801	58	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	reffiles-backend.c	804	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	reffiles-backend.c	821	21	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	827	2	Do not reuse variable names in subscopes: ref_iterator
EXP36-C	reffiles-backend.c	872	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reffiles-backend.c	949	2	Detect and remove code that has no effect
EXP36-C	reffiles-backend.c	1004	25	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reffiles-backend.c	1022	2	Detect and remove code that has no effect
EXP36-C	reffiles-backend.c	1024	2	Do not convert pointers into more strictly aligned pointer types
INT07-C	reffiles-backend.c	1089	13	Use only explicitly signed or unsigned char type for numeric values
INT13-C	reffiles-backend.c	1096	43	Use bitwise operators only on unsigned operands
EXP12-C	reffiles-backend.c	1132	2	Do not ignore values returned by functions: ref_transaction_add_update
INT13-C	reffiles-backend.c	1134	47	Use bitwise operators only on unsigned operands
INT13-C	reffiles-backend.c	1134	32	Use bitwise operators only on unsigned operands
INT13-C	reffiles-backend.c	1134	17	Use bitwise operators only on unsigned operands
MEM30-C	reffiles-backend.c	1159	3	Do not access freed memory
MEM34-C	reffiles-backend.c	1159	3	Only free memory allocated dynamically
DCL01-C	reffiles-backend.c	1190	46	Do not reuse variable names in subscopes: ref_store
INT13-C	reffiles-backend.c	1193	45	Use bitwise operators only on unsigned operands
EXP12-C	reffiles-backend.c	1205	2	Do not ignore values returned by functions: packed_refs_lock
DCL00-C	reffiles-backend.c	1232	4	Const-qualify immutable objects: flex_array_len_
EXP36-C	reffiles-backend.c	1232	4	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reffiles-backend.c	1253	48	Do not reuse variable names in subscopes: ref_store
INT01-C	reffiles-backend.c	1274	16	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	reffiles-backend.c	1278	11	Use bitwise operators only on unsigned operands
INT01-C	reffiles-backend.c	1291	19	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	reffiles-backend.c	1291	19	Ensure that return values are compared against the proper type
EXP36-C	reffiles-backend.c	1317	25	Do not convert pointers into more strictly aligned pointer types
EXP12-C	reffiles-backend.c	1387	2	Do not ignore values returned by functions: string_list_insert
DCL01-C	reffiles-backend.c	1398	55	Do not reuse variable names in subscopes: ref_store
MSC12-C	reffiles-backend.c	1459	3	Detect and remove code that has no effect
MSC12-C	reffiles-backend.c	1484	5	Detect and remove code that has no effect
MSC12-C	reffiles-backend.c	1488	4	Detect and remove code that has no effect
MSC12-C	reffiles-backend.c	1511	3	Detect and remove code that has no effect
MSC12-C	reffiles-backend.c	1522	3	Detect and remove code that has no effect
MSC12-C	reffiles-backend.c	1531	3	Detect and remove code that has no effect
DCL01-C	reffiles-backend.c	1553	47	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	1561	45	Do not reuse variable names in subscopes: ref_store
DCL00-C	reffiles-backend.c	1587	3	Const-qualify immutable objects: len
EXP12-C	reffiles-backend.c	1596	3	Do not ignore values returned by functions: remove_empty_directories
MEM01-C	reffiles-backend.c	1599	3	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	1599	3	Only free memory allocated dynamically
EXP36-C	reffiles-backend.c	1609	12	Do not convert pointers into more strictly aligned pointer types
MEM34-C	reffiles-backend.c	1671	2	Only free memory allocated dynamically
MEM34-C	reffiles-backend.c	1675	2	Only free memory allocated dynamically
DCL01-C	reffiles-backend.c	1679	50	Do not reuse variable names in subscopes: ref_store
INT13-C	reffiles-backend.c	1725	17	Use bitwise operators only on unsigned operands
DCL00-C	reffiles-backend.c	1737	3	Const-qualify immutable objects: save_errno
DCL00-C	reffiles-backend.c	1748	3	Const-qualify immutable objects: save_errno
INT07-C	reffiles-backend.c	1767	2	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	reffiles-backend.c	1822	3	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	1822	3	Only free memory allocated dynamically
DCL01-C	reffiles-backend.c	1841	3	Do not reuse variable names in subscopes: head_ref
MSC12-C	reffiles-backend.c	1852	5	Detect and remove code that has no effect
EXP12-C	reffiles-backend.c	1873	2	Do not ignore values returned by functions: unlink
MEM01-C	reffiles-backend.c	1875	2	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	1875	2	Only free memory allocated dynamically
MSC12-C	reffiles-backend.c	1895	3	Detect and remove code that has no effect
DCL01-C	reffiles-backend.c	1923	50	Do not reuse variable names in subscopes: ref_store
MSC12-C	reffiles-backend.c	1935	3	Detect and remove code that has no effect
DCL01-C	reffiles-backend.c	1945	50	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	1960	50	Do not reuse variable names in subscopes: ref_store
EXP30-C	reffiles-backend.c	1983	6	Do not depend on order of evaluation for side effects
INT01-C	reffiles-backend.c	1983	34	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	reffiles-backend.c	1994	15	Use only explicitly signed or unsigned char type for numeric values
DCL13-C	reffiles-backend.c	2003	43	Declare function parameters that are pointers to values not changed by the function as const: bob
DCL01-C	reffiles-backend.c	2014	64	Do not reuse variable names in subscopes: ref_store
INT01-C	reffiles-backend.c	2045	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reffiles-backend.c	2052	13	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	reffiles-backend.c	2052	13	Ensure that return values are compared against the proper type
INT01-C	reffiles-backend.c	2120	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	reffiles-backend.c	2128	56	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	2155	2	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	2156	2	Do not reuse variable names in subscopes: dir_iterator
DCL01-C	reffiles-backend.c	2160	63	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	reffiles-backend.c	2163	3	Do not apply operators expecting one type to data of an incompatible type
MSC12-C	reffiles-backend.c	2180	4	Detect and remove code that has no effect
DCL13-C	reffiles-backend.c	2196	60	Declare function parameters that are pointers to values not changed by the function as const: ref_iterator
DCL01-C	reffiles-backend.c	2196	60	Do not reuse variable names in subscopes: ref_iterator
DCL13-C	reffiles-backend.c	2197	29	Declare function parameters that are pointers to values not changed by the function as const: peeled
DCL01-C	reffiles-backend.c	2202	61	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	reffiles-backend.c	2205	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	reffiles-backend.c	2221	69	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	2226	2	Do not reuse variable names in subscopes: ref_iterator
EXP36-C	reffiles-backend.c	2237	2	Do not convert pointers into more strictly aligned pointer types
DCL13-C	reffiles-backend.c	2249	23	Declare function parameters that are pointers to values not changed by the function as const: iter_worktree
DCL13-C	reffiles-backend.c	2251	8	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL01-C	reffiles-backend.c	2274	75	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	2296	21	Do not reuse variable names in subscopes: head_ref
INT13-C	reffiles-backend.c	2401	32	Use bitwise operators only on unsigned operands
INT13-C	reffiles-backend.c	2402	19	Use bitwise operators only on unsigned operands
DCL01-C	reffiles-backend.c	2479	23	Do not reuse variable names in subscopes: head_ref
DCL00-C	reffiles-backend.c	2484	2	Const-qualify immutable objects: mustexist
MEM01-C	reffiles-backend.c	2511	3	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	2511	3	Only free memory allocated dynamically
EXP36-C	reffiles-backend.c	2568	48	Do not convert pointers into more strictly aligned pointer types
MEM01-C	reffiles-backend.c	2596	4	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	2596	4	Only free memory allocated dynamically
EXP36-C	reffiles-backend.c	2636	14	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reffiles-backend.c	2641	33	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reffiles-backend.c	2652	4	Detect and remove code that has no effect
MEM01-C	reffiles-backend.c	2659	3	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	2659	3	Only free memory allocated dynamically
DCL01-C	reffiles-backend.c	2665	56	Do not reuse variable names in subscopes: ref_store
DCL01-C	reffiles-backend.c	2675	2	Do not reuse variable names in subscopes: head_ref
MSC12-C	reffiles-backend.c	2680	2	Detect and remove code that has no effect
EXP36-C	reffiles-backend.c	2685	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	reffiles-backend.c	2741	3	Only free memory allocated dynamically
EXP12-C	reffiles-backend.c	2779	4	Do not ignore values returned by functions: ref_transaction_add_update
INT13-C	reffiles-backend.c	2781	19	Use bitwise operators only on unsigned operands
MEM01-C	reffiles-backend.c	2827	2	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	2827	2	Only free memory allocated dynamically
DCL01-C	reffiles-backend.c	2838	55	Do not reuse variable names in subscopes: ref_store
MSC12-C	reffiles-backend.c	2851	2	Detect and remove code that has no effect
EXP36-C	reffiles-backend.c	2858	28	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reffiles-backend.c	2864	33	Do not convert pointers into more strictly aligned pointer types
MEM01-C	reffiles-backend.c	2878	5	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	2878	5	Only free memory allocated dynamically
EXP36-C	reffiles-backend.c	2936	33	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reffiles-backend.c	2978	54	Do not reuse variable names in subscopes: ref_store
DCL13-C	reffiles-backend.c	2980	23	Declare function parameters that are pointers to values not changed by the function as const: err
EXP36-C	reffiles-backend.c	2994	42	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reffiles-backend.c	2999	63	Do not reuse variable names in subscopes: ref_store
MSC12-C	reffiles-backend.c	3011	2	Detect and remove code that has no effect
EXP12-C	reffiles-backend.c	3018	3	Do not ignore values returned by functions: string_list_append
EXP12-C	reffiles-backend.c	3065	3	Do not ignore values returned by functions: ref_transaction_add_update
INT13-C	reffiles-backend.c	3066	25	Use bitwise operators only on unsigned operands
EXP36-C	reffiles-backend.c	3102	32	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reffiles-backend.c	3121	50	Do not reuse variable names in subscopes: ref_store
EXP12-C	reffiles-backend.c	3140	2	Do not ignore values returned by functions: memset
MSC12-C	reffiles-backend.c	3153	3	Detect and remove code that has no effect
DCL02-C	reffiles-backend.c	3256	70	Use visually distinct identifiers: err
DCL01-C	reffiles-backend.c	3187	4	Do not reuse variable names in subscopes: err
MSC12-C	reffiles-backend.c	3189	4	Detect and remove code that has no effect
MSC12-C	reffiles-backend.c	3195	4	Detect and remove code that has no effect
EXP12-C	reffiles-backend.c	3202	2	Do not ignore values returned by functions: refs_for_each_reflog_ent
DCL01-C	reffiles-backend.c	3218	4	Do not reuse variable names in subscopes: ref
INT13-C	reffiles-backend.c	3227	11	Use bitwise operators only on unsigned operands
INT13-C	reffiles-backend.c	3235	11	Use bitwise operators only on unsigned operands
INT13-C	reffiles-backend.c	3239	11	Use bitwise operators only on unsigned operands
INT13-C	reffiles-backend.c	3242	11	Use bitwise operators only on unsigned operands
MEM01-C	reffiles-backend.c	3245	2	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	3245	2	Only free memory allocated dynamically
MEM01-C	reffiles-backend.c	3251	2	Store a new value in pointers immediately after free()
MEM34-C	reffiles-backend.c	3251	2	Only free memory allocated dynamically
DCL01-C	reffiles-backend.c	3256	44	Do not reuse variable names in subscopes: ref_store
DCL13-C	reffiles-backend.c	3256	70	Declare function parameters that are pointers to values not changed by the function as const: err
DCL02-C	refiterator.c	408	1	Use visually distinct identifiers: current_ref_iter
DCL01-C	refiterator.c	11	47	Do not reuse variable names in subscopes: ref_iterator
DCL01-C	refiterator.c	16	44	Do not reuse variable names in subscopes: ref_iterator
DCL01-C	refiterator.c	22	45	Do not reuse variable names in subscopes: ref_iterator
MEM01-C	refiterator.c	42	2	Store a new value in pointers immediately after free()
DCL01-C	refiterator.c	49	60	Do not reuse variable names in subscopes: ref_iterator
DCL13-C	refiterator.c	54	57	Declare function parameters that are pointers to values not changed by the function as const: ref_iterator
DCL01-C	refiterator.c	54	57	Do not reuse variable names in subscopes: ref_iterator
DCL13-C	refiterator.c	55	26	Declare function parameters that are pointers to values not changed by the function as const: peeled
DCL01-C	refiterator.c	60	58	Do not reuse variable names in subscopes: ref_iterator
EXP36-C	refiterator.c	74	43	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refiterator.c	75	2	Do not reuse variable names in subscopes: ref_iterator
DCL01-C	refiterator.c	81	48	Do not reuse variable names in subscopes: ref_iterator
DCL01-C	refiterator.c	91	2	Do not reuse variable names in subscopes: select
DCL01-C	refiterator.c	101	60	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refiterator.c	104	3	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refiterator.c	134	3	Const-qualify immutable objects: selection
EXP12-C	refiterator.c	140	4	Do not ignore values returned by functions: ref_iterator_abort
INT13-C	refiterator.c	144	18	Use bitwise operators only on unsigned operands
INT13-C	refiterator.c	152	17	Use bitwise operators only on unsigned operands
INT13-C	refiterator.c	160	17	Use bitwise operators only on unsigned operands
EXP12-C	refiterator.c	169	2	Do not ignore values returned by functions: ref_iterator_abort
DCL01-C	refiterator.c	173	57	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refiterator.c	177	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refiterator.c	185	58	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refiterator.c	188	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refiterator.c	212	27	Do not reuse variable names in subscopes: select
EXP36-C	refiterator.c	214	43	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refiterator.c	215	2	Do not reuse variable names in subscopes: ref_iterator
DCL13-C	refiterator.c	241	9	Declare function parameters that are pointers to values not changed by the function as const: cb_data
EXP12-C	refiterator.c	269	3	Do not ignore values returned by functions: ref_iterator_abort
EXP12-C	refiterator.c	272	3	Do not ignore values returned by functions: ref_iterator_abort
DCL01-C	refiterator.c	304	61	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refiterator.c	307	3	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refiterator.c	311	3	Const-qualify immutable objects: cmp
INT01-C	refiterator.c	340	37	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	refiterator.c	358	58	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refiterator.c	362	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refiterator.c	367	59	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refiterator.c	370	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refiterator.c	391	2	Do not reuse variable names in subscopes: ref_iterator
EXP36-C	refiterator.c	396	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	refiterator.c	425	4	Do not ignore values returned by functions: ref_iterator_abort
DCL02-C	refpacked-backend.c	1588	1	Use visually distinct identifiers: refs_be_packed
DCL01-C	refpacked-backend.c	138	2	Do not reuse variable names in subscopes: snapshot
DCL01-C	refpacked-backend.c	151	2	Do not reuse variable names in subscopes: tempfile
DCL01-C	refpacked-backend.c	157	47	Do not reuse variable names in subscopes: snapshot
DCL01-C	refpacked-backend.c	167	52	Do not reuse variable names in subscopes: snapshot
DCL01-C	refpacked-backend.c	184	46	Do not reuse variable names in subscopes: snapshot
EXP36-C	refpacked-backend.c	200	41	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refpacked-backend.c	201	2	Do not reuse variable names in subscopes: ref_store
EXP11-C	refpacked-backend.c	201	32	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refpacked-backend.c	219	67	Do not reuse variable names in subscopes: ref_store
EXP11-C	refpacked-backend.c	229	9	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refpacked-backend.c	241	3	Do not reuse variable names in subscopes: snapshot
EXP12-C	refpacked-backend.c	244	3	Do not ignore values returned by functions: release_snapshot
INT01-C	refpacked-backend.c	251	10	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	refpacked-backend.c	260	2	Do not reuse variable names in subscopes: eol
EXP05-C	refpacked-backend.c	265	44	Do not cast away a const qualification
EXP36-C	refpacked-backend.c	278	37	Do not convert pointers into more strictly aligned pointer types
EXP36-C	refpacked-backend.c	278	47	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refpacked-backend.c	321	44	Do not reuse variable names in subscopes: snapshot
DCL01-C	refpacked-backend.c	326	2	Do not reuse variable names in subscopes: eol
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	342	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	refpacked-backend.c	342	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	refpacked-backend.c	349	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	349	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	367	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	367	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	367	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	367	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	367	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	367	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	367	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	367	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	367	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	refpacked-backend.c	367	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	refpacked-backend.c	373	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	374	42	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	375	21	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	refpacked-backend.c	407	2	Only free memory allocated dynamically
DCL01-C	refpacked-backend.c	451	49	Do not reuse variable names in subscopes: snapshot
INT01-C	refpacked-backend.c	461	44	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	461	67	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	refpacked-backend.c	474	43	Do not reuse variable names in subscopes: snapshot
INT01-C	refpacked-backend.c	506	48	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	509	36	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	refpacked-backend.c	538	61	Do not reuse variable names in subscopes: snapshot
DCL01-C	refpacked-backend.c	620	2	Do not reuse variable names in subscopes: snapshot
EXP36-C	refpacked-backend.c	620	37	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refpacked-backend.c	632	3	Do not reuse variable names in subscopes: eol
EXP12-C	refpacked-backend.c	649	3	Do not ignore values returned by functions: string_list_split_in_place
MEM34-C	refpacked-backend.c	664	3	Only free memory allocated dynamically
DCL00-C	refpacked-backend.c	685	3	Const-qualify immutable objects: size
DCL01-C	refpacked-backend.c	728	50	Do not reuse variable names in subscopes: ref_store
DCL13-C	refpacked-backend.c	729	49	Declare function parameters that are pointers to values not changed by the function as const: referent
DCL01-C	refpacked-backend.c	734	2	Do not reuse variable names in subscopes: snapshot
DCL01-C	refpacked-backend.c	768	2	Do not reuse variable names in subscopes: snapshot
DCL01-C	refpacked-backend.c	793	2	Do not reuse variable names in subscopes: eol
INT01-C	refpacked-backend.c	802	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	802	43	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	832	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refpacked-backend.c	832	44	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	refpacked-backend.c	857	61	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refpacked-backend.c	860	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refpacked-backend.c	882	58	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refpacked-backend.c	886	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refpacked-backend.c	901	59	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refpacked-backend.c	904	3	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	refpacked-backend.c	905	2	Const-qualify immutable objects: ok
EXP12-C	refpacked-backend.c	908	2	Do not ignore values returned by functions: release_snapshot
DCL01-C	refpacked-backend.c	920	21	Do not reuse variable names in subscopes: ref_store
DCL01-C	refpacked-backend.c	924	2	Do not reuse variable names in subscopes: snapshot
DCL01-C	refpacked-backend.c	927	2	Do not reuse variable names in subscopes: ref_iterator
EXP36-C	refpacked-backend.c	949	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refpacked-backend.c	989	40	Do not reuse variable names in subscopes: ref_store
INT13-C	refpacked-backend.c	992	46	Use bitwise operators only on unsigned operands
EXP12-C	refpacked-backend.c	998	3	Do not ignore values returned by functions: git_config_get_int
EXP12-C	refpacked-backend.c	1044	2	Do not ignore values returned by functions: get_snapshot
DCL01-C	refpacked-backend.c	1048	43	Do not reuse variable names in subscopes: ref_store
INT13-C	refpacked-backend.c	1052	19	Use bitwise operators only on unsigned operands
DCL01-C	refpacked-backend.c	1060	45	Do not reuse variable names in subscopes: ref_store
INT13-C	refpacked-backend.c	1064	19	Use bitwise operators only on unsigned operands
STR11-C	refpacked-backend.c	1078	1	Do not specify the dimension of a character array initialized with a string literal
DCL13-C	refpacked-backend.c	1081	45	Declare function parameters that are pointers to values not changed by the function as const: ref_store
DCL01-C	refpacked-backend.c	1081	45	Do not reuse variable names in subscopes: ref_store
DCL13-C	refpacked-backend.c	1082	21	Declare function parameters that are pointers to values not changed by the function as const: err
MEM01-C	refpacked-backend.c	1119	2	Store a new value in pointers immediately after free()
MEM34-C	refpacked-backend.c	1119	2	Only free memory allocated dynamically
EXP36-C	refpacked-backend.c	1160	30	Do not convert pointers into more strictly aligned pointer types
DCL00-C	refpacked-backend.c	1228	4	Const-qualify immutable objects: peel_error
DCL00-C	refpacked-backend.c	1248	4	Const-qualify immutable objects: peel_error
DCL01-C	refpacked-backend.c	1290	52	Do not reuse variable names in subscopes: ref_store
EXP36-C	refpacked-backend.c	1395	60	Do not convert pointers into more strictly aligned pointer types
MEM01-C	refpacked-backend.c	1408	3	Store a new value in pointers immediately after free()
MEM34-C	refpacked-backend.c	1408	3	Only free memory allocated dynamically
DCL01-C	refpacked-backend.c	1415	57	Do not reuse variable names in subscopes: ref_store
INT13-C	refpacked-backend.c	1421	37	Use bitwise operators only on unsigned operands
INT13-C	refpacked-backend.c	1421	19	Use bitwise operators only on unsigned operands
DCL00-C	refpacked-backend.c	1425	2	Const-qualify immutable objects: ret
EXP36-C	refpacked-backend.c	1436	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refpacked-backend.c	1475	55	Do not reuse variable names in subscopes: ref_store
DCL13-C	refpacked-backend.c	1477	24	Declare function parameters that are pointers to values not changed by the function as const: err
INT13-C	refpacked-backend.c	1481	37	Use bitwise operators only on unsigned operands
INT13-C	refpacked-backend.c	1481	19	Use bitwise operators only on unsigned operands
DCL01-C	refpacked-backend.c	1488	56	Do not reuse variable names in subscopes: ref_store
INT13-C	refpacked-backend.c	1494	37	Use bitwise operators only on unsigned operands
INT13-C	refpacked-backend.c	1494	19	Use bitwise operators only on unsigned operands
MEM01-C	refpacked-backend.c	1511	2	Store a new value in pointers immediately after free()
MEM34-C	refpacked-backend.c	1511	2	Only free memory allocated dynamically
DCL13-C	refpacked-backend.c	1516	64	Declare function parameters that are pointers to values not changed by the function as const: ref_store
DCL01-C	refpacked-backend.c	1516	64	Do not reuse variable names in subscopes: ref_store
DCL01-C	refpacked-backend.c	1523	49	Do not reuse variable names in subscopes: ref_store
DCL00-C	refpacked-backend.c	1526	2	Const-qualify immutable objects: refs
MSC12-C	refpacked-backend.c	1533	2	Detect and remove code that has no effect
INT01-C	refpacked-backend.c	1560	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	refpacked-backend.c	1560	20	Ensure that return values are compared against the proper type
DCL13-C	refpacked-backend.c	1572	47	Declare function parameters that are pointers to values not changed by the function as const: ref_store
DCL01-C	refpacked-backend.c	1572	47	Do not reuse variable names in subscopes: ref_store
DCL13-C	refpacked-backend.c	1583	76	Declare function parameters that are pointers to values not changed by the function as const: ref_store
DCL01-C	refpacked-backend.c	1583	76	Do not reuse variable names in subscopes: ref_store
EXP36-C	refref-cache.c	9	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	refref-cache.c	22	2	Detect and remove code that has no effect
DCL01-C	refref-cache.c	37	2	Do not reuse variable names in subscopes: ref
DCL00-C	refref-cache.c	39	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	refref-cache.c	39	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	refref-cache.c	48	33	Do not convert pointers into more strictly aligned pointer types
MEM01-C	refref-cache.c	67	2	Store a new value in pointers immediately after free()
MEM01-C	refref-cache.c	73	2	Store a new value in pointers immediately after free()
DCL01-C	refref-cache.c	89	20	Do not reuse variable names in subscopes: dirname
DCL00-C	refref-cache.c	93	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	refref-cache.c	93	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	refref-cache.c	101	27	Do not cast away a const qualification
EXP05-C	refref-cache.c	102	27	Do not cast away a const qualification
EXP36-C	refref-cache.c	115	35	Do not convert pointers into more strictly aligned pointer types
EXP05-C	refref-cache.c	116	33	Do not cast away a const qualification
DCL00-C	refref-cache.c	117	2	Const-qualify immutable objects: cmp
EXP36-C	refref-cache.c	134	13	Do not convert pointers into more strictly aligned pointer types
DCL00-C	refref-cache.c	152	2	Const-qualify immutable objects: entry_index
ARR30-C	refref-cache.c	158	22	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	refref-cache.c	175	3	Const-qualify immutable objects: dirnamelen
ARR30-C	refref-cache.c	198	22	Do not form or use out-of-bounds pointers or array subscripts
DCL01-C	refref-cache.c	269	54	Do not reuse variable names in subscopes: dirname
INT07-C	refref-cache.c	272	17	Use only explicitly signed or unsigned char type for numeric values
MSC01-C	refref-cache.c	306	4	Strive for logical completeness
DCL01-C	refref-cache.c	337	2	Do not reuse variable names in subscopes: prefix_state
DCL01-C	refref-cache.c	345	2	Do not reuse variable names in subscopes: index
DCL01-C	refref-cache.c	385	60	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refref-cache.c	388	3	Do not apply operators expecting one type to data of an incompatible type
INT01-C	refref-cache.c	392	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	402	26	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	refref-cache.c	402	26	Ensure that return values are compared against the proper type
INT01-C	refref-cache.c	420	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	420	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	420	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	420	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	420	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	420	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	420	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	420	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	420	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	refref-cache.c	420	4	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refref-cache.c	436	57	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refref-cache.c	440	3	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	refref-cache.c	447	58	Do not reuse variable names in subscopes: ref_iterator
EXP11-C	refref-cache.c	450	3	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	refref-cache.c	452	7	Do not cast away a const qualification
DCL01-C	refref-cache.c	471	2	Do not reuse variable names in subscopes: ref_iterator
EXP36-C	refref-cache.c	484	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	refref-cache.c	487	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	487	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	487	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	487	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	487	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	487	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	487	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refref-cache.c	487	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	refref-cache.c	487	2	Do not convert pointers into more strictly aligned pointer types
DCL02-C	refspec.c	17	1	Use visually distinct identifiers: tag_refspec
DCL01-C	refspec.c	23	65	Do not reuse variable names in subscopes: refspec
DCL00-C	refspec.c	57	3	Const-qualify immutable objects: rlen
INT01-C	refspec.c	58	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refspec.c	64	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refspec.c	65	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	refspec.c	74	11	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	refspec.c	74	11	Ensure that return values are compared against the proper type
DCL01-C	refspec.c	160	62	Do not reuse variable names in subscopes: refspec
EXP12-C	refspec.c	162	2	Do not ignore values returned by functions: memset
DCL01-C	refspec.c	166	70	Do not reuse variable names in subscopes: refspec
EXP12-C	refspec.c	185	2	Do not ignore values returned by functions: memset
DCL01-C	refspec.c	189	60	Do not reuse variable names in subscopes: refspec
EXP36-C	refspec.c	195	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	refspec.c	198	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	refspec.c	202	53	Do not reuse variable names in subscopes: refspec
DCL00-C	refspec.c	209	2	Const-qualify immutable objects: ap
EXP12-C	refspec.c	211	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	refspec.c	213	2	Do not ignore values returned by functions: __builtin_va_end
EXP05-C	refspec.c	235	8	Do not cast away a const qualification
DCL01-C	refspec.c	245	2	Do not reuse variable names in subscopes: refspec
DCL00-C	refspec.c	246	2	Const-qualify immutable objects: ret
DCL01-C	refspec.c	254	2	Do not reuse variable names in subscopes: refspec
EXP12-C	refspec.c	283	4	Do not ignore values returned by functions: strvec_pushf
EXP05-C	refspec.c	284	10	Do not cast away a const qualification
DCL01-C	remote.c	26	46	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	57	36	Do not reuse variable names in subscopes: remote
EXP36-C	remote.c	59	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	63	40	Do not reuse variable names in subscopes: remote
EXP36-C	remote.c	65	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	69	52	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	70	25	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	77	48	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	78	21	Do not reuse variable names in subscopes: remote
EXP36-C	remote.c	95	39	Do not convert pointers into more strictly aligned pointer types
EXP11-C	remote.c	97	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	remote.c	97	6	Do not cast away a const qualification
EXP11-C	remote.c	98	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	remote.c	98	6	Do not cast away a const qualification
DCL01-C	remote.c	106	56	Do not reuse variable names in subscopes: remote_state
EXP36-C	remote.c	124	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	remote.c	131	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	141	41	Do not reuse variable names in subscopes: remote
EXP05-C	remote.c	145	7	Do not cast away a const qualification
EXP05-C	remote.c	146	7	Do not cast away a const qualification
EXP05-C	remote.c	149	8	Do not cast away a const qualification
EXP05-C	remote.c	153	8	Do not cast away a const qualification
EXP05-C	remote.c	155	7	Do not cast away a const qualification
EXP05-C	remote.c	156	7	Do not cast away a const qualification
DCL01-C	remote.c	161	38	Do not reuse variable names in subscopes: branch
EXP36-C	remote.c	163	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	remote.c	179	40	Do not convert pointers into more strictly aligned pointer types
EXP11-C	remote.c	181	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	remote.c	181	6	Do not cast away a const qualification
EXP11-C	remote.c	182	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	remote.c	182	6	Do not cast away a const qualification
DCL01-C	remote.c	191	56	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	209	22	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	218	56	Do not reuse variable names in subscopes: remote_state
EXP36-C	remote.c	227	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	remote.c	249	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	remote.c	250	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	257	44	Do not reuse variable names in subscopes: rewrite
EXP36-C	remote.c	259	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	272	52	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	273	25	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	299	53	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	300	26	Do not reuse variable names in subscopes: remote
EXP12-C	remote.c	309	2	Do not ignore values returned by functions: strbuf_getline_lf
INT07-C	remote.c	328	13	Use only explicitly signed or unsigned char type for numeric values
EXP05-C	remote.c	330	10	Do not cast away a const qualification
DCL01-C	remote.c	349	2	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	350	2	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	351	2	Do not reuse variable names in subscopes: remote_state
EXP36-C	remote.c	351	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	373	3	Do not reuse variable names in subscopes: rewrite
EXP05-C	remote.c	437	8	Do not cast away a const qualification
EXP05-C	remote.c	443	8	Do not cast away a const qualification
DCL01-C	remote.c	477	49	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	512	3	Do not reuse variable names in subscopes: head_ref
DCL01-C	remote.c	536	67	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	537	26	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	552	46	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	562	52	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	563	25	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	578	50	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	590	50	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	605	4	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	618	48	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	638	3	Do not reuse variable names in subscopes: url_info
DCL05-C	remote.c	662	1	Use typedefs to improve code readability
DCL01-C	remote.c	663	43	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	694	41	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	707	45	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	719	41	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	734	3	Do not reuse variable names in subscopes: remote
MEM01-C	remote.c	768	2	Store a new value in pointers immediately after free()
DCL01-C	remote.c	778	3	Do not reuse variable names in subscopes: ref
DCL01-C	remote.c	805	35	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	843	53	Do not reuse variable names in subscopes: refspec
DCL01-C	remote.c	868	3	Do not reuse variable names in subscopes: ref
MEM01-C	remote.c	873	4	Store a new value in pointers immediately after free()
MEM30-C	remote.c	873	4	Do not access freed memory
MEM34-C	remote.c	873	4	Only free memory allocated dynamically
DCL00-C	remote.c	884	2	Const-qualify immutable objects: find_src
DCL01-C	remote.c	905	3	Do not reuse variable names in subscopes: refspec
EXP12-C	remote.c	920	4	Do not ignore values returned by functions: string_list_append
EXP12-C	remote.c	924	4	Do not ignore values returned by functions: string_list_append
INT01-C	remote.c	928	37	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	remote.c	952	3	Do not reuse variable names in subscopes: refspec
EXP12-C	remote.c	964	4	Do not ignore values returned by functions: string_list_append
DCL01-C	remote.c	983	3	Do not reuse variable names in subscopes: refspec
EXP12-C	remote.c	1007	2	Do not ignore values returned by functions: memset
EXP05-C	remote.c	1008	14	Do not cast away a const qualification
DCL01-C	remote.c	1016	41	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	1016	70	Do not reuse variable names in subscopes: refspec
DCL00-C	remote.c	1024	2	Const-qualify immutable objects: len
DCL01-C	remote.c	1025	2	Do not reuse variable names in subscopes: ref
EXP36-C	remote.c	1025	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	1036	40	Do not reuse variable names in subscopes: ref
EXP36-C	remote.c	1043	15	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	1052	45	Do not reuse variable names in subscopes: ref
DCL01-C	remote.c	1064	31	Do not reuse variable names in subscopes: ref
MEM01-C	remote.c	1071	2	Store a new value in pointers immediately after free()
DCL01-C	remote.c	1074	28	Do not reuse variable names in subscopes: ref
DCL00-C	remote.c	1088	2	Const-qualify immutable objects: patlen
DCL00-C	remote.c	1096	3	Const-qualify immutable objects: namelen
DCL05-C	remote.c	1140	1	Use typedefs to improve code readability
DCL01-C	remote.c	1140	39	Do not reuse variable names in subscopes: ref
DCL01-C	remote.c	1150	2	Do not reuse variable names in subscopes: ref
DCL05-C	remote.c	1176	1	Use typedefs to improve code readability
MSC12-C	remote.c	1240	2	Detect and remove code that has no effect
DCL05-C	remote.c	1285	1	Use typedefs to improve code readability
MEM01-C	remote.c	1326	4	Store a new value in pointers immediately after free()
MEM34-C	remote.c	1326	4	Only free memory allocated dynamically
MSC12-C	remote.c	1334	3	Detect and remove code that has no effect
DCL05-C	remote.c	1352	1	Use typedefs to improve code readability
DCL01-C	remote.c	1361	72	Do not reuse variable names in subscopes: ref
ARR30-C	remote.c	1397	18	Do not form or use out-of-bounds pointers or array subscripts
DCL01-C	remote.c	1426	38	Do not reuse variable names in subscopes: tips
DCL01-C	remote.c	1428	2	Do not reuse variable names in subscopes: commit
EXP36-C	remote.c	1436	2	Do not convert pointers into more strictly aligned pointer types
DCL05-C	remote.c	1440	1	Use typedefs to improve code readability
DCL01-C	remote.c	1445	2	Do not reuse variable names in subscopes: ref
EXP12-C	remote.c	1452	2	Do not ignore values returned by functions: memset
EXP36-C	remote.c	1491	3	Do not convert pointers into more strictly aligned pointer types
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL01-C	remote.c	1494	4	Do not reuse variable names in subscopes: ref
EXP36-C	remote.c	1494	26	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	1495	4	Do not reuse variable names in subscopes: commit
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
EXP36-C	remote.c	1506	4	Do not convert pointers into more strictly aligned pointer types
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL01-C	remote.c	1516	4	Do not reuse variable names in subscopes: ref
EXP36-C	remote.c	1516	26	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	1517	4	Do not reuse variable names in subscopes: commit
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
DCL02-C	remote.c	2728	2	Use visually distinct identifiers: ref
INT13-C	remote.c	1532	31	Use bitwise operators only on unsigned operands
MEM01-C	remote.c	1542	3	Store a new value in pointers immediately after free()
MEM34-C	remote.c	1542	3	Only free memory allocated dynamically
EXP05-C	remote.c	1554	11	Do not cast away a const qualification
DCL01-C	remote.c	1558	74	Do not reuse variable names in subscopes: ref
INT13-C	remote.c	1583	7	Use bitwise operators only on unsigned operands
INT13-C	remote.c	1600	23	Use bitwise operators only on unsigned operands
DCL00-C	remote.c	1601	2	Const-qualify immutable objects: send_mirror
INT13-C	remote.c	1601	26	Use bitwise operators only on unsigned operands
DCL00-C	remote.c	1602	2	Const-qualify immutable objects: send_prune
INT13-C	remote.c	1602	25	Use bitwise operators only on unsigned operands
DCL01-C	remote.c	1604	2	Do not reuse variable names in subscopes: ref
EXP36-C	remote.c	1628	23	Do not convert pointers into more strictly aligned pointer types
MEM34-C	remote.c	1651	3	Only free memory allocated dynamically
INT13-C	remote.c	1656	12	Use bitwise operators only on unsigned operands
MEM01-C	remote.c	1676	5	Store a new value in pointers immediately after free()
MEM34-C	remote.c	1676	5	Only free memory allocated dynamically
DCL01-C	remote.c	1692	2	Do not reuse variable names in subscopes: ref
DCL01-C	remote.c	1782	44	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	1784	2	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	1785	2	Do not reuse variable names in subscopes: ref
EXP36-C	remote.c	1804	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	remote.c	1806	26	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	1833	44	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	1838	41	Do not reuse variable names in subscopes: branch
DCL00-C	remote.c	1851	3	Const-qualify immutable objects: ap
EXP12-C	remote.c	1852	3	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	remote.c	1854	3	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	remote.c	1859	48	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	1886	58	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	1900	59	Do not reuse variable names in subscopes: remote_state
DCL01-C	remote.c	1901	25	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	1903	2	Do not reuse variable names in subscopes: remote
MEM34-C	remote.c	1924	3	Only free memory allocated dynamically
MSC01-C	remote.c	1931	2	Strive for logical completeness
DCL01-C	remote.c	1963	44	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	1990	36	Do not reuse variable names in subscopes: refspec
DCL01-C	remote.c	1993	2	Do not reuse variable names in subscopes: ref
MEM30-C	remote.c	2015	3	Do not access freed memory
MEM34-C	remote.c	2015	3	Only free memory allocated dynamically
DCL01-C	remote.c	2024	2	Do not reuse variable names in subscopes: ref
DCL00-C	remote.c	2029	3	Const-qualify immutable objects: score
DCL01-C	remote.c	2041	2	Do not reuse variable names in subscopes: ref
DCL05-C	remote.c	2065	1	Use typedefs to improve code readability
DCL01-C	remote.c	2066	32	Do not reuse variable names in subscopes: refspec
EXP12-C	remote.c	2082	4	Do not ignore values returned by functions: get_oid_hex
MSC12-C	remote.c	2101	5	Detect and remove code that has no effect
MEM01-C	remote.c	2105	5	Store a new value in pointers immediately after free()
MEM30-C	remote.c	2105	5	Do not access freed memory
MEM34-C	remote.c	2105	5	Only free memory allocated dynamically
DCL01-C	remote.c	2118	39	Do not reuse variable names in subscopes: ref
EXP12-C	remote.c	2179	2	Do not ignore values returned by functions: strvec_push
EXP12-C	remote.c	2180	2	Do not ignore values returned by functions: strvec_push
EXP12-C	remote.c	2181	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	remote.c	2184	2	Do not ignore values returned by functions: strvec_push
EXP12-C	remote.c	2187	2	Do not ignore values returned by functions: setup_revisions
DCL01-C	remote.c	2230	39	Do not reuse variable names in subscopes: branch
DCL01-C	remote.c	2250	41	Do not reuse variable names in subscopes: branch
MEM34-C	remote.c	2318	2	Only free memory allocated dynamically
EXP36-C	remote.c	2326	29	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	2327	2	Do not reuse variable names in subscopes: ref
EXP12-C	remote.c	2344	2	Do not ignore values returned by functions: for_each_ref
DCL01-C	remote.c	2369	3	Do not reuse variable names in subscopes: ref
MEM01-C	remote.c	2373	3	Store a new value in pointers immediately after free()
MEM34-C	remote.c	2373	3	Only free memory allocated dynamically
EXP36-C	remote.c	2407	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	remote.c	2411	2	Do not ignore values returned by functions: memset
EXP05-C	remote.c	2412	14	Do not cast away a const qualification
INT01-C	remote.c	2415	17	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	remote.c	2415	17	Ensure that return values are compared against the proper type
INT01-C	remote.c	2428	25	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	remote.c	2433	3	Do not reuse variable names in subscopes: ref
DCL01-C	remote.c	2444	2	Do not reuse variable names in subscopes: ref
EXP12-C	remote.c	2452	3	Do not ignore values returned by functions: string_list_append
EXP12-C	remote.c	2454	2	Do not ignore values returned by functions: for_each_ref
EXP12-C	remote.c	2469	2	Do not ignore values returned by functions: memset
EXP36-C	remote.c	2477	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	remote.c	2479	2	Do not ignore values returned by functions: memset
EXP36-C	remote.c	2516	34	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	2531	43	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	2560	21	Do not reuse variable names in subscopes: commit
INT01-C	remote.c	2562	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	remote.c	2562	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	remote.c	2562	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	remote.c	2562	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	remote.c	2562	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	remote.c	2562	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	remote.c	2562	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	remote.c	2562	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	remote.c	2562	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	remote.c	2562	2	Do not convert pointers into more strictly aligned pointer types
DCL13-C	remote.c	2580	42	Declare function parameters that are pointers to values not changed by the function as const: o_oid
DCL13-C	remote.c	2581	28	Declare function parameters that are pointers to values not changed by the function as const: n_oid
EXP36-C	remote.c	2586	20	Do not convert pointers into more strictly aligned pointer types
DCL13-C	remote.c	2591	54	Declare function parameters that are pointers to values not changed by the function as const: o_oid
DCL01-C	remote.c	2597	2	Do not reuse variable names in subscopes: commit
EXP36-C	remote.c	2598	47	Do not convert pointers into more strictly aligned pointer types
DCL01-C	remote.c	2627	72	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	2630	2	Do not reuse variable names in subscopes: commit
EXP12-C	remote.c	2645	2	Do not ignore values returned by functions: for_each_reflog_ent_reverse
INT01-C	remote.c	2662	30	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	remote.c	2678	52	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	2689	24	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	2690	21	Do not reuse variable names in subscopes: ref
DCL01-C	remote.c	2725	22	Do not reuse variable names in subscopes: remote
DCL01-C	remote.c	2728	2	Do not reuse variable names in subscopes: ref
EXP36-C	remote.c	2744	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	remote.c	2746	2	Do not ignore values returned by functions: memset
DCL01-C	remote.c	2753	46	Do not reuse variable names in subscopes: remote_state
INT07-C	remote.c	2774	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	remote.c	2780	10	Use only explicitly signed or unsigned char type for numeric values
INT01-C	remote.c	2811	30	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	remote.c	2812	20	Use only explicitly signed or unsigned char type for numeric values
INT01-C	remote.c	2812	16	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	remote.c	2826	4	Only free memory allocated dynamically
INT13-C	remote.c	2837	13	Use bitwise operators only on unsigned operands
INT01-C	remote.c	2846	29	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	remote.c	2847	2	Store a new value in pointers immediately after free()
MEM34-C	remote.c	2847	2	Only free memory allocated dynamically
MEM34-C	remote.c	2861	2	Only free memory allocated dynamically
DCL13-C	replace-object.c	13	11	Declare function parameters that are pointers to values not changed by the function as const: cb_data
EXP36-C	replace-object.c	18	43	Do not convert pointers into more strictly aligned pointer types
MEM01-C	replace-object.c	21	3	Store a new value in pointers immediately after free()
MEM34-C	replace-object.c	21	3	Only free memory allocated dynamically
EXP36-C	replace-object.c	48	10	Do not convert pointers into more strictly aligned pointer types
EXP12-C	replace-object.c	51	2	Do not ignore values returned by functions: for_each_replace_ref
EXP36-C	replace-object.c	78	14	Do not convert pointers into more strictly aligned pointer types
DCL00-C	repo-settings.c	82	3	Const-qualify immutable objects: v
DCL00-C	repo-settings.c	95	3	Const-qualify immutable objects: fetch_default
DCL02-C	repository.c	19	1	Use visually distinct identifiers: the_repository
DCL02-C	repository.c	20	1	Use visually distinct identifiers: the_index
MEM01-C	repository.c	74	2	Store a new value in pointers immediately after free()
MEM34-C	repository.c	74	2	Only free memory allocated dynamically
EXP36-C	repository.c	79	3	Do not convert pointers into more strictly aligned pointer types
DCL01-C	repository.c	107	2	Do not reuse variable names in subscopes: error
MEM34-C	repository.c	128	2	Only free memory allocated dynamically
EXP12-C	repository.c	146	2	Do not ignore values returned by functions: read_repository_format
EXP12-C	repository.c	167	2	Do not ignore values returned by functions: memset
EXP36-C	repository.c	306	3	Do not convert pointers into more strictly aligned pointer types
DCL02-C	rerere.c	19	1	Use visually distinct identifiers: RERERE_RESOLVED
EXP30-C	rerere.c	42	2	Do not depend on order of evaluation for side effects
EXP36-C	rerere.c	42	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	rerere.c	42	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	rerere.c	43	34	Do not convert pointers into more strictly aligned pointer types
MEM34-C	rerere.c	45	3	Only free memory allocated dynamically
EXP12-C	rerere.c	65	3	Do not ignore values returned by functions: memset
EXP12-C	rerere.c	135	2	Do not ignore values returned by functions: closedir
EXP36-C	rerere.c	142	21	Do not convert pointers into more strictly aligned pointer types
DCL00-C	rerere.c	144	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	rerere.c	144	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	rerere.c	148	3	Do not ignore values returned by functions: strmap_put
DCL00-C	rerere.c	158	2	Const-qualify immutable objects: variant
INT13-C	rerere.c	162	43	Use bitwise operators only on unsigned operands
EXP36-C	rerere.c	167	32	Do not convert pointers into more strictly aligned pointer types
INT01-C	rerere.c	200	15	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	rerere.c	214	18	Use only explicitly signed or unsigned char type for numeric values
INT01-C	rerere.c	228	16	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	rerere.c	232	3	Detect and remove code that has no effect
EXP36-C	rerere.c	234	20	Do not convert pointers into more strictly aligned pointer types
MSC12-C	rerere.c	237	3	Detect and remove code that has no effect
DCL01-C	rerere.c	266	2	Do not reuse variable names in subscopes: getline
INT01-C	rerere.c	276	30	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	rerere.c	276	30	Ensure that return values are compared against the proper type
EXP11-C	rerere.c	310	30	Do not apply operators expecting one type to data of an incompatible type
INT01-C	rerere.c	388	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	rerere.c	391	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	rerere.c	457	2	Const-qualify immutable objects: marker_size
EXP12-C	rerere.c	459	2	Do not ignore values returned by functions: memset
MSC12-C	rerere.c	469	4	Detect and remove code that has no effect
INT01-C	rerere.c	676	44	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	rerere.c	676	44	Ensure that return values are compared against the proper type
EXP12-C	rerere.c	693	2	Do not ignore values returned by functions: repo_hold_locked_index
INT01-C	rerere.c	695	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	rerere.c	699	3	Do not ignore values returned by functions: fprintf_ln
INT13-C	rerere.c	704	23	Use bitwise operators only on unsigned operands
EXP12-C	rerere.c	710	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	rerere.c	711	2	Do not ignore values returned by functions: unlink_or_warn
EXP36-C	rerere.c	727	32	Do not convert pointers into more strictly aligned pointer types
EXP12-C	rerere.c	736	4	Do not ignore values returned by functions: copy_file
EXP12-C	rerere.c	738	4	Do not ignore values returned by functions: fprintf_ln
INT13-C	rerere.c	755	32	Use bitwise operators only on unsigned operands
EXP12-C	rerere.c	784	2	Do not ignore values returned by functions: handle_file
DCL02-C	rerere.c	1167	44	Use visually distinct identifiers: path
DCL01-C	rerere.c	786	3	Do not reuse variable names in subscopes: path
DCL02-C	rerere.c	1167	44	Use visually distinct identifiers: path
EXP12-C	rerere.c	792	2	Do not ignore values returned by functions: fprintf_ln
EXP12-C	rerere.c	802	2	Do not ignore values returned by functions: find_conflict
INT01-C	rerere.c	810	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	rerere.c	823	47	Do not convert pointers into more strictly aligned pointer types
EXP12-C	rerere.c	833	3	Do not ignore values returned by functions: mkdir_in_gitdir
INT01-C	rerere.c	836	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	rerere.c	847	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	rerere.c	848	2	Do not ignore values returned by functions: git_config_get_bool
INT13-C	rerere.c	878	12	Use bitwise operators only on unsigned operands
EXP11-C	rerere.c	922	29	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	rerere.c	948	2	Const-qualify immutable objects: marker_size
INT32-C	rerere.c	957	8	Ensure that operations on signed integers do not result in overflow
INT14-C	rerere.c	966	5	Avoid performing bitwise and arithmetic operations on the same data
EXP12-C	rerere.c	981	2	Do not ignore values returned by functions: ll_merge
EXP12-C	rerere.c	988	2	Do not ignore values returned by functions: memset
EXP12-C	rerere.c	1039	3	Do not ignore values returned by functions: handle_cache
MSC12-C	rerere.c	1042	4	Detect and remove code that has no effect
MSC12-C	rerere.c	1053	3	Detect and remove code that has no effect
EXP12-C	rerere.c	1071	2	Do not ignore values returned by functions: handle_cache
EXP12-C	rerere.c	1072	2	Do not ignore values returned by functions: fprintf_ln
MEM34-C	rerere.c	1085	2	Only free memory allocated dynamically
DCL01-C	rerere.c	1089	58	Do not reuse variable names in subscopes: pathspec
EXP12-C	rerere.c	1108	2	Do not ignore values returned by functions: find_conflict
INT01-C	rerere.c	1109	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	rerere.c	1114	3	Do not ignore values returned by functions: rerere_forget_one_path
EXP12-C	rerere.c	1142	2	Do not ignore values returned by functions: unlink_or_warn
DCL00-C	rerere.c	1180	2	Const-qualify immutable objects: now
EXP12-C	rerere.c	1187	2	Do not ignore values returned by functions: git_config_get_expiry_in_days
EXP12-C	rerere.c	1188	2	Do not ignore values returned by functions: git_config_get_expiry_in_days
EXP12-C	rerere.c	1215	2	Do not ignore values returned by functions: closedir
INT01-C	rerere.c	1218	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	rerere.c	1219	3	Do not ignore values returned by functions: lstat_cache_aware_rmdir
INT01-C	rerere.c	1238	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	rerere.c	1239	44	Do not convert pointers into more strictly aligned pointer types
EXP12-C	rerere.c	1242	4	Do not ignore values returned by functions: lstat_cache_aware_rmdir
EXP12-C	rerere.c	1245	2	Do not ignore values returned by functions: unlink_or_warn
DCL00-C	reset.c	16	2	Const-qualify immutable objects: detach_head
DCL00-C	reset.c	17	2	Const-qualify immutable objects: run_hook
EXP12-C	reset.c	48	4	Do not ignore values returned by functions: update_ref
DCL00-C	reset.c	84	2	Const-qualify immutable objects: reset_hard
DCL00-C	reset.c	85	2	Const-qualify immutable objects: refs_only
DCL00-C	reset.c	86	2	Const-qualify immutable objects: update_orig_head
DCL01-C	reset.c	91	2	Do not reuse variable names in subscopes: tree
EXP05-C	reset.c	172	8	Do not cast away a const qualification
EXP36-C	resolve-undo.c	18	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	resolve-undo.c	26	11	Do not convert pointers into more strictly aligned pointer types
EXP36-C	resolve-undo.c	35	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	resolve-undo.c	60	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	resolve-undo.c	67	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	resolve-undo.c	68	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	resolve-undo.c	73	12	Do not convert pointers into more strictly aligned pointer types
INT01-C	resolve-undo.c	74	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	resolve-undo.c	81	25	Do not cast away a const qualification
INT01-C	resolve-undo.c	82	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	resolve-undo.c	84	9	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	resolve-undo.c	93	25	Do not cast away a const qualification
MSC12-C	resolve-undo.c	102	2	Detect and remove code that has no effect
MEM01-C	resolve-undo.c	112	2	Store a new value in pointers immediately after free()
MEM34-C	resolve-undo.c	112	2	Only free memory allocated dynamically
EXP36-C	resolve-undo.c	139	11	Do not convert pointers into more strictly aligned pointer types
EXP12-C	resolve-undo.c	144	2	Do not ignore values returned by functions: remove_index_entry_at
MEM01-C	resolve-undo.c	160	2	Store a new value in pointers immediately after free()
MEM34-C	resolve-undo.c	160	2	Only free memory allocated dynamically
MEM01-C	resolve-undo.c	163	2	Store a new value in pointers immediately after free()
MEM34-C	resolve-undo.c	163	2	Only free memory allocated dynamically
DCL01-C	resolve-undo.c	184	71	Do not reuse variable names in subscopes: pathspec
DCL02-C	revision.c	39	1	Use visually distinct identifiers: show_early_output
INT01-C	revision.c	44	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	revision.c	44	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	revision.c	44	1	Use typedefs to improve code readability
EXP36-C	revision.c	44	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	44	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	revision.c	44	1	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	revision.c	51	32	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	revision.c	52	3	Do not ignore values returned by functions: fputc
EXP12-C	revision.c	53	2	Do not ignore values returned by functions: fputc
DCL01-C	revision.c	56	50	Do not reuse variable names in subscopes: blob
DCL01-C	revision.c	66	24	Do not reuse variable names in subscopes: tree
DCL01-C	revision.c	96	65	Do not reuse variable names in subscopes: tree
EXP11-C	revision.c	123	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	revision.c	123	7	Do not cast away a const qualification
EXP11-C	revision.c	124	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	revision.c	124	7	Do not cast away a const qualification
EXP30-C	revision.c	134	2	Do not depend on order of evaluation for side effects
EXP36-C	revision.c	134	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	134	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	revision.c	146	2	Const-qualify immutable objects: hash
EXP05-C	revision.c	153	13	Do not cast away a const qualification
EXP36-C	revision.c	156	10	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	158	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	revision.c	162	3	Do not ignore values returned by functions: hashmap_put
EXP12-C	revision.c	165	2	Do not ignore values returned by functions: oidset_insert
DCL01-C	revision.c	169	19	Do not reuse variable names in subscopes: tree
DCL01-C	revision.c	222	3	Do not reuse variable names in subscopes: tree
DCL01-C	revision.c	239	3	Do not reuse variable names in subscopes: tree
EXP30-C	revision.c	243	2	Do not depend on order of evaluation for side effects
EXP36-C	revision.c	243	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	243	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	255	74	Do not reuse variable names in subscopes: commit
INT01-C	revision.c	257	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	257	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	257	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	257	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	257	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	257	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	257	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	257	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	257	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	revision.c	257	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	272	81	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	296	71	Do not reuse variable names in subscopes: commit
INT01-C	revision.c	307	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	revision.c	326	3	Const-qualify immutable objects: namelen
DCL00-C	revision.c	327	3	Const-qualify immutable objects: len
INT01-C	revision.c	329	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	329	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	revision.c	331	3	Do not ignore values returned by functions: add_reflog_for_walk
DCL01-C	revision.c	369	2	Do not reuse variable names in subscopes: object
DCL01-C	revision.c	389	2	Do not reuse variable names in subscopes: object
DCL01-C	revision.c	396	2	Do not reuse variable names in subscopes: object
DCL00-C	revision.c	400	2	Const-qualify immutable objects: flags
DCL01-C	revision.c	406	3	Do not reuse variable names in subscopes: tag
EXP11-C	revision.c	406	21	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	revision.c	433	3	Do not reuse variable names in subscopes: commit
EXP11-C	revision.c	433	27	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	revision.c	457	3	Do not reuse variable names in subscopes: tree
EXP11-C	revision.c	457	23	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	revision.c	488	3	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	494	3	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	531	50	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	568	3	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	608	2	Const-qualify immutable objects: diff
EXP36-C	revision.c	609	33	Do not convert pointers into more strictly aligned pointer types
INT13-C	revision.c	611	18	Use bitwise operators only on unsigned operands
INT13-C	revision.c	656	20	Use bitwise operators only on unsigned operands
INT13-C	revision.c	658	42	Use bitwise operators only on unsigned operands
EXP12-C	revision.c	678	2	Do not ignore values returned by functions: repo_parse_commit
MEM34-C	revision.c	699	3	Only free memory allocated dynamically
EXP36-C	revision.c	716	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	revision.c	732	3	Do not ignore values returned by functions: atexit
MEM34-C	revision.c	736	2	Only free memory allocated dynamically
DCL01-C	revision.c	740	23	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	773	46	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	820	73	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	839	89	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	841	2	Const-qualify immutable objects: n
EXP36-C	revision.c	842	37	Do not convert pointers into more strictly aligned pointer types
EXP12-C	revision.c	844	2	Do not ignore values returned by functions: add_decoration
DCL01-C	revision.c	855	67	Do not reuse variable names in subscopes: commit
EXP36-C	revision.c	875	24	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	902	71	Do not reuse variable names in subscopes: commit
EXP36-C	revision.c	911	25	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	947	74	Do not reuse variable names in subscopes: commit
MSC01-C	revision.c	1013	3	Strive for logical completeness
DCL01-C	revision.c	1090	66	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	1153	3	Const-qualify immutable objects: gently
DCL01-C	revision.c	1194	3	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	1195	3	Const-qualify immutable objects: flags
EXP12-C	revision.c	1208	2	Do not ignore values returned by functions: init_patch_ids
DCL01-C	revision.c	1213	3	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	1214	3	Const-qualify immutable objects: flags
EXP12-C	revision.c	1225	3	Do not ignore values returned by functions: add_commit_patch_id
DCL01-C	revision.c	1233	3	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	1235	3	Const-qualify immutable objects: flags
EXP12-C	revision.c	1259	2	Do not ignore values returned by functions: free_patch_ids
EXP12-C	revision.c	1321	3	Do not ignore values returned by functions: commit_list_insert
DCL01-C	revision.c	1397	3	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	1425	3	Do not reuse variable names in subscopes: commit
EXP12-C	revision.c	1478	4	Do not ignore values returned by functions: update_treesame
DCL00-C	revision.c	1498	2	Const-qualify immutable objects: nr
EXP36-C	revision.c	1500	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	1509	26	Do not reuse variable names in subscopes: commit_list
DCL01-C	revision.c	1514	3	Do not reuse variable names in subscopes: object
INT07-C	revision.c	1547	37	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	revision.c	1552	2	Do not ignore values returned by functions: string_list_append
EXP36-C	revision.c	1562	38	Do not convert pointers into more strictly aligned pointer types
INT07-C	revision.c	1563	41	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	revision.c	1596	27	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	1597	2	Do not reuse variable names in subscopes: object
DCL05-C	revision.c	1617	1	Use typedefs to improve code readability
EXP36-C	revision.c	1634	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	1666	27	Do not convert pointers into more strictly aligned pointer types
EXP12-C	revision.c	1672	2	Do not ignore values returned by functions: refs_for_each_reflog_ent
EXP12-C	revision.c	1691	3	Do not ignore values returned by functions: refs_for_each_reflog
EXP12-C	revision.c	1705	2	Do not ignore values returned by functions: for_each_reflog
DCL00-C	revision.c	1714	2	Const-qualify immutable objects: baselen
DCL01-C	revision.c	1718	3	Do not reuse variable names in subscopes: tree
EXP36-C	revision.c	1743	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	1749	4	Do not reuse variable names in subscopes: blob
DCL01-C	revision.c	1776	3	Do not reuse variable names in subscopes: blob
EXP12-C	revision.c	1802	2	Do not ignore values returned by functions: repo_read_index
EXP36-C	revision.c	1834	41	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	1856	2	Do not reuse variable names in subscopes: commit
EXP11-C	revision.c	1879	11	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	revision.c	1926	29	Do not reuse variable names in subscopes: commit_list
DCL01-C	revision.c	1930	3	Do not reuse variable names in subscopes: object
EXP36-C	revision.c	1968	4	Do not convert pointers into more strictly aligned pointer types
INT13-C	revision.c	1977	55	Use bitwise operators only on unsigned operands
INT13-C	revision.c	1977	36	Use bitwise operators only on unsigned operands
INT13-C	revision.c	1977	36	Use bitwise operators only on unsigned operands
INT13-C	revision.c	1977	36	Use bitwise operators only on unsigned operands
INT13-C	revision.c	1977	36	Use bitwise operators only on unsigned operands
INT13-C	revision.c	1977	36	Use bitwise operators only on unsigned operands
INT13-C	revision.c	1977	36	Use bitwise operators only on unsigned operands
INT13-C	revision.c	1977	57	Use bitwise operators only on unsigned operands
INT13-C	revision.c	1978	31	Use bitwise operators only on unsigned operands
INT07-C	revision.c	1988	10	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	revision.c	2005	2	Const-qualify immutable objects: flags_exclude
DCL00-C	revision.c	2006	2	Const-qualify immutable objects: oc_flags
INT07-C	revision.c	2025	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	revision.c	2027	11	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	revision.c	2079	2	Do not ignore values returned by functions: memset
EXP12-C	revision.c	2080	2	Do not ignore values returned by functions: memset
INT07-C	revision.c	2082	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	revision.c	2085	10	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	revision.c	2097	2	Do not reuse variable names in subscopes: object
DCL00-C	revision.c	2101	2	Const-qualify immutable objects: cant_be_filename
INT07-C	revision.c	2119	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	revision.c	2122	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	revision.c	2126	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	revision.c	2128	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	revision.c	2140	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	revision.c	2142	10	Use only explicitly signed or unsigned char type for numeric values
INT13-C	revision.c	2158	48	Use bitwise operators only on unsigned operands
INT13-C	revision.c	2161	57	Use bitwise operators only on unsigned operands
DCL00-C	revision.c	2169	2	Const-qualify immutable objects: ret
DCL00-C	revision.c	2194	3	Const-qualify immutable objects: len
DCL05-C	revision.c	2230	1	Use typedefs to improve code readability
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL01-C	revision.c	2235	2	Do not reuse variable names in subscopes: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
INT05-C	revision.c	2256	21	Use strtol() or a related function to convert a string token to an integer
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
INT05-C	revision.c	2260	22	Use strtol() or a related function to convert a string token to an integer
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
INT05-C	revision.c	2271	21	Use strtol() or a related function to convert a string token to an integer
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
INT05-C	revision.c	2275	21	Use strtol() or a related function to convert a string token to an integer
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
INT05-C	revision.c	2278	19	Use strtol() or a related function to convert a string token to an integer
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
INT05-C	revision.c	2290	19	Use strtol() or a related function to convert a string token to an integer
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
EXP12-C	revision.c	2318	3	Do not ignore values returned by functions: get_reference
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
EXP12-C	revision.c	2322	3	Do not ignore values returned by functions: commit_list_insert
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
INT05-C	revision.c	2378	23	Use strtol() or a related function to convert a string token to an integer
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
INT05-C	revision.c	2382	23	Use strtol() or a related function to convert a string token to an integer
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL00-C	revision.c	2617	3	Const-qualify immutable objects: opts
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL00-C	revision.c	2630	2	Const-qualify immutable objects: n
MSC12-C	revision.c	2633	3	Detect and remove code that has no effect
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL01-C	revision.c	2676	2	Do not reuse variable names in subscopes: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
EXP12-C	revision.c	2709	4	Do not ignore values returned by functions: other_head_refs
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
EXP12-C	revision.c	2736	3	Do not ignore values returned by functions: for_each_glob_ref
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
EXP12-C	revision.c	2750	3	Do not ignore values returned by functions: for_each_glob_ref_in
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
EXP12-C	revision.c	2757	3	Do not ignore values returned by functions: for_each_glob_ref_in
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
EXP12-C	revision.c	2764	3	Do not ignore values returned by functions: for_each_glob_ref_in
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
DCL02-C	revision.c	2676	2	Use visually distinct identifiers: optarg
EXP12-C	revision.c	2812	2	Do not ignore values returned by functions: skip_prefix
EXP05-C	revision.c	2840	10	Do not cast away a const qualification
DCL01-C	revision.c	2944	3	Do not reuse variable names in subscopes: object
INT13-C	revision.c	2953	34	Use bitwise operators only on unsigned operands
INT13-C	revision.c	3017	35	Use bitwise operators only on unsigned operands
INT13-C	revision.c	3017	37	Use bitwise operators only on unsigned operands
EXP05-C	revision.c	3031	8	Do not cast away a const qualification
MEM01-C	revision.c	3040	2	Store a new value in pointers immediately after free()
EXP36-C	revision.c	3065	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	3068	26	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	3071	75	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	3073	2	Const-qualify immutable objects: ts
EXP36-C	revision.c	3073	47	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	3104	97	Do not reuse variable names in subscopes: commit
EXP36-C	revision.c	3108	24	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	3110	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	revision.c	3111	3	Do not ignore values returned by functions: add_decoration
DCL01-C	revision.c	3116	50	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	3123	2	Const-qualify immutable objects: orig_cnt
DCL00-C	revision.c	3124	2	Const-qualify immutable objects: cnt
DCL01-C	revision.c	3152	54	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	3173	79	Do not reuse variable names in subscopes: commit
EXP36-C	revision.c	3175	47	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	3235	72	Do not reuse variable names in subscopes: commit
MEM01-C	revision.c	3247	4	Store a new value in pointers immediately after free()
MEM34-C	revision.c	3247	4	Only free memory allocated dynamically
EXP12-C	revision.c	3249	4	Do not ignore values returned by functions: compact_treesame
DCL01-C	revision.c	3263	80	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	3379	2	Do not reuse variable names in subscopes: commit
EXP12-C	revision.c	3393	3	Do not ignore values returned by functions: commit_list_insert
DCL01-C	revision.c	3423	3	Do not reuse variable names in subscopes: commit
DCL13-C	revision.c	3437	29	Declare function parameters that are pointers to values not changed by the function as const: pack
EXP36-C	revision.c	3441	26	Do not convert pointers into more strictly aligned pointer types
INT01-C	revision.c	3447	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	revision.c	3447	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	revision.c	3447	1	Use typedefs to improve code readability
EXP36-C	revision.c	3447	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	3447	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	revision.c	3447	1	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	revision.c	3448	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	revision.c	3448	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	revision.c	3448	1	Use typedefs to improve code readability
EXP36-C	revision.c	3448	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	3448	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	revision.c	3448	1	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	revision.c	3481	22	Use bitwise operators only on unsigned operands
EXP36-C	revision.c	3492	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	3523	29	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	3532	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	3568	29	Do not convert pointers into more strictly aligned pointer types
MEM01-C	revision.c	3582	2	Store a new value in pointers immediately after free()
EXP36-C	revision.c	3598	32	Do not convert pointers into more strictly aligned pointer types
EXP12-C	revision.c	3600	2	Do not ignore values returned by functions: memset
EXP12-C	revision.c	3603	2	Do not ignore values returned by functions: memset
EXP12-C	revision.c	3604	2	Do not ignore values returned by functions: memset
EXP12-C	revision.c	3605	2	Do not ignore values returned by functions: memset
INT14-C	revision.c	3624	23	Avoid performing bitwise and arithmetic operations on the same data
EXP12-C	revision.c	3661	3	Do not ignore values returned by functions: atexit
EXP36-C	revision.c	3672	20	Do not convert pointers into more strictly aligned pointer types
DCL01-C	revision.c	3680	68	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	3732	3	Do not reuse variable names in subscopes: commit
EXP12-C	revision.c	3748	3	Do not ignore values returned by functions: for_each_packed_object
EXP36-C	revision.c	3806	40	Do not convert pointers into more strictly aligned pointer types
EXP12-C	revision.c	3814	4	Do not ignore values returned by functions: prio_queue_get
DCL00-C	revision.c	3822	2	Const-qualify immutable objects: ret
DCL01-C	revision.c	3828	59	Do not reuse variable names in subscopes: commit
MSC01-C	revision.c	3834	3	Strive for logical completeness
EXP12-C	revision.c	3845	2	Do not ignore values returned by functions: remove_duplicate_parents
DCL01-C	revision.c	3849	40	Do not reuse variable names in subscopes: commit
EXP05-C	revision.c	3908	10	Do not cast away a const qualification
DCL01-C	revision.c	3924	23	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	3931	76	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	3967	3	Const-qualify immutable objects: n
INT01-C	revision.c	4003	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	revision.c	4003	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	revision.c	4003	1	Use typedefs to improve code readability
EXP36-C	revision.c	4003	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	revision.c	4003	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	revision.c	4003	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	revision.c	4011	64	Do not reuse variable names in subscopes: commit
EXP36-C	revision.c	4016	37	Do not convert pointers into more strictly aligned pointer types
EXP11-C	revision.c	4036	9	Do not apply operators expecting one type to data of an incompatible type
DCL01-C	revision.c	4045	83	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	4058	74	Do not reuse variable names in subscopes: commit
DCL00-C	revision.c	4060	2	Const-qualify immutable objects: action
DCL01-C	revision.c	4078	64	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	4102	3	Do not reuse variable names in subscopes: commit
DCL13-C	revision.c	4156	66	Declare function parameters that are pointers to values not changed by the function as const: cb_data_unused
EXP11-C	revision.c	4192	7	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	revision.c	4200	3	Do not ignore values returned by functions: commit_list_insert
DCL01-C	revision.c	4328	81	Do not reuse variable names in subscopes: commit
DCL01-C	revision.c	4348	74	Do not reuse variable names in subscopes: commit
EXP12-C	revision.c	4354	2	Do not ignore values returned by functions: putchar
EXP12-C	run-command.c	54	3	Do not ignore values returned by functions: kill
MEM01-C	run-command.c	61	5	Store a new value in pointers immediately after free()
MEM30-C	run-command.c	61	5	Do not access freed memory
MEM34-C	run-command.c	61	5	Only free memory allocated dynamically
MEM30-C	run-command.c	73	4	Do not access freed memory
MEM34-C	run-command.c	73	4	Only free memory allocated dynamically
EXP12-C	run-command.c	80	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	run-command.c	81	2	Do not ignore values returned by functions: raise
EXP36-C	run-command.c	91	36	Do not convert pointers into more strictly aligned pointer types
EXP12-C	run-command.c	98	3	Do not ignore values returned by functions: atexit
MEM34-C	run-command.c	113	4	Only free memory allocated dynamically
DCL00-C	run-command.c	219	2	Const-qualify immutable objects: found
MEM34-C	run-command.c	220	2	Only free memory allocated dynamically
DCL00-C	run-command.c	235	2	Const-qualify immutable objects: exec_id
EXP05-C	run-command.c	235	16	Do not cast away a const qualification
DCL00-C	run-command.c	243	3	Const-qualify immutable objects: ec
EXP12-C	run-command.c	276	3	Do not ignore values returned by functions: strvec_push
EXP12-C	run-command.c	280	3	Do not ignore values returned by functions: strvec_push
EXP12-C	run-command.c	322	2	Do not ignore values returned by functions: xwrite
STR11-C	run-command.c	346	2	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	run-command.c	347	2	Do not ignore values returned by functions: xwrite
INT01-C	run-command.c	347	29	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	run-command.c	352	2	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	run-command.c	353	2	Do not ignore values returned by functions: xwrite
INT01-C	run-command.c	353	29	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	run-command.c	358	2	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	run-command.c	359	2	Do not ignore values returned by functions: xwrite
INT01-C	run-command.c	359	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	run-command.c	367	2	Const-qualify immutable objects: die_message_routine
MSC01-C	run-command.c	373	2	Strive for logical completeness
EXP12-C	run-command.c	408	2	Do not ignore values returned by functions: strvec_push
EXP12-C	run-command.c	411	3	Do not ignore values returned by functions: prepare_git_cmd
EXP12-C	run-command.c	413	3	Do not ignore values returned by functions: prepare_shell_cmd
EXP05-C	run-command.c	427	9	Do not cast away a const qualification
EXP11-C	run-command.c	455	46	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	run-command.c	455	46	Do not cast away a const qualification
EXP11-C	run-command.c	457	41	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	run-command.c	457	41	Do not cast away a const qualification
EXP11-C	run-command.c	470	46	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	run-command.c	470	46	Do not cast away a const qualification
EXP36-C	run-command.c	478	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	run-command.c	478	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	run-command.c	479	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	run-command.c	512	2	Const-qualify immutable objects: e
DCL00-C	run-command.c	514	2	Const-qualify immutable objects: e
DCL00-C	run-command.c	525	2	Const-qualify immutable objects: e
DCL00-C	run-command.c	527	2	Const-qualify immutable objects: e
DCL00-C	run-command.c	535	2	Const-qualify immutable objects: flags
INT01-C	run-command.c	602	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	run-command.c	619	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	run-command.c	837	3	Do not ignore values returned by functions: execve
INT01-C	run-command.c	865	49	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	run-command.c	870	3	Do not ignore values returned by functions: wait_or_whine
MEM34-C	run-command.c	880	2	Only free memory allocated dynamically
DCL00-C	run-command.c	978	2	Const-qualify immutable objects: ret
DCL00-C	run-command.c	987	2	Const-qualify immutable objects: ret
DCL01-C	run-command.c	1015	2	Do not reuse variable names in subscopes: async
EXP36-C	run-command.c	1015	24	Do not convert pointers into more strictly aligned pointer types
EXP12-C	run-command.c	1020	3	Do not ignore values returned by functions: sigemptyset
EXP12-C	run-command.c	1021	3	Do not ignore values returned by functions: sigaddset
INT36-C	run-command.c	1024	11	Take care when converting from pointer to integer or integer to pointer
EXP12-C	run-command.c	1028	2	Do not ignore values returned by functions: pthread_setspecific
INT36-C	run-command.c	1030	9	Take care when converting from pointer to integer or integer to pointer
DCL00-C	run-command.c	1035	2	Const-qualify immutable objects: die_message_fn
DCL01-C	run-command.c	1040	3	Do not reuse variable names in subscopes: async
EXP36-C	run-command.c	1040	44	Do not convert pointers into more strictly aligned pointer types
DCL00-C	run-command.c	1053	2	Const-qualify immutable objects: ret
EXP12-C	run-command.c	1054	2	Do not ignore values returned by functions: pthread_setspecific
INT36-C	run-command.c	1067	15	Take care when converting from pointer to integer or integer to pointer
EXP12-C	run-command.c	1128	3	Do not ignore values returned by functions: signal
EXP12-C	run-command.c	1129	3	Do not ignore values returned by functions: raise
DCL01-C	run-command.c	1135	31	Do not reuse variable names in subscopes: async
EXP12-C	run-command.c	1215	3	Do not ignore values returned by functions: pthread_key_create
EXP12-C	run-command.c	1216	3	Do not ignore values returned by functions: pthread_key_create
DCL00-C	run-command.c	1228	3	Const-qualify immutable objects: err
MSC12-C	run-command.c	1230	4	Detect and remove code that has no effect
DCL01-C	run-command.c	1250	32	Do not reuse variable names in subscopes: async
EXP11-C	run-command.c	1259	14	Do not apply operators expecting one type to data of an incompatible type
INT36-C	run-command.c	1259	14	Take care when converting from pointer to integer or integer to pointer
DCL01-C	run-command.c	1294	2	Do not reuse variable names in subscopes: error
INT13-C	run-command.c	1329	26	Use bitwise operators only on unsigned operands
INT01-C	run-command.c	1343	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	run-command.c	1354	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	run-command.c	1363	4	Const-qualify immutable objects: len
EXP36-C	run-command.c	1385	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	run-command.c	1388	2	Store a new value in pointers immediately after free()
MEM34-C	run-command.c	1388	2	Only free memory allocated dynamically
MSC12-C	run-command.c	1421	4	Detect and remove code that has no effect
EXP12-C	run-command.c	1451	3	Do not ignore values returned by functions: finish_command
DCL01-C	run-command.c	1479	2	Do not reuse variable names in subscopes: shutdown
EXP12-C	run-command.c	1510	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	run-command.c	1511	2	Do not ignore values returned by functions: raise
EXP36-C	run-command.c	1529	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	run-command.c	1531	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	run-command.c	1564	2	Do not ignore values returned by functions: strbuf_write
DCL02-C	run-command.c	1773	9	Use visually distinct identifiers: i
DCL01-C	run-command.c	1645	7	Do not reuse variable names in subscopes: i
DCL02-C	run-command.c	1773	9	Use visually distinct identifiers: i
DCL02-C	run-command.c	1773	9	Use visually distinct identifiers: i
INT13-C	run-command.c	1647	26	Use bitwise operators only on unsigned operands
DCL02-C	run-command.c	1773	9	Use visually distinct identifiers: i
DCL00-C	run-command.c	1648	4	Const-qualify immutable objects: n
DCL02-C	run-command.c	1773	9	Use visually distinct identifiers: i
DCL02-C	run-command.c	1773	9	Use visually distinct identifiers: i
DCL02-C	run-command.c	1773	9	Use visually distinct identifiers: i
DCL02-C	run-command.c	1773	9	Use visually distinct identifiers: i
INT01-C	run-command.c	1664	46	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	run-command.c	1666	3	Do not ignore values returned by functions: strbuf_write
INT01-C	run-command.c	1678	26	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	run-command.c	1713	4	Do not ignore values returned by functions: strbuf_write
EXP12-C	run-command.c	1717	4	Do not ignore values returned by functions: strbuf_write
DCL00-C	run-command.c	1740	2	Const-qualify immutable objects: output_timeout
DCL00-C	run-command.c	1741	2	Const-qualify immutable objects: spawn_cap
INT32-C	run-command.c	1766	30	Ensure that operations on signed integers do not result in overflow
DCL02-C	run-command.c	1773	9	Use visually distinct identifiers: i
DCL01-C	run-command.c	1773	9	Do not reuse variable names in subscopes: i
INT32-C	run-command.c	1783	29	Ensure that operations on signed integers do not result in overflow
EXP12-C	run-command.c	1805	2	Do not ignore values returned by functions: strvec_push
EXP12-C	run-command.c	1819	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	run-command.c	1862	2	Do not ignore values returned by functions: time
MSC05-C	run-command.c	1863	13	Do not manipulate time_t typed values directly
EXP12-C	run-command.c	1889	4	Do not ignore values returned by functions: time
MSC05-C	run-command.c	1890	12	Do not manipulate time_t typed values directly
INT14-C	run-command.c	1932	15	Avoid performing bitwise and arithmetic operations on the same data
MSC01-C	send-pack.c	27	2	Strive for logical completeness
EXP12-C	send-pack.c	53	2	Do not ignore values returned by functions: _IO_putc
EXP12-C	send-pack.c	73	2	Do not ignore values returned by functions: strvec_push
EXP12-C	send-pack.c	74	2	Do not ignore values returned by functions: strvec_push
EXP12-C	send-pack.c	75	2	Do not ignore values returned by functions: strvec_push
EXP12-C	send-pack.c	76	2	Do not ignore values returned by functions: strvec_push
INT01-C	send-pack.c	101	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	send-pack.c	103	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	send-pack.c	122	4	Const-qualify immutable objects: n
MEM01-C	send-pack.c	127	3	Store a new value in pointers immediately after free()
MEM34-C	send-pack.c	127	3	Only free memory allocated dynamically
MSC12-C	send-pack.c	180	4	Detect and remove code that has no effect
INT07-C	send-pack.c	184	8	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	send-pack.c	197	6	Do not convert pointers into more strictly aligned pointer types
EXP36-C	send-pack.c	203	6	Do not convert pointers into more strictly aligned pointer types
INT07-C	send-pack.c	211	10	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	send-pack.c	229	4	Detect and remove code that has no effect
INT07-C	send-pack.c	236	9	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	send-pack.c	271	12	Do not convert pointers into more strictly aligned pointer types
EXP36-C	send-pack.c	281	22	Do not convert pointers into more strictly aligned pointer types
EXP12-C	send-pack.c	291	2	Do not ignore values returned by functions: for_each_commit_graft
DCL01-C	send-pack.c	297	51	Do not reuse variable names in subscopes: ref
DCL01-C	send-pack.c	344	2	Do not reuse variable names in subscopes: ref
MEM34-C	send-pack.c	358	3	Only free memory allocated dynamically
EXP05-C	send-pack.c	386	14	Do not cast away a const qualification
MEM01-C	send-pack.c	391	2	Store a new value in pointers immediately after free()
MEM34-C	send-pack.c	391	2	Only free memory allocated dynamically
DCL00-C	send-pack.c	407	3	Const-qualify immutable objects: ch
INT13-C	send-pack.c	408	7	Use bitwise operators only on unsigned operands
DCL01-C	send-pack.c	423	2	Do not reuse variable names in subscopes: ref
DCL00-C	send-pack.c	424	2	Const-qualify immutable objects: len
INT01-C	send-pack.c	424	33	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	send-pack.c	434	2	Do not ignore values returned by functions: strvec_push
DCL00-C	send-pack.c	441	3	Const-qualify immutable objects: read_len
DCL00-C	send-pack.c	470	2	Const-qualify immutable objects: out
DCL01-C	send-pack.c	473	2	Do not reuse variable names in subscopes: ref
EXP12-C	send-pack.c	500	2	Do not ignore values returned by functions: git_config_get_bool
EXP12-C	send-pack.c	507	2	Do not ignore values returned by functions: git_config_get_bool
MSC12-C	send-pack.c	607	5	Detect and remove code that has no effect
EXP12-C	send-pack.c	675	3	Do not ignore values returned by functions: memset
EXP12-C	send-pack.c	707	5	Do not ignore values returned by functions: finish_async
MSC12-C	send-pack.c	729	4	Detect and remove code that has no effect
STR11-C	sequencer.c	43	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	sequencer.c	44	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	sequencer.c	197	69	Do not reuse variable names in subscopes: ref
EXP36-C	sequencer.c	201	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	207	2	Do not ignore values returned by functions: read_ref
EXP36-C	sequencer.c	214	29	Do not convert pointers into more strictly aligned pointer types
EXP05-C	sequencer.c	241	8	Do not cast away a const qualification
DCL00-C	sequencer.c	251	3	Const-qualify immutable objects: ret
INT07-C	sequencer.c	259	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	sequencer.c	318	36	Use only explicitly signed or unsigned char type for numeric values
INT01-C	sequencer.c	332	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	sequencer.c	364	4	Do not reuse variable names in subscopes: eol
INT07-C	sequencer.c	366	10	Use only explicitly signed or unsigned char type for numeric values
INT01-C	sequencer.c	381	16	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	sequencer.c	397	2	Strive for logical completeness
DCL01-C	sequencer.c	415	53	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	420	39	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	437	41	Do not reuse variable names in subscopes: commit
ENV30-C	sequencer.c	448	14	Do not modify the string returned by getenv()
EXP12-C	sequencer.c	457	3	Do not ignore values returned by functions: refs_delete_ref
DCL00-C	sequencer.c	490	2	Const-qualify immutable objects: msg_fd
MSC12-C	sequencer.c	494	3	Detect and remove code that has no effect
MSC12-C	sequencer.c	499	3	Detect and remove code that has no effect
DCL00-C	sequencer.c	512	2	Const-qualify immutable objects: orig_len
INT01-C	sequencer.c	521	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	521	47	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	522	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	522	50	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	sequencer.c	524	22	Use only explicitly signed or unsigned char type for numeric values
INT01-C	sequencer.c	527	56	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	sequencer.c	527	56	Ensure that return values are compared against the proper type
MSC12-C	sequencer.c	543	2	Detect and remove code that has no effect
EXP12-C	sequencer.c	575	2	Do not ignore values returned by functions: repo_read_index
MSC12-C	sequencer.c	589	3	Detect and remove code that has no effect
INT01-C	sequencer.c	633	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	sequencer.c	679	2	Do not ignore values returned by functions: repo_read_index
INT01-C	sequencer.c	693	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	sequencer.c	694	3	Do not ignore values returned by functions: parse_merge_opt
EXP12-C	sequencer.c	697	3	Do not ignore values returned by functions: memset
INT13-C	sequencer.c	724	23	Use bitwise operators only on unsigned operands
MSC12-C	sequencer.c	743	4	Detect and remove code that has no effect
DCL01-C	sequencer.c	781	2	Do not reuse variable names in subscopes: eol
EXP12-C	sequencer.c	788	4	Do not ignore values returned by functions: unlink
INT07-C	sequencer.c	798	18	Use only explicitly signed or unsigned char type for numeric values
INT07-C	sequencer.c	806	18	Use only explicitly signed or unsigned char type for numeric values
INT07-C	sequencer.c	814	18	Use only explicitly signed or unsigned char type for numeric values
INT07-C	sequencer.c	841	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	sequencer.c	845	7	Use only explicitly signed or unsigned char type for numeric values
DCL05-C	sequencer.c	872	1	Use typedefs to improve code readability
INT01-C	sequencer.c	892	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	sequencer.c	944	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	sequencer.c	945	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	sequencer.c	946	2	Do not ignore values returned by functions: strvec_pushf
MEM01-C	sequencer.c	947	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	947	2	Only free memory allocated dynamically
MEM01-C	sequencer.c	948	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	948	2	Only free memory allocated dynamically
MEM34-C	sequencer.c	949	2	Only free memory allocated dynamically
INT01-C	sequencer.c	971	16	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	sequencer.c	982	1	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	sequencer.c	1054	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	sequencer.c	1064	2	Do not ignore values returned by functions: strvec_push
DCL01-C	sequencer.c	1103	2	Do not reuse variable names in subscopes: eol
INT01-C	sequencer.c	1107	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	1108	42	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	1114	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	1144	46	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	1159	46	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	sequencer.c	1229	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	sequencer.c	1230	2	Do not ignore values returned by functions: write_in_full
EXP12-C	sequencer.c	1233	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	sequencer.c	1246	3	Do not ignore values returned by functions: copy_note_for_rewrite
EXP12-C	sequencer.c	1249	2	Do not ignore values returned by functions: run_rewrite_hook
DCL01-C	sequencer.c	1254	24	Do not reuse variable names in subscopes: commit
STR11-C	sequencer.c	1276	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	sequencer.c	1289	1	Do not specify the dimension of a character array initialized with a string literal
DCL00-C	sequencer.c	1305	2	Const-qualify immutable objects: config_exists
MEM01-C	sequencer.c	1307	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	1307	2	Only free memory allocated dynamically
MEM01-C	sequencer.c	1308	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	1308	2	Only free memory allocated dynamically
DCL01-C	sequencer.c	1323	2	Do not reuse variable names in subscopes: commit
EXP12-C	sequencer.c	1365	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	sequencer.c	1392	3	Do not ignore values returned by functions: log_tree_commit
DCL01-C	sequencer.c	1436	2	Do not reuse variable names in subscopes: tree
EXP12-C	sequencer.c	1463	4	Do not ignore values returned by functions: find_commit_subject
EXP12-C	sequencer.c	1478	3	Do not ignore values returned by functions: commit_list_insert
EXP05-C	sequencer.c	1556	9	Do not cast away a const qualification
EXP05-C	sequencer.c	1558	9	Do not cast away a const qualification
MSC12-C	sequencer.c	1578	4	Detect and remove code that has no effect
MEM01-C	sequencer.c	1585	3	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	1585	3	Only free memory allocated dynamically
MEM34-C	sequencer.c	1586	3	Only free memory allocated dynamically
EXP12-C	sequencer.c	1601	2	Do not ignore values returned by functions: run_commit_hook
MEM34-C	sequencer.c	1609	2	Only free memory allocated dynamically
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL01-C	sequencer.c	1631	3	Do not reuse variable names in subscopes: oid
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
EXP12-C	sequencer.c	1643	4	Do not ignore values returned by functions: refs_delete_ref
EXP12-C	sequencer.c	1645	4	Do not ignore values returned by functions: unlink
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL01-C	sequencer.c	1662	52	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	1691	25	Do not reuse variable names in subscopes: commit
STR11-C	sequencer.c	1798	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	sequencer.c	1799	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	sequencer.c	1800	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	sequencer.c	1801	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	sequencer.c	1802	1	Do not specify the dimension of a character array initialized with a string literal
INT01-C	sequencer.c	1817	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	1874	37	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	1890	37	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	1901	38	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	sequencer.c	1902	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	1902	2	Only free memory allocated dynamically
EXP12-C	sequencer.c	1952	4	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	1955	3	Do not ignore values returned by functions: unlink
DCL01-C	sequencer.c	1963	22	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	1974	3	Do not reuse variable names in subscopes: eol
DCL02-C	sequencer.c	3947	3	Use visually distinct identifiers: body
DCL01-C	sequencer.c	1993	3	Do not reuse variable names in subscopes: body
DCL02-C	sequencer.c	3947	3	Use visually distinct identifiers: body
DCL02-C	sequencer.c	3947	3	Use visually distinct identifiers: body
DCL02-C	sequencer.c	3947	3	Use visually distinct identifiers: body
EXP12-C	sequencer.c	2002	3	Do not ignore values returned by functions: find_commit_subject
DCL02-C	sequencer.c	3947	3	Use visually distinct identifiers: body
DCL02-C	sequencer.c	3947	3	Use visually distinct identifiers: body
DCL02-C	sequencer.c	3947	3	Use visually distinct identifiers: body
EXP12-C	sequencer.c	2026	2	Do not ignore values returned by functions: find_commit_subject
DCL01-C	sequencer.c	2067	3	Do not reuse variable names in subscopes: eol
EXP12-C	sequencer.c	2078	3	Do not ignore values returned by functions: unlink
DCL01-C	sequencer.c	2110	46	Do not reuse variable names in subscopes: commit
DCL00-C	sequencer.c	2137	2	Const-qualify immutable objects: command
DCL01-C	sequencer.c	2138	2	Do not reuse variable names in subscopes: commit
EXP12-C	sequencer.c	2285	4	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	2289	4	Do not ignore values returned by functions: unlink
INT13-C	sequencer.c	2309	7	Use bitwise operators only on unsigned operands
EXP12-C	sequencer.c	2318	3	Do not ignore values returned by functions: commit_list_insert
EXP12-C	sequencer.c	2319	3	Do not ignore values returned by functions: commit_list_insert
INT13-C	sequencer.c	2320	7	Use bitwise operators only on unsigned operands
MSC12-C	sequencer.c	2346	3	Detect and remove code that has no effect
EXP12-C	sequencer.c	2351	3	Do not ignore values returned by functions: repo_rerere
EXP12-C	sequencer.c	2364	3	Do not ignore values returned by functions: refs_delete_ref
EXP12-C	sequencer.c	2366	3	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	2367	3	Do not ignore values returned by functions: unlink
INT13-C	sequencer.c	2382	22	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	2381	46	Use bitwise operators only on unsigned operands
EXP12-C	sequencer.c	2390	3	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	2391	3	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	2392	3	Do not ignore values returned by functions: unlink
MEM01-C	sequencer.c	2399	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	2399	2	Only free memory allocated dynamically
DCL00-C	sequencer.c	2424	2	Const-qualify immutable objects: index_fd
DCL01-C	sequencer.c	2424	2	Do not reuse variable names in subscopes: index_fd
EXP12-C	sequencer.c	2430	2	Do not ignore values returned by functions: refresh_index
INT13-C	sequencer.c	2430	39	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	2434	24	Use bitwise operators only on unsigned operands
DCL01-C	sequencer.c	2449	42	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	2456	60	Do not reuse variable names in subscopes: todo_list
EXP36-C	sequencer.c	2458	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	sequencer.c	2463	49	Do not reuse variable names in subscopes: todo_list
INT07-C	sequencer.c	2476	10	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	sequencer.c	2482	47	Do not reuse variable names in subscopes: eol
EXP05-C	sequencer.c	2562	23	Do not cast away a const qualification
INT07-C	sequencer.c	2564	22	Use only explicitly signed or unsigned char type for numeric values
INT07-C	sequencer.c	2568	22	Use only explicitly signed or unsigned char type for numeric values
DCL13-C	sequencer.c	2581	51	Declare function parameters that are pointers to values not changed by the function as const: r
DCL01-C	sequencer.c	2609	23	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	2618	3	Do not reuse variable names in subscopes: eol
DCL01-C	sequencer.c	2648	45	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	2659	51	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	2659	66	Do not reuse variable names in subscopes: index
DCL01-C	sequencer.c	2665	52	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	2665	67	Do not reuse variable names in subscopes: index
DCL01-C	sequencer.c	2670	51	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	2670	66	Do not reuse variable names in subscopes: index
DCL01-C	sequencer.c	2694	2	Do not reuse variable names in subscopes: eol
MSC12-C	sequencer.c	2702	4	Detect and remove code that has no effect
EXP12-C	sequencer.c	2739	2	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	2747	2	Do not ignore values returned by functions: sequencer_remove_state
DCL01-C	sequencer.c	2750	56	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	2761	28	Do not reuse variable names in subscopes: todo_list
DCL00-C	sequencer.c	2784	3	Const-qualify immutable objects: valid
EXP36-C	sequencer.c	2828	29	Do not convert pointers into more strictly aligned pointer types
INT01-C	sequencer.c	2859	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	2859	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	2859	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	2859	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	2859	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	2859	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	2859	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	2859	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	2859	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	sequencer.c	2859	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	sequencer.c	2887	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	sequencer.c	2890	3	Do not ignore values returned by functions: skip_prefix
INT01-C	sequencer.c	3011	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	3036	21	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	sequencer.c	3064	54	Do not reuse variable names in subscopes: todo_list
DCL00-C	sequencer.c	3067	2	Const-qualify immutable objects: command
DCL01-C	sequencer.c	3071	2	Do not reuse variable names in subscopes: commit
DCL00-C	sequencer.c	3106	2	Const-qualify immutable objects: advise_skip
MSC12-C	sequencer.c	3127	3	Detect and remove code that has no effect
MSC12-C	sequencer.c	3154	3	Detect and remove code that has no effect
MSC12-C	sequencer.c	3242	3	Detect and remove code that has no effect
MSC12-C	sequencer.c	3249	3	Detect and remove code that has no effect
MSC12-C	sequencer.c	3254	3	Detect and remove code that has no effect
EXP12-C	sequencer.c	3275	2	Do not ignore values returned by functions: sequencer_get_last_command
DCL01-C	sequencer.c	3337	40	Do not reuse variable names in subscopes: todo_list
INT01-C	sequencer.c	3355	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	sequencer.c	4392	2	Use visually distinct identifiers: fd
DCL00-C	sequencer.c	3362	3	Const-qualify immutable objects: fd
DCL01-C	sequencer.c	3362	3	Do not reuse variable names in subscopes: fd
DCL02-C	sequencer.c	4392	2	Use visually distinct identifiers: fd
DCL02-C	sequencer.c	4392	2	Use visually distinct identifiers: fd
DCL02-C	sequencer.c	4392	2	Use visually distinct identifiers: fd
INT13-C	sequencer.c	3384	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3387	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3390	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3393	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3396	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3399	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3402	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3405	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3410	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3415	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3418	7	Use bitwise operators only on unsigned operands
INT01-C	sequencer.c	3422	17	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	sequencer.c	3423	8	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3428	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3434	7	Use bitwise operators only on unsigned operands
DCL01-C	sequencer.c	3441	24	Do not reuse variable names in subscopes: commit
EXP12-C	sequencer.c	3450	2	Do not ignore values returned by functions: oid_to_hex_r
INT13-C	sequencer.c	3453	6	Use bitwise operators only on unsigned operands
EXP12-C	sequencer.c	3456	2	Do not ignore values returned by functions: memset
INT13-C	sequencer.c	3466	7	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	3468	7	Use bitwise operators only on unsigned operands
EXP12-C	sequencer.c	3477	3	Do not ignore values returned by functions: find_commit_subject
INT13-C	sequencer.c	3478	7	Use bitwise operators only on unsigned operands
DCL01-C	sequencer.c	3500	23	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	3543	26	Do not reuse variable names in subscopes: commit
EXP12-C	sequencer.c	3551	2	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	3566	2	Do not ignore values returned by functions: strvec_push
DCL00-C	sequencer.c	3604	2	Const-qualify immutable objects: ap
DCL00-C	sequencer.c	3606	2	Const-qualify immutable objects: fd
MSC12-C	sequencer.c	3614	3	Detect and remove code that has no effect
EXP12-C	sequencer.c	3619	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	sequencer.c	3621	2	Do not ignore values returned by functions: __builtin_va_end
MSC12-C	sequencer.c	3624	3	Detect and remove code that has no effect
MSC12-C	sequencer.c	3656	3	Detect and remove code that has no effect
MSC12-C	sequencer.c	3659	3	Detect and remove code that has no effect
MSC12-C	sequencer.c	3664	3	Detect and remove code that has no effect
DCL00-C	sequencer.c	3695	2	Const-qualify immutable objects: ap
EXP12-C	sequencer.c	3698	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	sequencer.c	3707	2	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	sequencer.c	3715	2	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	3742	2	Do not reuse variable names in subscopes: tree
DCL01-C	sequencer.c	3765	3	Do not reuse variable names in subscopes: commit
EXP05-C	sequencer.c	3818	7	Do not cast away a const qualification
DCL01-C	sequencer.c	3827	22	Do not reuse variable names in subscopes: commit
INT01-C	sequencer.c	3866	11	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	sequencer.c	6206	3	Use visually distinct identifiers: p
DCL01-C	sequencer.c	3918	3	Do not reuse variable names in subscopes: p
DCL02-C	sequencer.c	6206	3	Use visually distinct identifiers: p
DCL02-C	sequencer.c	6206	3	Use visually distinct identifiers: p
DCL02-C	sequencer.c	6206	3	Use visually distinct identifiers: p
DCL02-C	sequencer.c	6206	3	Use visually distinct identifiers: p
INT13-C	sequencer.c	3938	13	Use bitwise operators only on unsigned operands
EXP12-C	sequencer.c	3955	3	Do not ignore values returned by functions: write_author_script
EXP12-C	sequencer.c	3956	3	Do not ignore values returned by functions: find_commit_subject
MSC12-C	sequencer.c	3961	4	Detect and remove code that has no effect
EXP12-C	sequencer.c	3970	3	Do not ignore values returned by functions: write_author_script
MSC12-C	sequencer.c	3987	4	Detect and remove code that has no effect
EXP12-C	sequencer.c	4013	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4014	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4018	4	Do not ignore values returned by functions: strvec_push
INT01-C	sequencer.c	4019	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	sequencer.c	4020	5	Do not ignore values returned by functions: strvec_pushf
INT13-C	sequencer.c	4023	15	Use bitwise operators only on unsigned operands
EXP12-C	sequencer.c	4027	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4028	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4029	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4030	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4031	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4039	4	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4043	3	Do not ignore values returned by functions: refs_delete_ref
EXP12-C	sequencer.c	4067	2	Do not ignore values returned by functions: write_message
EXP12-C	sequencer.c	4069	2	Do not ignore values returned by functions: write_message
EXP12-C	sequencer.c	4073	2	Do not ignore values returned by functions: repo_read_index
MSC12-C	sequencer.c	4097	3	Detect and remove code that has no effect
INT13-C	sequencer.c	4129	20	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	4132	20	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	4132	44	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	4132	33	Use bitwise operators only on unsigned operands
EXP36-C	sequencer.c	4181	39	Do not convert pointers into more strictly aligned pointer types
MEM34-C	sequencer.c	4189	2	Only free memory allocated dynamically
DCL01-C	sequencer.c	4203	25	Do not reuse variable names in subscopes: todo_list
EXP12-C	sequencer.c	4209	2	Do not ignore values returned by functions: sequencer_get_update_refs_state
INT01-C	sequencer.c	4216	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	sequencer.c	4219	3	Do not reuse variable names in subscopes: ref
DCL00-C	sequencer.c	4220	3	Const-qualify immutable objects: reflen
EXP36-C	sequencer.c	4221	55	Do not convert pointers into more strictly aligned pointer types
INT01-C	sequencer.c	4234	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	4246	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	4246	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	4246	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	4265	27	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	sequencer.c	4266	4	Do not reuse variable names in subscopes: ref
INT01-C	sequencer.c	4268	24	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	sequencer.c	4268	24	Ensure that return values are compared against the proper type
EXP36-C	sequencer.c	4299	40	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	4306	2	Do not ignore values returned by functions: write_update_refs_state
EXP36-C	sequencer.c	4324	39	Do not convert pointers into more strictly aligned pointer types
INT13-C	sequencer.c	4331	7	Use bitwise operators only on unsigned operands
DCL01-C	sequencer.c	4362	45	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	4377	57	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	4391	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	sequencer.c	4395	2	Do not ignore values returned by functions: refresh_index
EXP12-C	sequencer.c	4443	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4444	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4445	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4455	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4456	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4457	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4458	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4459	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4460	3	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4491	2	Do not ignore values returned by functions: unlink
INT13-C	sequencer.c	4518	48	Use bitwise operators only on unsigned operands
INT13-C	sequencer.c	4518	30	Use bitwise operators only on unsigned operands
EXP12-C	sequencer.c	4525	3	Do not ignore values returned by functions: apply_autostash
EXP12-C	sequencer.c	4526	3	Do not ignore values returned by functions: sequencer_remove_state
DCL01-C	sequencer.c	4536	2	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	4552	25	Do not reuse variable names in subscopes: todo_list
INT01-C	sequencer.c	4561	36	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	sequencer.c	4575	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	sequencer.c	4587	22	Do not reuse variable names in subscopes: todo_list
EXP06-C	sequencer.c	4594	3	Operands to the sizeof operator should not contain side effects
EXP06-C	sequencer.c	4594	3	Operands to the sizeof operator should not contain side effects
EXP06-C	sequencer.c	4594	3	Operands to the sizeof operator should not contain side effects
EXP06-C	sequencer.c	4594	3	Operands to the sizeof operator should not contain side effects
EXP06-C	sequencer.c	4594	3	Operands to the sizeof operator should not contain side effects
EXP06-C	sequencer.c	4594	3	Operands to the sizeof operator should not contain side effects
EXP12-C	sequencer.c	4624	4	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	4625	4	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	4626	4	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	4627	4	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	4628	4	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	4629	4	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	4630	4	Do not ignore values returned by functions: delete_ref
DCL01-C	sequencer.c	4658	5	Do not reuse variable names in subscopes: commit
INT13-C	sequencer.c	4695	16	Use bitwise operators only on unsigned operands
EXP05-C	sequencer.c	4700	23	Do not cast away a const qualification
DCL00-C	sequencer.c	4701	4	Const-qualify immutable objects: saved
INT07-C	sequencer.c	4705	16	Use only explicitly signed or unsigned char type for numeric values
INT07-C	sequencer.c	4707	16	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	sequencer.c	4733	4	Do not reuse variable names in subscopes: ref
DCL01-C	sequencer.c	4765	3	Do not reuse variable names in subscopes: head_ref
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL01-C	sequencer.c	4776	4	Do not reuse variable names in subscopes: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
DCL02-C	sequencer.c	6059	2	Use visually distinct identifiers: res
EXP12-C	sequencer.c	4817	4	Do not ignore values returned by functions: memset
EXP12-C	sequencer.c	4829	5	Do not ignore values returned by functions: log_tree_diff_flush
EXP12-C	sequencer.c	4842	4	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4843	4	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4844	4	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4846	4	Do not ignore values returned by functions: run_command
EXP12-C	sequencer.c	4855	5	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4856	5	Do not ignore values returned by functions: strvec_push
EXP12-C	sequencer.c	4858	5	Do not ignore values returned by functions: run_command
EXP12-C	sequencer.c	4861	3	Do not ignore values returned by functions: apply_autostash
EXP12-C	sequencer.c	4894	2	Do not ignore values returned by functions: strvec_push
DCL01-C	sequencer.c	4914	24	Do not reuse variable names in subscopes: todo_list
INT13-C	sequencer.c	4916	35	Use bitwise operators only on unsigned operands
EXP12-C	sequencer.c	4953	5	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	4954	5	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	4955	5	Do not ignore values returned by functions: unlink
INT13-C	sequencer.c	4997	23	Use bitwise operators only on unsigned operands
DCL01-C	sequencer.c	5003	5	Do not reuse variable names in subscopes: commit
EXP12-C	sequencer.c	5038	2	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	5039	2	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	5040	2	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	5042	3	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	5043	3	Do not ignore values returned by functions: unlink
EXP12-C	sequencer.c	5050	3	Do not ignore values returned by functions: unlink
DCL01-C	sequencer.c	5059	2	Do not reuse variable names in subscopes: todo_list
EXP12-C	sequencer.c	5075	4	Do not ignore values returned by functions: unlink
DCL01-C	sequencer.c	5137	2	Do not reuse variable names in subscopes: todo_list
MSC12-C	sequencer.c	5141	2	Detect and remove code that has no effect
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL01-C	sequencer.c	5146	3	Do not reuse variable names in subscopes: oid
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL02-C	sequencer.c	6058	2	Use visually distinct identifiers: oid
DCL00-C	sequencer.c	5155	5	Const-qualify immutable objects: type
DCL00-C	sequencer.c	5210	2	Const-qualify immutable objects: no_dup_sob
DCL00-C	sequencer.c	5233	3	Const-qualify immutable objects: len
INT01-C	sequencer.c	5241	18	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	sequencer.c	5241	18	Ensure that return values are compared against the proper type
INT01-C	sequencer.c	5247	30	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	sequencer.c	5279	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	sequencer.c	5279	6	Do not cast away a const qualification
EXP11-C	sequencer.c	5280	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	sequencer.c	5280	6	Do not cast away a const qualification
DCL01-C	sequencer.c	5299	2	Do not reuse variable names in subscopes: labels_entry
DCL01-C	sequencer.c	5300	2	Do not reuse variable names in subscopes: string_entry
EXP36-C	sequencer.c	5304	27	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	5328	3	Do not ignore values returned by functions: repo_find_unique_abbrev_r
DCL02-C	sequencer.c	6184	2	Use visually distinct identifiers: i
DCL01-C	sequencer.c	5335	4	Do not reuse variable names in subscopes: i
INT01-C	sequencer.c	5335	25	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	sequencer.c	5337	4	Do not ignore values returned by functions: oid_to_hex_r
DCL02-C	sequencer.c	6184	2	Use visually distinct identifiers: i
DCL02-C	sequencer.c	6184	2	Use visually distinct identifiers: i
DCL00-C	sequencer.c	5339	5	Const-qualify immutable objects: save
INT07-C	sequencer.c	5340	10	Use only explicitly signed or unsigned char type for numeric values
DCL02-C	sequencer.c	6184	2	Use visually distinct identifiers: i
INT13-C	sequencer.c	5361	27	Use bitwise operators only on unsigned operands
INT01-C	sequencer.c	5364	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5364	43	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5374	17	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	sequencer.c	5374	17	Ensure that return values are compared against the proper type
DCL00-C	sequencer.c	5383	4	Const-qualify immutable objects: len
DCL00-C	sequencer.c	5398	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	sequencer.c	5398	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	sequencer.c	5402	2	Const-qualify immutable objects: flex_array_len_
EXP36-C	sequencer.c	5402	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	5404	2	Do not ignore values returned by functions: oidmap_put
DCL00-C	sequencer.c	5413	2	Const-qualify immutable objects: keep_empty
DCL00-C	sequencer.c	5415	2	Const-qualify immutable objects: root_with_onto
DCL01-C	sequencer.c	5421	2	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	5424	2	Do not reuse variable names in subscopes: interesting
DCL00-C	sequencer.c	5428	2	Const-qualify immutable objects: abbr
DCL00-C	sequencer.c	5442	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	sequencer.c	5442	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	5444	3	Do not ignore values returned by functions: oidmap_put
DCL00-C	sequencer.c	5446	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	sequencer.c	5446	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	5464	3	Do not ignore values returned by functions: oidset_insert
DCL00-C	sequencer.c	5491	4	Const-qualify immutable objects: flex_array_len_
EXP36-C	sequencer.c	5491	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	5493	4	Do not ignore values returned by functions: oidmap_put
DCL00-C	sequencer.c	5533	3	Const-qualify immutable objects: flex_array_len_
EXP36-C	sequencer.c	5533	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	5535	3	Do not ignore values returned by functions: oidmap_put
EXP36-C	sequencer.c	5576	21	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	5585	4	Do not ignore values returned by functions: commit_list_insert
EXP36-C	sequencer.c	5600	22	Do not convert pointers into more strictly aligned pointer types
EXP36-C	sequencer.c	5620	22	Do not convert pointers into more strictly aligned pointer types
EXP36-C	sequencer.c	5624	22	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	5628	4	Do not ignore values returned by functions: oidset_insert
DCL01-C	sequencer.c	5655	2	Do not reuse variable names in subscopes: commit
DCL00-C	sequencer.c	5656	2	Const-qualify immutable objects: keep_empty
DCL00-C	sequencer.c	5658	2	Const-qualify immutable objects: rebase_merges
DCL00-C	sequencer.c	5659	2	Const-qualify immutable objects: reapply_cherry_picks
EXP12-C	sequencer.c	5675	2	Do not ignore values returned by functions: git_config_get_string
MEM34-C	sequencer.c	5677	3	Only free memory allocated dynamically
MEM01-C	sequencer.c	5681	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	5681	2	Only free memory allocated dynamically
DCL01-C	sequencer.c	5731	59	Do not reuse variable names in subscopes: todo_list
EXP36-C	sequencer.c	5739	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	sequencer.c	5740	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	sequencer.c	5741	3	Const-qualify immutable objects: command_len
INT01-C	sequencer.c	5751	30	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	sequencer.c	5768	3	Const-qualify immutable objects: command
INT01-C	sequencer.c	5770	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5770	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5770	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	sequencer.c	5770	4	Do not convert pointers into more strictly aligned pointer types
INT01-C	sequencer.c	5771	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5771	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5772	7	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	sequencer.c	5777	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	sequencer.c	5786	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5786	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5786	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	sequencer.c	5786	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	sequencer.c	5787	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5787	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5788	6	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	sequencer.c	5791	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	5791	2	Only free memory allocated dynamically
DCL13-C	sequencer.c	5798	52	Declare function parameters that are pointers to values not changed by the function as const: r
DCL01-C	sequencer.c	5798	73	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	5857	69	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	5877	25	Do not reuse variable names in subscopes: todo_list
MSC12-C	sequencer.c	5907	4	Detect and remove code that has no effect
INT01-C	sequencer.c	5911	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5911	3	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	sequencer.c	5928	2	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	5932	57	Do not reuse variable names in subscopes: commit
DCL01-C	sequencer.c	5935	2	Do not reuse variable names in subscopes: decoration
DCL01-C	sequencer.c	5936	2	Do not reuse variable names in subscopes: head_ref
DCL00-C	sequencer.c	5944	3	Const-qualify immutable objects: base_offset
INT01-C	sequencer.c	5955	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5955	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5955	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5955	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5955	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5955	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5955	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5955	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	5955	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	sequencer.c	5955	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	5959	3	Do not ignore values returned by functions: memset
DCL01-C	sequencer.c	5991	64	Do not reuse variable names in subscopes: todo_list
DCL01-C	sequencer.c	5997	2	Do not reuse variable names in subscopes: decoration_filter
EXP36-C	sequencer.c	6008	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	6010	2	Do not ignore values returned by functions: string_list_append
INT01-C	sequencer.c	6017	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	6017	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	6017	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	6017	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	6017	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	6017	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	6017	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	6017	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sequencer.c	6017	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	sequencer.c	6017	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	6025	4	Do not ignore values returned by functions: add_decorations_to_list
DCL01-C	sequencer.c	6052	25	Do not reuse variable names in subscopes: todo_list
EXP12-C	sequencer.c	6061	2	Do not ignore values returned by functions: repo_find_unique_abbrev_r
INT01-C	sequencer.c	6063	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	sequencer.c	6063	15	Ensure that return values are compared against the proper type
EXP12-C	sequencer.c	6080	3	Do not ignore values returned by functions: apply_autostash
EXP12-C	sequencer.c	6081	3	Do not ignore values returned by functions: sequencer_remove_state
EXP12-C	sequencer.c	6091	3	Do not ignore values returned by functions: apply_autostash
EXP12-C	sequencer.c	6092	3	Do not ignore values returned by functions: sequencer_remove_state
EXP12-C	sequencer.c	6096	3	Do not ignore values returned by functions: apply_autostash
EXP12-C	sequencer.c	6097	3	Do not ignore values returned by functions: sequencer_remove_state
EXP12-C	sequencer.c	6102	3	Do not ignore values returned by functions: checkout_onto
EXP11-C	sequencer.c	6158	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	sequencer.c	6158	6	Do not cast away a const qualification
EXP11-C	sequencer.c	6159	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	sequencer.c	6159	6	Do not cast away a const qualification
INT01-C	sequencer.c	6164	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	sequencer.c	6164	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	sequencer.c	6164	1	Use typedefs to improve code readability
EXP36-C	sequencer.c	6164	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	sequencer.c	6164	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	sequencer.c	6164	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	sequencer.c	6181	50	Do not reuse variable names in subscopes: todo_list
EXP36-C	sequencer.c	6200	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	sequencer.c	6201	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	sequencer.c	6202	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	6222	3	Do not ignore values returned by functions: repo_parse_commit
EXP12-C	sequencer.c	6224	3	Do not ignore values returned by functions: find_commit_subject
EXP12-C	sequencer.c	6225	3	Do not ignore values returned by functions: format_subject
DCL00-C	sequencer.c	6282	4	Const-qualify immutable objects: flex_array_len_
EXP36-C	sequencer.c	6282	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sequencer.c	6286	4	Do not ignore values returned by functions: hashmap_put
DCL00-C	sequencer.c	6294	4	Const-qualify immutable objects: command
EXP36-C	sequencer.c	6305	5	Do not convert pointers into more strictly aligned pointer types
MEM01-C	sequencer.c	6317	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	6317	2	Only free memory allocated dynamically
MEM01-C	sequencer.c	6318	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	6318	2	Only free memory allocated dynamically
MEM01-C	sequencer.c	6321	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	6321	2	Only free memory allocated dynamically
DCL01-C	sequencer.c	6355	2	Do not reuse variable names in subscopes: ref
EXP36-C	sequencer.c	6368	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	sequencer.c	6394	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	6394	2	Only free memory allocated dynamically
MEM01-C	sequencer.c	6395	2	Store a new value in pointers immediately after free()
MEM34-C	sequencer.c	6395	2	Only free memory allocated dynamically
DCL13-C	serve.c	14	48	Declare function parameters that are pointers to values not changed by the function as const: r
DCL13-C	serve.c	15	23	Declare function parameters that are pointers to values not changed by the function as const: value
DCL13-C	serve.c	20	47	Declare function parameters that are pointers to values not changed by the function as const: r
DCL13-C	serve.c	36	54	Declare function parameters that are pointers to values not changed by the function as const: r
DCL13-C	serve.c	47	52	Declare function parameters that are pointers to values not changed by the function as const: r
DCL13-C	serve.c	59	51	Declare function parameters that are pointers to values not changed by the function as const: r
INT01-C	serve.c	149	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	serve.c	180	18	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	serve.c	258	3	Strive for logical completeness
EXP12-C	serve.c	269	4	Do not ignore values returned by functions: packet_reader_read
EXP12-C	serve.c	291	4	Do not ignore values returned by functions: packet_reader_read
EXP12-C	serve.c	323	3	Do not ignore values returned by functions: process_request
DCL00-C	server-info.c	33	2	Const-qualify immutable objects: ap
EXP12-C	server-info.c	36	2	Do not ignore values returned by functions: __builtin_va_start
INT01-C	server-info.c	51	9	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	server-info.c	58	2	Do not ignore values returned by functions: __builtin_va_end
DCL05-C	server-info.c	68	1	Use typedefs to improve code readability
EXP12-C	server-info.c	83	2	Do not ignore values returned by functions: safe_create_leading_directories
DCL00-C	server-info.c	107	3	Const-qualify immutable objects: new_len
DCL00-C	server-info.c	108	3	Const-qualify immutable objects: old_fd
INT01-C	server-info.c	114	41	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	server-info.c	128	3	Do not ignore values returned by functions: unlink
MSC12-C	server-info.c	134	3	Detect and remove code that has no effect
EXP12-C	server-info.c	139	3	Do not ignore values returned by functions: unlink
MEM01-C	server-info.c	141	2	Store a new value in pointers immediately after free()
MEM34-C	server-info.c	141	2	Only free memory allocated dynamically
EXP36-C	server-info.c	153	32	Do not convert pointers into more strictly aligned pointer types
DCL00-C	server-info.c	179	2	Const-qualify immutable objects: ret
MEM34-C	server-info.c	180	2	Only free memory allocated dynamically
EXP36-C	server-info.c	263	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	server-info.c	264	31	Do not convert pointers into more strictly aligned pointer types
INT01-C	server-info.c	300	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	server-info.c	300	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	server-info.c	300	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	server-info.c	300	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	server-info.c	300	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	server-info.c	300	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	server-info.c	300	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	server-info.c	300	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	server-info.c	300	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	server-info.c	301	3	Do not convert pointers into more strictly aligned pointer types
MEM01-C	server-info.c	326	2	Store a new value in pointers immediately after free()
MEM34-C	server-info.c	349	2	Only free memory allocated dynamically
INT13-C	server-info.c	362	14	Use bitwise operators only on unsigned operands
INT13-C	server-info.c	363	14	Use bitwise operators only on unsigned operands
EXP12-C	server-info.c	366	2	Do not ignore values returned by functions: unlink_or_warn
DCL02-C	setup.c	19	1	Use visually distinct identifiers: startup_info
DCL02-C	setup.c	20	1	Use visually distinct identifiers: tmp_original_cwd
DCL01-C	setup.c	41	2	Do not reuse variable names in subscopes: realpath
INT01-C	setup.c	54	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	setup.c	56	44	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	setup.c	69	10	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	setup.c	70	4	Do not ignore values returned by functions: strbuf_realpath
INT01-C	setup.c	72	34	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	setup.c	76	10	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	setup.c	81	2	Do not ignore values returned by functions: strbuf_realpath
INT07-C	setup.c	83	10	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	setup.c	113	4	Only free memory allocated dynamically
MEM34-C	setup.c	117	4	Only free memory allocated dynamically
MEM34-C	setup.c	125	4	Only free memory allocated dynamically
DCL00-C	setup.c	134	2	Const-qualify immutable objects: r
DCL00-C	setup.c	147	2	Const-qualify immutable objects: len
MEM34-C	setup.c	150	3	Only free memory allocated dynamically
MEM34-C	setup.c	175	3	Only free memory allocated dynamically
MEM34-C	setup.c	179	3	Only free memory allocated dynamically
INT13-C	setup.c	200	26	Use bitwise operators only on unsigned operands
INT01-C	setup.c	315	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	setup.c	315	41	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	setup.c	316	27	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	setup.c	318	22	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	setup.c	359	2	Do not ignore values returned by functions: get_common_dir
DCL00-C	setup.c	389	2	Const-qualify immutable objects: orig_path_len
MSC12-C	setup.c	390	2	Detect and remove code that has no effect
INT01-C	setup.c	390	2	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	setup.c	390	2	Ensure that return values are compared against the proper type
INT01-C	setup.c	390	2	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	setup.c	390	2	Ensure that return values are compared against the proper type
EXP05-C	setup.c	471	8	Do not cast away a const qualification
EXP05-C	setup.c	476	7	Do not cast away a const qualification
EXP05-C	setup.c	509	7	Do not cast away a const qualification
EXP36-C	setup.c	515	35	Do not convert pointers into more strictly aligned pointer types
EXP36-C	setup.c	586	35	Do not convert pointers into more strictly aligned pointer types
MSC01-C	setup.c	592	3	Strive for logical completeness
MSC01-C	setup.c	601	3	Strive for logical completeness
EXP12-C	setup.c	605	4	Do not ignore values returned by functions: string_list_append
EXP12-C	setup.c	608	4	Do not ignore values returned by functions: string_list_append
EXP12-C	setup.c	624	2	Do not ignore values returned by functions: read_repository_format
EXP12-C	setup.c	656	3	Do not ignore values returned by functions: git_config_from_file
EXP12-C	setup.c	685	2	Do not ignore values returned by functions: read_repository_format
MSC12-C	setup.c	692	3	Detect and remove code that has no effect
INT01-C	setup.c	697	24	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	setup.c	718	2	Do not ignore values returned by functions: git_config_from_file
INT01-C	setup.c	742	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	setup.c	749	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	setup.c	755	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	setup.c	763	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	setup.c	816	2	Do not reuse variable names in subscopes: realpath
FIO01-C	setup.c	818	6	Be careful using functions that use file names for identification
INT07-C	setup.c	853	11	Use only explicitly signed or unsigned char type for numeric values
ARR30-C	setup.c	853	5	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	setup.c	857	3	Const-qualify immutable objects: pathlen
MEM34-C	setup.c	860	3	Only free memory allocated dynamically
EXP12-C	setup.c	868	2	Do not ignore values returned by functions: strbuf_realpath
MEM34-C	setup.c	877	2	Only free memory allocated dynamically
INT01-C	setup.c	891	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	setup.c	894	12	Do not cast away a const qualification
MEM34-C	setup.c	903	4	Only free memory allocated dynamically
MEM34-C	setup.c	910	3	Only free memory allocated dynamically
MEM34-C	setup.c	926	3	Only free memory allocated dynamically
MEM34-C	setup.c	942	4	Only free memory allocated dynamically
MEM34-C	setup.c	948	3	Only free memory allocated dynamically
MEM34-C	setup.c	960	3	Only free memory allocated dynamically
MEM34-C	setup.c	970	3	Only free memory allocated dynamically
MEM34-C	setup.c	976	2	Only free memory allocated dynamically
INT01-C	setup.c	993	14	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	setup.c	998	3	Only free memory allocated dynamically
INT01-C	setup.c	1004	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	setup.c	1016	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	setup.c	1037	2	Do not ignore values returned by functions: setenv
INT01-C	setup.c	1043	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	setup.c	1051	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	setup.c	1085	27	Do not convert pointers into more strictly aligned pointer types
EXP36-C	setup.c	1114	37	Do not convert pointers into more strictly aligned pointer types
EXP05-C	setup.c	1130	8	Do not cast away a const qualification
DCL01-C	setup.c	1170	2	Do not reuse variable names in subscopes: allowed_bare_repo
EXP36-C	setup.c	1170	46	Do not convert pointers into more strictly aligned pointer types
DCL01-C	setup.c	1194	25	Do not reuse variable names in subscopes: allowed_bare_repo
ENV00-C	setup.c	1239	33	Do not store the pointer to the string returned by getenv()
EXP12-C	setup.c	1260	3	Do not ignore values returned by functions: string_list_split
INT01-C	setup.c	1270	31	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	setup.c	1341	4	Store a new value in pointers immediately after free()
MEM34-C	setup.c	1341	4	Only free memory allocated dynamically
MEM34-C	setup.c	1342	4	Only free memory allocated dynamically
ARR30-C	setup.c	1359	56	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	setup.c	1375	2	Const-qualify immutable objects: gitdir_offset
DCL00-C	setup.c	1376	2	Const-qualify immutable objects: commondir_offset
EXP12-C	setup.c	1401	2	Do not ignore values returned by functions: get_common_dir
EXP12-C	setup.c	1405	2	Do not ignore values returned by functions: read_repository_format
DCL02-C	setup.c	1548	4	Use visually distinct identifiers: gitdir
DCL01-C	setup.c	1548	4	Do not reuse variable names in subscopes: gitdir
DCL02-C	setup.c	1548	4	Use visually distinct identifiers: gitdir
EXP12-C	setup.c	1571	3	Do not ignore values returned by functions: setenv
EXP12-C	setup.c	1574	3	Do not ignore values returned by functions: setenv
MSC01-C	setup.c	1615	2	Strive for logical completeness
EXP12-C	setup.c	1643	2	Do not ignore values returned by functions: check_repository_format_gently
DCL02-C	shallow.c	452	1	Use visually distinct identifiers: trace_shallow
EXP36-C	shallow.c	32	10	Do not convert pointers into more strictly aligned pointer types
DCL01-C	shallow.c	33	2	Do not reuse variable names in subscopes: commit
DCL00-C	shallow.c	44	2	Const-qualify immutable objects: pos
INT01-C	shallow.c	48	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	shallow.c	48	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	shallow.c	83	3	Do not ignore values returned by functions: register_shallow
DCL00-C	shallow.c	98	2	Const-qualify immutable objects: res
EXP12-C	shallow.c	105	2	Do not ignore values returned by functions: is_repository_shallow
INT01-C	shallow.c	120	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	shallow.c	120	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	shallow.c	120	1	Use typedefs to improve code readability
EXP36-C	shallow.c	120	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	shallow.c	120	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	shallow.c	120	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	shallow.c	131	2	Do not reuse variable names in subscopes: commit
EXP11-C	shallow.c	141	14	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	shallow.c	151	27	Do not convert pointers into more strictly aligned pointer types
EXP11-C	shallow.c	155	14	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	shallow.c	166	4	Do not ignore values returned by functions: commit_list_insert
EXP36-C	shallow.c	175	26	Do not convert pointers into more strictly aligned pointer types
DCL01-C	shallow.c	196	40	Do not reuse variable names in subscopes: commit
EXP12-C	shallow.c	198	2	Do not ignore values returned by functions: commit_list_insert
EXP36-C	shallow.c	198	29	Do not convert pointers into more strictly aligned pointer types
DCL00-C	shallow.c	214	2	Const-qualify immutable objects: both_flags
INT13-C	shallow.c	214	32	Use bitwise operators only on unsigned operands
EXP12-C	shallow.c	222	2	Do not ignore values returned by functions: is_repository_shallow
EXP12-C	shallow.c	226	2	Do not ignore values returned by functions: setup_revisions
INT13-C	shallow.c	255	37	Use bitwise operators only on unsigned operands
EXP12-C	shallow.c	257	5	Do not ignore values returned by functions: commit_list_insert
INT13-C	shallow.c	269	17	Use bitwise operators only on unsigned operands
INT13-C	shallow.c	270	16	Use bitwise operators only on unsigned operands
EXP36-C	shallow.c	299	36	Do not convert pointers into more strictly aligned pointer types
EXP12-C	shallow.c	335	2	Do not ignore values returned by functions: for_each_commit_graft
INT01-C	shallow.c	338	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	shallow.c	374	51	Do not reuse variable names in subscopes: shallow_lock
DCL00-C	shallow.c	401	2	Const-qualify immutable objects: fd
EXP12-C	shallow.c	411	2	Do not ignore values returned by functions: for_each_commit_graft
DCL01-C	shallow.c	422	2	Do not reuse variable names in subscopes: shallow_lock
EXP12-C	shallow.c	432	3	Do not ignore values returned by functions: write_shallow_commits_1
EXP12-C	shallow.c	444	3	Do not ignore values returned by functions: commit_shallow_file
EXP12-C	shallow.c	446	3	Do not ignore values returned by functions: unlink
EXP12-C	shallow.c	462	2	Do not ignore values returned by functions: memset
EXP36-C	shallow.c	466	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	shallow.c	467	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	shallow.c	468	16	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	shallow.c	497	7	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	shallow.c	503	1	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	shallow.c	503	1	Ensure that division and remainder operations do not result in divide-by-zero errors
DCL05-C	shallow.c	503	1	Use typedefs to improve code readability
EXP36-C	shallow.c	503	1	Do not convert pointers into more strictly aligned pointer types
EXP36-C	shallow.c	503	1	Do not convert pointers into more strictly aligned pointer types
INT01-C	shallow.c	503	1	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	shallow.c	508	2	Do not reuse variable names in subscopes: ref_bitmap
DCL01-C	shallow.c	511	2	Do not reuse variable names in subscopes: free
DCL00-C	shallow.c	517	2	Const-qualify immutable objects: nr
DCL00-C	shallow.c	518	2	Const-qualify immutable objects: size
INT01-C	shallow.c	518	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	shallow.c	525	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	shallow.c	532	9	Do not convert pointers into more strictly aligned pointer types
DCL00-C	shallow.c	545	2	Const-qualify immutable objects: bitmap_nr
DCL00-C	shallow.c	546	2	Const-qualify immutable objects: bitmap_size
EXP36-C	shallow.c	555	15	Do not convert pointers into more strictly aligned pointer types
EXP12-C	shallow.c	557	2	Do not ignore values returned by functions: memset
INT14-C	shallow.c	558	18	Avoid performing bitwise and arithmetic operations on the same data
EXP12-C	shallow.c	559	2	Do not ignore values returned by functions: commit_list_insert
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL01-C	shallow.c	562	3	Do not reuse variable names in subscopes: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
INT13-C	shallow.c	576	12	Use bitwise operators only on unsigned operands
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
DCL02-C	shallow.c	806	60	Use visually distinct identifiers: c
EXP12-C	shallow.c	593	4	Do not ignore values returned by functions: commit_list_insert
MEM34-C	shallow.c	604	2	Only free memory allocated dynamically
DCL13-C	shallow.c	610	16	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL01-C	shallow.c	612	2	Do not reuse variable names in subscopes: commit
DCL01-C	shallow.c	642	2	Do not reuse variable names in subscopes: ref
EXP36-C	shallow.c	648	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	shallow.c	667	2	Do not ignore values returned by functions: memset
EXP12-C	shallow.c	676	2	Do not ignore values returned by functions: head_ref
EXP12-C	shallow.c	677	2	Do not ignore values returned by functions: for_each_ref
INT01-C	shallow.c	686	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	shallow.c	690	3	Const-qualify immutable objects: bitmap_size
INT01-C	shallow.c	690	50	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	shallow.c	691	3	Do not ignore values returned by functions: memset
EXP36-C	shallow.c	697	32	Do not convert pointers into more strictly aligned pointer types
MEM34-C	shallow.c	712	2	Only free memory allocated dynamically
EXP36-C	shallow.c	725	28	Do not convert pointers into more strictly aligned pointer types
EXP36-C	shallow.c	726	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	shallow.c	748	24	Do not reuse variable names in subscopes: ref_bitmap
DCL00-C	shallow.c	755	2	Const-qualify immutable objects: bitmap_nr
INT01-C	shallow.c	755	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	shallow.c	755	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	shallow.c	755	18	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	shallow.c	766	54	Do not form or use out-of-bounds pointers or array subscripts
EXP12-C	shallow.c	779	2	Do not ignore values returned by functions: memset
EXP12-C	shallow.c	780	2	Do not ignore values returned by functions: head_ref
EXP12-C	shallow.c	781	2	Do not ignore values returned by functions: for_each_ref
ARR30-C	shallow.c	787	52	Do not form or use out-of-bounds pointers or array subscripts
DCL01-C	shallow.c	809	3	Do not reuse variable names in subscopes: commit
EXP12-C	shallow.c	815	4	Do not ignore values returned by functions: memset
EXP12-C	shallow.c	816	4	Do not ignore values returned by functions: head_ref
EXP12-C	shallow.c	817	4	Do not ignore values returned by functions: for_each_ref
INT01-C	sideband.c	44	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sideband.c	60	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sideband.c	86	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	sideband.c	88	3	Const-qualify immutable objects: len
INT13-C	sideband.c	99	21	Use bitwise operators only on unsigned operands
ARR30-C	sideband.c	99	21	Do not form or use out-of-bounds pointers or array subscripts
DCL01-C	sideband.c	122	25	Do not reuse variable names in subscopes: sideband_type
DCL01-C	sideband.c	125	2	Do not reuse variable names in subscopes: brk
INT07-C	sideband.c	160	11	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	sideband.c	184	4	Const-qualify immutable objects: linelen
INT01-C	sideband.c	194	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	sideband.c	217	4	Do not ignore values returned by functions: xwrite
EXP12-C	sideband.c	244	3	Do not ignore values returned by functions: xwrite
EXP12-C	sideband.c	266	4	Do not ignore values returned by functions: xsnprintf
INT07-C	sideband.c	267	11	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	sideband.c	270	4	Do not ignore values returned by functions: xsnprintf
EXP36-C	sigchain.c	24	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	sigchain.c	47	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	sigchain.c	48	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	sigchain.c	49	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	sigchain.c	50	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	sigchain.c	51	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	sigchain.c	56	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	sigchain.c	57	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	sigchain.c	58	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	sigchain.c	59	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	sigchain.c	60	2	Do not ignore values returned by functions: sigchain_pop
DCL01-C	sparse-index.c	13	2	Do not reuse variable names in subscopes: write
DCL01-C	sparse-index.c	20	24	Do not reuse variable names in subscopes: tree
DCL00-C	sparse-index.c	40	2	Const-qualify immutable objects: start_converted
DCL00-C	sparse-index.c	107	2	Const-qualify immutable objects: res
INT13-C	sparse-index.c	134	14	Use bitwise operators only on unsigned operands
EXP12-C	sparse-index.c	216	2	Do not ignore values returned by functions: cache_tree_update
EXP36-C	sparse-index.c	229	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	sparse-index.c	241	2	Const-qualify immutable objects: len
DCL00-C	sparse-index.c	245	3	Const-qualify immutable objects: baselen
INT01-C	sparse-index.c	277	33	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	sparse-index.c	343	16	Do not convert pointers into more strictly aligned pointer types
EXP36-C	sparse-index.c	356	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	sparse-index.c	363	3	Do not reuse variable names in subscopes: tree
EXP12-C	sparse-index.c	388	3	Do not ignore values returned by functions: memset
EXP12-C	sparse-index.c	396	3	Do not ignore values returned by functions: read_tree_at
MEM01-C	sparse-index.c	416	2	Store a new value in pointers immediately after free()
MEM34-C	sparse-index.c	416	2	Only free memory allocated dynamically
EXP12-C	sparse-index.c	420	2	Do not ignore values returned by functions: cache_tree_update
DCL01-C	sparse-index.c	442	54	Do not reuse variable names in subscopes: dirname
MEM34-C	sparse-index.c	484	2	Only free memory allocated dynamically
INT13-C	sparse-index.c	519	21	Use bitwise operators only on unsigned operands
INT07-C	sparse-index.c	584	12	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	split-index.c	11	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	split-index.c	24	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	split-index.c	29	5	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	split-index.c	54	2	Do not ignore values returned by functions: ewah_serialize_strbuf
EXP12-C	split-index.c	55	2	Do not ignore values returned by functions: ewah_serialize_strbuf
EXP36-C	split-index.c	86	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	split-index.c	93	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	split-index.c	97	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	split-index.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	split-index.c	106	2	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	split-index.c	109	35	Use bitwise operators only on unsigned operands
EXP36-C	split-index.c	114	31	Do not convert pointers into more strictly aligned pointer types
INT01-C	split-index.c	115	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	split-index.c	124	31	Do not convert pointers into more strictly aligned pointer types
INT01-C	split-index.c	128	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	split-index.c	142	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	split-index.c	162	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	split-index.c	163	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	split-index.c	163	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	split-index.c	176	3	Do not ignore values returned by functions: add_index_entry
INT13-C	split-index.c	202	60	Use bitwise operators only on unsigned operands
INT13-C	split-index.c	203	8	Use bitwise operators only on unsigned operands
DCL00-C	split-index.c	204	2	Const-qualify immutable objects: ce_flags
DCL00-C	split-index.c	205	2	Const-qualify immutable objects: base_flags
EXP04-C	split-index.c	211	8	Do not perform byte-by-byte comparisons between structures
EXP36-C	split-index.c	354	5	Do not convert pointers into more strictly aligned pointer types
MSC12-C	split-index.c	365	4	Detect and remove code that has no effect
EXP36-C	split-index.c	366	4	Do not convert pointers into more strictly aligned pointer types
INT13-C	split-index.c	369	19	Use bitwise operators only on unsigned operands
MEM34-C	split-index.c	408	2	Only free memory allocated dynamically
EXP12-C	split-index.c	441	3	Do not ignore values returned by functions: init_split_index
DCL05-C	stable-qsort.c	8	1	Use typedefs to improve code readability
INT01-C	stable-qsort.c	16	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	stable-qsort.c	19	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	stable-qsort.c	29	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	stable-qsort.c	29	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	stable-qsort.c	42	9	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	stable-qsort.c	47	1	Use typedefs to improve code readability
MEM34-C	stable-qsort.c	55	2	Only free memory allocated dynamically
DCL02-C	strbuf.c	52	1	Use visually distinct identifiers: strbuf_slopbuf
INT07-C	strbuf.c	88	19	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	strbuf.c	93	2	Const-qualify immutable objects: new_buf
INT01-C	strbuf.c	94	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	94	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	94	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	95	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	95	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	95	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	95	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	95	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	99	2	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	strbuf.c	101	14	Use only explicitly signed or unsigned char type for numeric values
INT01-C	strbuf.c	112	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	112	24	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	strbuf.c	114	19	Use only explicitly signed or unsigned char type for numeric values
INT01-C	strbuf.c	119	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	119	66	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	strbuf.c	121	19	Use only explicitly signed or unsigned char type for numeric values
INT01-C	strbuf.c	126	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	126	37	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	127	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	127	40	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	strbuf.c	129	20	Use only explicitly signed or unsigned char type for numeric values
INT01-C	strbuf.c	136	17	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	strbuf.c	141	19	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	strbuf.c	162	2	Const-qualify immutable objects: end
INT07-C	strbuf.c	164	6	Use only explicitly signed or unsigned char type for numeric values
INT01-C	strbuf.c	176	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	176	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	strbuf.c	181	14	Do not convert pointers into more strictly aligned pointer types
INT01-C	strbuf.c	184	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	184	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	184	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	184	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	184	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	184	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	184	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	184	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	184	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	strbuf.c	184	3	Do not convert pointers into more strictly aligned pointer types
INT01-C	strbuf.c	187	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	189	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	strbuf.c	189	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	strbuf.c	219	2	Store a new value in pointers immediately after free()
DCL00-C	strbuf.c	224	2	Const-qualify immutable objects: len
DCL00-C	strbuf.c	225	2	Const-qualify immutable objects: cmp
INT01-C	strbuf.c	234	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	234	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	234	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	234	6	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	strbuf.c	259	2	Const-qualify immutable objects: cp
EXP12-C	strbuf.c	263	2	Do not ignore values returned by functions: __builtin_va_copy
EXP12-C	strbuf.c	265	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	strbuf.c	270	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	270	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	270	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	275	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	277	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	280	28	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	strbuf.c	285	2	Const-qualify immutable objects: ap
EXP12-C	strbuf.c	286	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	strbuf.c	288	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	strbuf.c	328	2	Do not ignore values returned by functions: memset
DCL00-C	strbuf.c	334	2	Const-qualify immutable objects: ap
EXP12-C	strbuf.c	335	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	strbuf.c	337	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	strbuf.c	354	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	strbuf.c	366	3	Do not ignore values returned by functions: xsnprintf
EXP12-C	strbuf.c	367	3	Do not ignore values returned by functions: xsnprintf
DCL00-C	strbuf.c	374	2	Const-qualify immutable objects: params
DCL00-C	strbuf.c	376	2	Const-qualify immutable objects: incomplete_line
INT01-C	strbuf.c	376	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	376	51	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	strbuf.c	378	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	strbuf.c	380	2	Do not ignore values returned by functions: __builtin_va_end
INT07-C	strbuf.c	384	22	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	strbuf.c	392	2	Const-qualify immutable objects: cp
EXP12-C	strbuf.c	396	2	Do not ignore values returned by functions: __builtin_va_copy
EXP12-C	strbuf.c	398	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	strbuf.c	401	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	404	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	407	28	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	strbuf.c	439	11	Declare function parameters that are pointers to values not changed by the function as const: context
MSC01-C	strbuf.c	443	2	Strive for logical completeness
EXP36-C	strbuf.c	461	39	Do not convert pointers into more strictly aligned pointer types
DCL00-C	strbuf.c	476	2	Const-qualify immutable objects: len
DCL00-C	strbuf.c	489	2	Const-qualify immutable objects: len
DCL00-C	strbuf.c	492	3	Const-qualify immutable objects: ch
DCL00-C	strbuf.c	505	2	Const-qualify immutable objects: oldalloc
INT01-C	strbuf.c	509	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	511	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	strbuf.c	511	20	Ensure that return values are compared against the proper type
DCL00-C	strbuf.c	518	2	Const-qualify immutable objects: oldlen
DCL00-C	strbuf.c	519	2	Const-qualify immutable objects: oldalloc
DCL00-C	strbuf.c	523	3	Const-qualify immutable objects: want
INT01-C	strbuf.c	523	38	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	strbuf.c	524	3	Const-qualify immutable objects: got
INT01-C	strbuf.c	527	17	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	strbuf.c	527	17	Ensure that return values are compared against the proper type
INT01-C	strbuf.c	533	11	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	strbuf.c	539	19	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	strbuf.c	545	2	Const-qualify immutable objects: oldalloc
INT01-C	strbuf.c	549	57	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	551	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	552	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	strbuf.c	552	20	Ensure that return values are compared against the proper type
DCL00-C	strbuf.c	566	2	Const-qualify immutable objects: oldalloc
INT01-C	strbuf.c	568	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	571	14	Use rsize_t or size_t for all integer values representing the size of an object
POS30-C	strbuf.c	575	9	Use the readlink() function properly
INT01-C	strbuf.c	579	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	585	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	587	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	strbuf.c	587	15	Ensure that return values are compared against the proper type
DCL00-C	strbuf.c	594	2	Const-qualify immutable objects: oldalloc
INT01-C	strbuf.c	597	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	611	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	617	15	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	strbuf.c	617	15	Ensure that return values are compared against the proper type
MSC12-C	strbuf.c	644	2	Detect and remove code that has no effect
INT01-C	strbuf.c	711	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	712	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	720	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	721	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	722	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	722	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	723	30	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	strbuf.c	744	3	Const-qualify immutable objects: len
DCL00-C	strbuf.c	783	3	Const-qualify immutable objects: len
MSC01-C	strbuf.c	786	3	Strive for logical completeness
MSC01-C	strbuf.c	810	2	Strive for logical completeness
INT13-C	strbuf.c	821	9	Use bitwise operators only on unsigned operands
DCL00-C	strbuf.c	830	3	Const-qualify immutable objects: ch
INT13-C	strbuf.c	855	25	Use bitwise operators only on unsigned operands
DCL00-C	strbuf.c	857	3	Const-qualify immutable objects: x
DCL00-C	strbuf.c	866	3	Const-qualify immutable objects: x
DCL00-C	strbuf.c	901	3	Const-qualify immutable objects: orig_len
ENV30-C	strbuf.c	903	15	Do not modify the string returned by getenv()
INT01-C	strbuf.c	913	57	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	strbuf.c	915	3	Only free memory allocated dynamically
EXP12-C	strbuf.c	924	3	Do not ignore values returned by functions: strbuf_realpath
DCL00-C	strbuf.c	934	2	Const-qualify immutable objects: ap
EXP12-C	strbuf.c	935	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	strbuf.c	937	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	strbuf.c	946	2	Const-qualify immutable objects: ap
EXP12-C	strbuf.c	947	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	strbuf.c	949	2	Do not ignore values returned by functions: __builtin_va_end
INT07-C	strbuf.c	963	13	Use only explicitly signed or unsigned char type for numeric values
INT07-C	strbuf.c	975	13	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	strbuf.c	988	2	Const-qualify immutable objects: ap
EXP12-C	strbuf.c	991	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	strbuf.c	993	2	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	strbuf.c	998	75	Do not reuse variable names in subscopes: tm
INT01-C	strbuf.c	1064	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	1081	28	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	strbuf.c	1098	3	Const-qualify immutable objects: c
INT01-C	strbuf.c	1098	30	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	strbuf.c	1126	2	Do not reuse variable names in subscopes: eol
INT01-C	strbuf.c	1133	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	1135	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	1143	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strbuf.c	1143	25	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	strbuf.c	1144	18	Use only explicitly signed or unsigned char type for numeric values
INT07-C	strbuf.c	1147	26	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	strbuf.c	1197	3	Do not ignore values returned by functions: unlink
MEM34-C	strbuf.c	1200	2	Only free memory allocated dynamically
DCL01-C	streaming.c	31	2	Do not reuse variable names in subscopes: open
DCL01-C	streaming.c	32	2	Do not reuse variable names in subscopes: close
DCL01-C	streaming.c	33	2	Do not reuse variable names in subscopes: read
INT01-C	streaming.c	100	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	streaming.c	115	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	streaming.c	116	30	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	streaming.c	127	30	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	streaming.c	150	35	Do not convert pointers into more strictly aligned pointer types
INT01-C	streaming.c	188	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	streaming.c	196	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	streaming.c	218	2	Do not ignore values returned by functions: munmap
MSC01-C	streaming.c	233	2	Strive for logical completeness
INT01-C	streaming.c	245	49	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	streaming.c	254	2	Do not ignore values returned by functions: munmap
MSC01-C	streaming.c	270	2	Strive for logical completeness
EXP12-C	streaming.c	272	3	Do not ignore values returned by functions: memset
INT01-C	streaming.c	293	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	streaming.c	331	31	Declare function parameters that are pointers to values not changed by the function as const: r
DCL13-C	streaming.c	333	30	Declare function parameters that are pointers to values not changed by the function as const: type
DCL00-C	streaming.c	377	2	Const-qualify immutable objects: remainder
INT01-C	streaming.c	383	25	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	streaming.c	442	2	Const-qualify immutable objects: r
EXP36-C	streaming.c	458	34	Do not convert pointers into more strictly aligned pointer types
DCL00-C	streaming.c	460	2	Const-qualify immutable objects: ret
MEM34-C	streaming.c	463	3	Only free memory allocated dynamically
MEM34-C	streaming.c	469	4	Only free memory allocated dynamically
EXP12-C	streaming.c	477	4	Do not ignore values returned by functions: close_istream
DCL00-C	streaming.c	507	3	Const-qualify immutable objects: readlen
INT01-C	streaming.c	513	31	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	streaming.c	538	2	Do not ignore values returned by functions: close_istream
DCL00-C	string-list.c	22	2	Const-qualify immutable objects: cmp
DCL00-C	string-list.c	25	3	Const-qualify immutable objects: middle
DCL00-C	string-list.c	26	3	Const-qualify immutable objects: compare
DCL00-C	string-list.c	45	2	Const-qualify immutable objects: index
DCL01-C	string-list.c	45	2	Do not reuse variable names in subscopes: index
INT01-C	string-list.c	50	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	50	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	50	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	50	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	50	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	50	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	50	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	50	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	50	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	string-list.c	50	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	string-list.c	51	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	52	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	52	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	52	3	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	string-list.c	54	13	Do not form or use out-of-bounds pointers or array subscripts
EXP05-C	string-list.c	55	21	Do not cast away a const qualification
DCL01-C	string-list.c	64	2	Do not reuse variable names in subscopes: index
DCL00-C	string-list.c	76	2	Const-qualify immutable objects: i
INT01-C	string-list.c	85	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	85	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	85	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	string-list.c	92	2	Do not ignore values returned by functions: get_entry_index
DCL01-C	string-list.c	100	2	Do not reuse variable names in subscopes: index
DCL00-C	string-list.c	108	2	Const-qualify immutable objects: i
INT01-C	string-list.c	116	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	string-list.c	118	3	Const-qualify immutable objects: cmp
INT01-C	string-list.c	119	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	136	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	146	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	string-list.c	159	67	Declare function parameters that are pointers to values not changed by the function as const: data
INT01-C	string-list.c	174	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	178	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	192	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	196	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	209	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	209	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	209	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	209	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	209	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	209	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	209	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	209	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	string-list.c	209	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	string-list.c	209	2	Do not convert pointers into more strictly aligned pointer types
EXP05-C	string-list.c	221	45	Do not cast away a const qualification
EXP36-C	string-list.c	235	42	Do not convert pointers into more strictly aligned pointer types
EXP36-C	string-list.c	236	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	string-list.c	237	39	Do not convert pointers into more strictly aligned pointer types
DCL00-C	string-list.c	252	2	Const-qualify immutable objects: cmp
INT01-C	string-list.c	272	39	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	string-list.c	288	4	Do not ignore values returned by functions: string_list_append
EXP12-C	string-list.c	293	4	Do not ignore values returned by functions: string_list_append_nodup
EXP12-C	string-list.c	296	4	Do not ignore values returned by functions: string_list_append
EXP12-C	string-list.c	314	4	Do not ignore values returned by functions: string_list_append
INT07-C	string-list.c	319	9	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	string-list.c	320	4	Do not ignore values returned by functions: string_list_append
EXP12-C	string-list.c	323	4	Do not ignore values returned by functions: string_list_append
EXP11-C	strmap.c	12	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	strmap.c	12	7	Do not cast away a const qualification
EXP11-C	strmap.c	13	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	strmap.c	13	7	Do not cast away a const qualification
EXP36-C	strmap.c	23	9	Do not convert pointers into more strictly aligned pointer types
EXP30-C	strmap.c	60	2	Do not depend on order of evaluation for side effects
EXP36-C	strmap.c	60	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	strmap.c	60	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	strmap.c	64	4	Only free memory allocated dynamically
DCL00-C	strmap.c	88	4	Const-qualify immutable objects: flex_array_len_
EXP36-C	strmap.c	88	4	Do not convert pointers into more strictly aligned pointer types
EXP11-C	strmap.c	88	4	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	strmap.c	90	4	Const-qualify immutable objects: len
EXP36-C	strmap.c	91	26	Do not convert pointers into more strictly aligned pointer types
EXP11-C	strmap.c	94	17	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	strmap.c	97	18	Do not convert pointers into more strictly aligned pointer types
EXP36-C	strmap.c	99	25	Do not convert pointers into more strictly aligned pointer types
DCL00-C	strmap.c	113	3	Const-qualify immutable objects: old
EXP36-C	strmap.c	144	8	Do not convert pointers into more strictly aligned pointer types
MEM34-C	strmap.c	150	3	Only free memory allocated dynamically
EXP11-C	strmap.c	157	22	Do not apply operators expecting one type to data of an incompatible type
DCL02-C	strvec.c	5	1	Use visually distinct identifiers: empty_strvec
INT01-C	strvec.c	18	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strvec.c	18	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strvec.c	18	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strvec.c	18	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strvec.c	18	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strvec.c	18	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strvec.c	18	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strvec.c	18	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strvec.c	18	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	strvec.c	18	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	strvec.c	26	28	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	strvec.c	31	2	Const-qualify immutable objects: ap
EXP12-C	strvec.c	34	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	strvec.c	36	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	strvec.c	39	28	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	strvec.c	44	2	Const-qualify immutable objects: ap
EXP12-C	strvec.c	47	2	Do not ignore values returned by functions: __builtin_va_start
EXP11-C	strvec.c	48	16	Do not apply operators expecting one type to data of an incompatible type
INT36-C	strvec.c	48	16	Take care when converting from pointer to integer or integer to pointer
EXP12-C	strvec.c	50	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	strvec.c	56	3	Do not ignore values returned by functions: strvec_push
EXP05-C	strvec.c	63	7	Do not cast away a const qualification
INT01-C	strvec.c	63	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	strvec.c	64	21	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	strvec.c	78	13	Use only explicitly signed or unsigned char type for numeric values
INT01-C	strvec.c	92	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	strvec.c	93	9	Do not cast away a const qualification
EXP36-C	strvec.c	102	17	Do not convert pointers into more strictly aligned pointer types
EXP11-C	sub-process.c	15	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	sub-process.c	15	7	Do not cast away a const qualification
EXP11-C	sub-process.c	16	7	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	sub-process.c	16	7	Do not cast away a const qualification
DCL01-C	sub-process.c	21	64	Do not reuse variable names in subscopes: hashmap
EXP36-C	sub-process.c	27	9	Do not convert pointers into more strictly aligned pointer types
DCL01-C	sub-process.c	54	38	Do not reuse variable names in subscopes: hashmap
EXP12-C	sub-process.c	60	2	Do not ignore values returned by functions: kill
EXP12-C	sub-process.c	61	2	Do not ignore values returned by functions: finish_command
EXP12-C	sub-process.c	63	2	Do not ignore values returned by functions: hashmap_remove
EXP12-C	sub-process.c	68	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	sub-process.c	72	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	sub-process.c	74	2	Do not ignore values returned by functions: finish_command
DCL01-C	sub-process.c	77	38	Do not reuse variable names in subscopes: hashmap
EXP12-C	sub-process.c	87	2	Do not ignore values returned by functions: strvec_push
MSC12-C	sub-process.c	97	3	Detect and remove code that has no effect
MSC12-C	sub-process.c	105	3	Detect and remove code that has no effect
EXP12-C	sub-process.c	207	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	sub-process.c	214	2	Do not ignore values returned by functions: sigchain_pop
EXP11-C	submodule-config.c	48	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	submodule-config.c	48	6	Do not cast away a const qualification
EXP11-C	submodule-config.c	49	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	submodule-config.c	49	6	Do not cast away a const qualification
EXP11-C	submodule-config.c	62	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	submodule-config.c	62	6	Do not cast away a const qualification
EXP11-C	submodule-config.c	63	6	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	submodule-config.c	63	6	Do not cast away a const qualification
EXP36-C	submodule-config.c	71	16	Do not convert pointers into more strictly aligned pointer types
EXP05-C	submodule-config.c	83	7	Do not cast away a const qualification
EXP05-C	submodule-config.c	84	7	Do not cast away a const qualification
EXP05-C	submodule-config.c	85	7	Do not cast away a const qualification
EXP05-C	submodule-config.c	86	7	Do not cast away a const qualification
EXP30-C	submodule-config.c	103	2	Do not depend on order of evaluation for side effects
EXP36-C	submodule-config.c	103	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule-config.c	103	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	submodule-config.c	116	2	Store a new value in pointers immediately after free()
DCL01-C	submodule-config.c	126	25	Do not reuse variable names in subscopes: submodule
DCL00-C	submodule-config.c	128	2	Const-qualify immutable objects: hash
EXP36-C	submodule-config.c	130	37	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule-config.c	133	2	Do not ignore values returned by functions: hashmap_put
DCL01-C	submodule-config.c	137	28	Do not reuse variable names in subscopes: submodule
DCL00-C	submodule-config.c	139	2	Const-qualify immutable objects: hash
EXP36-C	submodule-config.c	145	12	Do not convert pointers into more strictly aligned pointer types
MEM34-C	submodule-config.c	146	2	Only free memory allocated dynamically
DCL01-C	submodule-config.c	150	27	Do not reuse variable names in subscopes: submodule
DCL00-C	submodule-config.c	152	2	Const-qualify immutable objects: hash
EXP36-C	submodule-config.c	154	37	Do not convert pointers into more strictly aligned pointer types
DCL00-C	submodule-config.c	164	2	Const-qualify immutable objects: hash
EXP36-C	submodule-config.c	174	10	Do not convert pointers into more strictly aligned pointer types
DCL00-C	submodule-config.c	184	2	Const-qualify immutable objects: hash
EXP36-C	submodule-config.c	194	10	Do not convert pointers into more strictly aligned pointer types
DCL00-C	submodule-config.c	213	3	Const-qualify immutable objects: c
DCL01-C	submodule-config.c	251	2	Do not reuse variable names in subscopes: submodule
EXP36-C	submodule-config.c	258	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule-config.c	324	9	Do not convert pointers into more strictly aligned pointer types
DCL01-C	submodule-config.c	393	36	Do not reuse variable names in subscopes: option
EXP36-C	submodule-config.c	425	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	submodule-config.c	426	2	Do not reuse variable names in subscopes: submodule
EXP05-C	submodule-config.c	449	9	Do not cast away a const qualification
DCL00-C	submodule-config.c	455	3	Const-qualify immutable objects: die_on_error
EXP05-C	submodule-config.c	477	9	Do not cast away a const qualification
EXP05-C	submodule-config.c	489	9	Do not cast away a const qualification
EXP05-C	submodule-config.c	515	9	Do not cast away a const qualification
DCL01-C	submodule-config.c	550	20	Do not reuse variable names in subscopes: lookup_type
DCL01-C	submodule-config.c	557	2	Do not reuse variable names in subscopes: submodule
MSC01-C	submodule-config.c	580	2	Strive for logical completeness
EXP12-C	submodule-config.c	600	2	Do not ignore values returned by functions: git_config_from_mem
MEM01-C	submodule-config.c	603	2	Store a new value in pointers immediately after free()
MEM34-C	submodule-config.c	603	2	Only free memory allocated dynamically
MEM34-C	submodule-config.c	616	2	Only free memory allocated dynamically
EXP12-C	submodule-config.c	663	3	Do not ignore values returned by functions: config_with_options
MEM01-C	submodule-config.c	666	3	Store a new value in pointers immediately after free()
MEM34-C	submodule-config.c	666	3	Only free memory allocated dynamically
MEM34-C	submodule-config.c	667	3	Only free memory allocated dynamically
EXP36-C	submodule-config.c	673	28	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule-config.c	708	3	Do not ignore values returned by functions: git_config_from_blob_oid
DCL01-C	submodule-config.c	744	2	Do not reuse variable names in subscopes: tree
DCL01-C	submodule-config.c	746	2	Do not reuse variable names in subscopes: name_entry
EXP36-C	submodule-config.c	749	22	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule-config.c	751	2	Do not ignore values returned by functions: fill_tree_descriptor
EXP36-C	submodule-config.c	761	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule-config.c	765	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule-config.c	769	28	Do not convert pointers into more strictly aligned pointer types
MEM01-C	submodule-config.c	777	3	Store a new value in pointers immediately after free()
MEM34-C	submodule-config.c	777	3	Only free memory allocated dynamically
EXP36-C	submodule-config.c	785	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	submodule-config.c	819	2	Only free memory allocated dynamically
EXP36-C	submodule-config.c	842	32	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule-config.c	870	18	Do not convert pointers into more strictly aligned pointer types
ARR30-C	submodule.c	43	48	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	submodule.c	44	23	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	submodule.c	81	2	Const-qualify immutable objects: pos
DCL01-C	submodule.c	93	54	Do not reuse variable names in subscopes: submodule
DCL01-C	submodule.c	108	2	Do not reuse variable names in subscopes: submodule
DCL01-C	submodule.c	138	2	Do not reuse variable names in subscopes: submodule
EXP12-C	submodule.c	173	2	Do not ignore values returned by functions: string_list_insert
DCL00-C	submodule.c	179	2	Const-qualify immutable objects: ret
INT01-C	submodule.c	181	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	submodule.c	196	2	Do not reuse variable names in subscopes: submodule
MEM01-C	submodule.c	206	3	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	206	3	Only free memory allocated dynamically
DCL13-C	submodule.c	217	12	Declare function parameters that are pointers to values not changed by the function as const: cb
DCL00-C	submodule.c	220	3	Const-qualify immutable objects: v
MEM34-C	submodule.c	271	3	Only free memory allocated dynamically
MEM01-C	submodule.c	274	2	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	274	2	Only free memory allocated dynamically
EXP12-C	submodule.c	284	4	Do not ignore values returned by functions: strvec_push
MEM01-C	submodule.c	299	2	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	299	2	Only free memory allocated dynamically
MEM34-C	submodule.c	300	2	Only free memory allocated dynamically
MEM34-C	submodule.c	317	2	Only free memory allocated dynamically
DCL00-C	submodule.c	336	3	Const-qualify immutable objects: ce_len
DCL00-C	submodule.c	361	3	Const-qualify immutable objects: ce_len
ARR30-C	submodule.c	371	19	Do not form or use out-of-bounds pointers or array subscripts
EXP05-C	submodule.c	405	7	Do not cast away a const qualification
EXP12-C	submodule.c	468	2	Do not ignore values returned by functions: setup_revisions
STR11-C	submodule.c	484	2	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	submodule.c	486	2	Do not reuse variable names in subscopes: commit
EXP36-C	submodule.c	523	34	Do not convert pointers into more strictly aligned pointer types
MEM34-C	submodule.c	527	3	Only free memory allocated dynamically
DCL05-C	submodule.c	546	1	Use typedefs to improve code readability
MEM01-C	submodule.c	653	3	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	653	3	Only free memory allocated dynamically
EXP12-C	submodule.c	689	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	submodule.c	693	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	submodule.c	695	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	submodule.c	698	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	submodule.c	700	3	Do not ignore values returned by functions: strvec_pushf
EXP12-C	submodule.c	703	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	720	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	721	3	Do not ignore values returned by functions: strvec_push
MEM01-C	submodule.c	744	3	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	744	3	Only free memory allocated dynamically
DCL13-C	submodule.c	835	29	Declare function parameters that are pointers to values not changed by the function as const: options
EXP36-C	submodule.c	838	50	Do not convert pointers into more strictly aligned pointer types
DCL01-C	submodule.c	845	3	Do not reuse variable names in subscopes: submodule
EXP36-C	submodule.c	877	18	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule.c	880	18	Do not convert pointers into more strictly aligned pointer types
DCL01-C	submodule.c	899	2	Do not reuse variable names in subscopes: commit
EXP12-C	submodule.c	908	2	Do not ignore values returned by functions: setup_revisions
EXP36-C	submodule.c	937	36	Do not convert pointers into more strictly aligned pointer types
DCL13-C	submodule.c	944	33	Declare function parameters that are pointers to values not changed by the function as const: cb_data
EXP36-C	submodule.c	951	24	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule.c	952	2	Do not ignore values returned by functions: strvec_push
EXP36-C	submodule.c	965	31	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule.c	1008	2	Do not ignore values returned by functions: oid_array_for_each_unique
EXP12-C	submodule.c	1020	3	Do not ignore values returned by functions: oid_array_for_each_unique
INT01-C	submodule.c	1028	53	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	submodule.c	1060	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1061	3	Do not ignore values returned by functions: oid_array_for_each_unique
INT01-C	submodule.c	1072	54	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	submodule.c	1074	3	Do not ignore values returned by functions: finish_command
EXP12-C	submodule.c	1093	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1094	2	Do not ignore values returned by functions: oid_array_for_each_unique
EXP12-C	submodule.c	1095	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1096	2	Do not ignore values returned by functions: strvec_pushf
EXP36-C	submodule.c	1101	48	Do not convert pointers into more strictly aligned pointer types
DCL01-C	submodule.c	1102	3	Do not reuse variable names in subscopes: submodule
DCL01-C	submodule.c	1125	27	Do not reuse variable names in subscopes: remote
EXP12-C	submodule.c	1132	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1138	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1145	5	Do not ignore values returned by functions: strvec_pushf
EXP12-C	submodule.c	1151	4	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1153	5	Do not ignore values returned by functions: strvec_push
DCL01-C	submodule.c	1173	27	Do not reuse variable names in subscopes: remote
EXP12-C	submodule.c	1179	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1180	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1181	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1182	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1185	3	Do not ignore values returned by functions: strvec_push
DCL01-C	submodule.c	1204	30	Do not reuse variable names in subscopes: remote
INT01-C	submodule.c	1230	17	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	submodule.c	1233	3	Only free memory allocated dynamically
INT01-C	submodule.c	1237	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	submodule.c	1252	44	Do not reuse variable names in subscopes: ref
EXP36-C	submodule.c	1256	28	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule.c	1264	3	Do not ignore values returned by functions: for_each_ref
EXP12-C	submodule.c	1303	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1304	2	Do not ignore values returned by functions: oid_array_for_each_unique
EXP12-C	submodule.c	1306	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1307	2	Do not ignore values returned by functions: oid_array_for_each_unique
EXP36-C	submodule.c	1317	48	Do not convert pointers into more strictly aligned pointer types
DCL01-C	submodule.c	1318	3	Do not reuse variable names in subscopes: submodule
INT07-C	submodule.c	1332	18	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	submodule.c	1356	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1357	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1359	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1360	3	Do not ignore values returned by functions: strvec_push
DCL01-C	submodule.c	1415	61	Do not reuse variable names in subscopes: submodule
MEM01-C	submodule.c	1430	3	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	1430	3	Only free memory allocated dynamically
EXP36-C	submodule.c	1467	15	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule.c	1468	2	Do not ignore values returned by functions: memset
EXP05-C	submodule.c	1478	8	Do not cast away a const qualification
EXP36-C	submodule.c	1493	34	Do not convert pointers into more strictly aligned pointer types
MEM34-C	submodule.c	1496	3	Only free memory allocated dynamically
EXP36-C	submodule.c	1507	35	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule.c	1508	2	Do not ignore values returned by functions: memset
MEM34-C	submodule.c	1553	2	Only free memory allocated dynamically
MEM01-C	submodule.c	1584	4	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	1584	4	Only free memory allocated dynamically
INT01-C	submodule.c	1610	28	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	submodule.c	1614	48	Do not convert pointers into more strictly aligned pointer types
MEM01-C	submodule.c	1631	4	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	1631	4	Only free memory allocated dynamically
EXP12-C	submodule.c	1669	3	Do not ignore values returned by functions: strvec_push
EXP36-C	submodule.c	1678	41	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule.c	1695	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1696	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1701	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1705	3	Do not ignore values returned by functions: string_list_insert
DCL02-C	submodule.c	1767	2	Use visually distinct identifiers: task
DCL01-C	submodule.c	1710	3	Do not reuse variable names in subscopes: task
EXP12-C	submodule.c	1725	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1726	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1727	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1730	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1731	3	Do not ignore values returned by functions: oid_array_for_each_unique
DCL13-C	submodule.c	1742	47	Declare function parameters that are pointers to values not changed by the function as const: err
EXP36-C	submodule.c	1745	41	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule.c	1746	28	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule.c	1756	31	Do not convert pointers into more strictly aligned pointer types
DCL00-C	submodule.c	1758	2	Const-qualify immutable objects: type
DCL13-C	submodule.c	1763	54	Declare function parameters that are pointers to values not changed by the function as const: err
EXP36-C	submodule.c	1766	41	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule.c	1767	28	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule.c	1798	14	Do not convert pointers into more strictly aligned pointer types
EXP36-C	submodule.c	1806	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	submodule.c	1852	2	Do not ignore values returned by functions: strvec_push
INT01-C	submodule.c	1853	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	submodule.c	1854	3	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	1855	2	Do not ignore values returned by functions: strvec_push
INT01-C	submodule.c	1862	37	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	submodule.c	2092	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	submodule.c	2097	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	2175	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	submodule.c	2192	2	Do not ignore values returned by functions: strvec_push
EXP12-C	submodule.c	2219	4	Do not ignore values returned by functions: unlink_or_warn
DCL00-C	submodule.c	2234	2	Const-qualify immutable objects: len
DCL00-C	submodule.c	2234	2	Const-qualify immutable objects: suffix_len
DCL00-C	submodule.c	2255	4	Const-qualify immutable objects: c
INT07-C	submodule.c	2257	7	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	submodule.c	2312	2	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	2312	2	Only free memory allocated dynamically
MEM01-C	submodule.c	2313	2	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	2313	2	Only free memory allocated dynamically
MEM01-C	submodule.c	2314	2	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	2314	2	Only free memory allocated dynamically
EXP12-C	submodule.c	2326	2	Do not ignore values returned by functions: strvec_pushf
MEM01-C	submodule.c	2384	3	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	2384	3	Only free memory allocated dynamically
MEM34-C	submodule.c	2385	3	Only free memory allocated dynamically
INT07-C	submodule.c	2454	37	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	submodule.c	2456	3	Do not ignore values returned by functions: strbuf_realpath
MEM34-C	submodule.c	2458	3	Only free memory allocated dynamically
MEM01-C	submodule.c	2460	2	Store a new value in pointers immediately after free()
MEM34-C	submodule.c	2460	2	Only free memory allocated dynamically
DCL01-C	submodule.c	2481	57	Do not reuse variable names in subscopes: submodule
INT13-C	symlinks.c	98	43	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	98	29	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	98	54	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	100	21	Use bitwise operators only on unsigned operands
INT01-C	symlinks.c	103	31	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	symlinks.c	113	28	Use bitwise operators only on unsigned operands
INT01-C	symlinks.c	124	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	symlinks.c	125	33	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	symlinks.c	131	41	Use bitwise operators only on unsigned operands
INT07-C	symlinks.c	134	31	Use only explicitly signed or unsigned char type for numeric values
INT13-C	symlinks.c	145	16	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	162	40	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	162	26	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	162	51	Use bitwise operators only on unsigned operands
INT07-C	symlinks.c	164	31	Use only explicitly signed or unsigned char type for numeric values
INT13-C	symlinks.c	167	26	Use bitwise operators only on unsigned operands
INT07-C	symlinks.c	179	35	Use only explicitly signed or unsigned char type for numeric values
MSC12-C	symlinks.c	194	2	Detect and remove code that has no effect
INT13-C	symlinks.c	206	74	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	206	49	Use bitwise operators only on unsigned operands
DCL00-C	symlinks.c	233	2	Const-qualify immutable objects: match_len
INT13-C	symlinks.c	234	26	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	234	17	Use bitwise operators only on unsigned operands
DCL00-C	symlinks.c	235	2	Const-qualify immutable objects: saved_errno
INT13-C	symlinks.c	237	12	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	239	17	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	241	34	Use bitwise operators only on unsigned operands
MEM34-C	symlinks.c	245	3	Only free memory allocated dynamically
INT13-C	symlinks.c	272	39	Use bitwise operators only on unsigned operands
INT13-C	symlinks.c	272	13	Use bitwise operators only on unsigned operands
INT01-C	symlinks.c	280	21	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	symlinks.c	281	28	Use only explicitly signed or unsigned char type for numeric values
INT01-C	symlinks.c	288	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	symlinks.c	317	42	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	symlinks.c	324	29	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	symlinks.c	341	2	Const-qualify immutable objects: ret
DCL02-C	tag.c	11	1	Use visually distinct identifiers: tag_type
EXP12-C	tag.c	20	2	Do not ignore values returned by functions: memset
MEM34-C	tag.c	66	2	Only free memory allocated dynamically
EXP36-C	tag.c	107	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	tag.c	108	23	Do not convert pointers into more strictly aligned pointer types
INT01-C	tag.c	157	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tag.c	157	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tag.c	166	26	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	tag.c	169	20	Use only explicitly signed or unsigned char type for numeric values
EXP11-C	tag.c	173	18	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	tag.c	175	18	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	tag.c	177	18	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	tag.c	179	18	Do not apply operators expecting one type to data of an incompatible type
MEM34-C	tag.c	224	3	Only free memory allocated dynamically
MEM34-C	tag.c	229	2	Only free memory allocated dynamically
DCL01-C	tag.c	233	46	Do not reuse variable names in subscopes: tag
DCL01-C	tempfile.c	51	56	Do not reuse variable names in subscopes: tempfile
DCL00-C	tempfile.c	64	2	Const-qualify immutable objects: me
EXP11-C	tempfile.c	68	24	Do not apply operators expecting one type to data of an incompatible type
EXP32-C	tempfile.c	68	24	Do not access a volatile object through a nonvolatile reference
EXP12-C	tempfile.c	92	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	tempfile.c	93	2	Do not ignore values returned by functions: raise
DCL01-C	tempfile.c	98	2	Do not reuse variable names in subscopes: tempfile
EXP36-C	tempfile.c	98	37	Do not convert pointers into more strictly aligned pointer types
DCL01-C	tempfile.c	108	48	Do not reuse variable names in subscopes: tempfile
EXP12-C	tempfile.c	114	3	Do not ignore values returned by functions: atexit
DCL01-C	tempfile.c	122	50	Do not reuse variable names in subscopes: tempfile
MEM01-C	tempfile.c	127	2	Store a new value in pointers immediately after free()
DCL01-C	tempfile.c	133	2	Do not reuse variable names in subscopes: tempfile
DCL00-C	tempfile.c	148	3	Const-qualify immutable objects: save_errno
MSC12-C	tempfile.c	149	3	Detect and remove code that has no effect
DCL01-C	tempfile.c	160	2	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	168	2	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	182	2	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	202	2	Do not reuse variable names in subscopes: tempfile
DCL00-C	tempfile.c	220	3	Const-qualify immutable objects: orig_errno
FIO42-C	tempfile.c	227	7	Close files when they are no longer needed
DCL00-C	tempfile.c	229	3	Const-qualify immutable objects: orig_errno
EXP12-C	tempfile.c	231	3	Do not ignore values returned by functions: lstat_cache_aware_rmdir
DCL01-C	tempfile.c	247	2	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	260	40	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	271	48	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	278	38	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	285	40	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	292	44	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	320	38	Do not reuse variable names in subscopes: tempfile
DCL01-C	tempfile.c	332	2	Do not reuse variable names in subscopes: tempfile
DCL00-C	tempfile.c	343	3	Const-qualify immutable objects: save_errno
DCL01-C	tempfile.c	356	2	Do not reuse variable names in subscopes: tempfile
EXP12-C	tempfile.c	361	2	Do not ignore values returned by functions: close_tempfile_gently
EXP12-C	tempfile.c	362	2	Do not ignore values returned by functions: unlink_or_warn
EXP12-C	thread-utils.c	79	3	Do not ignore values returned by functions: pthread_mutexattr_destroy
MEM01-C	tmp-objdir.c	31	2	Store a new value in pointers immediately after free()
EXP12-C	tmp-objdir.c	56	2	Do not ignore values returned by functions: tmp_objdir_destroy
EXP12-C	tmp-objdir.c	61	2	Do not ignore values returned by functions: remove_dir_recursively
EXP12-C	tmp-objdir.c	82	3	Do not ignore values returned by functions: quote_c_style
EXP12-C	tmp-objdir.c	98	2	Do not ignore values returned by functions: strvec_pushf
MEM34-C	tmp-objdir.c	108	2	Only free memory allocated dynamically
EXP36-C	tmp-objdir.c	121	13	Do not convert pointers into more strictly aligned pointer types
EXP12-C	tmp-objdir.c	140	3	Do not ignore values returned by functions: atexit
EXP12-C	tmp-objdir.c	145	3	Do not ignore values returned by functions: tmp_objdir_destroy
EXP12-C	tmp-objdir.c	198	2	Do not ignore values returned by functions: closedir
DCL00-C	tmp-objdir.c	223	2	Const-qualify immutable objects: src_len
DCL00-C	tmp-objdir.c	223	2	Const-qualify immutable objects: dst_len
INT01-C	tmp-objdir.c	233	16	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	tmp-objdir.c	239	7	Use bitwise operators only on unsigned operands
EXP12-C	tmp-objdir.c	272	2	Do not ignore values returned by functions: tmp_objdir_destroy
MEM01-C	tmp-objdir.c	314	2	Store a new value in pointers immediately after free()
MEM34-C	tmp-objdir.c	314	2	Only free memory allocated dynamically
DCL02-C	trace.c	27	1	Use visually distinct identifiers: trace_default_key
DCL02-C	trace.c	28	1	Use visually distinct identifiers: trace_perf_key
DCL02-C	trace.c	29	1	Use visually distinct identifiers: trace_setup_key
INT01-C	trace.c	47	25	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	trace.c	47	25	Ensure that return values are compared against the proper type
INT05-C	trace.c	48	13	Use strtol() or a related function to convert a string token to an integer
DCL00-C	trace.c	50	3	Const-qualify immutable objects: fd
FIO42-C	trace.c	50	12	Close files when they are no longer needed
EXP12-C	trace.c	80	2	Do not ignore values returned by functions: get_trace_fd
DCL01-C	trace.c	97	2	Do not reuse variable names in subscopes: tm
EXP12-C	trace.c	108	2	Do not ignore values returned by functions: gettimeofday
EXP12-C	trace.c	110	2	Do not ignore values returned by functions: localtime_r
INT01-C	trace.c	114	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	trace.c	196	24	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	trace.c	207	2	Do not specify the dimension of a character array initialized with a string literal
INT01-C	trace.c	216	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	trace.c	230	2	Const-qualify immutable objects: ap
EXP12-C	trace.c	231	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	trace.c	233	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	trace.c	239	2	Const-qualify immutable objects: ap
EXP12-C	trace.c	240	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	trace.c	242	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	trace.c	248	2	Const-qualify immutable objects: ap
EXP12-C	trace.c	249	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	trace.c	251	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	trace.c	257	2	Const-qualify immutable objects: ap
EXP12-C	trace.c	267	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	trace.c	269	2	Do not ignore values returned by functions: __builtin_va_end
MEM34-C	trace.c	317	2	Only free memory allocated dynamically
EXP12-C	trace.c	378	2	Do not ignore values returned by functions: gettimeofday
DCL00-C	trace.c	397	3	Const-qualify immutable objects: now
DCL00-C	trace.c	398	3	Const-qualify immutable objects: highres
EXP12-C	trace.c	424	2	Do not ignore values returned by functions: trace_performance_enter
EXP12-C	trace2.c	205	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	trace2.c	206	2	Do not ignore values returned by functions: raise
EXP12-C	trace2.c	228	2	Do not ignore values returned by functions: tr2_sid_get
EXP12-C	trace2.c	230	2	Do not ignore values returned by functions: atexit
EXP12-C	trace2.c	231	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	trace2.c	559	2	Do not ignore values returned by functions: tr2tls_create_self
DCL00-C	trace2.c	700	2	Const-qualify immutable objects: ap
EXP12-C	trace2.c	701	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	trace2.c	704	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	trace2.c	713	2	Const-qualify immutable objects: ap
EXP12-C	trace2.c	715	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	trace2.c	718	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	trace2.c	763	2	Const-qualify immutable objects: ap
EXP12-C	trace2.c	764	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	trace2.c	767	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	trace2.c	775	2	Const-qualify immutable objects: ap
EXP12-C	trace2.c	777	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	trace2.c	780	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	trace2.c	871	2	Const-qualify immutable objects: ap
EXP12-C	trace2.c	873	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	trace2.c	875	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	tracetr2_cfg.c	35	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_cfg.c	35	37	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_cfg.c	36	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_cfg.c	74	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_cfg.c	74	37	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_cfg.c	75	32	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	tracetr2_cfg.c	107	3	Const-qualify immutable objects: wm
EXP12-C	tracetr2_cmd_name.c	19	2	Do not ignore values returned by functions: setenv
INT05-C	tracetr2_dst.c	34	23	Use strtol() or a related function to convert a string token to an integer
INT05-C	tracetr2_dst.c	74	55	Use strtol() or a related function to convert a string token to an integer
INT01-C	tracetr2_dst.c	83	36	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_dst.c	128	36	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	tracetr2_dst.c	177	2	Const-qualify immutable objects: fd
FIO42-C	tracetr2_dst.c	177	11	Close files when they are no longer needed
EXP12-C	tracetr2_dst.c	211	2	Do not ignore values returned by functions: gitstrlcpy
DCL00-C	tracetr2_dst.c	214	3	Const-qualify immutable objects: saved_errno
INT13-C	tracetr2_dst.c	252	37	Use bitwise operators only on unsigned operands
INT01-C	tracetr2_dst.c	333	24	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	tracetr2_dst.c	333	24	Ensure that return values are compared against the proper type
INT05-C	tracetr2_dst.c	334	13	Use strtol() or a related function to convert a string token to an integer
DCL00-C	tracetr2_dst.c	363	2	Const-qualify immutable objects: fd
EXP12-C	tracetr2_dst.c	383	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	tracetr2_dst.c	385	2	Do not ignore values returned by functions: sigchain_pop
DCL00-C	tracetr2_sid.c	34	2	Const-qualify immutable objects: pid
EXP12-C	tracetr2_sid.c	49	3	Do not ignore values returned by functions: hash_to_hex_algop_r
EXP12-C	tracetr2_sid.c	90	2	Do not ignore values returned by functions: setenv
DCL13-C	tracetr2_sysenv.c	60	68	Declare function parameters that are pointers to values not changed by the function as const: d
INT01-C	tracetr2_sysenv.c	67	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_sysenv.c	87	6	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	tracetr2_sysenv.c	102	26	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	tracetr2_sysenv.c	123	28	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	tracetr2_sysenv.c	130	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	tracetr2_tbuf.c	7	2	Do not reuse variable names in subscopes: tm
EXP12-C	tracetr2_tbuf.c	10	2	Do not ignore values returned by functions: gettimeofday
EXP12-C	tracetr2_tbuf.c	12	2	Do not ignore values returned by functions: localtime_r
EXP12-C	tracetr2_tbuf.c	14	2	Do not ignore values returned by functions: xsnprintf
DCL01-C	tracetr2_tbuf.c	21	2	Do not reuse variable names in subscopes: tm
EXP12-C	tracetr2_tbuf.c	24	2	Do not ignore values returned by functions: gettimeofday
EXP12-C	tracetr2_tbuf.c	26	2	Do not ignore values returned by functions: gmtime_r
EXP12-C	tracetr2_tbuf.c	28	2	Do not ignore values returned by functions: xsnprintf
DCL01-C	tracetr2_tbuf.c	37	2	Do not reuse variable names in subscopes: tm
EXP12-C	tracetr2_tbuf.c	40	2	Do not ignore values returned by functions: gettimeofday
EXP12-C	tracetr2_tbuf.c	42	2	Do not ignore values returned by functions: gmtime_r
EXP12-C	tracetr2_tbuf.c	44	2	Do not ignore values returned by functions: xsnprintf
DCL02-C	tracetr2_tgt_event.c	663	1	Use visually distinct identifiers: tr2_tgt_event
DCL00-C	tracetr2_tgt_event.c	49	2	Const-qualify immutable objects: want
INT05-C	tracetr2_tgt_event.c	59	45	Use strtol() or a related function to convert a string token to an integer
DCL00-C	tracetr2_tgt_event.c	150	2	Const-qualify immutable objects: t_abs
DCL00-C	tracetr2_tgt_event.c	169	2	Const-qualify immutable objects: t_abs
DCL00-C	tracetr2_tgt_event.c	185	2	Const-qualify immutable objects: t_abs
DCL00-C	tracetr2_tgt_event.c	201	2	Const-qualify immutable objects: t_abs
DCL00-C	tracetr2_tgt_event.c	217	3	Const-qualify immutable objects: copy_ap
EXP12-C	tracetr2_tgt_event.c	220	3	Do not ignore values returned by functions: __builtin_va_copy
EXP12-C	tracetr2_tgt_event.c	222	3	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	tracetr2_tgt_event.c	374	2	Const-qualify immutable objects: t_rel
DCL00-C	tracetr2_tgt_event.c	395	2	Const-qualify immutable objects: t_rel
DCL00-C	tracetr2_tgt_event.c	430	2	Const-qualify immutable objects: t_rel
DCL00-C	tracetr2_tgt_event.c	483	2	Const-qualify immutable objects: scope
INT01-C	tracetr2_tgt_event.c	521	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tgt_event.c	546	27	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	tracetr2_tgt_event.c	548	3	Const-qualify immutable objects: t_rel
INT01-C	tracetr2_tgt_event.c	573	27	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	tracetr2_tgt_event.c	575	3	Const-qualify immutable objects: t_abs
DCL00-C	tracetr2_tgt_event.c	576	3	Const-qualify immutable objects: t_rel
INT01-C	tracetr2_tgt_event.c	601	27	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	tracetr2_tgt_event.c	603	3	Const-qualify immutable objects: t_abs
DCL00-C	tracetr2_tgt_event.c	604	3	Const-qualify immutable objects: t_rel
DCL00-C	tracetr2_tgt_event.c	627	2	Const-qualify immutable objects: t_total
DCL00-C	tracetr2_tgt_event.c	628	2	Const-qualify immutable objects: t_min
DCL00-C	tracetr2_tgt_event.c	629	2	Const-qualify immutable objects: t_max
DCL02-C	tracetr2_tgt_normal.c	369	1	Use visually distinct identifiers: tr2_tgt_normal
DCL00-C	tracetr2_tgt_normal.c	29	2	Const-qualify immutable objects: want
INT01-C	tracetr2_tgt_normal.c	62	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	tracetr2_tgt_normal.c	102	2	Const-qualify immutable objects: elapsed
DCL00-C	tracetr2_tgt_normal.c	112	2	Const-qualify immutable objects: elapsed
DCL00-C	tracetr2_tgt_normal.c	123	2	Const-qualify immutable objects: elapsed
DCL00-C	tracetr2_tgt_normal.c	134	3	Const-qualify immutable objects: copy_ap
EXP12-C	tracetr2_tgt_normal.c	136	3	Do not ignore values returned by functions: __builtin_va_copy
EXP12-C	tracetr2_tgt_normal.c	138	3	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	tracetr2_tgt_normal.c	249	2	Const-qualify immutable objects: elapsed
DCL00-C	tracetr2_tgt_normal.c	262	2	Const-qualify immutable objects: elapsed
DCL00-C	tracetr2_tgt_normal.c	302	2	Const-qualify immutable objects: scope
DCL00-C	tracetr2_tgt_normal.c	339	2	Const-qualify immutable objects: t_total
DCL00-C	tracetr2_tgt_normal.c	340	2	Const-qualify immutable objects: t_min
DCL00-C	tracetr2_tgt_normal.c	341	2	Const-qualify immutable objects: t_max
DCL02-C	tracetr2_tgt_perf.c	597	1	Use visually distinct identifiers: tr2_tgt_perf
DCL00-C	tracetr2_tgt_perf.c	37	2	Const-qualify immutable objects: want
INT01-C	tracetr2_tgt_perf.c	84	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tgt_perf.c	91	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tgt_perf.c	115	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tgt_perf.c	118	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tgt_perf.c	137	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tgt_perf.c	138	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tgt_perf.c	138	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	tracetr2_tgt_perf.c	225	3	Const-qualify immutable objects: copy_ap
EXP12-C	tracetr2_tgt_perf.c	227	3	Do not ignore values returned by functions: __builtin_va_copy
EXP12-C	tracetr2_tgt_perf.c	229	3	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	tracetr2_tgt_perf.c	446	2	Const-qualify immutable objects: scope
DCL00-C	tracetr2_tgt_perf.c	565	2	Const-qualify immutable objects: t_total
DCL00-C	tracetr2_tgt_perf.c	566	2	Const-qualify immutable objects: t_min
DCL00-C	tracetr2_tgt_perf.c	567	2	Const-qualify immutable objects: t_max
EXP36-C	tracetr2_tls.c	37	41	Do not convert pointers into more strictly aligned pointer types
INT01-C	tracetr2_tls.c	55	14	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	tracetr2_tls.c	59	2	Do not ignore values returned by functions: pthread_setspecific
EXP36-C	tracetr2_tls.c	71	27	Do not convert pointers into more strictly aligned pointer types
EXP12-C	tracetr2_tls.c	98	2	Do not ignore values returned by functions: pthread_setspecific
EXP05-C	tracetr2_tls.c	100	7	Do not cast away a const qualification
MEM34-C	tracetr2_tls.c	102	2	Only free memory allocated dynamically
INT01-C	tracetr2_tls.c	109	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tls.c	109	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tls.c	109	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tls.c	109	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tls.c	109	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tls.c	109	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tls.c	109	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tls.c	109	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tls.c	109	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	tracetr2_tls.c	109	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	tracetr2_tls.c	127	30	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tracetr2_tls.c	140	54	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	tracetr2_tls.c	157	2	Do not ignore values returned by functions: pthread_key_create
EXP12-C	tracetr2_tls.c	158	2	Do not ignore values returned by functions: init_recursive_mutex
EXP12-C	tracetr2_tls.c	169	2	Do not ignore values returned by functions: pthread_mutex_destroy
EXP12-C	tracetr2_tls.c	170	2	Do not ignore values returned by functions: pthread_key_delete
MSC12-C	tracetr2_tmr.c	56	2	Detect and remove code that has no effect
STR05-C	trailer.c	44	1	Use pointers to const when referring to string literals
INT01-C	trailer.c	75	13	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	trailer.c	75	21	Use bitwise operators only on unsigned operands
INT01-C	trailer.c	75	21	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	trailer.c	107	12	Use only explicitly signed or unsigned char type for numeric values
MEM01-C	trailer.c	123	2	Store a new value in pointers immediately after free()
MEM01-C	trailer.c	134	2	Store a new value in pointers immediately after free()
INT01-C	trailer.c	140	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	trailer.c	170	10	Do not apply operators expecting one type to data of an incompatible type
INT01-C	trailer.c	171	49	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	trailer.c	179	41	Do not convert pointers into more strictly aligned pointer types
DCL00-C	trailer.c	190	2	Const-qualify immutable objects: aoe
DCL13-C	trailer.c	201	28	Declare function parameters that are pointers to values not changed by the function as const: head
DCL00-C	trailer.c	203	2	Const-qualify immutable objects: where
EXP11-C	trailer.c	216	12	Do not apply operators expecting one type to data of an incompatible type
EXP12-C	trailer.c	230	3	Do not ignore values returned by functions: strvec_push
EXP12-C	trailer.c	237	3	Do not ignore values returned by functions: strvec_push
EXP05-C	trailer.c	239	24	Do not cast away a const qualification
MSC12-C	trailer.c	244	3	Detect and remove code that has no effect
EXP05-C	trailer.c	269	8	Do not cast away a const qualification
DCL00-C	trailer.c	344	2	Const-qualify immutable objects: where
DCL00-C	trailer.c	345	2	Const-qualify immutable objects: middle
DCL00-C	trailer.c	346	2	Const-qualify immutable objects: backwards
EXP11-C	trailer.c	352	14	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	trailer.c	357	12	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	trailer.c	375	13	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	trailer.c	451	10	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	trailer.c	457	2	Do not convert pointers into more strictly aligned pointer types
DCL13-C	trailer.c	482	17	Declare function parameters that are pointers to values not changed by the function as const: cb
DCL01-C	trailer.c	484	2	Do not reuse variable names in subscopes: trailer_item
DCL13-C	trailer.c	514	16	Declare function parameters that are pointers to values not changed by the function as const: cb
DCL01-C	trailer.c	516	2	Do not reuse variable names in subscopes: trailer_item
INT01-C	trailer.c	531	18	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	trailer.c	544	2	Store a new value in pointers immediately after free()
MEM34-C	trailer.c	544	2	Only free memory allocated dynamically
DCL13-C	trailer.c	594	65	Declare function parameters that are pointers to values not changed by the function as const: tok
DCL01-C	trailer.c	621	61	Do not reuse variable names in subscopes: separators
DCL02-C	trailer.c	621	61	Use visually distinct identifiers: separators
DCL02-C	trailer.c	621	61	Use visually distinct identifiers: separators
DCL02-C	trailer.c	621	61	Use visually distinct identifiers: separators
DCL02-C	trailer.c	621	61	Use visually distinct identifiers: separators
DCL02-C	trailer.c	621	61	Use visually distinct identifiers: separators
DCL02-C	trailer.c	621	61	Use visually distinct identifiers: separators
INT13-C	trailer.c	628	29	Use bitwise operators only on unsigned operands
DCL02-C	trailer.c	621	61	Use visually distinct identifiers: separators
DCL02-C	trailer.c	621	61	Use visually distinct identifiers: separators
EXP11-C	trailer.c	669	10	Do not apply operators expecting one type to data of an incompatible type
MEM01-C	trailer.c	675	4	Store a new value in pointers immediately after free()
MEM34-C	trailer.c	675	4	Only free memory allocated dynamically
EXP36-C	trailer.c	684	41	Do not convert pointers into more strictly aligned pointer types
DCL01-C	trailer.c	693	36	Do not reuse variable names in subscopes: new_trailer_item
EXP36-C	trailer.c	695	37	Do not convert pointers into more strictly aligned pointer types
EXP11-C	trailer.c	727	10	Do not apply operators expecting one type to data of an incompatible type
EXP11-C	trailer.c	738	4	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	trailer.c	739	3	Const-qualify immutable objects: separator_pos
MSC12-C	trailer.c	745	4	Detect and remove code that has no effect
MEM34-C	trailer.c	758	2	Only free memory allocated dynamically
INT01-C	trailer.c	784	10	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	trailer.c	784	10	Ensure that return values are compared against the proper type
INT01-C	trailer.c	786	10	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	trailer.c	786	10	Ensure that return values are compared against the proper type
INT01-C	trailer.c	793	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	trailer.c	898	12	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	trailer.c	927	2	Const-qualify immutable objects: ll
DCL00-C	trailer.c	941	3	Const-qualify immutable objects: c
EXP12-C	trailer.c	990	4	Do not ignore values returned by functions: add_trailer_item
EXP12-C	trailer.c	995	4	Do not ignore values returned by functions: strbuf_strip_suffix
EXP12-C	trailer.c	996	4	Do not ignore values returned by functions: add_trailer_item
INT01-C	trailer.c	1118	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	trailer.c	1118	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	trailer.c	1118	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	trailer.c	1118	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	trailer.c	1118	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	trailer.c	1118	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	trailer.c	1118	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	trailer.c	1118	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	trailer.c	1118	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	trailer.c	1118	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	trailer.c	1147	2	Const-qualify immutable objects: origlen
DCL00-C	trailer.c	1161	3	Const-qualify immutable objects: separator_pos
DCL00-C	trailer.c	1227	3	Const-qualify immutable objects: separator_pos
DCL01-C	transport-helper.c	24	2	Do not reuse variable names in subscopes: option
DCL01-C	transport-helper.c	24	2	Do not reuse variable names in subscopes: connect
DCL01-C	transport-helper.c	104	44	Do not reuse variable names in subscopes: transport
MEM34-C	transport-helper.c	110	2	Only free memory allocated dynamically
DCL01-C	transport-helper.c	115	59	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	117	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	transport-helper.c	126	18	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	131	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	transport-helper.c	132	2	Do not ignore values returned by functions: strvec_push
EXP12-C	transport-helper.c	133	2	Do not ignore values returned by functions: strvec_push
DCL01-C	transport-helper.c	229	48	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	231	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	244	4	Do not ignore values returned by functions: sigchain_push
EXP12-C	transport-helper.c	245	4	Do not ignore values returned by functions: xwrite
EXP12-C	transport-helper.c	246	4	Do not ignore values returned by functions: sigchain_pop
INT01-C	transport-helper.c	300	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	transport-helper.c	302	3	Do not ignore values returned by functions: quote_c_style
DCL01-C	transport-helper.c	313	48	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	316	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	320	2	Do not ignore values returned by functions: get_helper
EXP05-C	transport-helper.c	327	12	Do not cast away a const qualification
INT01-C	transport-helper.c	329	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	transport-helper.c	334	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	transport-helper.c	356	2	Const-qualify immutable objects: v
EXP12-C	transport-helper.c	358	2	Do not ignore values returned by functions: set_helper_option
EXP12-C	transport-helper.c	360	2	Do not ignore values returned by functions: xsnprintf
EXP12-C	transport-helper.c	361	2	Do not ignore values returned by functions: set_helper_option
MSC01-C	transport-helper.c	363	2	Strive for logical completeness
EXP12-C	transport-helper.c	371	3	Do not ignore values returned by functions: set_helper_option
EXP12-C	transport-helper.c	374	3	Do not ignore values returned by functions: set_helper_option
DCL01-C	transport-helper.c	379	45	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	382	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	transport-helper.c	389	47	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	392	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	transport-helper.c	435	43	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	438	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	442	2	Do not ignore values returned by functions: strvec_push
EXP12-C	transport-helper.c	443	2	Do not ignore values returned by functions: strvec_push
EXP12-C	transport-helper.c	444	2	Do not ignore values returned by functions: strvec_push
EXP12-C	transport-helper.c	448	3	Do not ignore values returned by functions: strvec_pushf
DCL01-C	transport-helper.c	456	43	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	460	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	469	2	Do not ignore values returned by functions: strvec_push
EXP12-C	transport-helper.c	470	2	Do not ignore values returned by functions: strvec_push
EXP12-C	transport-helper.c	471	2	Do not ignore values returned by functions: strvec_push
INT01-C	transport-helper.c	478	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	transport-helper.c	479	3	Do not ignore values returned by functions: strvec_push
DCL01-C	transport-helper.c	485	48	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	489	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	494	2	Do not ignore values returned by functions: get_helper
MEM01-C	transport-helper.c	550	4	Store a new value in pointers immediately after free()
MEM34-C	transport-helper.c	550	4	Only free memory allocated dynamically
DCL01-C	transport-helper.c	557	42	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	559	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	577	2	Do not ignore values returned by functions: setvbuf
DCL01-C	transport-helper.c	602	54	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	605	38	Do not convert pointers into more strictly aligned pointer types
DCL00-C	transport-helper.c	614	3	Const-qualify immutable objects: r
DCL01-C	transport-helper.c	637	46	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	640	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	transport-helper.c	653	45	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	656	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	659	2	Do not ignore values returned by functions: get_helper
DCL01-C	transport-helper.c	674	41	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	677	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	680	2	Do not ignore values returned by functions: get_helper
EXP12-C	transport-helper.c	724	3	Do not ignore values returned by functions: set_helper_option
EXP36-C	transport-helper.c	761	5	Do not convert pointers into more strictly aligned pointer types
EXP36-C	transport-helper.c	767	5	Do not convert pointers into more strictly aligned pointer types
INT07-C	transport-helper.c	775	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	transport-helper.c	808	10	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	transport-helper.c	817	4	Only free memory allocated dynamically
MEM34-C	transport-helper.c	821	4	Only free memory allocated dynamically
MEM34-C	transport-helper.c	825	4	Only free memory allocated dynamically
MEM34-C	transport-helper.c	829	4	Only free memory allocated dynamically
MEM34-C	transport-helper.c	833	4	Only free memory allocated dynamically
MEM34-C	transport-helper.c	837	4	Only free memory allocated dynamically
MEM34-C	transport-helper.c	841	4	Only free memory allocated dynamically
MEM34-C	transport-helper.c	845	4	Only free memory allocated dynamically
MEM34-C	transport-helper.c	849	4	Only free memory allocated dynamically
MEM34-C	transport-helper.c	853	4	Only free memory allocated dynamically
DCL01-C	transport-helper.c	887	2	Do not reuse variable names in subscopes: ref
EXP12-C	transport-helper.c	899	3	Do not ignore values returned by functions: push_update_ref_status
INT13-C	transport-helper.c	903	12	Use bitwise operators only on unsigned operands
EXP12-C	transport-helper.c	917	4	Do not ignore values returned by functions: update_ref
MEM01-C	transport-helper.c	919	4	Store a new value in pointers immediately after free()
MEM34-C	transport-helper.c	919	4	Only free memory allocated dynamically
EXP12-C	transport-helper.c	928	5	Do not ignore values returned by functions: update_ref
MEM01-C	transport-helper.c	933	5	Store a new value in pointers immediately after free()
MEM34-C	transport-helper.c	933	5	Only free memory allocated dynamically
DCL01-C	transport-helper.c	940	55	Do not reuse variable names in subscopes: transport
INT13-C	transport-helper.c	943	12	Use bitwise operators only on unsigned operands
INT13-C	transport-helper.c	946	19	Use bitwise operators only on unsigned operands
INT13-C	transport-helper.c	949	19	Use bitwise operators only on unsigned operands
INT13-C	transport-helper.c	954	12	Use bitwise operators only on unsigned operands
INT13-C	transport-helper.c	958	12	Use bitwise operators only on unsigned operands
INT13-C	transport-helper.c	963	12	Use bitwise operators only on unsigned operands
DCL01-C	transport-helper.c	971	50	Do not reuse variable names in subscopes: transport
DCL00-C	transport-helper.c	974	2	Const-qualify immutable objects: force_all
INT13-C	transport-helper.c	974	24	Use bitwise operators only on unsigned operands
DCL00-C	transport-helper.c	975	2	Const-qualify immutable objects: mirror
INT13-C	transport-helper.c	975	21	Use bitwise operators only on unsigned operands
DCL00-C	transport-helper.c	976	2	Const-qualify immutable objects: atomic
INT13-C	transport-helper.c	976	21	Use bitwise operators only on unsigned operands
EXP36-C	transport-helper.c	977	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	transport-helper.c	979	2	Do not reuse variable names in subscopes: ref
EXP12-C	transport-helper.c	983	2	Do not ignore values returned by functions: get_helper
EXP12-C	transport-helper.c	1036	4	Do not ignore values returned by functions: string_list_append_nodup
INT01-C	transport-helper.c	1040	14	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	transport-helper.c	1040	14	Ensure that return values are compared against the proper type
EXP12-C	transport-helper.c	1046	3	Do not ignore values returned by functions: set_helper_option
DCL01-C	transport-helper.c	1057	52	Do not reuse variable names in subscopes: transport
DCL01-C	transport-helper.c	1060	2	Do not reuse variable names in subscopes: ref
EXP36-C	transport-helper.c	1062	38	Do not convert pointers into more strictly aligned pointer types
INT13-C	transport-helper.c	1070	12	Use bitwise operators only on unsigned operands
EXP12-C	transport-helper.c	1086	4	Do not ignore values returned by functions: string_list_append_nodup
MEM01-C	transport-helper.c	1090	3	Store a new value in pointers immediately after free()
MEM34-C	transport-helper.c	1090	3	Only free memory allocated dynamically
EXP12-C	transport-helper.c	1109	5	Do not ignore values returned by functions: string_list_append
EXP12-C	transport-helper.c	1110	5	Do not ignore values returned by functions: string_list_append
EXP12-C	transport-helper.c	1130	3	Do not ignore values returned by functions: rename
DCL01-C	transport-helper.c	1137	40	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	1140	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	transport-helper.c	1181	52	Do not reuse variable names in subscopes: transport
EXP12-C	transport-helper.c	1184	2	Do not ignore values returned by functions: get_helper
DCL01-C	transport-helper.c	1195	63	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	1198	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport-helper.c	1209	3	Do not ignore values returned by functions: write_str_in_full
INT07-C	transport-helper.c	1242	8	Use only explicitly signed or unsigned char type for numeric values
INT07-C	transport-helper.c	1244	9	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	transport-helper.c	1265	3	Do not ignore values returned by functions: resolve_remote_symref
DCL01-C	transport-helper.c	1279	45	Do not reuse variable names in subscopes: transport
EXP36-C	transport-helper.c	1281	36	Do not convert pointers into more strictly aligned pointer types
DCL00-C	transport-helper.c	1316	2	Const-qualify immutable objects: args
EXP12-C	transport-helper.c	1325	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	transport-helper.c	1327	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	transport-helper.c	1388	16	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	transport-helper.c	1388	16	Ensure that return values are compared against the proper type
INT01-C	transport-helper.c	1392	55	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	transport-helper.c	1394	3	Detect and remove code that has no effect
INT01-C	transport-helper.c	1401	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	transport-helper.c	1415	16	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	transport-helper.c	1415	16	Ensure that return values are compared against the proper type
MSC12-C	transport-helper.c	1421	3	Detect and remove code that has no effect
INT01-C	transport-helper.c	1424	13	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	transport-helper.c	1470	3	Detect and remove code that has no effect
MSC12-C	transport-helper.c	1474	3	Detect and remove code that has no effect
INT13-C	transport-helper.c	1499	6	Use bitwise operators only on unsigned operands
INT13-C	transport-helper.c	1500	6	Use bitwise operators only on unsigned operands
DCL01-C	transport-helper.c	1616	2	Do not reuse variable names in subscopes: ref
INT01-C	transport.c	57	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	transport.c	75	45	Do not reuse variable names in subscopes: transport
DCL01-C	transport.c	78	2	Do not reuse variable names in subscopes: ref
DCL02-C	transport.c	534	35	Use visually distinct identifiers: flag
DCL00-C	transport.c	112	4	Const-qualify immutable objects: flag
DCL01-C	transport.c	112	4	Do not reuse variable names in subscopes: flag
EXP12-C	transport.c	113	4	Do not ignore values returned by functions: install_branch_config
DCL01-C	transport.c	128	58	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	130	48	Do not convert pointers into more strictly aligned pointer types
DCL01-C	transport.c	143	59	Do not reuse variable names in subscopes: transport
DCL13-C	transport.c	145	40	Declare function parameters that are pointers to values not changed by the function as const: transport_options
EXP36-C	transport.c	147	48	Do not convert pointers into more strictly aligned pointer types
INT01-C	transport.c	156	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	transport.c	159	3	Do not reuse variable names in subscopes: ref
EXP36-C	transport.c	160	28	Do not convert pointers into more strictly aligned pointer types
DCL01-C	transport.c	168	53	Do not reuse variable names in subscopes: transport
DCL13-C	transport.c	169	38	Declare function parameters that are pointers to values not changed by the function as const: to_fetch
EXP36-C	transport.c	171	48	Do not convert pointers into more strictly aligned pointer types
DCL01-C	transport.c	186	43	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	188	48	Do not convert pointers into more strictly aligned pointer types
MEM34-C	transport.c	192	2	Only free memory allocated dynamically
EXP11-C	transport.c	241	22	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	transport.c	241	22	Do not cast away a const qualification
DCL01-C	transport.c	263	44	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	265	45	Do not convert pointers into more strictly aligned pointer types
MSC01-C	transport.c	271	2	Strive for logical completeness
DCL01-C	transport.c	285	53	Do not reuse variable names in subscopes: transport
DCL01-C	transport.c	302	48	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	306	45	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport.c	312	2	Do not ignore values returned by functions: connect_setup
MSC01-C	transport.c	320	2	Strive for logical completeness
EXP12-C	transport.c	333	3	Do not ignore values returned by functions: get_remote_heads
MEM34-C	transport.c	341	4	Only free memory allocated dynamically
DCL01-C	transport.c	356	59	Do not reuse variable names in subscopes: transport
DCL01-C	transport.c	362	50	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	366	45	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport.c	371	2	Do not ignore values returned by functions: memset
DCL01-C	transport.c	461	40	Do not reuse variable names in subscopes: ref
DCL01-C	transport.c	476	39	Do not reuse variable names in subscopes: ref
DCL01-C	transport.c	490	52	Do not reuse variable names in subscopes: remote
EXP12-C	transport.c	496	2	Do not ignore values returned by functions: memset
DCL01-C	transport.c	512	51	Do not reuse variable names in subscopes: remote
DCL01-C	transport.c	512	71	Do not reuse variable names in subscopes: ref
EXP05-C	transport.c	527	33	Do not cast away a const qualification
EXP12-C	transport.c	572	4	Do not ignore values returned by functions: fputc
EXP12-C	transport.c	574	3	Do not ignore values returned by functions: fputc
DCL01-C	transport.c	578	45	Do not reuse variable names in subscopes: ref
INT07-C	transport.c	625	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	transport.c	629	9	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	transport.c	641	46	Do not reuse variable names in subscopes: ref
MEM34-C	transport.c	648	3	Only free memory allocated dynamically
MSC01-C	transport.c	651	2	Strive for logical completeness
DCL01-C	transport.c	726	46	Do not reuse variable names in subscopes: ref
EXP12-C	transport.c	737	3	Do not ignore values returned by functions: print_one_push_report
DCL00-C	transport.c	745	2	Const-qualify immutable objects: w
DCL01-C	transport.c	766	2	Do not reuse variable names in subscopes: ref
DCL00-C	transport.c	769	2	Const-qualify immutable objects: summary_width
MEM34-C	transport.c	810	2	Only free memory allocated dynamically
DCL01-C	transport.c	813	49	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	815	45	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport.c	825	2	Do not ignore values returned by functions: memset
INT13-C	transport.c	826	30	Use bitwise operators only on unsigned operands
INT13-C	transport.c	827	31	Use bitwise operators only on unsigned operands
INT13-C	transport.c	832	26	Use bitwise operators only on unsigned operands
INT13-C	transport.c	833	28	Use bitwise operators only on unsigned operands
INT13-C	transport.c	834	25	Use bitwise operators only on unsigned operands
INT13-C	transport.c	838	12	Use bitwise operators only on unsigned operands
INT13-C	transport.c	840	17	Use bitwise operators only on unsigned operands
MSC01-C	transport.c	845	2	Strive for logical completeness
DCL01-C	transport.c	875	42	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	878	45	Do not convert pointers into more strictly aligned pointer types
DCL01-C	transport.c	886	45	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	888	45	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport.c	895	3	Do not ignore values returned by functions: finish_connect
MEM34-C	transport.c	899	2	Only free memory allocated dynamically
DCL01-C	transport.c	910	44	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	919	2	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport.c	954	4	Do not ignore values returned by functions: string_list_split
DCL00-C	transport.c	991	3	Const-qualify immutable objects: ret
MEM01-C	transport.c	993	3	Store a new value in pointers immediately after free()
MEM34-C	transport.c	993	3	Only free memory allocated dynamically
MEM34-C	transport.c	994	3	Only free memory allocated dynamically
MEM01-C	transport.c	997	2	Store a new value in pointers immediately after free()
MEM34-C	transport.c	997	2	Only free memory allocated dynamically
DCL00-C	transport.c	1001	3	Const-qualify immutable objects: ret
MEM34-C	transport.c	1003	3	Only free memory allocated dynamically
MSC01-C	transport.c	1029	2	Strive for logical completeness
DCL01-C	transport.c	1063	48	Do not reuse variable names in subscopes: remote
EXP36-C	transport.c	1066	33	Do not convert pointers into more strictly aligned pointer types
EXP12-C	transport.c	1093	3	Do not ignore values returned by functions: transport_helper_init
EXP36-C	transport.c	1097	47	Do not convert pointers into more strictly aligned pointer types
EXP36-C	transport.c	1114	44	Do not convert pointers into more strictly aligned pointer types
DCL00-C	transport.c	1124	3	Const-qualify immutable objects: len
EXP12-C	transport.c	1126	3	Do not ignore values returned by functions: transport_helper_init
DCL01-C	transport.c	1144	71	Do not reuse variable names in subscopes: transport
DCL01-C	transport.c	1149	44	Do not reuse variable names in subscopes: transport
DCL01-C	transport.c	1172	48	Do not reuse variable names in subscopes: transport
INT01-C	transport.c	1201	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	transport.c	1214	48	Do not reuse variable names in subscopes: transport
EXP12-C	transport.c	1226	2	Do not ignore values returned by functions: strvec_push
EXP12-C	transport.c	1227	2	Do not ignore values returned by functions: strvec_push
EXP12-C	transport.c	1228	2	Do not ignore values returned by functions: strvec_push
EXP12-C	transport.c	1234	3	Do not ignore values returned by functions: finish_command
EXP12-C	transport.c	1238	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	transport.c	1268	2	Do not ignore values returned by functions: sigchain_pop
DCL01-C	transport.c	1278	24	Do not reuse variable names in subscopes: transport
DCL00-C	transport.c	1285	2	Const-qualify immutable objects: verbose
DCL00-C	transport.c	1286	2	Const-qualify immutable objects: quiet
INT13-C	transport.c	1287	24	Use bitwise operators only on unsigned operands
DCL00-C	transport.c	1288	2	Const-qualify immutable objects: pretend
INT13-C	transport.c	1288	22	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1316	12	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1317	15	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1318	12	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1319	15	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1320	12	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1321	15	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1322	12	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1323	15	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1335	9	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1336	9	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1338	14	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1342	13	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1342	55	Use bitwise operators only on unsigned operands
DCL01-C	transport.c	1345	3	Do not reuse variable names in subscopes: ref
INT13-C	transport.c	1368	14	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1369	15	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1369	57	Use bitwise operators only on unsigned operands
DCL01-C	transport.c	1372	3	Do not reuse variable names in subscopes: ref
INT13-C	transport.c	1395	14	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1402	17	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1406	13	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1409	12	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1412	14	Use bitwise operators only on unsigned operands
INT13-C	transport.c	1412	40	Use bitwise operators only on unsigned operands
DCL01-C	transport.c	1414	3	Do not reuse variable names in subscopes: ref
DCL01-C	transport.c	1430	63	Do not reuse variable names in subscopes: transport
EXP05-C	transport.c	1446	7	Do not cast away a const qualification
DCL01-C	transport.c	1449	44	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	1462	3	Do not convert pointers into more strictly aligned pointer types
EXP36-C	transport.c	1474	3	Do not convert pointers into more strictly aligned pointer types
MEM34-C	transport.c	1481	2	Only free memory allocated dynamically
DCL01-C	transport.c	1485	46	Do not reuse variable names in subscopes: transport
DCL00-C	transport.c	1487	2	Const-qualify immutable objects: in_signal_handler
INT01-C	transport.c	1490	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	transport.c	1499	41	Do not reuse variable names in subscopes: transport
DCL01-C	transport.c	1508	44	Do not reuse variable names in subscopes: transport
EXP36-C	transport.c	1514	13	Do not convert pointers into more strictly aligned pointer types
EXP05-C	transport.c	1514	13	Do not cast away a const qualification
INT13-C	transport.c	1547	9	Use bitwise operators only on unsigned operands
DCL00-C	tree-diff.c	140	2	Const-qualify immutable objects: len
DCL00-C	tree-diff.c	141	2	Const-qualify immutable objects: alloclen
INT01-C	tree-diff.c	145	21	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	tree-diff.c	146	3	Only free memory allocated dynamically
EXP36-C	tree-diff.c	150	14	Do not convert pointers into more strictly aligned pointer types
EXP11-C	tree-diff.c	156	13	Do not apply operators expecting one type to data of an incompatible type
INT36-C	tree-diff.c	156	13	Take care when converting from pointer to integer or integer to pointer
EXP11-C	tree-diff.c	161	12	Do not apply operators expecting one type to data of an incompatible type
INT07-C	tree-diff.c	164	15	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	tree-diff.c	190	2	Const-qualify immutable objects: old_baselen
MSC12-C	tree-diff.c	194	2	Detect and remove code that has no effect
EXP06-C	tree-diff.c	194	2	Operands to the sizeof operator should not contain side effects
EXP12-C	tree-diff.c	209	3	Do not ignore values returned by functions: tree_entry_extract
DCL00-C	tree-diff.c	232	4	Const-qualify immutable objects: tpi_valid
INT07-C	tree-diff.c	237	24	Use only explicitly signed or unsigned char type for numeric values
INT01-C	tree-diff.c	280	3	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	tree-diff.c	280	3	Do not convert pointers into more strictly aligned pointer types
DCL00-C	tree-diff.c	283	4	Const-qualify immutable objects: tpi_valid
MEM01-C	tree-diff.c	291	3	Store a new value in pointers immediately after free()
MEM34-C	tree-diff.c	291	3	Only free memory allocated dynamically
INT01-C	tree-diff.c	417	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	tree-diff.c	417	2	Do not convert pointers into more strictly aligned pointer types
INT01-C	tree-diff.c	418	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	tree-diff.c	418	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	tree-diff.c	546	2	Store a new value in pointers immediately after free()
MEM34-C	tree-diff.c	546	2	Only free memory allocated dynamically
MEM01-C	tree-diff.c	549	2	Store a new value in pointers immediately after free()
MEM34-C	tree-diff.c	549	2	Only free memory allocated dynamically
MEM34-C	tree-diff.c	550	2	Only free memory allocated dynamically
INT13-C	tree-diff.c	596	2	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	596	2	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	596	2	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	596	2	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	648	31	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	648	12	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	648	12	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	648	12	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	648	12	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	648	12	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	648	12	Use bitwise operators only on unsigned operands
INT13-C	tree-diff.c	648	33	Use bitwise operators only on unsigned operands
DCL00-C	tree-diff.c	685	2	Const-qualify immutable objects: pathchange_old
EXP12-C	tree-diff.c	689	2	Do not ignore values returned by functions: diff_tree_paths
MEM34-C	tree-diff.c	694	3	Only free memory allocated dynamically
INT14-C	tree-walk.c	20	8	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	tree-walk.c	46	21	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	tree-walk.c	52	28	Do not cast away a const qualification
DCL00-C	tree-walk.c	81	2	Const-qualify immutable objects: result
EXP12-C	tree-walk.c	106	2	Do not ignore values returned by functions: memset
EXP05-C	tree-walk.c	117	29	Do not cast away a const qualification
DCL00-C	tree-walk.c	119	2	Const-qualify immutable objects: len
EXP05-C	tree-walk.c	119	28	Do not cast away a const qualification
MSC12-C	tree-walk.c	144	3	Detect and remove code that has no effect
EXP12-C	tree-walk.c	199	2	Do not ignore values returned by functions: memset
INT01-C	tree-walk.c	200	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	200	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	202	36	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	tree-walk.c	209	3	Do not ignore values returned by functions: atexit
INT07-C	tree-walk.c	224	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	tree-walk.c	233	15	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	tree-walk.c	248	2	Const-qualify immutable objects: len
EXP12-C	tree-walk.c	251	2	Do not ignore values returned by functions: make_traverse_path
DCL00-C	tree-walk.c	286	2	Const-qualify immutable objects: cmp
EXP36-C	tree-walk.c	405	40	Do not convert pointers into more strictly aligned pointer types
MEM34-C	tree-walk.c	418	3	Only free memory allocated dynamically
DCL01-C	tree-walk.c	440	2	Do not reuse variable names in subscopes: error
DCL01-C	tree-walk.c	445	2	Do not reuse variable names in subscopes: interesting
INT01-C	tree-walk.c	454	11	Use rsize_t or size_t for all integer values representing the size of an object
INT34-C	tree-walk.c	525	16	Do not shift a negative number of bits or more bits than exist in the operand
INT34-C	tree-walk.c	527	20	Do not shift a negative number of bits or more bits than exist in the operand
INT34-C	tree-walk.c	545	20	Do not shift a negative number of bits or more bits than exist in the operand
MEM01-C	tree-walk.c	550	2	Store a new value in pointers immediately after free()
MEM34-C	tree-walk.c	550	2	Only free memory allocated dynamically
DCL01-C	tree-walk.c	559	2	Do not reuse variable names in subscopes: tree
DCL00-C	tree-walk.c	568	2	Const-qualify immutable objects: namelen
ARR30-C	tree-walk.c	588	11	Do not form or use out-of-bounds pointers or array subscripts
DCL01-C	tree-walk.c	608	2	Do not reuse variable names in subscopes: tree
MEM34-C	tree-walk.c	618	3	Only free memory allocated dynamically
MEM34-C	tree-walk.c	629	2	Only free memory allocated dynamically
DCL01-C	tree-walk.c	679	4	Do not reuse variable names in subscopes: tree
INT01-C	tree-walk.c	689	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	689	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	689	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	689	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	689	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	689	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	689	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	689	4	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	689	4	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	tree-walk.c	689	4	Do not convert pointers into more strictly aligned pointer types
INT07-C	tree-walk.c	715	17	Use only explicitly signed or unsigned char type for numeric values
INT01-C	tree-walk.c	726	19	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	tree-walk.c	726	19	Ensure that return values are compared against the proper type
INT07-C	tree-walk.c	728	19	Use only explicitly signed or unsigned char type for numeric values
INT01-C	tree-walk.c	735	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	738	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	tree-walk.c	746	39	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	tree-walk.c	805	5	Store a new value in pointers immediately after free()
MEM31-C	tree-walk.c	805	5	Free dynamically allocated memory when no longer needed
MEM34-C	tree-walk.c	805	5	Only free memory allocated dynamically
INT01-C	tree-walk.c	818	33	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	tree-walk.c	823	27	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	tree-walk.c	824	4	Only free memory allocated dynamically
MEM01-C	tree-walk.c	830	2	Store a new value in pointers immediately after free()
MEM34-C	tree-walk.c	830	2	Only free memory allocated dynamically
ARR30-C	tree-walk.c	889	12	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	tree-walk.c	932	3	Const-qualify immutable objects: n
DCL00-C	tree-walk.c	974	2	Const-qualify immutable objects: matchlen
DCL00-C	tree-walk.c	1024	2	Const-qualify immutable objects: baselen
INT01-C	tree-walk.c	1024	35	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
INT13-C	tree-walk.c	1028	2	Use bitwise operators only on unsigned operands
DCL00-C	tree-walk.c	1054	3	Const-qualify immutable objects: matchlen
INT01-C	tree-walk.c	1203	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	tree.c	12	1	Use visually distinct identifiers: tree_type
DCL01-C	tree.c	15	17	Do not reuse variable names in subscopes: tree
DCL01-C	tree.c	16	27	Do not reuse variable names in subscopes: pathspec
DCL00-C	tree.c	22	2	Const-qualify immutable objects: oldlen
DCL01-C	tree.c	53	4	Do not reuse variable names in subscopes: commit
DCL01-C	tree.c	85	21	Do not reuse variable names in subscopes: tree
DCL01-C	tree.c	86	31	Do not reuse variable names in subscopes: pathspec
DCL00-C	tree.c	90	2	Const-qualify immutable objects: ret
EXP05-C	tree.c	99	10	Do not cast away a const qualification
EXP05-C	tree.c	100	10	Do not cast away a const qualification
EXP36-C	tree.c	109	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	tree.c	110	23	Do not convert pointers into more strictly aligned pointer types
MEM34-C	tree.c	138	3	Only free memory allocated dynamically
DCL01-C	tree.c	145	36	Do not reuse variable names in subscopes: tree
INT01-C	unpack-trees.c	83	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	91	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	100	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	196	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	unpack-trees.c	203	2	Do not ignore values returned by functions: memset
EXP12-C	unpack-trees.c	223	2	Do not ignore values returned by functions: do_add_entry
EXP12-C	unpack-trees.c	245	2	Do not ignore values returned by functions: string_list_append
INT01-C	unpack-trees.c	259	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	264	18	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	unpack-trees.c	266	4	Detect and remove code that has no effect
INT01-C	unpack-trees.c	286	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	291	18	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	unpack-trees.c	329	54	Do not reuse variable names in subscopes: index
DCL00-C	unpack-trees.c	332	2	Const-qualify immutable objects: pos
EXP12-C	unpack-trees.c	340	4	Do not ignore values returned by functions: checkout_entry
DCL01-C	unpack-trees.c	347	30	Do not reuse variable names in subscopes: index
INT13-C	unpack-trees.c	356	33	Use bitwise operators only on unsigned operands
DCL01-C	unpack-trees.c	364	32	Do not reuse variable names in subscopes: index
INT13-C	unpack-trees.c	370	32	Use bitwise operators only on unsigned operands
DCL01-C	unpack-trees.c	373	58	Do not reuse variable names in subscopes: index
EXP12-C	unpack-trees.c	384	3	Do not ignore values returned by functions: string_list_append
INT13-C	unpack-trees.c	385	19	Use bitwise operators only on unsigned operands
INT01-C	unpack-trees.c	396	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	unpack-trees.c	409	25	Do not reuse variable names in subscopes: index
DCL01-C	unpack-trees.c	413	2	Do not reuse variable names in subscopes: progress
EXP12-C	unpack-trees.c	417	2	Do not ignore values returned by functions: trace_performance_enter
DCL00-C	unpack-trees.c	474	4	Const-qualify immutable objects: last_pc_queue_size
INT13-C	unpack-trees.c	479	20	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	480	9	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	487	8	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	490	7	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	515	19	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	536	19	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	545	20	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	556	20	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	560	19	Use bitwise operators only on unsigned operands
EXP12-C	unpack-trees.c	577	2	Do not ignore values returned by functions: add_rejected_path
DCL01-C	unpack-trees.c	610	52	Do not reuse variable names in subscopes: index
INT13-C	unpack-trees.c	614	32	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	614	57	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	614	46	Use bitwise operators only on unsigned operands
DCL01-C	unpack-trees.c	620	2	Do not reuse variable names in subscopes: index
DCL00-C	unpack-trees.c	621	2	Const-qualify immutable objects: len
DCL01-C	unpack-trees.c	636	2	Do not reuse variable names in subscopes: index
DCL00-C	unpack-trees.c	637	2	Const-qualify immutable objects: len
DCL01-C	unpack-trees.c	651	2	Do not reuse variable names in subscopes: index
DCL01-C	unpack-trees.c	666	2	Do not reuse variable names in subscopes: index
DCL00-C	unpack-trees.c	667	2	Const-qualify immutable objects: len
INT32-C	unpack-trees.c	672	13	Ensure that operations on signed integers do not result in overflow
EXP36-C	unpack-trees.c	697	23	Do not convert pointers into more strictly aligned pointer types
EXP36-C	unpack-trees.c	707	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	unpack-trees.c	716	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	unpack-trees.c	740	39	Do not convert pointers into more strictly aligned pointer types
INT34-C	unpack-trees.c	743	34	Do not shift a negative number of bits or more bits than exist in the operand
EXP36-C	unpack-trees.c	756	39	Do not convert pointers into more strictly aligned pointer types
INT32-C	unpack-trees.c	768	9	Ensure that operations on signed integers do not result in overflow
EXP36-C	unpack-trees.c	788	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	unpack-trees.c	814	22	Do not convert pointers into more strictly aligned pointer types
EXP12-C	unpack-trees.c	815	4	Do not ignore values returned by functions: memset
EXP36-C	unpack-trees.c	829	59	Do not convert pointers into more strictly aligned pointer types
MEM34-C	unpack-trees.c	831	4	Only free memory allocated dynamically
MEM01-C	unpack-trees.c	837	2	Store a new value in pointers immediately after free()
MEM34-C	unpack-trees.c	837	2	Only free memory allocated dynamically
EXP36-C	unpack-trees.c	851	39	Do not convert pointers into more strictly aligned pointer types
DCL00-C	unpack-trees.c	862	3	Const-qualify immutable objects: pos
DCL00-C	unpack-trees.c	949	3	Const-qualify immutable objects: cmp
DCL00-C	unpack-trees.c	1005	2	Const-qualify immutable objects: cmp
INT01-C	unpack-trees.c	1016	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1016	67	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1023	24	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1038	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	unpack-trees.c	1048	2	Const-qualify immutable objects: len
DCL00-C	unpack-trees.c	1049	2	Const-qualify immutable objects: alloc_len
INT01-C	unpack-trees.c	1049	47	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	unpack-trees.c	1060	2	Do not ignore values returned by functions: make_traverse_path
INT01-C	unpack-trees.c	1060	35	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	unpack-trees.c	1063	17	Use only explicitly signed or unsigned char type for numeric values
INT07-C	unpack-trees.c	1064	21	Use only explicitly signed or unsigned char type for numeric values
INT01-C	unpack-trees.c	1064	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	unpack-trees.c	1087	39	Do not convert pointers into more strictly aligned pointer types
INT32-C	unpack-trees.c	1111	8	Ensure that operations on signed integers do not result in overflow
ARR30-C	unpack-trees.c	1126	35	Do not form or use out-of-bounds pointers or array subscripts
EXP36-C	unpack-trees.c	1146	39	Do not convert pointers into more strictly aligned pointer types
DCL00-C	unpack-trees.c	1188	3	Const-qualify immutable objects: bit
INT34-C	unpack-trees.c	1188	26	Do not shift a negative number of bits or more bits than exist in the operand
INT14-C	unpack-trees.c	1211	21	Avoid performing bitwise and arithmetic operations on the same data
DCL00-C	unpack-trees.c	1217	3	Const-qualify immutable objects: rc
EXP36-C	unpack-trees.c	1256	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	unpack-trees.c	1257	2	Do not reuse variable names in subscopes: index
DCL00-C	unpack-trees.c	1258	2	Const-qualify immutable objects: pfxlen
INT01-C	unpack-trees.c	1309	13	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	unpack-trees.c	1330	2	Detect and remove code that has no effect
MSC12-C	unpack-trees.c	1331	2	Detect and remove code that has no effect
INT01-C	unpack-trees.c	1334	25	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1334	55	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1334	42	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1335	33	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	unpack-trees.c	1347	39	Do not convert pointers into more strictly aligned pointer types
INT32-C	unpack-trees.c	1358	8	Ensure that operations on signed integers do not result in overflow
EXP12-C	unpack-trees.c	1415	2	Do not ignore values returned by functions: putchar
EXP36-C	unpack-trees.c	1438	39	Do not convert pointers into more strictly aligned pointer types
MSC12-C	unpack-trees.c	1441	2	Detect and remove code that has no effect
INT13-C	unpack-trees.c	1452	41	Use bitwise operators only on unsigned operands
INT14-C	unpack-trees.c	1463	6	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	unpack-trees.c	1479	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	unpack-trees.c	1590	16	Do not reuse variable names in subscopes: __xpg_basename
INT13-C	unpack-trees.c	1622	23	Use bitwise operators only on unsigned operands
INT01-C	unpack-trees.c	1635	36	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1682	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1706	39	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1719	44	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unpack-trees.c	1719	38	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	unpack-trees.c	1731	20	Use bitwise operators only on unsigned operands
EXP12-C	unpack-trees.c	1755	2	Do not ignore values returned by functions: xsnprintf
INT13-C	unpack-trees.c	1793	20	Use bitwise operators only on unsigned operands
EXP12-C	unpack-trees.c	1800	2	Do not ignore values returned by functions: clear_ce_flags
EXP12-C	unpack-trees.c	1874	2	Do not ignore values returned by functions: trace_performance_enter
EXP12-C	unpack-trees.c	1899	3	Do not ignore values returned by functions: memset
EXP12-C	unpack-trees.c	1904	2	Do not ignore values returned by functions: memset
EXP36-C	unpack-trees.c	1944	16	Do not convert pointers into more strictly aligned pointer types
EXP12-C	unpack-trees.c	1974	3	Do not ignore values returned by functions: trace_performance_enter
INT13-C	unpack-trees.c	2007	39	Use bitwise operators only on unsigned operands
EXP12-C	unpack-trees.c	2105	2	Do not ignore values returned by functions: trace_performance_enter
EXP12-C	unpack-trees.c	2109	3	Do not ignore values returned by functions: memset
DCL00-C	unpack-trees.c	2198	3	Const-qualify immutable objects: flags
DCL00-C	unpack-trees.c	2199	3	Const-qualify immutable objects: changed
DCL00-C	unpack-trees.c	2202	4	Const-qualify immutable objects: r
DCL00-C	unpack-trees.c	2292	3	Const-qualify immutable objects: sub_head
DCL00-C	unpack-trees.c	2312	3	Const-qualify immutable objects: len
EXP12-C	unpack-trees.c	2334	2	Do not ignore values returned by functions: memset
MEM01-C	unpack-trees.c	2339	2	Store a new value in pointers immediately after free()
MEM34-C	unpack-trees.c	2339	2	Only free memory allocated dynamically
MEM34-C	unpack-trees.c	2473	3	Only free memory allocated dynamically
INT13-C	unpack-trees.c	2535	10	Use bitwise operators only on unsigned operands
DCL00-C	unpack-trees.c	2546	4	Const-qualify immutable objects: ret
INT13-C	unpack-trees.c	2570	48	Use bitwise operators only on unsigned operands
DCL00-C	unpack-trees.c	2575	4	Const-qualify immutable objects: ret
DCL01-C	unpack-trees.c	2679	2	Do not reuse variable names in subscopes: index
DCL01-C	unpack-trees.c	2681	2	Do not reuse variable names in subscopes: remote
EXP30-C	unpack-trees.c	2795	7	Do not depend on order of evaluation for side effects
EXP12-C	unpack-trees.c	2840	5	Do not ignore values returned by functions: keep_entry
EXP30-C	unpack-trees.c	2892	14	Do not depend on order of evaluation for side effects
INT13-C	unpack-trees.c	2996	12	Use bitwise operators only on unsigned operands
INT13-C	unpack-trees.c	3000	11	Use bitwise operators only on unsigned operands
DCL01-C	unpack-trees.c	3016	2	Do not reuse variable names in subscopes: worktree
DCL01-C	upload-pack.c	89	2	Do not reuse variable names in subscopes: allow_uor
EXP12-C	upload-pack.c	132	2	Do not ignore values returned by functions: memset
EXP05-C	upload-pack.c	167	7	Do not cast away a const qualification
EXP12-C	upload-pack.c	172	2	Do not ignore values returned by functions: alarm
EXP12-C	upload-pack.c	187	3	Do not ignore values returned by functions: xwrite
EXP36-C	upload-pack.c	195	13	Do not convert pointers into more strictly aligned pointer types
INT01-C	upload-pack.c	230	29	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	upload-pack.c	254	7	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	upload-pack.c	283	2	Do not reuse variable names in subscopes: output_state
EXP36-C	upload-pack.c	283	45	Do not convert pointers into more strictly aligned pointer types
DCL01-C	upload-pack.c	284	2	Do not reuse variable names in subscopes: progress
STR11-C	upload-pack.c	285	2	Do not specify the dimension of a character array initialized with a string literal
EXP12-C	upload-pack.c	294	3	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	295	3	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	300	3	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	301	3	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	303	2	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	304	2	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	308	2	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	320	3	Do not ignore values returned by functions: strvec_pushf
INT01-C	upload-pack.c	323	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	upload-pack.c	324	4	Do not ignore values returned by functions: strvec_pushf
MSC12-C	upload-pack.c	393	5	Detect and remove code that has no effect
EXP12-C	upload-pack.c	394	5	Do not ignore values returned by functions: sleep
INT13-C	upload-pack.c	398	35	Use bitwise operators only on unsigned operands
INT13-C	upload-pack.c	416	35	Use bitwise operators only on unsigned operands
DCL00-C	upload-pack.c	417	4	Const-qualify immutable objects: result
STR11-C	upload-pack.c	441	4	Do not specify the dimension of a character array initialized with a string literal
MSC12-C	upload-pack.c	447	3	Detect and remove code that has no effect
MEM01-C	upload-pack.c	457	2	Store a new value in pointers immediately after free()
MEM34-C	upload-pack.c	457	2	Only free memory allocated dynamically
MEM01-C	upload-pack.c	463	2	Store a new value in pointers immediately after free()
MEM34-C	upload-pack.c	463	2	Only free memory allocated dynamically
DCL01-C	upload-pack.c	478	3	Do not reuse variable names in subscopes: commit
EXP11-C	upload-pack.c	478	27	Do not apply operators expecting one type to data of an incompatible type
DCL00-C	upload-pack.c	510	2	Const-qualify immutable objects: min_generation
EXP12-C	upload-pack.c	573	5	Do not ignore values returned by functions: oid_to_hex_r
DCL01-C	upload-pack.c	597	56	Do not reuse variable names in subscopes: allow_uor
DCL00-C	upload-pack.c	599	2	Const-qualify immutable objects: allow_hidden_ref
INT13-C	upload-pack.c	600	21	Use bitwise operators only on unsigned operands
DCL01-C	upload-pack.c	610	20	Do not reuse variable names in subscopes: allow_uor
EXP12-C	upload-pack.c	627	2	Do not ignore values returned by functions: sigchain_push
EXP12-C	upload-pack.c	661	2	Do not ignore values returned by functions: sigchain_pop
EXP12-C	upload-pack.c	666	2	Do not ignore values returned by functions: sigchain_pop
DCL01-C	upload-pack.c	716	69	Do not reuse variable names in subscopes: allow_uor
DCL01-C	upload-pack.c	785	3	Do not reuse variable names in subscopes: object
EXP12-C	upload-pack.c	789	4	Do not ignore values returned by functions: register_shallow
DCL01-C	upload-pack.c	801	3	Do not reuse variable names in subscopes: object
EXP12-C	upload-pack.c	814	4	Do not ignore values returned by functions: unregister_shallow
EXP12-C	upload-pack.c	826	3	Do not ignore values returned by functions: register_shallow
DCL01-C	upload-pack.c	838	4	Do not reuse variable names in subscopes: object
EXP12-C	upload-pack.c	849	3	Do not ignore values returned by functions: head_ref_namespaced
EXP12-C	upload-pack.c	850	3	Do not ignore values returned by functions: for_each_namespaced_ref
EXP12-C	upload-pack.c	852	3	Do not ignore values returned by functions: get_reachable_list
INT14-C	upload-pack.c	853	10	Avoid performing bitwise and arithmetic operations on the same data
EXP12-C	upload-pack.c	898	3	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	902	4	Do not ignore values returned by functions: strvec_push
INT01-C	upload-pack.c	903	18	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	upload-pack.c	905	5	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	907	4	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	911	4	Do not ignore values returned by functions: strvec_push
EXP12-C	upload-pack.c	920	5	Do not ignore values returned by functions: register_shallow
DCL01-C	upload-pack.c	934	3	Do not reuse variable names in subscopes: object
DCL01-C	upload-pack.c	986	3	Do not reuse variable names in subscopes: ref
EXP12-C	upload-pack.c	990	3	Do not ignore values returned by functions: string_list_append
MEM01-C	upload-pack.c	991	3	Store a new value in pointers immediately after free()
MEM34-C	upload-pack.c	991	3	Only free memory allocated dynamically
DCL00-C	upload-pack.c	1003	2	Const-qualify immutable objects: ap
EXP12-C	upload-pack.c	1005	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	upload-pack.c	1007	2	Do not ignore values returned by functions: __builtin_va_end
MEM30-C	upload-pack.c	1123	4	Do not access freed memory
MEM34-C	upload-pack.c	1123	4	Only free memory allocated dynamically
EXP36-C	upload-pack.c	1181	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	upload-pack.c	1183	2	Do not ignore values returned by functions: mark_our_ref
EXP36-C	upload-pack.c	1210	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	upload-pack.c	1257	28	Do not convert pointers into more strictly aligned pointer types
EXP11-C	upload-pack.c	1282	4	Do not apply operators expecting one type to data of an incompatible type
INT36-C	upload-pack.c	1282	4	Take care when converting from pointer to integer or integer to pointer
EXP11-C	upload-pack.c	1289	4	Do not apply operators expecting one type to data of an incompatible type
EXP36-C	upload-pack.c	1299	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	upload-pack.c	1340	34	Do not convert pointers into more strictly aligned pointer types
EXP12-C	upload-pack.c	1367	2	Do not ignore values returned by functions: head_ref_namespaced
EXP12-C	upload-pack.c	1373	3	Do not ignore values returned by functions: head_ref_namespaced
EXP12-C	upload-pack.c	1374	3	Do not ignore values returned by functions: for_each_namespaced_ref
EXP12-C	upload-pack.c	1383	3	Do not ignore values returned by functions: head_ref_namespaced
EXP12-C	upload-pack.c	1384	3	Do not ignore values returned by functions: for_each_namespaced_ref
EXP12-C	upload-pack.c	1405	4	Do not ignore values returned by functions: get_common_commits
DCL01-C	upload-pack.c	1471	4	Do not reuse variable names in subscopes: commit
EXP12-C	upload-pack.c	1580	4	Do not ignore values returned by functions: string_list_split
INT01-C	upload-pack.c	1588	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	upload-pack.c	1600	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	upload-pack.c	1609	3	Do not ignore values returned by functions: do_got_oid
INT01-C	upload-pack.c	1625	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	upload-pack.c	1644	2	Do not ignore values returned by functions: process_haves
EXP36-C	upload-pack.c	1672	24	Do not convert pointers into more strictly aligned pointer types
DCL13-C	upload-pack.c	1702	39	Declare function parameters that are pointers to values not changed by the function as const: r
MSC01-C	upload-pack.c	1714	3	Strive for logical completeness
DCL13-C	upload-pack.c	1767	46	Declare function parameters that are pointers to values not changed by the function as const: r
MEM01-C	upload-pack.c	1802	4	Store a new value in pointers immediately after free()
MEM34-C	upload-pack.c	1802	4	Only free memory allocated dynamically
INT13-C	url.c	14	27	Use bitwise operators only on unsigned operands
INT07-C	url.c	24	14	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	url.c	39	3	Const-qualify immutable objects: c
DCL00-C	url.c	50	4	Const-qualify immutable objects: val
INT01-C	urlmatch.c	45	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	51	13	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	urlmatch.c	74	46	Do not reuse variable names in subscopes: url_info
INT01-C	urlmatch.c	159	46	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	160	40	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	160	65	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	169	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	196	28	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	196	47	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	198	39	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	202	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	243	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	288	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	313	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	317	57	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	urlmatch.c	334	3	Const-qualify immutable objects: seg_start_off
INT01-C	urlmatch.c	356	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	359	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	384	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	459	41	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	urlmatch.c	459	41	Ensure that return values are compared against the proper type
INT01-C	urlmatch.c	461	32	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	urlmatch.c	466	25	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	urlmatch.c	491	2	Use only explicitly signed or unsigned char type for numeric values
INT07-C	urlmatch.c	509	15	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	urlmatch.c	554	36	Do not convert pointers into more strictly aligned pointer types
MEM01-C	urlmatch.c	582	3	Store a new value in pointers immediately after free()
MEM34-C	urlmatch.c	582	3	Only free memory allocated dynamically
MEM01-C	urlmatch.c	583	3	Store a new value in pointers immediately after free()
MEM34-C	urlmatch.c	583	3	Only free memory allocated dynamically
EXP36-C	urlmatch.c	596	31	Do not convert pointers into more strictly aligned pointer types
DCL02-C	usage.c	291	1	Use visually distinct identifiers: BUG_exit_code
DCL02-C	usage.c	334	1	Use visually distinct identifiers: bug_called_must_BUG
DCL00-C	usage.c	13	2	Const-qualify immutable objects: prefix_len
INT07-C	usage.c	22	6	Use only explicitly signed or unsigned char type for numeric values
INT07-C	usage.c	26	7	Use only explicitly signed or unsigned char type for numeric values
INT07-C	usage.c	29	9	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	usage.c	31	2	Do not ignore values returned by functions: write_in_full
DCL00-C	usage.c	71	2	Const-qualify immutable objects: die_message_fn
DCL05-C	usage.c	152	1	Use typedefs to improve code readability
DCL00-C	usage.c	159	2	Const-qualify immutable objects: params
EXP12-C	usage.c	161	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	163	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	usage.c	173	2	Const-qualify immutable objects: params
EXP12-C	usage.c	180	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	182	2	Do not ignore values returned by functions: __builtin_va_end
INT07-C	usage.c	191	25	Use only explicitly signed or unsigned char type for numeric values
INT01-C	usage.c	191	50	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	usage.c	194	29	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	usage.c	195	19	Use only explicitly signed or unsigned char type for numeric values
INT07-C	usage.c	203	15	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	usage.c	212	2	Const-qualify immutable objects: params
EXP12-C	usage.c	220	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	222	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	usage.c	228	2	Const-qualify immutable objects: params
EXP12-C	usage.c	230	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	232	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	usage.c	240	2	Const-qualify immutable objects: params
EXP12-C	usage.c	242	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	244	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	usage.c	252	2	Const-qualify immutable objects: params
EXP12-C	usage.c	254	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	256	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	usage.c	263	2	Const-qualify immutable objects: params
EXP12-C	usage.c	265	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	267	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	usage.c	274	2	Const-qualify immutable objects: params
EXP12-C	usage.c	276	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	278	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	usage.c	283	2	Const-qualify immutable objects: params
EXP12-C	usage.c	285	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	287	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	usage.c	306	2	Const-qualify immutable objects: params_copy
EXP12-C	usage.c	309	2	Do not ignore values returned by functions: __builtin_va_copy
DCL00-C	usage.c	325	2	Const-qualify immutable objects: ap
EXP12-C	usage.c	329	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	331	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	usage.c	337	2	Const-qualify immutable objects: ap
EXP12-C	usage.c	341	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	343	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	usage.c	345	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	usage.c	347	2	Do not ignore values returned by functions: __builtin_va_end
EXP36-C	userdiff.c	320	41	Do not convert pointers into more strictly aligned pointer types
EXP12-C	userdiff.c	336	2	Do not ignore values returned by functions: for_each_userdiff_driver
EXP36-C	userdiff.c	375	3	Do not convert pointers into more strictly aligned pointer types
EXP12-C	userdiff.c	377	3	Do not ignore values returned by functions: memset
DCL00-C	userdiff.c	402	2	Const-qualify immutable objects: len
EXP36-C	userdiff.c	433	34	Do not convert pointers into more strictly aligned pointer types
INT01-C	userdiff.c	471	10	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	utf8.c	785	1	Use visually distinct identifiers: utf8_bom
INT01-C	utf8.c	98	31	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	utf8.c	102	33	Use rsize_t or size_t for all integer values representing the size of an object
EXP11-C	utf8.c	122	21	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	utf8.c	122	21	Do not cast away a const qualification
INT01-C	utf8.c	133	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	utf8.c	141	17	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	utf8.c	145	29	Use bitwise operators only on unsigned operands
INT01-C	utf8.c	149	17	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	utf8.c	161	25	Use bitwise operators only on unsigned operands
INT13-C	utf8.c	160	30	Use bitwise operators only on unsigned operands
INT01-C	utf8.c	165	17	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	utf8.c	175	25	Use bitwise operators only on unsigned operands
INT13-C	utf8.c	174	54	Use bitwise operators only on unsigned operands
INT13-C	utf8.c	174	30	Use bitwise operators only on unsigned operands
DCL00-C	utf8.c	198	2	Const-qualify immutable objects: ch
EXP12-C	utf8.c	238	3	Do not ignore values returned by functions: utf8_width
DCL00-C	utf8.c	272	2	Const-qualify immutable objects: orig_len
INT32-C	utf8.c	284	7	Ensure that operations on signed integers do not result in overflow
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
DCL01-C	utf8.c	298	5	Do not reuse variable names in subscopes: start
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
DCL02-C	utf8.c	298	5	Use visually distinct identifiers: start
INT13-C	utf8.c	317	16	Use bitwise operators only on unsigned operands
INT14-C	utf8.c	328	10	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	utf8.c	328	16	Avoid performing bitwise and arithmetic operations on the same data
MEM34-C	utf8.c	354	2	Only free memory allocated dynamically
DCL00-C	utf8.c	362	2	Const-qualify immutable objects: end
INT01-C	utf8.c	368	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	utf8.c	388	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	utf8.c	394	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	utf8.c	399	5	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	utf8.c	415	3	Do not ignore values returned by functions: skip_prefix
EXP12-C	utf8.c	416	3	Do not ignore values returned by functions: skip_prefix
STR11-C	utf8.c	433	2	Do not specify the dimension of a character array initialized with a string literal
DCL00-C	utf8.c	451	2	Const-qualify immutable objects: arg
EXP12-C	utf8.c	454	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	utf8.c	456	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	utf8.c	483	29	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	utf8.c	486	7	Do not cast away a const qualification
DCL00-C	utf8.c	489	3	Const-qualify immutable objects: cnt
MEM34-C	utf8.c	494	5	Only free memory allocated dynamically
INT01-C	utf8.c	506	29	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	utf8.c	509	12	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	utf8.c	594	2	Do not ignore values returned by functions: iconv_close
INT01-C	utf8.c	595	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	utf8.c	650	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	utf8.c	654	3	Do not ignore values returned by functions: pick_one_utf8_char
INT01-C	utf8.c	669	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	utf8.c	682	3	Const-qualify immutable objects: out
MSC01-C	utf8.c	693	3	Strive for logical completeness
INT01-C	utf8.c	731	20	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	utf8.c	785	1	Do not specify the dimension of a character array initialized with a string literal
DCL00-C	utf8.c	799	2	Const-qualify immutable objects: slen
DCL00-C	utf8.c	800	2	Const-qualify immutable objects: display_len
DCL00-C	utf8.c	801	2	Const-qualify immutable objects: utf8_compensation
DCL00-C	utf8.c	811	3	Const-qualify immutable objects: left
INT13-C	varint.c	11	15	Use bitwise operators only on unsigned operands
INT01-C	varint.c	11	15	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	varint.c	14	7	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	varint.c	23	32	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	varint.c	26	17	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	varint.c	28	44	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	varint.c	29	24	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	version.c	5	1	Use visually distinct identifiers: git_version_string
DCL02-C	version.c	6	1	Use visually distinct identifiers: git_built_from_commit_string
STR11-C	version.c	5	1	Do not specify the dimension of a character array initialized with a string literal
STR11-C	version.c	6	1	Do not specify the dimension of a character array initialized with a string literal
INT01-C	version.c	31	17	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	version.c	33	16	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	versioncmp.c	42	2	Const-qualify immutable objects: end
INT01-C	versioncmp.c	80	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	versioncmp.c	82	3	Const-qualify immutable objects: suffix_len
EXP11-C	versioncmp.c	118	28	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	versioncmp.c	118	28	Do not cast away a const qualification
EXP11-C	versioncmp.c	119	28	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	versioncmp.c	119	28	Do not cast away a const qualification
INT14-C	versioncmp.c	150	8	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	versioncmp.c	159	9	Avoid performing bitwise and arithmetic operations on the same data
EXP05-C	versioncmp.c	173	46	Do not cast away a const qualification
INT14-C	versioncmp.c	177	8	Avoid performing bitwise and arithmetic operations on the same data
DCL01-C	walker.c	15	32	Do not reuse variable names in subscopes: walker
DCL00-C	walker.c	18	3	Const-qualify immutable objects: ap
EXP12-C	walker.c	19	3	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	walker.c	21	3	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	walker.c	37	40	Do not reuse variable names in subscopes: walker
DCL01-C	walker.c	37	61	Do not reuse variable names in subscopes: tree
DCL02-C	walker.c	53	4	Use visually distinct identifiers: tree
DCL01-C	walker.c	53	4	Do not reuse variable names in subscopes: tree
DCL02-C	walker.c	53	4	Use visually distinct identifiers: tree
DCL01-C	walker.c	59	4	Do not reuse variable names in subscopes: blob
DCL01-C	walker.c	78	42	Do not reuse variable names in subscopes: walker
DCL01-C	walker.c	78	65	Do not reuse variable names in subscopes: commit
EXP12-C	walker.c	86	3	Do not ignore values returned by functions: pop_most_recent_commit
DCL01-C	walker.c	107	39	Do not reuse variable names in subscopes: walker
DCL01-C	walker.c	107	59	Do not reuse variable names in subscopes: tag
DCL01-C	walker.c	117	42	Do not reuse variable names in subscopes: walker
DCL01-C	walker.c	142	35	Do not reuse variable names in subscopes: walker
EXP12-C	walker.c	158	2	Do not ignore values returned by functions: object_list_insert
DCL01-C	walker.c	163	32	Do not reuse variable names in subscopes: walker
DCL01-C	walker.c	166	2	Do not reuse variable names in subscopes: progress
MEM01-C	walker.c	176	3	Store a new value in pointers immediately after free()
MEM34-C	walker.c	176	3	Only free memory allocated dynamically
DCL01-C	walker.c	202	44	Do not reuse variable names in subscopes: walker
DCL01-C	walker.c	207	3	Do not reuse variable names in subscopes: ref
MEM34-C	walker.c	210	4	Only free memory allocated dynamically
MEM34-C	walker.c	213	3	Only free memory allocated dynamically
DCL13-C	walker.c	221	11	Declare function parameters that are pointers to values not changed by the function as const: cb_data
DCL01-C	walker.c	223	2	Do not reuse variable names in subscopes: commit
EXP12-C	walker.c	228	3	Do not ignore values returned by functions: commit_list_insert
DCL05-C	walker.c	233	1	Use typedefs to improve code readability
INT07-C	walker.c	247	14	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	walker.c	251	4	Do not convert pointers into more strictly aligned pointer types
EXP36-C	walker.c	252	4	Do not convert pointers into more strictly aligned pointer types
ARR30-C	walker.c	254	12	Do not form or use out-of-bounds pointers or array subscripts
DCL05-C	walker.c	262	1	Use typedefs to improve code readability
EXP05-C	walker.c	267	9	Do not cast away a const qualification
DCL05-C	walker.c	271	1	Use typedefs to improve code readability
DCL01-C	walker.c	271	33	Do not reuse variable names in subscopes: walker
EXP36-C	walker.c	283	2	Do not convert pointers into more strictly aligned pointer types
MSC12-C	walker.c	288	4	Detect and remove code that has no effect
EXP12-C	walker.c	294	3	Do not ignore values returned by functions: for_each_ref
MSC12-C	walker.c	300	4	Detect and remove code that has no effect
MSC12-C	walker.c	327	4	Detect and remove code that has no effect
MSC12-C	walker.c	332	3	Detect and remove code that has no effect
MEM01-C	walker.c	340	2	Store a new value in pointers immediately after free()
MEM34-C	walker.c	340	2	Only free memory allocated dynamically
MEM01-C	walker.c	341	2	Store a new value in pointers immediately after free()
MEM34-C	walker.c	341	2	Only free memory allocated dynamically
DCL01-C	walker.c	347	33	Do not reuse variable names in subscopes: walker
MEM01-C	walker.c	350	2	Store a new value in pointers immediately after free()
INT13-C	wildmatch.c	65	32	Use bitwise operators only on unsigned operands
INT13-C	wildmatch.c	67	32	Use bitwise operators only on unsigned operands
EXP05-C	wildmatch.c	116	17	Do not cast away a const qualification
EXP05-C	wildmatch.c	126	32	Do not cast away a const qualification
EXP11-C	wildmatch.c	129	12	Do not apply operators expecting one type to data of an incompatible type
EXP05-C	wildmatch.c	129	12	Do not cast away a const qualification
INT13-C	wildmatch.c	146	35	Use bitwise operators only on unsigned operands
INT13-C	wildmatch.c	150	36	Use bitwise operators only on unsigned operands
INT13-C	wildmatch.c	199	40	Use bitwise operators only on unsigned operands
DCL00-C	wildmatch.c	200	7	Const-qualify immutable objects: t_ch_upper
INT01-C	wildmatch.c	220	10	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	220	10	Do not cast away a const qualification
INT13-C	wildmatch.c	221	11	Use bitwise operators only on unsigned operands
INT13-C	wildmatch.c	221	11	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	223	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	223	17	Do not cast away a const qualification
INT13-C	wildmatch.c	224	11	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	226	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	226	17	Do not cast away a const qualification
INT01-C	wildmatch.c	229	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	229	17	Do not cast away a const qualification
INT13-C	wildmatch.c	230	11	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	232	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	232	17	Do not cast away a const qualification
INT13-C	wildmatch.c	233	11	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	235	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	235	17	Do not cast away a const qualification
INT13-C	wildmatch.c	236	11	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	238	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	238	17	Do not cast away a const qualification
INT13-C	wildmatch.c	239	11	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	241	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	241	17	Do not cast away a const qualification
INT13-C	wildmatch.c	242	11	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	244	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	244	17	Do not cast away a const qualification
INT13-C	wildmatch.c	245	11	Use bitwise operators only on unsigned operands
INT13-C	wildmatch.c	245	11	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	247	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	247	17	Do not cast away a const qualification
INT13-C	wildmatch.c	248	11	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	250	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	250	17	Do not cast away a const qualification
INT13-C	wildmatch.c	251	11	Use bitwise operators only on unsigned operands
INT13-C	wildmatch.c	253	41	Use bitwise operators only on unsigned operands
INT01-C	wildmatch.c	255	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	wildmatch.c	255	17	Do not cast away a const qualification
INT13-C	wildmatch.c	256	11	Use bitwise operators only on unsigned operands
EXP05-C	wildmatch.c	277	16	Do not cast away a const qualification
EXP05-C	wildmatch.c	277	39	Do not cast away a const qualification
MEM01-C	worktree.c	22	2	Store a new value in pointers immediately after free()
DCL01-C	worktree.c	51	2	Do not reuse variable names in subscopes: worktree
EXP12-C	worktree.c	55	2	Do not ignore values returned by functions: strbuf_strip_suffix
EXP36-C	worktree.c	57	2	Do not convert pointers into more strictly aligned pointer types
DCL01-C	worktree.c	74	2	Do not reuse variable names in subscopes: worktree
EXP12-C	worktree.c	86	2	Do not ignore values returned by functions: strbuf_strip_suffix
EXP36-C	worktree.c	88	2	Do not convert pointers into more strictly aligned pointer types
MEM34-C	worktree.c	113	2	Only free memory allocated dynamically
EXP36-C	worktree.c	124	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	worktree.c	136	5	Do not convert pointers into more strictly aligned pointer types
EXP12-C	worktree.c	140	3	Do not ignore values returned by functions: closedir
EXP36-C	worktree.c	142	2	Do not convert pointers into more strictly aligned pointer types
DCL00-C	worktree.c	171	3	Const-qualify immutable objects: pathlen
DCL00-C	worktree.c	172	3	Const-qualify immutable objects: start
MEM34-C	worktree.c	197	2	Only free memory allocated dynamically
MEM01-C	worktree.c	215	2	Store a new value in pointers immediately after free()
MEM34-C	worktree.c	215	2	Only free memory allocated dynamically
MEM34-C	worktree.c	264	2	Only free memory allocated dynamically
DCL00-C	worktree.c	272	2	Const-qualify immutable objects: params
EXP12-C	worktree.c	277	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	worktree.c	279	2	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	worktree.c	286	2	Do not reuse variable names in subscopes: realpath
EXP12-C	worktree.c	338	2	Do not ignore values returned by functions: strbuf_realpath
MEM01-C	worktree.c	345	2	Store a new value in pointers immediately after free()
MEM34-C	worktree.c	345	2	Only free memory allocated dynamically
EXP12-C	worktree.c	358	2	Do not ignore values returned by functions: strbuf_realpath
EXP12-C	worktree.c	374	2	Do not ignore values returned by functions: memset
EXP12-C	worktree.c	391	2	Do not ignore values returned by functions: memset
EXP12-C	worktree.c	460	2	Do not ignore values returned by functions: get_common_dir_noenv
MEM01-C	worktree.c	461	2	Store a new value in pointers immediately after free()
MEM34-C	worktree.c	461	2	Only free memory allocated dynamically
EXP12-C	worktree.c	464	2	Do not ignore values returned by functions: read_repository_format
EXP12-C	worktree.c	488	2	Do not ignore values returned by functions: closedir
EXP12-C	worktree.c	559	2	Do not ignore values returned by functions: strbuf_realpath
MEM01-C	worktree.c	575	2	Store a new value in pointers immediately after free()
MEM34-C	worktree.c	575	2	Only free memory allocated dynamically
DCL13-C	worktree.c	581	10	Declare function parameters that are pointers to values not changed by the function as const: cb_data
EXP12-C	worktree.c	605	2	Do not ignore values returned by functions: strbuf_strip_suffix
EXP12-C	worktree.c	607	2	Do not ignore values returned by functions: strbuf_strip_suffix
MEM01-C	worktree.c	706	2	Store a new value in pointers immediately after free()
MEM34-C	worktree.c	706	2	Only free memory allocated dynamically
MEM34-C	worktree.c	746	3	Only free memory allocated dynamically
INT01-C	worktree.c	751	18	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	worktree.c	755	3	Only free memory allocated dynamically
INT01-C	worktree.c	758	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	worktree.c	758	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	worktree.c	758	51	Use rsize_t or size_t for all integer values representing the size of an object
MEM34-C	worktree.c	762	3	Only free memory allocated dynamically
INT07-C	worktree.c	765	12	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	worktree.c	770	4	Only free memory allocated dynamically
EXP12-C	worktree.c	813	2	Do not ignore values returned by functions: git_configset_add_file
MEM01-C	worktree.c	848	2	Store a new value in pointers immediately after free()
MEM34-C	worktree.c	848	2	Only free memory allocated dynamically
MEM34-C	worktree.c	849	2	Only free memory allocated dynamically
INT01-C	wrapper.c	21	9	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	wrapper.c	27	4	Detect and remove code that has no effect
DCL00-C	wrapper.c	39	2	Const-qualify immutable objects: ret
EXP09-C	wrapper.c	53	9	malloc called using something other than sizeof()
MSC12-C	wrapper.c	59	4	Detect and remove code that has no effect
INT01-C	wrapper.c	78	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	78	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	78	6	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	wrapper.c	80	4	Detect and remove code that has no effect
INT01-C	wrapper.c	85	24	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	wrapper.c	87	22	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	wrapper.c	120	2	Const-qualify immutable objects: res
EXP12-C	wrapper.c	135	2	Do not ignore values returned by functions: memory_limit_check
INT01-C	wrapper.c	146	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	146	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	146	6	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	wrapper.c	146	6	Ensure that division and remainder operations do not result in divide-by-zero errors
INT01-C	wrapper.c	146	6	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	146	6	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	wrapper.c	149	2	Do not ignore values returned by functions: memory_limit_check
MEM07-C	wrapper.c	150	8	Ensure that the arguments to calloc() when multiplied can be represented as a size_t
EXP09-C	wrapper.c	152	9	malloc called using something other than sizeof()
DCL00-C	wrapper.c	170	2	Const-qualify immutable objects: ap
EXP12-C	wrapper.c	178	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	wrapper.c	181	2	Do not ignore values returned by functions: __builtin_va_end
DCL00-C	wrapper.c	184	3	Const-qualify immutable objects: fd
FIO42-C	wrapper.c	184	12	Close files when they are no longer needed
INT13-C	wrapper.c	190	14	Use bitwise operators only on unsigned operands
EXP12-C	wrapper.c	215	2	Do not ignore values returned by functions: poll
INT01-C	wrapper.c	227	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	249	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	272	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	287	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	wrapper.c	288	3	Const-qualify immutable objects: loaded
INT01-C	wrapper.c	293	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	306	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	wrapper.c	307	3	Const-qualify immutable objects: written
INT01-C	wrapper.c	314	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	327	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	wrapper.c	328	3	Const-qualify immutable objects: loaded
INT01-C	wrapper.c	333	9	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	wrapper.c	344	2	Const-qualify immutable objects: ret
DCL00-C	wrapper.c	356	3	Const-qualify immutable objects: fp
INT07-C	wrapper.c	362	13	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	wrapper.c	373	2	Const-qualify immutable objects: stream
DCL00-C	wrapper.c	409	2	Const-qualify immutable objects: fp
EXP12-C	wrapper.c	414	2	Do not ignore values returned by functions: warn_on_fopen_errors
EXP12-C	wrapper.c	422	2	Do not ignore values returned by functions: gitstrlcpy
DCL00-C	wrapper.c	426	3	Const-qualify immutable objects: saved_errno
STR11-C	wrapper.c	447	2	Do not specify the dimension of a character array initialized with a string literal
INT01-C	wrapper.c	451	33	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	wrapper.c	452	2	Do not specify the dimension of a character array initialized with a string literal
INT01-C	wrapper.c	453	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	460	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	465	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	465	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	474	43	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	474	35	Use rsize_t or size_t for all integer values representing the size of an object
FIO42-C	wrapper.c	487	8	Close files when they are no longer needed
INT07-C	wrapper.c	498	13	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	wrapper.c	512	2	Do not ignore values returned by functions: gitstrlcpy
DCL00-C	wrapper.c	516	3	Const-qualify immutable objects: saved_errno
DCL00-C	wrapper.c	622	2	Const-qualify immutable objects: rc
MSC12-C	wrapper.c	624	2	Detect and remove code that has no effect
DCL00-C	wrapper.c	681	2	Const-qualify immutable objects: ap
EXP12-C	wrapper.c	684	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	wrapper.c	686	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	wrapper.c	690	10	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	wrapper.c	697	2	Const-qualify immutable objects: fd
DCL00-C	wrapper.c	706	2	Const-qualify immutable objects: params
EXP12-C	wrapper.c	709	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	wrapper.c	711	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	wrapper.c	721	2	Do not ignore values returned by functions: poll
DCL00-C	wrapper.c	731	2	Const-qualify immutable objects: ret
INT07-C	wrapper.c	733	16	Use only explicitly signed or unsigned char type for numeric values
INT01-C	wrapper.c	733	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wrapper.c	824	7	Use rsize_t or size_t for all integer values representing the size of an object
ENV30-C	write-or-die.c	27	9	Do not modify the string returned by getenv()
INT05-C	write-or-die.c	29	26	Use strtol() or a related function to convert a string token to an integer
DCL00-C	write-or-die.c	47	2	Const-qualify immutable objects: ap
EXP12-C	write-or-die.c	50	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	write-or-die.c	52	2	Do not ignore values returned by functions: __builtin_va_end
INT01-C	ws.c	45	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	ws.c	56	4	Const-qualify immutable objects: tabwidth
INT05-C	ws.c	56	24	Use strtol() or a related function to convert a string token to an integer
INT01-C	ws.c	63	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ws.c	87	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	ws.c	185	5	Do not ignore values returned by functions: fwrite
EXP12-C	ws.c	187	5	Do not ignore values returned by functions: fwrite
EXP12-C	ws.c	192	5	Do not ignore values returned by functions: fwrite
EXP12-C	ws.c	194	5	Do not ignore values returned by functions: fwrite
EXP12-C	ws.c	198	4	Do not ignore values returned by functions: fwrite
EXP12-C	ws.c	208	4	Do not ignore values returned by functions: fwrite
EXP12-C	ws.c	223	4	Do not ignore values returned by functions: fwrite
EXP12-C	ws.c	231	4	Do not ignore values returned by functions: fwrite
MSC12-C	ws.c	247	2	Detect and remove code that has no effect
DCL00-C	ws.c	309	3	Const-qualify immutable objects: ch
DCL00-C	ws.c	342	4	Const-qualify immutable objects: ch
DCL00-C	ws.c	361	3	Const-qualify immutable objects: start
DCL00-C	ws.c	362	3	Const-qualify immutable objects: last
INT01-C	ws.c	367	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	ws.c	367	24	Use rsize_t or size_t for all integer values representing the size of an object
STR11-C	wt-status.c	24	1	Do not specify the dimension of a character array initialized with a string literal
DCL01-C	wt-status.c	49	73	Do not reuse variable names in subscopes: color
DCL01-C	wt-status.c	54	2	Do not reuse variable names in subscopes: eol
DCL01-C	wt-status.c	95	56	Do not reuse variable names in subscopes: color
DCL00-C	wt-status.c	98	2	Const-qualify immutable objects: ap
EXP12-C	wt-status.c	100	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	wt-status.c	102	2	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	wt-status.c	105	53	Do not reuse variable names in subscopes: color
DCL00-C	wt-status.c	108	2	Const-qualify immutable objects: ap
EXP12-C	wt-status.c	110	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	wt-status.c	112	2	Do not ignore values returned by functions: __builtin_va_end
DCL01-C	wt-status.c	115	65	Do not reuse variable names in subscopes: color
DCL00-C	wt-status.c	118	2	Const-qualify immutable objects: ap
EXP12-C	wt-status.c	120	2	Do not ignore values returned by functions: __builtin_va_start
EXP12-C	wt-status.c	122	2	Do not ignore values returned by functions: __builtin_va_end
EXP12-C	wt-status.c	127	2	Do not ignore values returned by functions: memset
INT01-C	wt-status.c	160	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	wt-status.c	162	39	Do not convert pointers into more strictly aligned pointer types
DCL05-C	wt-status.c	308	1	Use typedefs to improve code readability
DCL00-C	wt-status.c	314	3	Const-qualify immutable objects: len
EXP36-C	wt-status.c	325	38	Do not convert pointers into more strictly aligned pointer types
INT01-C	wt-status.c	334	15	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	wt-status.c	336	3	Do not ignore values returned by functions: memset
EXP36-C	wt-status.c	352	38	Do not convert pointers into more strictly aligned pointer types
INT01-C	wt-status.c	368	15	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	wt-status.c	370	3	Do not ignore values returned by functions: memset
INT01-C	wt-status.c	387	36	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	wt-status.c	413	2	Detect and remove code that has no effect
DCL13-C	wt-status.c	441	28	Declare function parameters that are pointers to values not changed by the function as const: options
EXP36-C	wt-status.c	444	24	Do not convert pointers into more strictly aligned pointer types
EXP36-C	wt-status.c	457	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	wt-status.c	459	4	Do not convert pointers into more strictly aligned pointer types
INT32-C	wt-status.c	517	8	Ensure that operations on signed integers do not result in overflow
INT13-C	wt-status.c	522	8	Use bitwise operators only on unsigned operands
INT14-C	wt-status.c	522	8	Avoid performing bitwise and arithmetic operations on the same data
DCL13-C	wt-status.c	528	28	Declare function parameters that are pointers to values not changed by the function as const: options
EXP36-C	wt-status.c	531	24	Do not convert pointers into more strictly aligned pointer types
EXP36-C	wt-status.c	541	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	wt-status.c	543	4	Do not convert pointers into more strictly aligned pointer types
EXP12-C	wt-status.c	600	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	wt-status.c	618	2	Do not ignore values returned by functions: run_diff_files
EXP12-C	wt-status.c	628	2	Do not ignore values returned by functions: memset
EXP12-C	wt-status.c	630	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	wt-status.c	664	2	Do not ignore values returned by functions: run_diff_index
EXP36-C	wt-status.c	674	24	Do not convert pointers into more strictly aligned pointer types
EXP36-C	wt-status.c	683	8	Do not convert pointers into more strictly aligned pointer types
EXP36-C	wt-status.c	685	3	Do not convert pointers into more strictly aligned pointer types
DCL01-C	wt-status.c	721	4	Do not reuse variable names in subscopes: tree
EXP12-C	wt-status.c	728	4	Do not ignore values returned by functions: read_tree_at
EXP36-C	wt-status.c	734	9	Do not convert pointers into more strictly aligned pointer types
EXP36-C	wt-status.c	736	4	Do not convert pointers into more strictly aligned pointer types
INT13-C	wt-status.c	741	17	Use bitwise operators only on unsigned operands
INT14-C	wt-status.c	741	17	Avoid performing bitwise and arithmetic operations on the same data
DCL00-C	wt-status.c	762	2	Const-qualify immutable objects: t_begin
INT13-C	wt-status.c	770	31	Use bitwise operators only on unsigned operands
EXP12-C	wt-status.c	782	2	Do not ignore values returned by functions: fill_directory
INT01-C	wt-status.c	806	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	wt-status.c	808	25	Do not convert pointers into more strictly aligned pointer types
INT01-C	wt-status.c	857	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	wt-status.c	861	9	Do not convert pointers into more strictly aligned pointer types
INT01-C	wt-status.c	880	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	wt-status.c	884	9	Do not convert pointers into more strictly aligned pointer types
INT01-C	wt-status.c	911	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	wt-status.c	913	25	Do not convert pointers into more strictly aligned pointer types
DCL00-C	wt-status.c	930	2	Const-qualify immutable objects: worktree_changes
INT01-C	wt-status.c	937	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	wt-status.c	941	9	Do not convert pointers into more strictly aligned pointer types
DCL13-C	wt-status.c	950	47	Declare function parameters that are pointers to values not changed by the function as const: ooid
DCL13-C	wt-status.c	951	26	Declare function parameters that are pointers to values not changed by the function as const: noid
EXP36-C	wt-status.c	956	11	Do not convert pointers into more strictly aligned pointer types
EXP12-C	wt-status.c	964	2	Do not ignore values returned by functions: for_each_reflog_ent
DCL00-C	wt-status.c	970	2	Const-qualify immutable objects: stash_count
EXP12-C	wt-status.c	986	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	wt-status.c	988	2	Do not ignore values returned by functions: strvec_push
EXP12-C	wt-status.c	989	2	Do not ignore values returned by functions: strvec_push
EXP12-C	wt-status.c	990	2	Do not ignore values returned by functions: strvec_push
EXP12-C	wt-status.c	991	2	Do not ignore values returned by functions: strvec_push
EXP12-C	wt-status.c	992	2	Do not ignore values returned by functions: strvec_push
EXP12-C	wt-status.c	993	2	Do not ignore values returned by functions: strvec_pushf
EXP12-C	wt-status.c	1000	2	Do not ignore values returned by functions: capture_command
MEM01-C	wt-status.c	1017	3	Store a new value in pointers immediately after free()
MEM34-C	wt-status.c	1017	3	Only free memory allocated dynamically
INT01-C	wt-status.c	1039	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	wt-status.c	1045	4	Do not ignore values returned by functions: string_list_append
EXP12-C	wt-status.c	1061	2	Do not ignore values returned by functions: memset
EXP12-C	wt-status.c	1115	2	Do not ignore values returned by functions: memset
EXP12-C	wt-status.c	1117	2	Do not ignore values returned by functions: setup_revisions
EXP12-C	wt-status.c	1145	2	Do not ignore values returned by functions: run_diff_index
EXP12-C	wt-status.c	1154	3	Do not ignore values returned by functions: run_diff_files
DCL01-C	wt-status.c	1163	2	Do not reuse variable names in subscopes: branch
MSC12-C	wt-status.c	1168	2	Detect and remove code that has no effect
EXP06-C	wt-status.c	1168	2	Operands to the sizeof operator should not contain side effects
DCL00-C	wt-status.c	1180	3	Const-qualify immutable objects: t_delta_in_ms
INT07-C	wt-status.c	1192	28	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	1194	25	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	wt-status.c	1197	3	Do not ignore values returned by functions: color_fprintf_ln
EXP05-C	wt-status.c	1199	6	Do not cast away a const qualification
DCL01-C	wt-status.c	1209	20	Do not reuse variable names in subscopes: color
DCL01-C	wt-status.c	1230	17	Do not reuse variable names in subscopes: color
EXP12-C	wt-status.c	1264	2	Do not ignore values returned by functions: strbuf_getline_lf
MEM01-C	wt-status.c	1294	2	Store a new value in pointers immediately after free()
MEM34-C	wt-status.c	1294	2	Only free memory allocated dynamically
MEM01-C	wt-status.c	1295	2	Store a new value in pointers immediately after free()
MEM34-C	wt-status.c	1295	2	Only free memory allocated dynamically
MEM01-C	wt-status.c	1296	2	Store a new value in pointers immediately after free()
MEM34-C	wt-status.c	1296	2	Only free memory allocated dynamically
MEM34-C	wt-status.c	1297	2	Only free memory allocated dynamically
INT01-C	wt-status.c	1356	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	wt-status.c	1362	3	Do not ignore values returned by functions: string_list_append
DCL01-C	wt-status.c	1370	21	Do not reuse variable names in subscopes: color
DCL00-C	wt-status.c	1374	3	Const-qualify immutable objects: nr_lines_to_show
EXP12-C	wt-status.c	1379	3	Do not ignore values returned by functions: read_rebase_todolist
INT01-C	wt-status.c	1384	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	wt-status.c	1384	20	Ensure that return values are compared against the proper type
INT01-C	wt-status.c	1392	27	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wt-status.c	1393	20	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wt-status.c	1394	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wt-status.c	1397	21	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wt-status.c	1402	20	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	wt-status.c	1402	20	Ensure that return values are compared against the proper type
INT01-C	wt-status.c	1411	42	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	wt-status.c	1423	23	Do not reuse variable names in subscopes: color
DCL01-C	wt-status.c	1436	21	Do not reuse variable names in subscopes: color
DCL01-C	wt-status.c	1489	19	Do not reuse variable names in subscopes: color
DCL01-C	wt-status.c	1519	21	Do not reuse variable names in subscopes: color
DCL01-C	wt-status.c	1548	21	Do not reuse variable names in subscopes: color
DCL01-C	wt-status.c	1564	18	Do not reuse variable names in subscopes: color
INT01-C	wt-status.c	1590	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wt-status.c	1590	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wt-status.c	1591	29	Use rsize_t or size_t for all integer values representing the size of an object
DCL13-C	wt-status.c	1617	46	Declare function parameters that are pointers to values not changed by the function as const: ooid
EXP36-C	wt-status.c	1623	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	wt-status.c	1648	2	Do not reuse variable names in subscopes: commit
DCL01-C	wt-status.c	1650	2	Do not reuse variable names in subscopes: ref
MEM01-C	wt-status.c	1675	2	Store a new value in pointers immediately after free()
MEM34-C	wt-status.c	1675	2	Only free memory allocated dynamically
EXP12-C	wt-status.c	1758	3	Do not ignore values returned by functions: wt_status_check_rebase
EXP12-C	wt-status.c	1767	2	Do not ignore values returned by functions: wt_status_check_bisect
EXP36-C	wt-status.c	1933	38	Do not convert pointers into more strictly aligned pointer types
MSC01-C	wt-status.c	1936	2	Strive for logical completeness
EXP12-C	wt-status.c	1945	2	Do not ignore values returned by functions: color_fprintf
EXP36-C	wt-status.c	1960	38	Do not convert pointers into more strictly aligned pointer types
EXP12-C	wt-status.c	1970	2	Do not ignore values returned by functions: fputc
EXP12-C	wt-status.c	2000	3	Do not ignore values returned by functions: color_fprintf
DCL01-C	wt-status.c	2008	2	Do not reuse variable names in subscopes: branch
EXP12-C	wt-status.c	2019	2	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2031	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2036	2	Do not ignore values returned by functions: skip_prefix
EXP12-C	wt-status.c	2040	2	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2052	2	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2053	2	Do not ignore values returned by functions: color_fprintf
MEM01-C	wt-status.c	2054	2	Store a new value in pointers immediately after free()
MEM34-C	wt-status.c	2054	2	Only free memory allocated dynamically
EXP12-C	wt-status.c	2059	2	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2061	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2063	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2065	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2066	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2068	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2069	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2071	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2072	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2073	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2074	3	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2077	2	Do not ignore values returned by functions: color_fprintf
EXP12-C	wt-status.c	2079	2	Do not ignore values returned by functions: fputc
EXP36-C	wt-status.c	2090	39	Do not convert pointers into more strictly aligned pointer types
DCL01-C	wt-status.c	2148	2	Do not reuse variable names in subscopes: branch
DCL00-C	wt-status.c	2152	2	Const-qualify immutable objects: eol
DCL01-C	wt-status.c	2152	2	Do not reuse variable names in subscopes: eol
INT07-C	wt-status.c	2152	2	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	wt-status.c	2173	4	Do not ignore values returned by functions: skip_prefix
EXP05-C	wt-status.c	2186	9	Do not cast away a const qualification
DCL00-C	wt-status.c	2209	2	Const-qualify immutable objects: stash_count
DCL00-C	wt-status.c	2210	2	Const-qualify immutable objects: eol
DCL01-C	wt-status.c	2210	2	Do not reuse variable names in subscopes: eol
INT07-C	wt-status.c	2210	2	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2227	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2228	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2229	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2230	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2232	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2233	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2234	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2235	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2237	9	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	wt-status.c	2245	38	Do not convert pointers into more strictly aligned pointer types
MSC12-C	wt-status.c	2261	3	Detect and remove code that has no effect
MSC12-C	wt-status.c	2282	3	Detect and remove code that has no effect
EXP36-C	wt-status.c	2294	38	Do not convert pointers into more strictly aligned pointer types
INT07-C	wt-status.c	2306	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2307	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2308	9	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2315	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2316	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2326	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2327	12	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	wt-status.c	2358	38	Do not convert pointers into more strictly aligned pointer types
DCL00-C	wt-status.c	2370	2	Const-qualify immutable objects: unmerged_prefix
INT07-C	wt-status.c	2370	2	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	wt-status.c	2371	2	Const-qualify immutable objects: eol_char
INT07-C	wt-status.c	2371	2	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	wt-status.c	2396	2	Do not ignore values returned by functions: memset
MSC12-C	wt-status.c	2399	2	Detect and remove code that has no effect
INT32-C	wt-status.c	2400	8	Ensure that operations on signed integers do not result in overflow
INT13-C	wt-status.c	2408	7	Use bitwise operators only on unsigned operands
INT14-C	wt-status.c	2408	7	Avoid performing bitwise and arithmetic operations on the same data
INT07-C	wt-status.c	2447	12	Use only explicitly signed or unsigned char type for numeric values
INT07-C	wt-status.c	2450	12	Use only explicitly signed or unsigned char type for numeric values
INT01-C	wt-status.c	2480	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	wt-status.c	2482	9	Do not convert pointers into more strictly aligned pointer types
INT01-C	wt-status.c	2487	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	wt-status.c	2489	9	Do not convert pointers into more strictly aligned pointer types
INT01-C	wt-status.c	2494	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	wt-status.c	2499	16	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	wt-status.c	2514	2	Strive for logical completeness
DCL01-C	wt-status.c	2541	2	Do not reuse variable names in subscopes: rev_info
DCL01-C	wt-status.c	2563	2	Do not reuse variable names in subscopes: rev_info
DCL01-C	wt-status.c	2580	3	Do not reuse variable names in subscopes: tree
DCL01-C	wt-status.c	2601	2	Do not reuse variable names in subscopes: lock_file
EXP12-C	wt-status.c	2605	2	Do not ignore values returned by functions: refresh_index
MSC12-C	wt-status.c	2612	3	Detect and remove code that has no effect
DCL02-C	xdiff-interface.c	307	1	Use visually distinct identifiers: git_xmerge_style
EXP36-C	xdiff-interface.c	23	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdiff-interface.c	36	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdiff-interface.c	54	34	Do not convert pointers into more strictly aligned pointer types
DCL00-C	xdiff-interface.c	100	2	Const-qualify immutable objects: smaller
EXP12-C	xdiff-interface.c	139	2	Do not ignore values returned by functions: memset
EXP12-C	xdiff-interface.c	143	2	Do not ignore values returned by functions: memset
INT01-C	xdiff-interface.c	166	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	xdiff-interface.c	166	38	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	xdiff-interface.c	166	38	Ensure that return values are compared against the proper type
EXP36-C	xdiff-interface.c	211	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdiff-interface.c	251	31	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdiff-interface.c	255	2	Do not convert pointers into more strictly aligned pointer types
MEM01-C	xdiff-interface.c	276	3	Store a new value in pointers immediately after free()
MEM34-C	xdiff-interface.c	276	3	Only free memory allocated dynamically
EXP36-C	xdiff-interface.c	285	31	Do not convert pointers into more strictly aligned pointer types
MEM01-C	xdiff-interface.c	290	3	Store a new value in pointers immediately after free()
MEM34-C	xdiff-interface.c	290	3	Only free memory allocated dynamically
MSC12-C	zlib.c	107	2	Detect and remove code that has no effect
MSC12-C	zlib.c	144	2	Detect and remove code that has no effect
EXP12-C	zlib.c	162	2	Do not ignore values returned by functions: memset
EXP12-C	zlib.c	176	2	Do not ignore values returned by functions: memset
DCL00-C	zlib.c	218	2	Const-qualify immutable objects: status
MSC12-C	zlib.c	222	2	Detect and remove code that has no effect
MSC12-C	zlib.c	270	2	Detect and remove code that has no effect
DCL00-C	unix-socket.c	9	2	Const-qualify immutable objects: r
MEM34-C	unix-socket.c	10	2	Only free memory allocated dynamically
INT01-C	unix-socket.c	36	26	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unix-socket.c	39	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unix-socket.c	57	23	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	unix-socket.c	58	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	unix-socket.c	69	2	Do not ignore values returned by functions: memset
EXP12-C	unix-socket.c	109	2	Do not ignore values returned by functions: unlink
DCL00-C	unix-stream-server.c	24	2	Const-qualify immutable objects: fd
DCL00-C	unix-stream-server.c	68	3	Const-qualify immutable objects: saved_errno
EXP36-C	unix-stream-server.c	74	25	Do not convert pointers into more strictly aligned pointer types
EXP12-C	unix-stream-server.c	77	2	Do not ignore values returned by functions: lstat
MEM01-C	unix-stream-server.c	103	2	Store a new value in pointers immediately after free()
DCL00-C	compasimple-ipc/ipc-unix-socket.c	99	3	Const-qualify immutable objects: fd
EXP36-C	compasimple-ipc/ipc-unix-socket.c	173	28	Do not convert pointers into more strictly aligned pointer types
MEM01-C	compasimple-ipc/ipc-unix-socket.c	188	2	Store a new value in pointers immediately after free()
INT13-C	compasimple-ipc/ipc-unix-socket.c	256	9	Use bitwise operators only on unsigned operands
DCL01-C	compasimple-ipc/ipc-unix-socket.c	275	2	Do not reuse variable names in subscopes: magic
DCL01-C	compasimple-ipc/ipc-unix-socket.c	281	2	Do not reuse variable names in subscopes: magic
DCL01-C	compasimple-ipc/ipc-unix-socket.c	288	2	Do not reuse variable names in subscopes: magic
DCL01-C	compasimple-ipc/ipc-unix-socket.c	309	2	Do not reuse variable names in subscopes: magic
EXP12-C	compasimple-ipc/ipc-unix-socket.c	407	3	Do not ignore values returned by functions: pthread_cond_wait
DCL01-C	compasimple-ipc/ipc-unix-socket.c	460	2	Do not reuse variable names in subscopes: pollfd
EXP12-C	compasimple-ipc/ipc-unix-socket.c	534	3	Do not ignore values returned by functions: packet_flush_gently
EXP12-C	compasimple-ipc/ipc-unix-socket.c	564	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	compasimple-ipc/ipc-unix-socket.c	565	2	Do not ignore values returned by functions: sigaddset
EXP12-C	compasimple-ipc/ipc-unix-socket.c	567	2	Do not ignore values returned by functions: sigemptyset
EXP12-C	compasimple-ipc/ipc-unix-socket.c	568	2	Do not ignore values returned by functions: pthread_sigmask
EXP36-C	compasimple-ipc/ipc-unix-socket.c	585	54	Do not convert pointers into more strictly aligned pointer types
EXP12-C	compasimple-ipc/ipc-unix-socket.c	622	4	Do not ignore values returned by functions: ipc_server_stop_async
DCL01-C	compasimple-ipc/ipc-unix-socket.c	642	2	Do not reuse variable names in subscopes: pollfd
EXP12-C	compasimple-ipc/ipc-unix-socket.c	673	5	Do not ignore values returned by functions: ipc_server_stop_async
DCL00-C	compasimple-ipc/ipc-unix-socket.c	687	4	Const-qualify immutable objects: client_fd
EXP36-C	compasimple-ipc/ipc-unix-socket.c	718	54	Do not convert pointers into more strictly aligned pointer types
DCL00-C	compasimple-ipc/ipc-unix-socket.c	727	3	Const-qualify immutable objects: client_fd
EXP12-C	compasimple-ipc/ipc-unix-socket.c	742	4	Do not ignore values returned by functions: fifo_enqueue
EXP12-C	compasimple-ipc/ipc-unix-socket.c	743	4	Do not ignore values returned by functions: pthread_cond_broadcast
DCL00-C	compasimple-ipc/ipc-unix-socket.c	793	3	Const-qualify immutable objects: saved_errno
DCL00-C	compasimple-ipc/ipc-unix-socket.c	850	3	Const-qualify immutable objects: saved_errno
DCL00-C	compasimple-ipc/ipc-unix-socket.c	859	3	Const-qualify immutable objects: saved_errno
EXP36-C	compasimple-ipc/ipc-unix-socket.c	866	23	Do not convert pointers into more strictly aligned pointer types
EXP12-C	compasimple-ipc/ipc-unix-socket.c	876	2	Do not ignore values returned by functions: pthread_mutex_init
EXP12-C	compasimple-ipc/ipc-unix-socket.c	877	2	Do not ignore values returned by functions: pthread_cond_init
EXP36-C	compasimple-ipc/ipc-unix-socket.c	880	2	Do not convert pointers into more strictly aligned pointer types
EXP36-C	compasimple-ipc/ipc-unix-socket.c	883	10	Do not convert pointers into more strictly aligned pointer types
EXP36-C	compasimple-ipc/ipc-unix-socket.c	897	16	Do not convert pointers into more strictly aligned pointer types
EXP12-C	compasimple-ipc/ipc-unix-socket.c	956	2	Do not ignore values returned by functions: pthread_cond_broadcast
EXP12-C	compasimple-ipc/ipc-unix-socket.c	970	2	Do not ignore values returned by functions: pthread_join
EXP12-C	compasimple-ipc/ipc-unix-socket.c	980	3	Do not ignore values returned by functions: pthread_join
MEM30-C	compasimple-ipc/ipc-unix-socket.c	983	3	Do not access freed memory
MEM34-C	compasimple-ipc/ipc-unix-socket.c	983	3	Only free memory allocated dynamically
MEM30-C	compasimple-ipc/ipc-unix-socket.c	1019	3	Do not access freed memory
MEM34-C	compasimple-ipc/ipc-unix-socket.c	1019	3	Only free memory allocated dynamically
EXP12-C	compasimple-ipc/ipc-unix-socket.c	1022	2	Do not ignore values returned by functions: pthread_cond_destroy
EXP12-C	compasimple-ipc/ipc-unix-socket.c	1023	2	Do not ignore values returned by functions: pthread_mutex_destroy
MEM01-C	compasimple-ipc/ipc-unix-socket.c	1028	2	Store a new value in pointers immediately after free()
INT14-C	sha1dsha1.c	296	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	296	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	296	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	296	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	296	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	296	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	296	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	296	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	296	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	297	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	297	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	297	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	297	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	297	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	297	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	297	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	297	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	297	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	298	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	298	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	298	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	298	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	298	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	298	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	298	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	298	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	298	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	299	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	299	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	299	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	299	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	299	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	299	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	299	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	299	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	299	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	300	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	300	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	300	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	300	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	300	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	300	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	300	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	300	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	300	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	301	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	301	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	301	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	301	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	301	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	301	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	301	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	301	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	301	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	302	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	302	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	302	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	302	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	302	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	302	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	302	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	302	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	302	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	303	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	303	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	303	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	303	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	303	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	303	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	303	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	303	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	303	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	304	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	304	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	304	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	304	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	304	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	304	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	304	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	304	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	304	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	305	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	305	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	305	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	305	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	305	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	305	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	305	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	305	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	305	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	306	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	306	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	306	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	306	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	306	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	306	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	306	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	306	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	306	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	307	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	307	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	307	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	307	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	307	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	307	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	307	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	307	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	307	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	308	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	308	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	308	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	308	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	308	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	308	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	308	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	308	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	308	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	309	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	309	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	309	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	309	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	309	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	309	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	309	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	309	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	309	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	310	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	310	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	310	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	310	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	310	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	310	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	310	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	310	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	310	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	311	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	311	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	311	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	311	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	311	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	311	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	311	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	311	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	311	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	312	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	312	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	312	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	312	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	312	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	312	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	312	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	312	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	312	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	313	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	313	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	313	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	313	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	313	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	313	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	313	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	313	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	313	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	314	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	314	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	314	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	314	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	314	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	314	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	314	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	314	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	314	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	315	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	315	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	315	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	315	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	315	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	315	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	315	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	315	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	315	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	317	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	317	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	317	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	317	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	317	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	317	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	317	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	317	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	318	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	318	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	318	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	318	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	318	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	318	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	318	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	318	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	319	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	319	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	319	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	319	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	319	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	319	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	319	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	319	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	320	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	320	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	320	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	320	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	320	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	320	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	320	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	320	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	321	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	321	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	321	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	321	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	321	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	321	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	321	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	321	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	322	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	322	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	322	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	322	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	322	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	322	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	322	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	322	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	323	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	323	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	323	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	323	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	323	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	323	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	323	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	323	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	324	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	324	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	324	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	324	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	324	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	324	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	324	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	324	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	325	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	325	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	325	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	325	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	325	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	325	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	325	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	325	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	326	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	326	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	326	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	326	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	326	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	326	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	326	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	326	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	327	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	327	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	327	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	327	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	327	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	327	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	327	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	327	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	328	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	328	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	328	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	328	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	328	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	328	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	328	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	328	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	329	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	329	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	329	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	329	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	329	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	329	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	329	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	329	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	330	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	330	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	330	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	330	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	330	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	330	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	330	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	330	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	331	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	331	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	331	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	331	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	331	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	331	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	331	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	331	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	332	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	332	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	332	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	332	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	332	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	332	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	332	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	332	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	333	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	333	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	333	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	333	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	333	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	333	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	333	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	333	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	334	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	334	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	334	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	334	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	334	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	334	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	334	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	334	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	335	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	335	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	335	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	335	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	335	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	335	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	335	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	335	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	336	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	336	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	336	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	336	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	336	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	336	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	336	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	336	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	338	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	338	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	338	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	338	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	338	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	338	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	338	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	338	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	338	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	339	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	339	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	339	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	339	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	339	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	339	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	339	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	339	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	339	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	340	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	340	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	340	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	340	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	340	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	340	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	340	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	340	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	340	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	341	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	341	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	341	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	341	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	341	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	341	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	341	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	341	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	341	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	342	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	342	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	342	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	342	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	342	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	342	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	342	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	342	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	342	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	343	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	343	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	343	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	343	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	343	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	343	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	343	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	343	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	343	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	344	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	344	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	344	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	344	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	344	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	344	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	344	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	344	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	344	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	345	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	345	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	345	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	345	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	345	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	345	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	345	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	345	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	345	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	346	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	346	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	346	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	346	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	346	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	346	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	346	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	346	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	346	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	347	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	347	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	347	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	347	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	347	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	347	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	347	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	347	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	347	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	348	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	348	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	348	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	348	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	348	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	348	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	348	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	348	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	348	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	349	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	349	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	349	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	349	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	349	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	349	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	349	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	349	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	349	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	350	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	350	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	350	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	350	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	350	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	350	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	350	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	350	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	350	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	351	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	351	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	351	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	351	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	351	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	351	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	351	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	351	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	351	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	352	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	352	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	352	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	352	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	352	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	352	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	352	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	352	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	352	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	353	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	353	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	353	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	353	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	353	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	353	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	353	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	353	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	353	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	354	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	354	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	354	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	354	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	354	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	354	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	354	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	354	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	354	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	355	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	355	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	355	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	355	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	355	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	355	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	355	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	355	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	355	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	356	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	356	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	356	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	356	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	356	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	356	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	356	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	356	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	356	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	357	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	357	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	357	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	357	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	357	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	357	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	357	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	357	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	357	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	359	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	359	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	359	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	359	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	359	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	359	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	359	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	359	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	360	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	360	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	360	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	360	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	360	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	360	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	360	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	360	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	361	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	361	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	361	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	361	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	361	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	361	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	361	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	361	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	362	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	362	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	362	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	362	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	362	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	362	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	362	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	362	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	363	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	363	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	363	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	363	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	363	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	363	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	363	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	363	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	364	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	364	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	364	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	364	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	364	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	364	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	364	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	364	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	365	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	365	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	365	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	365	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	365	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	365	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	365	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	365	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	366	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	366	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	366	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	366	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	366	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	366	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	366	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	366	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	367	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	367	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	367	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	367	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	367	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	367	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	367	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	367	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	368	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	368	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	368	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	368	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	368	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	368	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	368	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	368	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	369	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	369	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	369	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	369	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	369	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	369	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	369	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	369	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	370	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	370	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	370	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	370	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	370	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	370	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	370	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	370	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	371	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	371	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	371	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	371	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	371	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	371	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	371	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	371	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	372	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	372	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	372	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	372	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	372	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	372	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	372	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	372	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	373	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	373	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	373	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	373	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	373	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	373	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	373	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	373	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	374	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	374	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	374	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	374	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	374	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	374	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	374	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	374	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	375	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	375	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	375	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	375	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	375	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	375	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	375	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	375	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	376	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	376	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	376	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	376	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	376	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	376	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	376	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	376	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	377	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	377	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	377	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	377	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	377	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	377	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	377	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	377	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	378	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	378	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	378	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	378	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	378	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	378	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	378	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	378	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	393	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	393	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	393	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	393	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	393	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	393	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	393	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	393	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	393	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	393	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	393	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	398	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	398	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	398	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	398	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	398	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	398	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	398	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	398	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	398	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	398	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	398	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	403	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	403	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	403	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	403	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	403	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	403	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	403	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	403	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	403	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	403	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	403	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	408	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	408	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	408	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	408	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	408	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	408	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	408	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	408	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	408	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	408	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	408	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	413	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	413	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	413	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	413	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	413	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	413	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	413	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	413	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	413	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	413	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	413	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	418	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	418	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	418	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	418	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	418	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	418	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	418	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	418	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	418	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	418	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	418	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	423	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	423	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	423	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	423	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	423	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	423	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	423	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	423	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	423	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	423	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	423	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	428	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	428	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	428	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	428	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	428	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	428	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	428	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	428	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	428	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	428	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	428	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	433	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	433	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	433	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	433	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	433	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	433	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	433	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	433	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	433	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	433	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	433	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	438	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	438	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	438	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	438	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	438	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	438	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	438	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	438	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	438	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	438	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	438	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	443	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	443	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	443	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	443	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	443	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	443	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	443	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	443	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	443	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	443	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	443	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	448	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	448	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	448	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	448	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	448	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	448	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	448	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	448	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	448	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	448	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	448	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	453	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	453	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	453	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	453	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	453	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	453	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	453	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	453	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	453	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	453	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	453	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	458	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	458	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	458	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	458	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	458	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	458	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	458	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	458	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	458	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	458	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	458	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	463	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	463	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	463	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	463	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	463	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	463	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	463	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	463	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	463	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	463	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	463	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	468	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	468	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	468	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	468	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	468	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	468	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	468	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	468	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	468	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	468	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	468	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	473	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	473	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	473	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	473	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	478	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	478	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	478	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	478	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	483	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	483	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	483	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	483	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	488	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	488	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	488	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	488	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	495	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	495	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	495	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	495	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	500	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	500	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	500	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	500	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	505	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	505	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	505	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	505	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	510	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	510	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	510	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	510	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	515	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	515	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	515	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	515	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	520	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	520	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	520	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	520	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	525	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	525	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	525	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	525	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	530	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	530	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	530	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	530	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	535	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	535	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	535	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	535	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	540	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	540	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	540	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	540	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	545	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	545	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	545	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	545	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	550	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	550	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	550	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	550	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	555	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	555	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	555	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	555	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	560	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	560	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	560	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	560	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	565	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	565	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	565	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	565	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	570	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	570	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	570	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	570	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	575	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	575	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	575	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	575	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	580	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	580	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	580	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	580	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	585	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	585	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	585	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	585	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	590	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	590	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	590	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	590	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	597	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	597	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	597	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	597	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	602	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	602	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	602	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	602	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	607	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	607	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	607	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	607	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	612	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	612	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	612	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	612	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	617	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	617	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	617	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	617	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	622	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	622	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	622	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	622	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	627	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	627	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	627	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	627	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	632	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	632	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	632	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	632	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	637	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	637	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	637	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	637	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	642	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	642	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	642	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	642	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	647	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	647	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	647	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	647	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	652	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	652	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	652	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	652	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	657	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	657	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	657	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	657	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	662	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	662	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	662	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	662	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	667	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	667	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	667	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	667	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	672	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	672	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	672	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	672	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	677	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	677	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	677	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	677	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	682	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	682	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	682	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	682	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	687	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	687	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	687	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	687	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	692	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	692	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	692	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	692	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	700	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	700	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	700	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	700	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	705	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	705	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	705	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	705	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	710	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	710	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	710	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	710	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	715	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	715	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	715	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	715	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	720	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	720	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	720	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	720	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	725	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	725	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	725	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	725	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	730	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	730	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	730	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	730	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	735	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	735	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	735	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	735	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	740	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	740	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	740	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	740	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	745	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	745	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	745	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	745	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	750	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	750	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	750	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	750	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	755	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	755	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	755	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	755	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	760	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	760	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	760	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	760	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	765	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	765	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	765	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	765	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	770	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	770	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	770	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	770	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	775	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	775	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	775	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	775	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	780	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	780	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	780	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	780	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	785	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	785	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	785	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	785	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	790	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	790	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	790	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	790	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	795	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	795	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	795	2	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	795	2	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1212	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1212	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT14-C	sha1dsha1.c	1240	1	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1240	1	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1740	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1740	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1743	31	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1748	127	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1748	99	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1748	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1748	43	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1748	28	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1748	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1748	84	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1748	112	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1748	140	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1749	168	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1749	136	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1749	104	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1749	72	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1749	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1749	88	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1749	120	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1749	152	Use bitwise operators only on unsigned operands
INT13-C	sha1dsha1.c	1749	184	Use bitwise operators only on unsigned operands
DCL01-C	sha1dsha1.c	1792	41	Do not reuse variable names in subscopes: ubc_check
INT01-C	sha1dsha1.c	1825	10	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	sha1dsha1.c	1825	10	Ensure that return values are compared against the proper type
INT01-C	sha1dsha1.c	1831	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sha1dsha1.c	1837	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sha1dsha1.c	1840	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	sha1dsha1.c	1845	21	Do not cast away a const qualification
EXP36-C	sha1dsha1.c	1845	33	Do not convert pointers into more strictly aligned pointer types
INT01-C	sha1dsha1.c	1851	7	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sha1dsha1.c	1853	10	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sha1dsha1.c	1855	14	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	sha1dsha1.c	1870	2	Const-qualify immutable objects: last
DCL00-C	sha1dsha1.c	1871	2	Const-qualify immutable objects: padn
EXP05-C	sha1dsha1.c	1873	20	Do not cast away a const qualification
DCL02-C	sha1dubc_check.c	68	1	Use visually distinct identifiers: sha1_dvs
INT13-C	sha1dubc_check.c	106	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	107	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	107	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	107	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	107	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	107	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	107	129	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	107	114	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	107	99	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	107	84	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	107	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	107	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	108	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	108	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	108	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	108	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	108	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	108	116	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	108	101	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	108	86	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	108	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	108	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	109	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	109	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	109	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	109	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	109	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	109	115	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	109	100	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	109	85	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	109	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	109	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	110	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	110	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	110	49	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	110	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	110	51	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	110	124	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	110	109	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	110	94	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	110	80	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	110	66	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	111	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	111	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	111	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	111	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	111	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	111	115	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	111	100	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	111	85	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	111	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	111	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	112	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	112	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	112	44	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	112	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	112	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	112	118	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	112	103	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	112	89	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	112	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	112	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	113	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	113	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	113	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	113	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	113	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	113	115	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	113	100	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	113	85	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	113	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	113	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	114	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	114	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	114	44	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	114	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	114	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	114	118	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	114	103	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	114	89	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	114	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	114	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	115	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	115	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	115	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	115	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	115	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	115	115	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	115	100	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	115	85	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	115	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	115	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	116	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	116	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	116	44	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	116	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	116	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	116	118	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	116	103	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	116	89	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	116	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	116	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	117	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	117	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	117	44	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	117	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	117	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	117	118	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	117	103	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	117	89	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	117	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	117	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	118	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	118	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	118	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	118	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	118	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	118	114	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	118	99	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	118	84	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	118	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	118	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	119	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	119	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	119	44	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	119	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	119	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	119	118	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	119	103	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	119	89	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	119	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	119	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	120	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	120	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	120	44	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	120	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	120	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	120	118	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	120	103	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	120	89	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	120	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	120	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	121	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	121	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	121	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	121	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	121	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	121	114	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	121	99	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	121	84	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	121	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	121	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	122	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	122	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	122	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	122	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	122	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	122	101	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	122	86	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	122	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	122	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	123	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	123	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	123	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	123	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	123	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	123	101	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	123	86	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	123	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	123	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	124	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	124	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	124	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	124	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	124	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	124	101	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	124	86	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	124	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	124	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	125	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	125	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	125	49	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	125	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	125	51	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	125	110	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	125	95	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	125	80	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	125	66	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	126	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	126	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	126	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	126	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	126	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	126	101	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	126	86	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	126	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	126	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	127	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	127	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	127	49	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	127	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	127	51	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	127	110	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	127	95	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	127	80	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	127	66	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	128	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	128	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	128	49	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	128	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	128	51	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	128	109	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	128	94	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	128	80	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	128	66	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	129	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	129	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	129	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	129	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	129	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	129	99	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	129	84	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	129	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	129	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	130	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	130	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	130	39	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	130	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	130	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	130	99	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	130	84	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	130	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	130	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	131	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	131	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	131	44	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	131	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	131	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	131	104	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	131	89	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	131	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	131	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	132	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	132	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	132	44	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	132	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	132	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	132	104	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	132	89	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	132	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	132	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	133	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	133	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	133	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	133	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	133	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	134	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	134	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	134	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	134	25	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	134	47	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	134	106	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	134	91	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	134	76	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	134	62	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	135	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	135	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	135	44	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	135	24	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	135	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	135	105	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	135	90	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	135	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	135	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	136	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	136	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	136	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	136	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	137	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	137	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	137	40	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	137	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	137	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	137	87	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	137	72	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	137	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	138	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	138	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	138	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	138	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	139	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	139	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	139	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	139	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	139	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	139	97	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	139	82	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	139	67	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	140	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	140	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	140	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	140	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	141	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	141	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	141	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	141	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	141	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	141	97	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	141	82	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	141	67	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	142	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	142	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	142	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	142	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	143	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	143	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	143	40	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	143	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	143	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	143	87	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	143	72	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	143	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	144	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	144	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	144	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	144	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	145	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	145	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	145	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	145	25	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	145	47	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	145	91	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	145	76	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	145	62	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	146	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	146	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	146	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	147	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	147	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	147	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	147	72	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	147	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	148	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	148	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	148	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	149	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	149	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	149	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	149	72	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	149	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	150	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	150	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	150	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	151	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	151	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	151	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	151	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	151	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	152	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	152	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	152	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	153	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	153	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	153	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	153	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	153	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	154	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	154	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	154	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	155	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	155	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	155	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	155	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	155	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	156	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	156	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	156	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	157	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	157	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	157	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	157	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	157	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	158	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	158	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	158	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	159	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	159	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	159	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	159	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	159	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	160	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	160	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	160	43	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	160	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	160	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	160	74	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	160	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	161	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	161	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	161	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	162	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	162	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	162	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	162	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	162	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	163	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	163	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	163	38	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	163	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	163	40	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	163	69	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	163	55	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	164	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	164	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	164	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	165	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	165	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	165	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	165	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	165	57	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	166	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	166	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	166	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	166	75	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	166	60	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	167	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	167	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	167	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	167	74	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	167	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	168	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	168	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	168	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	169	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	169	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	169	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	169	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	169	56	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	170	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	170	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	170	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	170	74	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	170	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	171	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	171	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	171	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	172	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	172	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	172	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	172	70	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	172	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	173	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	173	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	173	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	174	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	174	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	174	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	174	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	174	56	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	175	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	175	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	175	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	176	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	176	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	176	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	176	71	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	176	56	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	177	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	177	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	177	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	177	74	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	177	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	178	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	178	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	178	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	179	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	179	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	179	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	179	25	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	179	47	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	179	76	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	179	62	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	180	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	180	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	181	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	181	22	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	181	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	181	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	182	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	182	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	183	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	183	22	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	183	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	183	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	184	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	184	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	185	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	185	22	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	185	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	185	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	186	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	186	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	187	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	187	22	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	187	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	187	61	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	188	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	188	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	188	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	188	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	189	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	189	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	190	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	190	22	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	190	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	190	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	191	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	191	28	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	192	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	192	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	192	40	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	192	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	192	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	192	58	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	193	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	193	28	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	194	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	194	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	194	40	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	194	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	194	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	194	58	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	195	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	195	28	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	196	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	196	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	196	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	196	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	196	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	196	68	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	197	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	197	28	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	198	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	198	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	198	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	198	58	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	199	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	199	28	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	200	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	200	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	200	40	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	200	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	200	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	200	58	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	201	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	201	28	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	202	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	202	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	202	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	202	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	202	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	202	68	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	203	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	203	28	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	204	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	204	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	204	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	204	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	204	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	204	68	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	205	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	205	28	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	206	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	206	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	206	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	206	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	206	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	206	68	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	207	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	207	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	207	48	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	207	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	207	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	207	65	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	208	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	208	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	208	43	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	208	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	208	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	208	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	209	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	209	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	210	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	210	23	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	210	42	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	210	57	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	211	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	211	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	211	43	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	211	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	211	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	211	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	212	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	212	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	212	48	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	212	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	212	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	212	65	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	213	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	213	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	213	43	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	213	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	213	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	213	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	214	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	214	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	214	48	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	214	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	214	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	214	65	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	215	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	215	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	215	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	215	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	216	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	216	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	216	43	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	216	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	216	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	216	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	217	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	217	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	217	38	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	217	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	217	40	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	217	55	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	218	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	218	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	218	48	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	218	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	218	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	218	66	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	219	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	219	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	219	48	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	219	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	219	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	219	65	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	220	7	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	220	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	220	48	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	220	19	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	220	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	220	65	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	221	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	221	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	222	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	222	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	222	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	222	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	222	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	222	67	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	223	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	223	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	224	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	224	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	224	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	224	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	224	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	224	67	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	225	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	225	27	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	226	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	226	22	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	226	46	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	226	61	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	227	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	227	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	228	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	228	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	228	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	228	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	228	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	228	67	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	229	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	229	28	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	230	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	230	22	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	230	41	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	230	57	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	231	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	231	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	231	45	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	231	60	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	232	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	232	27	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	233	8	Use bitwise operators only on unsigned operands
INT14-C	sha1dubc_check.c	233	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	sha1dubc_check.c	233	50	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	233	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	233	52	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	233	67	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	236	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	238	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	239	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	240	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	241	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	241	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	242	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	244	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	245	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	246	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	247	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	247	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	248	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	249	8	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	249	34	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	249	13	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	249	21	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	249	36	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	250	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	252	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	253	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	254	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	254	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	255	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	257	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	258	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	259	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	259	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	260	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	262	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	263	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	264	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	265	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	266	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	266	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	267	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	268	8	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	268	33	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	268	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	268	35	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	269	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	270	8	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	270	34	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	270	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	270	36	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	271	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	272	8	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	272	33	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	272	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	272	35	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	273	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	275	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	276	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	277	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	278	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	279	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	279	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	280	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	281	8	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	281	34	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	281	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	281	36	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	282	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	283	8	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	283	34	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	283	20	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	283	36	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	284	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	286	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	287	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	288	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	288	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	289	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	291	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	292	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	293	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	293	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	294	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	296	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	297	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	298	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	299	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	300	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	301	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	302	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	302	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	303	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	305	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	306	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	307	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	308	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	308	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	309	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	311	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	312	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	313	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	314	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	315	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	316	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	317	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	317	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	318	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	320	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	321	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	322	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	322	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	323	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	325	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	326	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	327	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	328	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	329	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	330	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	331	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	331	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	332	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	334	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	335	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	336	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	337	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	338	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	338	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	339	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	341	16	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	342	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	343	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	344	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	345	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	345	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	346	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	348	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	349	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	350	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	351	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	351	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	352	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	354	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	355	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	356	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	357	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	358	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	358	15	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	359	11	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	361	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	362	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	363	18	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	364	12	Use bitwise operators only on unsigned operands
INT13-C	sha1dubc_check.c	364	15	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	25	18	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	25	12	Use bitwise operators only on unsigned operands
INT34-C	sha25block/sha256.c	25	12	Do not shift a negative number of bits or more bits than exist in the operand
INT13-C	sha25block/sha256.c	25	23	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	30	11	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	30	16	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	30	21	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	35	23	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	35	18	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	35	13	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	35	28	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	40	32	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	40	19	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	45	32	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	45	19	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	50	32	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	50	19	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	55	33	Use bitwise operators only on unsigned operands
INT13-C	sha25block/sha256.c	55	20	Use bitwise operators only on unsigned operands
INT01-C	sha25block/sha256.c	155	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	sha25block/sha256.c	160	11	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	sha25block/sha256.c	163	11	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	sha25block/sha256.c	164	7	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	sha25block/sha256.c	165	11	Do not cast away a const qualification
INT01-C	sha25block/sha256.c	170	13	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	sha25block/sha256.c	172	11	Do not cast away a const qualification
INT01-C	sha25block/sha256.c	173	7	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	compalinux/procinfo.c	75	3	Const-qualify immutable objects: commlen
EXP12-C	compalinux/procinfo.c	137	2	Do not ignore values returned by functions: strvec_push
MSC01-C	compalinux/procinfo.c	158	2	Strive for logical completeness
DCL00-C	compastrlcpy.c	5	2	Const-qualify immutable objects: ret
DCL00-C	compastrlcpy.c	8	3	Const-qualify immutable objects: len
INT01-C	compastrlcpy.c	8	37	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	compastrlcpy.c	10	13	Use only explicitly signed or unsigned char type for numeric values
DCL05-C	compaqsort_s.c	9	1	Use typedefs to improve code readability
INT01-C	compaqsort_s.c	17	8	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	compaqsort_s.c	20	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	compaqsort_s.c	30	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	compaqsort_s.c	30	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	compaqsort_s.c	43	9	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	compaqsort_s.c	48	1	Use typedefs to improve code readability
MEM34-C	compaqsort_s.c	61	2	Only free memory allocated dynamically
DCL00-C	xdifxdiffi.c	49	2	Const-qualify immutable objects: dmin
DCL00-C	xdifxdiffi.c	49	2	Const-qualify immutable objects: dmax
DCL00-C	xdifxdiffi.c	50	2	Const-qualify immutable objects: fmid
DCL00-C	xdifxdiffi.c	50	2	Const-qualify immutable objects: bmid
INT13-C	xdifxdiffi.c	51	27	Use bitwise operators only on unsigned operands
INT14-C	xdifxdiffi.c	112	21	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	xdifxdiffi.c	112	23	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	xdifxdiffi.c	116	21	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	xdifxdiffi.c	116	23	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	xdifxdiffi.c	155	14	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	xdifxdiffi.c	179	14	Do not form or use out-of-bounds pointers or array subscripts
INT14-C	xdifxdiffi.c	222	10	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	xdifxdiffi.c	222	19	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	xdifxdiffi.c	222	21	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	xdifxdiffi.c	276	25	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxdiffi.c	282	25	Use only explicitly signed or unsigned char type for numeric values
INT13-C	xdifxdiffi.c	323	6	Use bitwise operators only on unsigned operands
INT13-C	xdifxdiffi.c	328	6	Use bitwise operators only on unsigned operands
EXP36-C	xdifxdiffi.c	340	7	Do not convert pointers into more strictly aligned pointer types
INT01-C	xdifxdiffi.c	340	7	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	xdifxdiffi.c	368	2	Store a new value in pointers immediately after free()
MEM34-C	xdifxdiffi.c	368	2	Only free memory allocated dynamically
DCL00-C	xdifxdiffi.c	418	3	Const-qualify immutable objects: c
DCL00-C	xdifxdiffi.c	678	2	Const-qualify immutable objects: cmp_indents
INT07-C	xdifxdiffi.c	764	25	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxdiffi.c	765	23	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxdiffi.c	785	25	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxdiffi.c	786	23	Use only explicitly signed or unsigned char type for numeric values
INT13-C	xdifxdiffi.c	881	20	Use bitwise operators only on unsigned operands
MEM01-C	xdifxdiffi.c	972	3	Store a new value in pointers immediately after free()
MEM34-C	xdifxdiffi.c	972	3	Only free memory allocated dynamically
DCL13-C	xdifxdiffi.c	976	41	Declare function parameters that are pointers to values not changed by the function as const: xe
INT01-C	xdifxdiffi.c	1018	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	xdifxdiffi.c	1058	2	Const-qualify immutable objects: ef
DCL00-C	xdifxemit.c	34	2	Const-qualify immutable objects: psize
DCL00-C	xdifxemit.c	55	2	Const-qualify immutable objects: max_common
DCL00-C	xdifxemit.c	56	2	Const-qualify immutable objects: max_ignorable
DCL00-C	xdifxemit.c	74	3	Const-qualify immutable objects: distance
DCL13-C	xdifxemit.c	98	73	Declare function parameters that are pointers to values not changed by the function as const: priv
DCL00-C	xdifxemit.c	118	2	Const-qualify immutable objects: len
DCL01-C	xdifxemit.c	136	24	Do not reuse variable names in subscopes: func_line
DCL00-C	xdifxemit.c	138	2	Const-qualify immutable objects: step
DCL00-C	xdifxemit.c	139	2	Const-qualify immutable objects: dummy
DCL00-C	xdifxemit.c	145	3	Const-qualify immutable objects: len
DCL01-C	xdifxemit.c	172	2	Do not reuse variable names in subscopes: func_line
DCL00-C	xdifxemit.c	262	5	Const-qualify immutable objects: l
EXP12-C	xdifxemit.c	277	4	Do not ignore values returned by functions: get_func_line
DCL01-C	xdifxhistogram.c	103	36	Do not reuse variable names in subscopes: index
INT14-C	xdifxhistogram.c	110	11	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	xdifxhistogram.c	141	28	Do not convert pointers into more strictly aligned pointer types
DCL01-C	xdifxhistogram.c	156	38	Do not reuse variable names in subscopes: index
EXP12-C	xdifxhistogram.c	234	2	Do not ignore values returned by functions: memset
INT13-C	xdifxhistogram.c	235	31	Use bitwise operators only on unsigned operands
INT13-C	xdifxhistogram.c	235	32	Use bitwise operators only on unsigned operands
DCL01-C	xdifxhistogram.c	241	49	Do not reuse variable names in subscopes: index
DCL01-C	xdifxhistogram.c	255	2	Do not reuse variable names in subscopes: index
EXP12-C	xdifxhistogram.c	257	2	Do not ignore values returned by functions: memset
EXP36-C	xdifxhistogram.c	269	7	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdifxhistogram.c	273	7	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdifxhistogram.c	276	7	Do not convert pointers into more strictly aligned pointer types
INT07-C	xdifxhistogram.c	321	32	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxhistogram.c	325	32	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	xdifxhistogram.c	329	2	Do not ignore values returned by functions: memset
INT07-C	xdifxhistogram.c	338	33	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxhistogram.c	340	33	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	xdifxmerge.c	63	7	Do not convert pointers into more strictly aligned pointer types
DCL00-C	xdifxmerge.c	104	3	Const-qualify immutable objects: result
INT07-C	xdifxmerge.c	130	17	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxmerge.c	135	16	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	xdifxmerge.c	202	2	Const-qualify immutable objects: marker1_size
INT01-C	xdifxmerge.c	202	44	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	xdifxmerge.c	203	2	Const-qualify immutable objects: marker2_size
INT01-C	xdifxmerge.c	203	44	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	xdifxmerge.c	204	2	Const-qualify immutable objects: marker3_size
INT01-C	xdifxmerge.c	204	44	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	xdifxmerge.c	205	2	Const-qualify immutable objects: needs_cr
EXP12-C	xdifxmerge.c	217	3	Do not ignore values returned by functions: memset
INT07-C	xdifxmerge.c	220	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxmerge.c	225	17	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxmerge.c	226	16	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	xdifxmerge.c	238	4	Do not ignore values returned by functions: memset
INT07-C	xdifxmerge.c	241	16	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxmerge.c	246	18	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxmerge.c	247	17	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	xdifxmerge.c	256	3	Do not ignore values returned by functions: memset
INT07-C	xdifxmerge.c	259	17	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxmerge.c	260	16	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	xdifxmerge.c	269	3	Do not ignore values returned by functions: memset
INT07-C	xdifxmerge.c	272	15	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxmerge.c	277	17	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxmerge.c	278	16	Use only explicitly signed or unsigned char type for numeric values
DCL00-C	xdifxmerge.c	307	5	Const-qualify immutable objects: needs_cr
INT14-C	xdifxmerge.c	309	10	Avoid performing bitwise and arithmetic operations on the same data
DCL00-C	xdifxmerge.c	370	3	Const-qualify immutable objects: i1
DCL00-C	xdifxmerge.c	370	3	Const-qualify immutable objects: i2
EXP05-C	xdifxmerge.c	384	12	Do not cast away a const qualification
EXP05-C	xdifxmerge.c	387	12	Do not cast away a const qualification
EXP36-C	xdifxmerge.c	410	20	Do not convert pointers into more strictly aligned pointer types
INT13-C	xdifxmerge.c	435	7	Use bitwise operators only on unsigned operands
MEM34-C	xdifxmerge.c	459	2	Only free memory allocated dynamically
DCL00-C	xdifxmerge.c	516	2	Const-qualify immutable objects: style
DCL00-C	xdifxmerge.c	517	2	Const-qualify immutable objects: favor
EXP12-C	xdifxmerge.c	557	5	Do not ignore values returned by functions: xdl_cleanup_merge
EXP12-C	xdifxmerge.c	572	5	Do not ignore values returned by functions: xdl_cleanup_merge
DCL00-C	xdifxmerge.c	585	4	Const-qualify immutable objects: off
DCL00-C	xdifxmerge.c	586	4	Const-qualify immutable objects: ffo
EXP12-C	xdifxmerge.c	607	5	Do not ignore values returned by functions: xdl_cleanup_merge
EXP12-C	xdifxmerge.c	631	4	Do not ignore values returned by functions: xdl_cleanup_merge
EXP12-C	xdifxmerge.c	647	4	Do not ignore values returned by functions: xdl_cleanup_merge
EXP12-C	xdifxmerge.c	661	3	Do not ignore values returned by functions: xdl_cleanup_merge
DCL00-C	xdifxmerge.c	666	3	Const-qualify immutable objects: marker_size
DCL00-C	xdifxmerge.c	667	3	Const-qualify immutable objects: size
EXP12-C	xdifxmerge.c	673	4	Do not ignore values returned by functions: xdl_cleanup_merge
EXP12-C	xdifxmerge.c	677	3	Do not ignore values returned by functions: xdl_fill_merge_buffer
INT01-C	xdifxpatience.c	79	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	xdifxpatience.c	103	2	Do not reuse variable names in subscopes: index
EXP36-C	xdifxpatience.c	150	7	Do not convert pointers into more strictly aligned pointer types
DCL01-C	xdifxpatience.c	169	17	Do not reuse variable names in subscopes: entry
DCL00-C	xdifxpatience.c	174	3	Const-qualify immutable objects: middle
DCL01-C	xdifxpatience.c	198	2	Do not reuse variable names in subscopes: entry
EXP36-C	xdifxpatience.c	207	7	Do not convert pointers into more strictly aligned pointer types
INT01-C	xdifxpatience.c	207	7	Use rsize_t or size_t for all integer values representing the size of an object
ARR30-C	xdifxpatience.c	218	11	Do not form or use out-of-bounds pointers or array subscripts
MEM34-C	xdifxpatience.c	230	3	Only free memory allocated dynamically
MEM34-C	xdifxpatience.c	242	2	Only free memory allocated dynamically
DCL00-C	xdifxpatience.c	259	2	Const-qualify immutable objects: end1
DCL00-C	xdifxpatience.c	259	2	Const-qualify immutable objects: end2
EXP12-C	xdifxpatience.c	310	2	Do not ignore values returned by functions: memset
INT13-C	xdifxpatience.c	311	32	Use bitwise operators only on unsigned operands
INT13-C	xdifxpatience.c	311	33	Use bitwise operators only on unsigned operands
INT07-C	xdifxpatience.c	333	32	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxpatience.c	337	32	Use only explicitly signed or unsigned char type for numeric values
EXP12-C	xdifxpatience.c	341	2	Do not ignore values returned by functions: memset
INT07-C	xdifxpatience.c	349	32	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxpatience.c	351	32	Use only explicitly signed or unsigned char type for numeric values
EXP36-C	xdifxprepare.c	81	7	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdifxprepare.c	88	7	Do not convert pointers into more strictly aligned pointer types
INT01-C	xdifxprepare.c	88	7	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	xdifxprepare.c	116	5	Avoid performing bitwise and arithmetic operations on the same data
EXP36-C	xdifxprepare.c	124	30	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdifxprepare.c	129	7	Do not convert pointers into more strictly aligned pointer types
INT14-C	xdifxprepare.c	144	5	Avoid performing bitwise and arithmetic operations on the same data
INT34-C	xdifxprepare.c	144	14	Do not shift a negative number of bits or more bits than exist in the operand
INT34-C	xdifxprepare.c	144	14	Do not shift a negative number of bits or more bits than exist in the operand
DCL01-C	xdifxprepare.c	163	2	Do not reuse variable names in subscopes: rindex
EXP36-C	xdifxprepare.c	173	7	Do not convert pointers into more strictly aligned pointer types
INT01-C	xdifxprepare.c	173	7	Use rsize_t or size_t for all integer values representing the size of an object
INT34-C	xdifxprepare.c	177	12	Do not shift a negative number of bits or more bits than exist in the operand
EXP36-C	xdifxprepare.c	178	7	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdifxprepare.c	186	8	Do not convert pointers into more strictly aligned pointer types
EXP36-C	xdifxprepare.c	188	30	Do not convert pointers into more strictly aligned pointer types
EXP05-C	xdifxprepare.c	191	17	Do not cast away a const qualification
INT13-C	xdifxprepare.c	202	7	Use bitwise operators only on unsigned operands
INT13-C	xdifxprepare.c	203	7	Use bitwise operators only on unsigned operands
EXP36-C	xdifxprepare.c	204	8	Do not convert pointers into more strictly aligned pointer types
INT01-C	xdifxprepare.c	204	8	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	xdifxprepare.c	206	8	Do not convert pointers into more strictly aligned pointer types
INT01-C	xdifxprepare.c	206	8	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	xdifxprepare.c	224	2	Store a new value in pointers immediately after free()
MEM34-C	xdifxprepare.c	224	2	Only free memory allocated dynamically
MEM01-C	xdifxprepare.c	225	2	Store a new value in pointers immediately after free()
MEM34-C	xdifxprepare.c	225	2	Only free memory allocated dynamically
MEM01-C	xdifxprepare.c	226	2	Store a new value in pointers immediately after free()
MEM34-C	xdifxprepare.c	226	2	Only free memory allocated dynamically
MEM01-C	xdifxprepare.c	227	2	Store a new value in pointers immediately after free()
MEM34-C	xdifxprepare.c	227	2	Only free memory allocated dynamically
MEM01-C	xdifxprepare.c	228	2	Store a new value in pointers immediately after free()
MEM34-C	xdifxprepare.c	228	2	Only free memory allocated dynamically
EXP12-C	xdifxprepare.c	250	2	Do not ignore values returned by functions: memset
INT13-C	xdifxprepare.c	259	12	Use bitwise operators only on unsigned operands
INT13-C	xdifxprepare.c	280	7	Use bitwise operators only on unsigned operands
INT13-C	xdifxprepare.c	281	7	Use bitwise operators only on unsigned operands
INT07-C	xdifxprepare.c	382	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxprepare.c	390	11	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxprepare.c	401	18	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxprepare.c	413	18	Use only explicitly signed or unsigned char type for numeric values
MEM34-C	xdifxprepare.c	417	2	Only free memory allocated dynamically
EXP05-C	xdifxutils.c	44	14	Do not cast away a const qualification
EXP05-C	xdifxutils.c	46	14	Do not cast away a const qualification
MEM01-C	xdifxutils.c	91	3	Store a new value in pointers immediately after free()
MEM34-C	xdifxutils.c	91	3	Only free memory allocated dynamically
INT01-C	xdifxutils.c	101	31	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	xdifxutils.c	133	12	Do not cast away a const qualification
INT33-C	xdifxutils.c	137	37	Ensure that division and remainder operations do not result in divide-by-zero errors
INT13-C	xdifxutils.c	146	14	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	146	16	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	146	16	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	146	16	Use bitwise operators only on unsigned operands
ARR30-C	xdifxutils.c	168	33	Do not form or use out-of-bounds pointers or array subscripts
INT13-C	xdifxutils.c	179	14	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	179	16	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	179	16	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	179	16	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	193	12	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	204	19	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	217	19	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	222	19	Use bitwise operators only on unsigned operands
ARR30-C	xdifxutils.c	239	21	Do not form or use out-of-bounds pointers or array subscripts
ARR30-C	xdifxutils.c	245	21	Do not form or use out-of-bounds pointers or array subscripts
DCL00-C	xdifxutils.c	256	2	Const-qualify immutable objects: cr_at_eol_only
INT13-C	xdifxutils.c	256	30	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	256	32	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	256	32	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	256	32	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	272	14	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	274	19	Use bitwise operators only on unsigned operands
INT14-C	xdifxutils.c	276	8	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	xdifxutils.c	279	19	Use bitwise operators only on unsigned operands
INT14-C	xdifxutils.c	282	9	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	xdifxutils.c	289	6	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	xdifxutils.c	301	12	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	301	14	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	301	14	Use bitwise operators only on unsigned operands
INT13-C	xdifxutils.c	301	14	Use bitwise operators only on unsigned operands
INT14-C	xdifxutils.c	305	6	Avoid performing bitwise and arithmetic operations on the same data
INT01-C	xdifxutils.c	316	39	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	xdifxutils.c	326	7	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxutils.c	328	10	Use only explicitly signed or unsigned char type for numeric values
INT32-C	xdifxutils.c	329	9	Ensure that operations on signed integers do not result in overflow
INT07-C	xdifxutils.c	337	10	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxutils.c	338	7	Use only explicitly signed or unsigned char type for numeric values
INT07-C	xdifxutils.c	377	13	Use only explicitly signed or unsigned char type for numeric values
INT01-C	xdifxutils.c	378	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	xdifxutils.c	379	26	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	xdifxutils.c	383	12	Use only explicitly signed or unsigned char type for numeric values
EXP05-C	xdifxutils.c	419	17	Do not cast away a const qualification
EXP05-C	xdifxutils.c	422	17	Do not cast away a const qualification
INT01-C	xdifxutils.c	440	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	xdifxutils.c	442	22	Use rsize_t or size_t for all integer values representing the size of an object
INT33-C	xdifxutils.c	442	15	Ensure that division and remainder operations do not result in divide-by-zero errors
MEM01-C	xdifxutils.c	447	3	Store a new value in pointers immediately after free()
INT13-C	reftablbasics.c	20	58	Use bitwise operators only on unsigned operands
INT13-C	reftablbasics.c	20	33	Use bitwise operators only on unsigned operands
DCL05-C	reftablbasics.c	30	1	Use typedefs to improve code readability
INT01-C	reftablbasics.c	40	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablbasics.c	41	3	Const-qualify immutable objects: mid
INT01-C	reftablbasics.c	41	31	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	reftablbasics.c	76	1	Use typedefs to improve code readability
INT07-C	reftablbasics.c	87	10	Use only explicitly signed or unsigned char type for numeric values
INT01-C	reftablbasics.c	93	15	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablbasics.c	93	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablbasics.c	94	29	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablbasics.c	102	26	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablbasics.c	102	45	Use rsize_t or size_t for all integer values representing the size of an object
DCL05-C	reftablbasics.c	107	1	Use typedefs to improve code readability
INT01-C	reftablbasics.c	122	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablbasics.c	122	25	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	reftablblock.c	20	2	Strive for logical completeness
MSC01-C	reftablblock.c	31	2	Strive for logical completeness
EXP36-C	reftablblock.c	56	34	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablblock.c	57	35	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	reftablblock.c	72	56	Do not reuse variable names in subscopes: hash_size
DCL00-C	reftablblock.c	148	3	Const-qualify immutable objects: block_header_skip
DCL00-C	reftablblock.c	149	3	Const-qualify immutable objects: src_len
FLP03-C	reftablblock.c	150	29	Detect and handle floating point errors
DCL00-C	reftablblock.c	155	4	Const-qualify immutable objects: zresult
DCL01-C	reftablblock.c	188	13	Do not reuse variable names in subscopes: hash_size
DCL00-C	reftablblock.c	191	2	Const-qualify immutable objects: typ
DCL00-C	reftablblock.c	192	2	Const-qualify immutable objects: sz
DCL00-C	reftablblock.c	205	3	Const-qualify immutable objects: block_header_skip
DCL01-C	reftablblock.c	280	2	Do not reuse variable names in subscopes: error
EXP36-C	reftablblock.c	287	32	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablblock.c	288	2	Const-qualify immutable objects: off
DCL00-C	reftablblock.c	299	2	Const-qualify immutable objects: n
INT01-C	reftablblock.c	348	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablblock.c	356	2	Const-qualify immutable objects: off
DCL00-C	reftablblock.c	363	2	Const-qualify immutable objects: n
DCL13-C	reftablblocksource.c	16	39	Declare function parameters that are pointers to values not changed by the function as const: b
DCL13-C	reftablblocksource.c	23	32	Declare function parameters that are pointers to values not changed by the function as const: b
EXP36-C	reftablblocksource.c	30	21	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablblocksource.c	31	2	Detect and remove code that has no effect
INT01-C	reftablblocksource.c	31	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablblocksource.c	31	2	Use rsize_t or size_t for all integer values representing the size of an object
MSC12-C	reftablblocksource.c	53	2	Detect and remove code that has no effect
DCL13-C	reftablblocksource.c	58	39	Declare function parameters that are pointers to values not changed by the function as const: b
DCL13-C	reftablblocksource.c	88	37	Declare function parameters that are pointers to values not changed by the function as const: b
DCL00-C	reftablblocksource.c	97	2	Const-qualify immutable objects: fd
EXP36-C	reftablblocksource.c	109	32	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablblocksource.c	110	2	Detect and remove code that has no effect
DCL00-C	reftablblocksource.c	130	2	Const-qualify immutable objects: fd
EXP36-C	reftablblocksource.c	145	21	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablblocksource.c	149	2	Detect and remove code that has no effect
EXP36-C	reftabliter.c	26	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftabliter.c	34	39	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftabliter.c	88	2	Detect and remove code that has no effect
EXP36-C	reftabliter.c	95	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftabliter.c	129	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftabliter.c	164	18	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftabliter.c	191	2	Detect and remove code that has no effect
MEM04-C	reftablpublicbasics.c	22	9	Do not perform zero length allocations
MEM04-C	reftablpublicbasics.c	29	9	Do not perform zero length allocations
MEM01-C	reftablpublicbasics.c	37	3	Store a new value in pointers immediately after free()
EXP12-C	reftablpublicbasics.c	43	2	Do not ignore values returned by functions: memset
DCL05-C	reftablpublicbasics.c	47	1	Use typedefs to improve code readability
DCL01-C	reftablpublicbasics.c	47	33	Do not reuse variable names in subscopes: malloc
DCL01-C	reftablpublicbasics.c	48	12	Do not reuse variable names in subscopes: realloc
DCL01-C	reftablpublicbasics.c	48	45	Do not reuse variable names in subscopes: free
MSC01-C	reftablpublicbasics.c	57	2	Strive for logical completeness
INT01-C	reftablmerged.c	24	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablmerged.c	26	3	Const-qualify immutable objects: err
EXP36-C	reftablmerged.c	48	27	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablmerged.c	51	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablmerged.c	64	2	Const-qualify immutable objects: err
DCL02-C	reftablmerged.c	253	2	Use visually distinct identifiers: err
DCL01-C	reftablmerged.c	112	3	Do not reuse variable names in subscopes: err
DCL02-C	reftablmerged.c	253	2	Use visually distinct identifiers: err
DCL02-C	reftablmerged.c	253	2	Use visually distinct identifiers: err
EXP12-C	reftablmerged.c	123	3	Do not ignore values returned by functions: merged_iter_pqueue_remove
DCL02-C	reftablmerged.c	253	2	Use visually distinct identifiers: err
DCL02-C	reftablmerged.c	253	2	Use visually distinct identifiers: err
DCL00-C	reftablmerged.c	140	3	Const-qualify immutable objects: err
EXP36-C	reftablmerged.c	152	27	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablmerged.c	167	2	Detect and remove code that has no effect
DCL00-C	reftablmerged.c	181	3	Const-qualify immutable objects: min
DCL00-C	reftablmerged.c	182	3	Const-qualify immutable objects: max
EXP36-C	reftablmerged.c	195	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablmerged.c	244	51	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablmerged.c	255	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablmerged.c	256	3	Const-qualify immutable objects: e
DCL02-C	reftablmerged.c	266	3	Use visually distinct identifiers: i
DCL01-C	reftablmerged.c	266	3	Do not reuse variable names in subscopes: i
DCL02-C	reftablmerged.c	266	3	Use visually distinct identifiers: i
DCL02-C	reftablmerged.c	266	3	Use visually distinct identifiers: i
EXP36-C	reftablmerged.c	281	19	Do not convert pointers into more strictly aligned pointer types
EXP05-C	reftablmerged.c	295	15	Do not cast away a const qualification
EXP05-C	reftablmerged.c	307	24	Do not cast away a const qualification
DCL00-C	reftablmerged.c	317	2	Const-qualify immutable objects: max
INT13-C	reftablmerged.c	317	17	Use bitwise operators only on unsigned operands
EXP36-C	reftablmerged.c	330	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablmerged.c	335	39	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablmerged.c	340	48	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablmerged.c	345	48	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablmerged.c	358	2	Detect and remove code that has no effect
INT01-C	reftablpq.c	41	16	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	reftablpq.c	41	16	Ensure that return values are compared against the proper type
INT01-C	reftablpq.c	48	33	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	52	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	56	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	59	9	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	67	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	67	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	79	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	79	15	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablpq.c	80	30	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablpq.c	85	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	92	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	92	3	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablpq.c	101	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablreader.c	30	2	Const-qualify immutable objects: result
MSC01-C	reftablreader.c	48	2	Strive for logical completeness
INT14-C	reftablreader.c	134	19	Avoid performing bitwise and arithmetic operations on the same data
DCL00-C	reftablreader.c	174	2	Const-qualify immutable objects: file_size
DCL00-C	reftablreader.c	177	2	Const-qualify immutable objects: read_size
EXP12-C	reftablreader.c	178	2	Do not ignore values returned by functions: memset
DCL00-C	reftablreader.c	245	2	Const-qualify immutable objects: res
DCL00-C	reftablreader.c	284	2	Const-qualify immutable objects: guess_block_size
DCL00-C	reftablreader.c	289	2	Const-qualify immutable objects: header_off
DCL00-C	reftablreader.c	329	2	Const-qualify immutable objects: next_block_off
EXP36-C	reftablreader.c	346	19	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablreader.c	387	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablreader.c	392	26	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablreader.c	405	2	Detect and remove code that has no effect
DCL00-C	reftablreader.c	417	2	Const-qualify immutable objects: err
EXP36-C	reftablreader.c	421	23	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reftablreader.c	431	21	Do not reuse variable names in subscopes: index
EXP36-C	reftablreader.c	545	19	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablreader.c	564	2	Const-qualify immutable objects: idx
EXP36-C	reftablreader.c	578	19	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablreader.c	589	2	Const-qualify immutable objects: typ
EXP05-C	reftablreader.c	606	15	Do not cast away a const qualification
EXP05-C	reftablreader.c	618	24	Do not cast away a const qualification
DCL00-C	reftablreader.c	627	2	Const-qualify immutable objects: max
INT13-C	reftablreader.c	627	17	Use bitwise operators only on unsigned operands
EXP36-C	reftablreader.c	641	18	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablreader.c	642	2	Const-qualify immutable objects: err
EXP36-C	reftablreader.c	716	41	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablreader.c	719	2	Const-qualify immutable objects: oid_len
EXP36-C	reftablreader.c	729	26	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablreader.c	764	21	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablreader.c	769	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablreader.c	774	42	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablreader.c	779	42	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablreader.c	792	2	Detect and remove code that has no effect
INT01-C	reftablrecord.c	27	14	Use rsize_t or size_t for all integer values representing the size of an object
ERR33-C	reftablrecord.c	27	14	Ensure that return values are compared against the proper type
INT01-C	reftablrecord.c	33	11	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	reftablrecord.c	36	7	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	reftablrecord.c	36	24	Use bitwise operators only on unsigned operands
ARR30-C	reftablrecord.c	36	44	Do not form or use out-of-bounds pointers or array subscripts
INT01-C	reftablrecord.c	60	18	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	61	16	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	reftablrecord.c	69	2	Strive for logical completeness
DCL00-C	reftablrecord.c	103	2	Const-qualify immutable objects: start_len
DCL00-C	reftablrecord.c	105	2	Const-qualify immutable objects: n
INT01-C	reftablrecord.c	109	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	116	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablrecord.c	122	2	Const-qualify immutable objects: l
DCL00-C	reftablrecord.c	123	2	Const-qualify immutable objects: n
INT01-C	reftablrecord.c	127	12	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablrecord.c	140	2	Const-qualify immutable objects: prefix_len
DCL00-C	reftablrecord.c	141	2	Const-qualify immutable objects: suffix_len
INT01-C	reftablrecord.c	141	32	Use rsize_t or size_t for all integer values representing the size of an object
INT13-C	reftablrecord.c	149	41	Use bitwise operators only on unsigned operands
INT01-C	reftablrecord.c	154	15	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablrecord.c	165	2	Const-qualify immutable objects: start_len
INT01-C	reftablrecord.c	173	17	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	184	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	192	19	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	reftablrecord.c	198	3	Do not cast away a const qualification
DCL01-C	reftablrecord.c	204	12	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	206	36	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablrecord.c	207	42	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablrecord.c	208	2	Detect and remove code that has no effect
MSC01-C	reftablrecord.c	218	2	Strive for logical completeness
DCL01-C	reftablrecord.c	245	54	Do not reuse variable names in subscopes: hash_size
MSC12-C	reftablrecord.c	247	2	Detect and remove code that has no effect
INT14-C	reftablrecord.c	251	16	Avoid performing bitwise and arithmetic operations on the same data
INT14-C	reftablrecord.c	252	20	Avoid performing bitwise and arithmetic operations on the same data
INT07-C	reftablrecord.c	254	23	Use only explicitly signed or unsigned char type for numeric values
DCL01-C	reftablrecord.c	259	11	Do not reuse variable names in subscopes: hash_size
MSC01-C	reftablrecord.c	263	2	Strive for logical completeness
EXP36-C	reftablrecord.c	292	30	Do not convert pointers into more strictly aligned pointer types
EXP12-C	reftablrecord.c	315	2	Do not ignore values returned by functions: memset
EXP05-C	reftablrecord.c	321	3	Do not cast away a const qualification
DCL01-C	reftablrecord.c	326	15	Do not reuse variable names in subscopes: hash_size
EXP05-C	reftablrecord.c	329	3	Do not cast away a const qualification
MSC12-C	reftablrecord.c	332	2	Detect and remove code that has no effect
INT01-C	reftablrecord.c	346	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	355	13	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	reftablrecord.c	372	15	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	374	34	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablrecord.c	377	2	Const-qualify immutable objects: n
MSC12-C	reftablrecord.c	384	2	Detect and remove code that has no effect
INT01-C	reftablrecord.c	386	52	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	reftablrecord.c	389	22	Use only explicitly signed or unsigned char type for numeric values
INT01-C	reftablrecord.c	393	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	403	14	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	reftablrecord.c	1232	53	Use visually distinct identifiers: n
DCL00-C	reftablrecord.c	418	3	Const-qualify immutable objects: n
DCL01-C	reftablrecord.c	418	3	Do not reuse variable names in subscopes: n
DCL02-C	reftablrecord.c	1232	53	Use visually distinct identifiers: n
DCL02-C	reftablrecord.c	1232	53	Use visually distinct identifiers: n
EXP05-C	reftablrecord.c	439	3	Do not cast away a const qualification
DCL01-C	reftablrecord.c	444	27	Do not reuse variable names in subscopes: hash_size
EXP05-C	reftablrecord.c	446	35	Do not cast away a const qualification
EXP05-C	reftablrecord.c	447	35	Do not cast away a const qualification
DCL01-C	reftablrecord.c	452	13	Do not reuse variable names in subscopes: hash_size
EXP05-C	reftablrecord.c	454	31	Do not cast away a const qualification
EXP05-C	reftablrecord.c	473	3	Do not cast away a const qualification
EXP36-C	reftablrecord.c	480	36	Do not convert pointers into more strictly aligned pointer types
EXP12-C	reftablrecord.c	483	2	Do not ignore values returned by functions: memset
DCL01-C	reftablrecord.c	486	60	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	488	42	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reftablrecord.c	502	12	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	504	36	Do not convert pointers into more strictly aligned pointer types
EXP05-C	reftablrecord.c	506	3	Do not cast away a const qualification
EXP36-C	reftablrecord.c	514	32	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablrecord.c	514	49	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	516	2	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	516	2	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablrecord.c	521	40	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reftablrecord.c	528	15	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	530	40	Do not convert pointers into more strictly aligned pointer types
DCL02-C	reftablrecord.c	1232	53	Use visually distinct identifiers: n
DCL00-C	reftablrecord.c	551	3	Const-qualify immutable objects: n
DCL01-C	reftablrecord.c	551	3	Do not reuse variable names in subscopes: n
DCL02-C	reftablrecord.c	1232	53	Use visually distinct identifiers: n
DCL02-C	reftablrecord.c	1232	53	Use visually distinct identifiers: n
DCL01-C	reftablrecord.c	563	15	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	566	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablrecord.c	589	30	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablrecord.c	589	37	Use rsize_t or size_t for all integer values representing the size of an object
DCL02-C	reftablrecord.c	1232	53	Use visually distinct identifiers: n
DCL00-C	reftablrecord.c	601	3	Const-qualify immutable objects: n
DCL01-C	reftablrecord.c	601	3	Do not reuse variable names in subscopes: n
DCL02-C	reftablrecord.c	1232	53	Use visually distinct identifiers: n
DCL02-C	reftablrecord.c	1232	53	Use visually distinct identifiers: n
DCL01-C	reftablrecord.c	618	77	Do not reuse variable names in subscopes: hash_size
EXP05-C	reftablrecord.c	620	35	Do not cast away a const qualification
EXP05-C	reftablrecord.c	621	35	Do not cast away a const qualification
INT01-C	reftablrecord.c	631	54	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	reftablrecord.c	651	11	Do not reuse variable names in subscopes: hash_size
MSC01-C	reftablrecord.c	655	2	Strive for logical completeness
EXP05-C	reftablrecord.c	685	3	Do not cast away a const qualification
DCL00-C	reftablrecord.c	686	2	Const-qualify immutable objects: len
INT14-C	reftablrecord.c	692	5	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	reftablrecord.c	692	8	Use bitwise operators only on unsigned operands
DCL01-C	reftablrecord.c	698	12	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	700	36	Do not convert pointers into more strictly aligned pointer types
EXP05-C	reftablrecord.c	702	3	Do not cast away a const qualification
MSC01-C	reftablrecord.c	709	2	Strive for logical completeness
EXP36-C	reftablrecord.c	742	34	Do not convert pointers into more strictly aligned pointer types
MSC01-C	reftablrecord.c	749	2	Strive for logical completeness
EXP12-C	reftablrecord.c	760	2	Do not ignore values returned by functions: memset
EXP05-C	reftablrecord.c	766	3	Do not cast away a const qualification
DCL01-C	reftablrecord.c	774	15	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	776	40	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablrecord.c	793	12	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	816	12	Use rsize_t or size_t for all integer values representing the size of an object
DCL01-C	reftablrecord.c	833	15	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	836	34	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablrecord.c	837	2	Const-qualify immutable objects: max
INT01-C	reftablrecord.c	842	14	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	842	38	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	845	52	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	846	38	Use rsize_t or size_t for all integer values representing the size of an object
INT14-C	reftablrecord.c	849	18	Avoid performing bitwise and arithmetic operations on the same data
INT13-C	reftablrecord.c	849	21	Use bitwise operators only on unsigned operands
MSC01-C	reftablrecord.c	852	3	Strive for logical completeness
INT01-C	reftablrecord.c	869	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	888	51	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	reftablrecord.c	890	33	Use only explicitly signed or unsigned char type for numeric values
INT01-C	reftablrecord.c	899	52	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	reftablrecord.c	901	34	Use only explicitly signed or unsigned char type for numeric values
INT01-C	reftablrecord.c	909	13	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrecord.c	922	54	Use rsize_t or size_t for all integer values representing the size of an object
INT07-C	reftablrecord.c	924	36	Use only explicitly signed or unsigned char type for numeric values
STR05-C	reftablrecord.c	936	2	Use pointers to const when referring to string literals
DCL01-C	reftablrecord.c	958	27	Do not reuse variable names in subscopes: hash_size
EXP05-C	reftablrecord.c	960	35	Do not cast away a const qualification
EXP05-C	reftablrecord.c	961	7	Do not cast away a const qualification
DCL01-C	reftablrecord.c	966	51	Do not reuse variable names in subscopes: hash_size
MSC01-C	reftablrecord.c	973	2	Strive for logical completeness
EXP05-C	reftablrecord.c	996	3	Do not cast away a const qualification
DCL01-C	reftablrecord.c	999	65	Do not reuse variable names in subscopes: hash_size
EXP05-C	reftablrecord.c	1001	31	Do not cast away a const qualification
EXP36-C	reftablrecord.c	1019	44	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reftablrecord.c	1025	14	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	1027	38	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablrecord.c	1028	44	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablrecord.c	1037	38	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reftablrecord.c	1047	10	Do not reuse variable names in subscopes: hash_size
EXP05-C	reftablrecord.c	1050	3	Do not cast away a const qualification
DCL00-C	reftablrecord.c	1053	2	Const-qualify immutable objects: n
DCL01-C	reftablrecord.c	1064	10	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	1067	36	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reftablrecord.c	1081	74	Do not reuse variable names in subscopes: hash_size
EXP05-C	reftablrecord.c	1083	37	Do not cast away a const qualification
EXP05-C	reftablrecord.c	1084	37	Do not cast away a const qualification
DCL01-C	reftablrecord.c	1089	62	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrecord.c	1091	44	Do not convert pointers into more strictly aligned pointer types
DCL01-C	reftablrecord.c	1120	11	Do not reuse variable names in subscopes: hash_size
DCL01-C	reftablrecord.c	1127	44	Do not reuse variable names in subscopes: hash_size
MSC12-C	reftablrecord.c	1129	2	Detect and remove code that has no effect
DCL01-C	reftablrecord.c	1142	50	Do not reuse variable names in subscopes: hash_size
DCL01-C	reftablrecord.c	1159	85	Do not reuse variable names in subscopes: hash_size
DCL01-C	reftablrecord.c	1167	51	Do not reuse variable names in subscopes: hash_size
DCL01-C	reftablrecord.c	1176	51	Do not reuse variable names in subscopes: hash_size
MSC12-C	reftablrecord.c	1178	2	Detect and remove code that has no effect
EXP05-C	reftablrecord.c	1205	17	Do not cast away a const qualification
EXP05-C	reftablrecord.c	1206	10	Do not cast away a const qualification
EXP36-C	reftablrecord.c	1216	41	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablrecord.c	1217	41	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablrecord.c	1219	2	Const-qualify immutable objects: cmp
INT01-C	reftablrecord.c	1235	9	Use rsize_t or size_t for all integer values representing the size of an object
MSC01-C	reftablrecord.c	1240	2	Strive for logical completeness
MSC01-C	reftablrecord.c	1256	2	Strive for logical completeness
MSC01-C	reftablrecord.c	1279	2	Strive for logical completeness
DCL01-C	reftablrecord.c	1310	61	Do not reuse variable names in subscopes: hash_size
EXP36-C	reftablrefname.c	22	27	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablrefname.c	31	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablrefname.c	36	3	Const-qualify immutable objects: idx
INT01-C	reftablrefname.c	37	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrefname.c	42	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablrefname.c	47	3	Const-qualify immutable objects: idx
INT01-C	reftablrefname.c	48	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrefname.c	75	19	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablrefname.c	80	3	Const-qualify immutable objects: idx
INT01-C	reftablrefname.c	81	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrefname.c	94	20	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablrefname.c	99	4	Const-qualify immutable objects: idx
INT01-C	reftablrefname.c	100	12	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablrefname.c	143	25	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablrefname.c	144	25	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablrefname.c	148	11	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrefname.c	163	17	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablrefname.c	164	3	Const-qualify immutable objects: is_slash
INT01-C	reftablrefname.c	164	35	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrefname.c	165	29	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablrefname.c	176	11	Use rsize_t or size_t for all integer values representing the size of an object
EXP05-C	reftablgeneric.c	21	24	Do not cast away a const qualification
EXP05-C	reftablgeneric.c	31	24	Do not cast away a const qualification
INT13-C	reftablgeneric.c	32	29	Use bitwise operators only on unsigned operands
DCL00-C	reftablgeneric.c	65	2	Const-qualify immutable objects: hash_id
DCL00-C	reftablgeneric.c	137	2	Const-qualify immutable objects: err
DCL00-C	reftablgeneric.c	151	2	Const-qualify immutable objects: err
DCL13-C	reftablgeneric.c	161	38	Declare function parameters that are pointers to values not changed by the function as const: arg
DCL13-C	reftablgeneric.c	161	67	Declare function parameters that are pointers to values not changed by the function as const: rec
DCL13-C	reftablgeneric.c	166	40	Declare function parameters that are pointers to values not changed by the function as const: arg
MSC12-C	reftablgeneric.c	177	2	Detect and remove code that has no effect
DCL05-C	reftablstack.c	20	1	Use typedefs to improve code readability
EXP36-C	reftablstack.c	52	18	Do not convert pointers into more strictly aligned pointer types
DCL05-C	reftablstack.c	79	1	Use typedefs to improve code readability
DCL00-C	reftablstack.c	81	2	Const-qualify immutable objects: size
INT07-C	reftablstack.c	99	12	Use only explicitly signed or unsigned char type for numeric values
ARR30-C	reftablstack.c	99	5	Do not form or use out-of-bounds pointers or array subscripts
DCL05-C	reftablstack.c	108	1	Use typedefs to improve code readability
DCL00-C	reftablstack.c	110	2	Const-qualify immutable objects: fd
EXP36-C	reftablstack.c	114	29	Do not convert pointers into more strictly aligned pointer types
MEM34-C	reftablstack.c	153	3	Only free memory allocated dynamically
INT01-C	reftablstack.c	159	17	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	reftablstack.c	169	5	Do not ignore values returned by functions: unlink
EXP36-C	reftablstack.c	186	18	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablstack.c	186	52	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablstack.c	197	2	Const-qualify immutable objects: cur_len
DCL00-C	reftablstack.c	200	2	Const-qualify immutable objects: names_len
EXP36-C	reftablstack.c	202	18	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablstack.c	202	52	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablstack.c	204	18	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablstack.c	204	49	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	reftablstack.c	277	4	Do not ignore values returned by functions: unlink
DCL00-C	reftablstack.c	297	2	Const-qualify immutable objects: diff
DCL00-C	reftablstack.c	298	2	Const-qualify immutable objects: udiff
ERR33-C	reftablstack.c	300	11	Ensure that return values are compared against the proper type
DCL00-C	reftablstack.c	310	2	Const-qualify immutable objects: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL01-C	reftablstack.c	321	3	Do not reuse variable names in subscopes: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
DCL02-C	reftablstack.c	1403	2	Use visually distinct identifiers: err
MSC30-C	reftablstack.c	367	28	Do not use the rand() function for generating pseudorandom numbers
INT01-C	reftablstack.c	385	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablstack.c	409	2	Const-qualify immutable objects: err
DCL05-C	reftablstack.c	415	1	Use typedefs to improve code readability
DCL01-C	reftablstack.c	416	16	Do not reuse variable names in subscopes: write
DCL00-C	reftablstack.c	419	2	Const-qualify immutable objects: err
EXP12-C	reftablstack.c	425	4	Do not ignore values returned by functions: reftable_stack_reload
DCL00-C	reftablstack.c	439	2	Const-qualify immutable objects: rnd
MSC30-C	reftablstack.c	439	27	Do not use the rand() function for generating pseudorandom numbers
EXP12-C	reftablstack.c	511	3	Do not ignore values returned by functions: unlink
INT01-C	reftablstack.c	523	30	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	reftablstack.c	524	3	Do not ignore values returned by functions: unlink
INT01-C	reftablstack.c	548	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablstack.c	597	25	Do not convert pointers into more strictly aligned pointer types
DCL05-C	reftablstack.c	607	1	Use typedefs to improve code readability
DCL05-C	reftablstack.c	631	1	Use typedefs to improve code readability
EXP36-C	reftablstack.c	705	36	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablstack.c	706	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablstack.c	715	29	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	reftablstack.c	716	3	Do not ignore values returned by functions: unlink
DCL00-C	reftablstack.c	728	2	Const-qualify immutable objects: sz
INT01-C	reftablstack.c	770	32	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	reftablstack.c	771	3	Do not ignore values returned by functions: unlink
DCL00-C	reftablstack.c	782	2	Const-qualify immutable objects: subtabs_len
EXP36-C	reftablstack.c	783	50	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablstack.c	784	33	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablstack.c	893	2	Const-qualify immutable objects: compact_count
EXP36-C	reftablstack.c	896	18	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablstack.c	896	34	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablstack.c	898	18	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablstack.c	898	34	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablstack.c	1022	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	reftablstack.c	1030	3	Do not ignore values returned by functions: unlink
EXP12-C	reftablstack.c	1037	3	Do not ignore values returned by functions: unlink
EXP12-C	reftablstack.c	1044	3	Do not ignore values returned by functions: unlink
EXP12-C	reftablstack.c	1057	4	Do not ignore values returned by functions: unlink
EXP12-C	reftablstack.c	1067	3	Do not ignore values returned by functions: unlink
EXP12-C	reftablstack.c	1076	3	Do not ignore values returned by functions: unlink
INT01-C	reftablstack.c	1089	58	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablstack.c	1096	2	Const-qualify immutable objects: err
EXP36-C	reftablstack.c	1121	40	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablstack.c	1121	64	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablstack.c	1131	3	Const-qualify immutable objects: log
DCL00-C	reftablstack.c	1169	3	Const-qualify immutable objects: prev
EXP36-C	reftablstack.c	1185	18	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablstack.c	1186	2	Const-qualify immutable objects: version
DCL00-C	reftablstack.c	1187	2	Const-qualify immutable objects: overhead
INT01-C	reftablstack.c	1189	16	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablstack.c	1292	27	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablstack.c	1292	38	Use rsize_t or size_t for all integer values representing the size of an object
MEM01-C	reftablstack.c	1307	2	Store a new value in pointers immediately after free()
MEM34-C	reftablstack.c	1307	2	Only free memory allocated dynamically
EXP12-C	reftablstack.c	1341	3	Do not ignore values returned by functions: unlink
DCL00-C	reftablstack.c	1349	2	Const-qualify immutable objects: max
INT01-C	reftablstack.c	1363	27	Use rsize_t or size_t for all integer values representing the size of an object
EXP12-C	reftablstack.c	1372	2	Do not ignore values returned by functions: closedir
DCL05-C	reftabltree.c	14	1	Use typedefs to improve code readability
EXP36-C	reftabltree.c	24	20	Do not convert pointers into more strictly aligned pointer types
DCL05-C	reftabltree.c	39	1	Use typedefs to improve code readability
MSC01-C	reftablwriter.c	31	2	Strive for logical completeness
DCL02-C	reftablwriter.c	584	3	Use visually distinct identifiers: n
DCL00-C	reftablwriter.c	53	3	Const-qualify immutable objects: n
DCL01-C	reftablwriter.c	53	3	Do not reuse variable names in subscopes: n
DCL02-C	reftablwriter.c	584	3	Use visually distinct identifiers: n
DCL05-C	reftablwriter.c	122	1	Use typedefs to improve code readability
EXP36-C	reftablwriter.c	127	18	Do not convert pointers into more strictly aligned pointer types
EXP05-C	reftablwriter.c	173	22	Do not cast away a const qualification
EXP05-C	reftablwriter.c	174	8	Do not cast away a const qualification
DCL00-C	reftablwriter.c	179	2	Const-qualify immutable objects: off
EXP36-C	reftablwriter.c	188	24	Do not convert pointers into more strictly aligned pointer types
EXP12-C	reftablwriter.c	193	3	Do not ignore values returned by functions: tree_search
EXP36-C	reftablwriter.c	196	13	Do not convert pointers into more strictly aligned pointer types
INT01-C	reftablwriter.c	199	22	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablwriter.c	199	58	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablwriter.c	204	19	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablwriter.c	204	23	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablwriter.c	205	34	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablwriter.c	229	2	Detect and remove code that has no effect
EXP06-C	reftablwriter.c	229	2	Operands to the sizeof operator should not contain side effects
EXP06-C	reftablwriter.c	229	2	Operands to the sizeof operator should not contain side effects
DCL00-C	reftablwriter.c	319	3	Const-qualify immutable objects: err
INT01-C	reftablwriter.c	345	30	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablwriter.c	346	50	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablwriter.c	348	31	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablwriter.c	380	2	Const-qualify immutable objects: typ
DCL00-C	reftablwriter.c	383	2	Const-qualify immutable objects: threshold
DCL00-C	reftablwriter.c	384	2	Const-qualify immutable objects: before_blocks
INT01-C	reftablwriter.c	391	22	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablwriter.c	459	34	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablwriter.c	460	38	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablwriter.c	462	3	Const-qualify immutable objects: n
EXP36-C	reftablwriter.c	477	33	Do not convert pointers into more strictly aligned pointer types
EXP36-C	reftablwriter.c	478	38	Do not convert pointers into more strictly aligned pointer types
MSC12-C	reftablwriter.c	507	2	Detect and remove code that has no effect
DCL13-C	reftablwriter.c	512	38	Declare function parameters that are pointers to values not changed by the function as const: void_arg
EXP36-C	reftablwriter.c	514	38	Do not convert pointers into more strictly aligned pointer types
DCL00-C	reftablwriter.c	577	2	Const-qualify immutable objects: empty_table
DCL00-C	reftablwriter.c	584	3	Const-qualify immutable objects: n
INT01-C	reftablwriter.c	626	16	Use rsize_t or size_t for all integer values representing the size of an object
DCL00-C	reftablwriter.c	639	2	Const-qualify immutable objects: typ
DCL00-C	reftablwriter.c	642	2	Const-qualify immutable objects: block_typ_off
DCL00-C	reftablwriter.c	643	2	Const-qualify immutable objects: raw_bytes
EXP12-C	reftablwriter.c	670	3	Do not ignore values returned by functions: writer_write_header
INT01-C	reftablwriter.c	678	16	Use rsize_t or size_t for all integer values representing the size of an object
INT01-C	reftablwriter.c	678	20	Use rsize_t or size_t for all integer values representing the size of an object
EXP36-C	reftablwriter.c	679	30	Do not convert pointers into more strictly aligned pointer types
