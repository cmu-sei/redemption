/legacy/wrk/src/ae_epoll.c:32:1: warning: system include sys/epoll.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <sys/epoll.h>
^~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_epoll.c:34:16: warning: accessing fields in struct 'aeApiState' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
typedef struct aeApiState {
               ^
/legacy/wrk/src/ae_epoll.c:34:16: note: use "__attribute__((aligned(16)))" to align struct 'aeApiState' to 16 bytes
/legacy/wrk/src/ae_epoll.c:39:24: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static int aeApiCreate(aeEventLoop *eventLoop) {
                       ^
/legacy/wrk/src/ae_epoll.c:39:37: warning: pointer parameter 'eventLoop' can be pointer to const [readability-non-const-parameter]
static int aeApiCreate(aeEventLoop *eventLoop) {
                                    ^
                       const 
/legacy/wrk/src/ae_epoll.c:40:17: error: incompatible integer to pointer conversion initializing 'aeApiState *' (aka 'struct aeApiState *') with an expression of type 'int' [clang-diagnostic-int-conversion]
    aeApiState *state = zmalloc(sizeof(aeApiState));
                ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_epoll.c:40:25: error: call to undeclared function 'zmalloc'; ISO C99 and later do not support implicit function declarations [clang-diagnostic-implicit-function-declaration]
    aeApiState *state = zmalloc(sizeof(aeApiState));
                        ^
/legacy/wrk/src/ae_epoll.c:40:25: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
/legacy/wrk/src/ae_epoll.c:42:16: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!state) return -1;
               ^
                {
/legacy/wrk/src/ae_epoll.c:45:9: error: call to undeclared function 'zfree'; ISO C99 and later do not support implicit function declarations [clang-diagnostic-implicit-function-declaration]
        zfree(state);
        ^
/legacy/wrk/src/ae_epoll.c:48:19: warning: prefer epoll_create() to epoll_create1() because epoll_create1() allows EPOLL_CLOEXEC [android-cloexec-epoll-create]
    state->epfd = epoll_create(1024); /* 1024 is just a hint for the kernel */
                  ^~~~~~~~~~~~~~~~~~
                  epoll_create1(EPOLL_CLOEXEC)
/legacy/wrk/src/ae_epoll.c:48:32: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    state->epfd = epoll_create(1024); /* 1024 is just a hint for the kernel */
                               ^
/legacy/wrk/src/ae_epoll.c:50:9: error: call to undeclared function 'zfree'; ISO C99 and later do not support implicit function declarations [clang-diagnostic-implicit-function-declaration]
        zfree(state->events);
        ^
/legacy/wrk/src/ae_epoll.c:58:24: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static int aeApiResize(aeEventLoop *eventLoop, int setsize) {
                       ^
/legacy/wrk/src/ae_epoll.c:61:19: error: incompatible integer to pointer conversion assigning to 'struct epoll_event *' from 'int' [clang-diagnostic-int-conversion]
    state->events = zrealloc(state->events, sizeof(struct epoll_event)*setsize);
                  ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_epoll.c:61:21: error: call to undeclared function 'zrealloc'; ISO C99 and later do not support implicit function declarations [clang-diagnostic-implicit-function-declaration]
    state->events = zrealloc(state->events, sizeof(struct epoll_event)*setsize);
                    ^
/legacy/wrk/src/ae_epoll.c:61:21: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
/legacy/wrk/src/ae_epoll.c:65:23: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static void aeApiFree(aeEventLoop *eventLoop) {
                      ^
/legacy/wrk/src/ae_epoll.c:68:5: error: call to undeclared function 'close'; ISO C99 and later do not support implicit function declarations [clang-diagnostic-implicit-function-declaration]
    close(state->epfd);
    ^
/legacy/wrk/src/ae_epoll.c:69:5: error: call to undeclared function 'zfree'; ISO C99 and later do not support implicit function declarations [clang-diagnostic-implicit-function-declaration]
    zfree(state->events);
    ^
/legacy/wrk/src/ae_epoll.c:73:26: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                         ^
/legacy/wrk/src/ae_epoll.c:73:54: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                     ^
/legacy/wrk/src/ae_epoll.c:75:24: warning: variable name 'ee' is too short, expected at least 3 characters [readability-identifier-length]
    struct epoll_event ee = {0}; /* avoid valgrind warning */
                       ^
/legacy/wrk/src/ae_epoll.c:78:9: warning: variable name 'op' is too short, expected at least 3 characters [readability-identifier-length]
    int op = eventLoop->events[fd].mask == AE_NONE ?
        ^
/legacy/wrk/src/ae_epoll.c:78:44: error: use of undeclared identifier 'AE_NONE' [clang-diagnostic-error]
    int op = eventLoop->events[fd].mask == AE_NONE ?
                                           ^
/legacy/wrk/src/ae_epoll.c:83:16: error: use of undeclared identifier 'AE_READABLE' [clang-diagnostic-error]
    if (mask & AE_READABLE) ee.events |= EPOLLIN;
               ^
/legacy/wrk/src/ae_epoll.c:83:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_READABLE) ee.events |= EPOLLIN;
                           ^
                            {
/legacy/wrk/src/ae_epoll.c:84:16: error: use of undeclared identifier 'AE_WRITABLE' [clang-diagnostic-error]
    if (mask & AE_WRITABLE) ee.events |= EPOLLOUT;
               ^
/legacy/wrk/src/ae_epoll.c:84:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_WRITABLE) ee.events |= EPOLLOUT;
                           ^
                            {
/legacy/wrk/src/ae_epoll.c:86:48: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (epoll_ctl(state->epfd,op,fd,&ee) == -1) return -1;
                                               ^
                                                {
/legacy/wrk/src/ae_epoll.c:90:27: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int delmask) {
                          ^
/legacy/wrk/src/ae_epoll.c:90:55: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int delmask) {
                                                      ^
/legacy/wrk/src/ae_epoll.c:92:24: warning: variable name 'ee' is too short, expected at least 3 characters [readability-identifier-length]
    struct epoll_event ee = {0}; /* avoid valgrind warning */
                       ^
/legacy/wrk/src/ae_epoll.c:93:47: warning: use of a signed integer operand with a unary bitwise operator [hicpp-signed-bitwise]
    int mask = eventLoop->events[fd].mask & (~delmask);
                                             ~^~~~~~~
/legacy/wrk/src/ae_epoll.c:96:16: error: use of undeclared identifier 'AE_READABLE' [clang-diagnostic-error]
    if (mask & AE_READABLE) ee.events |= EPOLLIN;
               ^
/legacy/wrk/src/ae_epoll.c:96:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_READABLE) ee.events |= EPOLLIN;
                           ^
                            {
/legacy/wrk/src/ae_epoll.c:97:16: error: use of undeclared identifier 'AE_WRITABLE' [clang-diagnostic-error]
    if (mask & AE_WRITABLE) ee.events |= EPOLLOUT;
               ^
/legacy/wrk/src/ae_epoll.c:97:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_WRITABLE) ee.events |= EPOLLOUT;
                           ^
                            {
/legacy/wrk/src/ae_epoll.c:99:17: error: use of undeclared identifier 'AE_NONE' [clang-diagnostic-error]
    if (mask != AE_NONE) {
                ^
/legacy/wrk/src/ae_epoll.c:108:22: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {
                     ^
/legacy/wrk/src/ae_epoll.c:108:35: warning: pointer parameter 'eventLoop' can be pointer to const [readability-non-const-parameter]
static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {
                                  ^
                     const 
/legacy/wrk/src/ae_epoll.c:110:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int retval, numevents = 0;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_epoll.c:110:9: warning: variable 'retval' is not initialized [cppcoreguidelines-init-variables]
    int retval, numevents = 0;
        ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_epoll.c:113:32: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            tvp ? (tvp->tv_sec*1000 + tvp->tv_usec/1000) : -1);
                               ^
/legacy/wrk/src/ae_epoll.c:113:52: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            tvp ? (tvp->tv_sec*1000 + tvp->tv_usec/1000) : -1);
                                                   ^
/legacy/wrk/src/ae_epoll.c:115:13: warning: variable 'j' is not initialized [cppcoreguidelines-init-variables]
        int j;
            ^
              = 0
/legacy/wrk/src/ae_epoll.c:115:13: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
/legacy/wrk/src/ae_epoll.c:118:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (j = 0; j < numevents; j++) {
        ^
/legacy/wrk/src/ae_epoll.c:118:21: warning: backward branch (for loop) is ID-dependent due to variable reference to 'numevents' and may cause performance degradation [altera-id-dependent-backward-branch]
        for (j = 0; j < numevents; j++) {
                    ^
/legacy/wrk/src/ae_epoll.c:120:33: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
            struct epoll_event *e = state->events+j;
                                ^
/legacy/wrk/src/ae_epoll.c:122:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
            if (e->events & EPOLLIN) mask |= AE_READABLE;
                                    ^
                                     {
/legacy/wrk/src/ae_epoll.c:122:46: error: use of undeclared identifier 'AE_READABLE' [clang-diagnostic-error]
            if (e->events & EPOLLIN) mask |= AE_READABLE;
                                             ^
/legacy/wrk/src/ae_epoll.c:123:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
            if (e->events & EPOLLOUT) mask |= AE_WRITABLE;
                                     ^
                                      {
/legacy/wrk/src/ae_epoll.c:123:47: error: use of undeclared identifier 'AE_WRITABLE' [clang-diagnostic-error]
            if (e->events & EPOLLOUT) mask |= AE_WRITABLE;
                                              ^
/legacy/wrk/src/ae_epoll.c:124:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
            if (e->events & EPOLLERR) mask |= AE_WRITABLE;
                                     ^
                                      {
/legacy/wrk/src/ae_epoll.c:124:47: error: use of undeclared identifier 'AE_WRITABLE' [clang-diagnostic-error]
            if (e->events & EPOLLERR) mask |= AE_WRITABLE;
                                              ^
/legacy/wrk/src/ae_epoll.c:125:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
            if (e->events & EPOLLHUP) mask |= AE_WRITABLE;
                                     ^
                                      {
/legacy/wrk/src/ae_epoll.c:125:47: error: use of undeclared identifier 'AE_WRITABLE' [clang-diagnostic-error]
            if (e->events & EPOLLHUP) mask |= AE_WRITABLE;
                                              ^
/legacy/wrk/src/ae_evport.c:31:1: warning: system include assert.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <assert.h>
^~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:32:1: warning: system include errno.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <errno.h>
^~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:33:1: warning: #includes are not sorted properly [llvm-include-order]
#include <port.h>
^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:33:10: error: 'port.h' file not found [clang-diagnostic-error]
#include <port.h>
         ^~~~~~~~
/legacy/wrk/src/ae_evport.c:34:1: warning: system include poll.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <poll.h>
^~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:36:1: warning: #includes are not sorted properly [llvm-include-order]
#include <sys/types.h>
^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:36:1: warning: system include sys/types.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <sys/types.h>
^~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:37:1: warning: system include sys/time.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <sys/time.h>
^~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:39:1: warning: system include stdio.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdio.h>
^~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:41:12: warning: variable 'evport_debug' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static int evport_debug = 0;
           ^
/legacy/wrk/src/ae_evport.c:66:1: warning: replace macro with enum [modernize-macro-to-enum]
#define MAX_EVENT_BATCHSZ 512
^~~~~~~~
                          =
/legacy/wrk/src/ae_evport.c:66:9: warning: macro 'MAX_EVENT_BATCHSZ' defines an integral constant; prefer an enum instead [modernize-macro-to-enum]
#define MAX_EVENT_BATCHSZ 512
        ^
/legacy/wrk/src/ae_evport.c:68:16: warning: accessing fields in struct 'aeApiState' is inefficient due to poor alignment; currently aligned to 4 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
typedef struct aeApiState {
               ^
/legacy/wrk/src/ae_evport.c:68:16: note: use "__attribute__((aligned(128)))" to align struct 'aeApiState' to 128 bytes
/legacy/wrk/src/ae_evport.c:75:37: warning: pointer parameter 'eventLoop' can be pointer to const [readability-non-const-parameter]
static int aeApiCreate(aeEventLoop *eventLoop) {
                                    ^
                       const 
/legacy/wrk/src/ae_evport.c:76:9: warning: variable 'i' is not initialized [cppcoreguidelines-init-variables]
    int i;
        ^
          = 0
/legacy/wrk/src/ae_evport.c:76:9: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
/legacy/wrk/src/ae_evport.c:77:25: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
    aeApiState *state = zmalloc(sizeof(aeApiState));
                        ^
/legacy/wrk/src/ae_evport.c:78:16: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!state) return -1;
               ^
                {
/legacy/wrk/src/ae_evport.c:88:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (i = 0; i < MAX_EVENT_BATCHSZ; i++) {
    ^
/legacy/wrk/src/ae_evport.c:97:52: warning: parameter 'setsize' is unused [misc-unused-parameters]
static int aeApiResize(aeEventLoop *eventLoop, int setsize) {
                                             ~~~~~~^~~~~~~
/legacy/wrk/src/ae_evport.c:109:54: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static int aeApiLookupPending(aeApiState *state, int fd) {
                                                     ^
/legacy/wrk/src/ae_evport.c:110:9: warning: variable 'i' is not initialized [cppcoreguidelines-init-variables]
    int i;
        ^
          = 0
/legacy/wrk/src/ae_evport.c:110:9: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
/legacy/wrk/src/ae_evport.c:112:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (i = 0; i < state->npending; i++) {
    ^
/legacy/wrk/src/ae_evport.c:113:41: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (state->pending_fds[i] == fd)
                                        ^
                                         {
/legacy/wrk/src/ae_evport.c:123:46: warning: 3 adjacent parameters of 'aeApiAssociate' of similar type ('int') are easily swapped by mistake [bugprone-easily-swappable-parameters]
static int aeApiAssociate(const char *where, int portfd, int fd, int mask) {
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:123:50: note: the first parameter in the range is 'portfd'
static int aeApiAssociate(const char *where, int portfd, int fd, int mask) {
                                                 ^~~~~~
/legacy/wrk/src/ae_evport.c:123:70: note: the last parameter in the range is 'mask'
static int aeApiAssociate(const char *where, int portfd, int fd, int mask) {
                                                                     ^~~~
/legacy/wrk/src/ae_evport.c:123:62: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static int aeApiAssociate(const char *where, int portfd, int fd, int mask) {
                                                             ^
/legacy/wrk/src/ae_evport.c:125:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int rv, err;
    ^~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:125:9: warning: variable 'rv' is not initialized [cppcoreguidelines-init-variables]
    int rv, err;
        ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:125:9: warning: variable name 'rv' is too short, expected at least 3 characters [readability-identifier-length]
/legacy/wrk/src/ae_evport.c:125:13: warning: variable 'err' is not initialized [cppcoreguidelines-init-variables]
    int rv, err;
            ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:127:28: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_READABLE)
                           ^
                            {
/legacy/wrk/src/ae_evport.c:128:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        events |= POLLIN;
        ^~~~~~ ~~
/legacy/wrk/src/ae_evport.c:129:28: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_WRITABLE)
                           ^
                            {
/legacy/wrk/src/ae_evport.c:130:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        events |= POLLOUT;
        ^~~~~~ ~~
/legacy/wrk/src/ae_evport.c:132:22: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (evport_debug)
                     ^
                      {
/legacy/wrk/src/ae_evport.c:133:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "%s: port_associate(%d, 0x%x) = ", where, fd, events);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:133:9: note: cast the expression to void to silence this warning
/legacy/wrk/src/ae_evport.c:139:22: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (evport_debug)
                     ^
                      {
/legacy/wrk/src/ae_evport.c:140:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "%d (%s)\n", rv, rv == 0 ? "no error" : strerror(err));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:140:9: note: cast the expression to void to silence this warning
/legacy/wrk/src/ae_evport.c:140:65: warning: function is not thread safe [concurrency-mt-unsafe]
        fprintf(stderr, "%d (%s)\n", rv, rv == 0 ? "no error" : strerror(err));
                                                                ^
/legacy/wrk/src/ae_evport.c:143:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "%s: port_associate: %s\n", where, strerror(err));
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:143:9: note: cast the expression to void to silence this warning
/legacy/wrk/src/ae_evport.c:143:60: warning: function is not thread safe [concurrency-mt-unsafe]
        fprintf(stderr, "%s: port_associate: %s\n", where, strerror(err));
                                                           ^
/legacy/wrk/src/ae_evport.c:145:27: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (err == EAGAIN)
                          ^
                           {
/legacy/wrk/src/ae_evport.c:146:13: warning: the value returned by this function should be used [cert-err33-c]
            fprintf(stderr, "aeApiAssociate: event port limit exceeded.");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:146:13: note: cast the expression to void to silence this warning
/legacy/wrk/src/ae_evport.c:152:54: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                     ^
/legacy/wrk/src/ae_evport.c:154:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int fullmask, pfd;
    ^~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:154:9: warning: variable 'fullmask' is not initialized [cppcoreguidelines-init-variables]
    int fullmask, pfd;
        ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:154:19: warning: variable 'pfd' is not initialized [cppcoreguidelines-init-variables]
    int fullmask, pfd;
                  ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:156:22: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (evport_debug)
                     ^
                      {
/legacy/wrk/src/ae_evport.c:157:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "aeApiAddEvent: fd %d mask 0x%x\n", fd, mask);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:157:9: note: cast the expression to void to silence this warning
/legacy/wrk/src/ae_evport.c:174:26: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (evport_debug)
                         ^
                          {
/legacy/wrk/src/ae_evport.c:175:13: warning: the value returned by this function should be used [cert-err33-c]
            fprintf(stderr, "aeApiAddEvent: adding to pending fd %d\n", fd);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:175:13: note: cast the expression to void to silence this warning
/legacy/wrk/src/ae_evport.c:176:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        state->pending_masks[pfd] |= fullmask;
        ^~~~~~~~~~~~~~~~~~~~~~~~~ ~~
/legacy/wrk/src/ae_evport.c:183:55: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                      ^
/legacy/wrk/src/ae_evport.c:185:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int fullmask, pfd;
    ^~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:185:9: warning: variable 'fullmask' is not initialized [cppcoreguidelines-init-variables]
    int fullmask, pfd;
        ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:185:19: warning: variable 'pfd' is not initialized [cppcoreguidelines-init-variables]
    int fullmask, pfd;
                  ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:187:22: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (evport_debug)
                     ^
                      {
/legacy/wrk/src/ae_evport.c:188:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "del fd %d mask 0x%x\n", fd, mask);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:188:9: note: cast the expression to void to silence this warning
/legacy/wrk/src/ae_evport.c:193:26: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (evport_debug)
                         ^
                          {
/legacy/wrk/src/ae_evport.c:194:13: warning: the value returned by this function should be used [cert-err33-c]
            fprintf(stderr, "deleting event from pending fd %d\n", fd);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:194:13: note: cast the expression to void to silence this warning
/legacy/wrk/src/ae_evport.c:201:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        state->pending_masks[pfd] &= ~mask;
        ^~~~~~~~~~~~~~~~~~~~~~~~~ ~~
/legacy/wrk/src/ae_evport.c:201:39: warning: use of a signed integer operand with a unary bitwise operator [hicpp-signed-bitwise]
        state->pending_masks[pfd] &= ~mask;
                                     ~^~~~
/legacy/wrk/src/ae_evport.c:203:50: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (state->pending_masks[pfd] == AE_NONE)
                                                 ^
                                                  {
/legacy/wrk/src/ae_evport.c:223:26: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (evport_debug)
                         ^
                          {
/legacy/wrk/src/ae_evport.c:224:13: warning: the value returned by this function should be used [cert-err33-c]
            fprintf(stderr, "aeApiDelEvent: port_dissociate(%d)\n", fd);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:224:13: note: cast the expression to void to silence this warning
/legacy/wrk/src/ae_evport.c:245:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    struct timespec timeout, *tsp;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:245:31: warning: variable 'tsp' is not initialized [cppcoreguidelines-init-variables]
    struct timespec timeout, *tsp;
                              ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:246:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int mask, i;
    ^~~~~~~~~~~~
/legacy/wrk/src/ae_evport.c:246:9: warning: variable 'mask' is not initialized [cppcoreguidelines-init-variables]
    int mask, i;
        ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:246:15: warning: variable 'i' is not initialized [cppcoreguidelines-init-variables]
    int mask, i;
              ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_evport.c:246:15: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
/legacy/wrk/src/ae_evport.c:255:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (i = 0; i < state->npending; i++) {
    ^
/legacy/wrk/src/ae_evport.c:256:41: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (state->pending_fds[i] == -1)
                                        ^
                                         {
/legacy/wrk/src/ae_evport.c:274:42: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        timeout.tv_nsec = tvp->tv_usec * 1000;
                                         ^
/legacy/wrk/src/ae_evport.c:287:46: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (errno == ETIME || errno == EINTR)
                                             ^
                                              {
/legacy/wrk/src/ae_kqueue.c:32:1: warning: #includes are not sorted properly [llvm-include-order]
#include <sys/types.h>
^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_kqueue.c:32:1: warning: system include sys/types.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <sys/types.h>
^~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_kqueue.c:33:10: error: 'sys/event.h' file not found [clang-diagnostic-error]
#include <sys/event.h>
         ^~~~~~~~~~~~~
/legacy/wrk/src/ae_kqueue.c:34:1: warning: system include sys/time.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <sys/time.h>
^~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_kqueue.c:36:16: warning: accessing fields in struct 'aeApiState' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
typedef struct aeApiState {
               ^
/legacy/wrk/src/ae_kqueue.c:36:16: note: use "__attribute__((aligned(16)))" to align struct 'aeApiState' to 16 bytes
/legacy/wrk/src/ae_kqueue.c:41:37: warning: pointer parameter 'eventLoop' can be pointer to const [readability-non-const-parameter]
static int aeApiCreate(aeEventLoop *eventLoop) {
                                    ^
                       const 
/legacy/wrk/src/ae_kqueue.c:42:25: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
    aeApiState *state = zmalloc(sizeof(aeApiState));
                        ^
/legacy/wrk/src/ae_kqueue.c:44:16: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!state) return -1;
               ^
                {
/legacy/wrk/src/ae_kqueue.c:75:50: warning: 2 adjacent parameters of 'aeApiAddEvent' of similar type ('int') are easily swapped by mistake [bugprone-easily-swappable-parameters]
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                 ^~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_kqueue.c:75:54: note: the first parameter in the range is 'fd'
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                     ^~
/legacy/wrk/src/ae_kqueue.c:75:62: note: the last parameter in the range is 'mask'
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                             ^~~~
/legacy/wrk/src/ae_kqueue.c:75:54: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                     ^
/legacy/wrk/src/ae_kqueue.c:77:19: warning: variable name 'ke' is too short, expected at least 3 characters [readability-identifier-length]
    struct kevent ke;
                  ^
/legacy/wrk/src/ae_kqueue.c:81:62: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (kevent(state->kqfd, &ke, 1, NULL, 0, NULL) == -1) return -1;
                                                             ^
                                                              {
/legacy/wrk/src/ae_kqueue.c:85:62: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (kevent(state->kqfd, &ke, 1, NULL, 0, NULL) == -1) return -1;
                                                             ^
                                                              {
/legacy/wrk/src/ae_kqueue.c:90:51: warning: 2 adjacent parameters of 'aeApiDelEvent' of similar type ('int') are easily swapped by mistake [bugprone-easily-swappable-parameters]
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                  ^~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_kqueue.c:90:55: note: the first parameter in the range is 'fd'
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                      ^~
/legacy/wrk/src/ae_kqueue.c:90:63: note: the last parameter in the range is 'mask'
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                              ^~~~
/legacy/wrk/src/ae_kqueue.c:90:55: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                      ^
/legacy/wrk/src/ae_kqueue.c:92:19: warning: variable name 'ke' is too short, expected at least 3 characters [readability-identifier-length]
    struct kevent ke;
                  ^
/legacy/wrk/src/ae_kqueue.c:104:35: warning: pointer parameter 'eventLoop' can be pointer to const [readability-non-const-parameter]
static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {
                                  ^
                     const 
/legacy/wrk/src/ae_kqueue.c:106:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int retval, numevents = 0;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_kqueue.c:106:9: warning: variable 'retval' is not initialized [cppcoreguidelines-init-variables]
    int retval, numevents = 0;
        ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_kqueue.c:111:42: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        timeout.tv_nsec = tvp->tv_usec * 1000;
                                         ^
/legacy/wrk/src/ae_kqueue.c:120:13: warning: variable 'j' is not initialized [cppcoreguidelines-init-variables]
        int j;
            ^
              = 0
/legacy/wrk/src/ae_kqueue.c:120:13: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
/legacy/wrk/src/ae_kqueue.c:123:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for(j = 0; j < numevents; j++) {
        ^
/legacy/wrk/src/ae_kqueue.c:123:20: warning: backward branch (for loop) is ID-dependent due to variable reference to 'numevents' and may cause performance degradation [altera-id-dependent-backward-branch]
        for(j = 0; j < numevents; j++) {
                   ^
/legacy/wrk/src/ae_kqueue.c:125:28: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
            struct kevent *e = state->events+j;
                           ^
/legacy/wrk/src/ae_select.c:32:1: warning: #includes are not sorted properly [llvm-include-order]
#include <sys/select.h>
^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_select.c:32:1: warning: system include sys/select.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <sys/select.h>
^~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_select.c:33:1: warning: system include string.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <string.h>
^~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_select.c:35:16: warning: accessing fields in struct 'aeApiState' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 512 bytes [altera-struct-pack-align]
typedef struct aeApiState {
               ^
/legacy/wrk/src/ae_select.c:35:16: note: use "__attribute__((aligned(512)))" to align struct 'aeApiState' to 512 bytes
/legacy/wrk/src/ae_select.c:42:24: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static int aeApiCreate(aeEventLoop *eventLoop) {
                       ^
/legacy/wrk/src/ae_select.c:42:37: warning: pointer parameter 'eventLoop' can be pointer to const [readability-non-const-parameter]
static int aeApiCreate(aeEventLoop *eventLoop) {
                                    ^
                       const 
/legacy/wrk/src/ae_select.c:43:17: error: incompatible integer to pointer conversion initializing 'aeApiState *' (aka 'struct aeApiState *') with an expression of type 'int' [clang-diagnostic-int-conversion]
    aeApiState *state = zmalloc(sizeof(aeApiState));
                ^       ~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_select.c:43:25: error: call to undeclared function 'zmalloc'; ISO C99 and later do not support implicit function declarations [clang-diagnostic-implicit-function-declaration]
    aeApiState *state = zmalloc(sizeof(aeApiState));
                        ^
/legacy/wrk/src/ae_select.c:43:25: warning: integer to pointer cast pessimizes optimization opportunities [performance-no-int-to-ptr]
/legacy/wrk/src/ae_select.c:45:16: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!state) return -1;
               ^
                {
/legacy/wrk/src/ae_select.c:52:24: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static int aeApiResize(aeEventLoop *eventLoop, int setsize) {
                       ^
/legacy/wrk/src/ae_select.c:54:31: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (setsize >= FD_SETSIZE) return -1;
                              ^
                               {
/legacy/wrk/src/ae_select.c:58:23: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static void aeApiFree(aeEventLoop *eventLoop) {
                      ^
/legacy/wrk/src/ae_select.c:59:5: error: call to undeclared function 'zfree'; ISO C99 and later do not support implicit function declarations [clang-diagnostic-implicit-function-declaration]
    zfree(eventLoop->apidata);
    ^
/legacy/wrk/src/ae_select.c:62:26: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                         ^
/legacy/wrk/src/ae_select.c:62:50: warning: 2 adjacent parameters of 'aeApiAddEvent' of similar type ('int') are easily swapped by mistake [bugprone-easily-swappable-parameters]
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                 ^~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_select.c:62:54: note: the first parameter in the range is 'fd'
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                     ^~
/legacy/wrk/src/ae_select.c:62:62: note: the last parameter in the range is 'mask'
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                             ^~~~
/legacy/wrk/src/ae_select.c:62:54: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static int aeApiAddEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                     ^
/legacy/wrk/src/ae_select.c:65:16: error: use of undeclared identifier 'AE_READABLE' [clang-diagnostic-error]
    if (mask & AE_READABLE) FD_SET(fd,&state->rfds);
               ^
/legacy/wrk/src/ae_select.c:65:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_READABLE) FD_SET(fd,&state->rfds);
                           ^
                            {
/legacy/wrk/src/ae_select.c:66:16: error: use of undeclared identifier 'AE_WRITABLE' [clang-diagnostic-error]
    if (mask & AE_WRITABLE) FD_SET(fd,&state->wfds);
               ^
/legacy/wrk/src/ae_select.c:66:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_WRITABLE) FD_SET(fd,&state->wfds);
                           ^
                            {
/legacy/wrk/src/ae_select.c:70:27: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                          ^
/legacy/wrk/src/ae_select.c:70:51: warning: 2 adjacent parameters of 'aeApiDelEvent' of similar type ('int') are easily swapped by mistake [bugprone-easily-swappable-parameters]
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                  ^~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_select.c:70:55: note: the first parameter in the range is 'fd'
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                      ^~
/legacy/wrk/src/ae_select.c:70:63: note: the last parameter in the range is 'mask'
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                              ^~~~
/legacy/wrk/src/ae_select.c:70:55: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static void aeApiDelEvent(aeEventLoop *eventLoop, int fd, int mask) {
                                                      ^
/legacy/wrk/src/ae_select.c:73:16: error: use of undeclared identifier 'AE_READABLE' [clang-diagnostic-error]
    if (mask & AE_READABLE) FD_CLR(fd,&state->rfds);
               ^
/legacy/wrk/src/ae_select.c:73:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_READABLE) FD_CLR(fd,&state->rfds);
                           ^
                            {
/legacy/wrk/src/ae_select.c:74:16: error: use of undeclared identifier 'AE_WRITABLE' [clang-diagnostic-error]
    if (mask & AE_WRITABLE) FD_CLR(fd,&state->wfds);
               ^
/legacy/wrk/src/ae_select.c:74:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_WRITABLE) FD_CLR(fd,&state->wfds);
                           ^
                            {
/legacy/wrk/src/ae_select.c:77:22: error: unknown type name 'aeEventLoop' [clang-diagnostic-error]
static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {
                     ^
/legacy/wrk/src/ae_select.c:77:35: warning: pointer parameter 'eventLoop' can be pointer to const [readability-non-const-parameter]
static int aeApiPoll(aeEventLoop *eventLoop, struct timeval *tvp) {
                                  ^
                     const 
/legacy/wrk/src/ae_select.c:79:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int retval, j, numevents = 0;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/legacy/wrk/src/ae_select.c:79:9: warning: variable 'retval' is not initialized [cppcoreguidelines-init-variables]
    int retval, j, numevents = 0;
        ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_select.c:79:17: warning: variable 'j' is not initialized [cppcoreguidelines-init-variables]
    int retval, j, numevents = 0;
                ^
note: this fix will not be applied because it overlaps with another fix
/legacy/wrk/src/ae_select.c:79:17: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
/legacy/wrk/src/ae_select.c:87:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (j = 0; j <= eventLoop->maxfd; j++) {
        ^
/legacy/wrk/src/ae_select.c:89:13: error: use of undeclared identifier 'aeFileEvent' [clang-diagnostic-error]
            aeFileEvent *fe = &eventLoop->events[j];
            ^
/legacy/wrk/src/ae_select.c:89:26: error: use of undeclared identifier 'fe' [clang-diagnostic-error]
            aeFileEvent *fe = &eventLoop->events[j];
                         ^
/legacy/wrk/src/ae_select.c:91:17: error: use of undeclared identifier 'fe' [clang-diagnostic-error]
            if (fe->mask == AE_NONE) continue;
                ^
/legacy/wrk/src/ae_select.c:91:29: error: use of undeclared identifier 'AE_NONE' [clang-diagnostic-error]
            if (fe->mask == AE_NONE) continue;
                            ^
/legacy/wrk/src/ae_select.c:91:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
            if (fe->mask == AE_NONE) continue;
                                    ^
                                     {
/legacy/wrk/src/ae_select.c:92:17: error: use of undeclared identifier 'fe' [clang-diagnostic-error]
            if (fe->mask & AE_READABLE && FD_ISSET(j,&state->_rfds))
                ^
/legacy/wrk/src/ae_select.c:92:28: error: use of undeclared identifier 'AE_READABLE' [clang-diagnostic-error]
            if (fe->mask & AE_READABLE && FD_ISSET(j,&state->_rfds))
                           ^
/legacy/wrk/src/ae_select.c:92:69: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (fe->mask & AE_READABLE && FD_ISSET(j,&state->_rfds))
                                                                    ^
                                                                     {
/legacy/wrk/src/ae_select.c:93:25: error: use of undeclared identifier 'AE_READABLE' [clang-diagnostic-error]
                mask |= AE_READABLE;
                        ^
/legacy/wrk/src/ae_select.c:94:17: error: use of undeclared identifier 'fe' [clang-diagnostic-error]
            if (fe->mask & AE_WRITABLE && FD_ISSET(j,&state->_wfds))
                ^
/legacy/wrk/src/ae_select.c:94:28: error: use of undeclared identifier 'AE_WRITABLE' [clang-diagnostic-error]
            if (fe->mask & AE_WRITABLE && FD_ISSET(j,&state->_wfds))
                           ^
/legacy/wrk/src/ae_select.c:94:69: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (fe->mask & AE_WRITABLE && FD_ISSET(j,&state->_wfds))
                                                                    ^
                                                                     {
/legacy/wrk/src/ae_select.c:95:25: error: use of undeclared identifier 'AE_WRITABLE' [clang-diagnostic-error]
                mask |= AE_WRITABLE;
                        ^
src/ae.c:33:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdio.h>
^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:33:1: warning: system include stdio.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdio.h>
^~~~~~~~~~~~~~~~~~
src/ae.c:34:1: warning: system include sys/time.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <sys/time.h>
^~~~~~~~~~~~~~~~~~~~~
src/ae.c:35:1: warning: system include sys/types.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <sys/types.h>
^~~~~~~~~~~~~~~~~~~~~~
src/ae.c:36:1: warning: system include unistd.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <unistd.h>
^~~~~~~~~~~~~~~~~~~
src/ae.c:37:1: warning: system include stdlib.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdlib.h>
^~~~~~~~~~~~~~~~~~~
src/ae.c:38:1: warning: system include poll.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <poll.h>
^~~~~~~~~~~~~~~~~
src/ae.c:39:1: warning: system include string.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <string.h>
^~~~~~~~~~~~~~~~~~~
src/ae.c:40:1: warning: system include time.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <time.h>
^~~~~~~~~~~~~~~~~
src/ae.c:41:1: warning: system include errno.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <errno.h>
^~~~~~~~~~~~~~~~~~
src/ae.c:44:1: warning: #includes are not sorted properly [llvm-include-order]
#include "zmalloc.h"
^        ~~~~~~~~~~~
         "config.h"
src/ae.c:53:15: warning: suspicious #include of file with '.c' extension [bugprone-suspicious-include]
    #include "ae_epoll.c"
              ^
src/ae.c:64:18: warning: variable 'eventLoop' is not initialized [cppcoreguidelines-init-variables]
    aeEventLoop *eventLoop;
                 ^
                           = NULL
src/ae.c:65:9: warning: variable 'i' is not initialized [cppcoreguidelines-init-variables]
    int i;
        ^
          = 0
src/ae.c:65:9: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
src/ae.c:67:20: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((eventLoop = zmalloc(sizeof(*eventLoop))) == NULL) goto err;
         ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ae.c:67:20: note: if it should be an assignment, move it out of the 'if' condition
src/ae.c:67:20: note: if it is meant to be an equality check, change '=' to '=='
src/ae.c:67:59: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if ((eventLoop = zmalloc(sizeof(*eventLoop))) == NULL) goto err;
                                                          ^
                                                           {
src/ae.c:70:63: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (eventLoop->events == NULL || eventLoop->fired == NULL) goto err;
                                                              ^
                                                               {
src/ae.c:78:38: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (aeApiCreate(eventLoop) == -1) goto err;
                                     ^
                                      {
src/ae.c:81:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (i = 0; i < setsize; i++)
    ^
src/ae.c:81:34: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    for (i = 0; i < setsize; i++)
                                 ^
                                  {
src/ae.c:107:9: warning: variable 'i' is not initialized [cppcoreguidelines-init-variables]
    int i;
        ^
          = 0
src/ae.c:107:9: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
src/ae.c:109:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (setsize == eventLoop->setsize) return AE_OK;
                                      ^
                                       {
src/ae.c:110:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (eventLoop->maxfd >= setsize) return AE_ERR;
                                    ^
                                     {
src/ae.c:111:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (aeApiResize(eventLoop,setsize) == -1) return AE_ERR;
                                             ^
                                              {
src/ae.c:119:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (i = eventLoop->maxfd+1; i < setsize; i++)
    ^
src/ae.c:119:34: warning: backward branch (for loop) is ID-dependent due to variable reference to 'i' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (i = eventLoop->maxfd+1; i < setsize; i++)
                                 ^
src/ae.c:119:51: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    for (i = eventLoop->maxfd+1; i < setsize; i++)
                                                  ^
                                                   {
src/ae.c:135:51: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
int aeCreateFileEvent(aeEventLoop *eventLoop, int fd, int mask,
                                                  ^
src/ae.c:142:18: warning: variable name 'fe' is too short, expected at least 3 characters [readability-identifier-length]
    aeFileEvent *fe = &eventLoop->events[fd];
                 ^
src/ae.c:144:50: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (aeApiAddEvent(eventLoop, fd, mask) == -1)
                                                 ^
                                                  {
src/ae.c:146:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    fe->mask |= mask;
    ^~~~~~~~ ~~
src/ae.c:147:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (mask & AE_READABLE) fe->rfileProc = proc;
        ^~~~ ~
src/ae.c:147:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_READABLE) fe->rfileProc = proc;
                           ^
                            {
src/ae.c:148:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (mask & AE_WRITABLE) fe->wfileProc = proc;
        ^~~~ ~
src/ae.c:148:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_WRITABLE) fe->wfileProc = proc;
                           ^
                            {
src/ae.c:150:31: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (fd > eventLoop->maxfd)
                              ^
                               {
src/ae.c:155:52: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
void aeDeleteFileEvent(aeEventLoop *eventLoop, int fd, int mask)
                                                   ^
src/ae.c:157:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (fd >= eventLoop->setsize) return;
                                 ^
                                  {
src/ae.c:158:18: warning: variable name 'fe' is too short, expected at least 3 characters [readability-identifier-length]
    aeFileEvent *fe = &eventLoop->events[fd];
                 ^
src/ae.c:159:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (fe->mask == AE_NONE) return;
                            ^
                             {
src/ae.c:162:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    fe->mask = fe->mask & (~mask);
               ^~~~~~~~ ~
src/ae.c:162:29: warning: use of a signed integer operand with a unary bitwise operator [hicpp-signed-bitwise]
    fe->mask = fe->mask & (~mask);
                           ~^~~~
src/ae.c:165:13: warning: variable 'j' is not initialized [cppcoreguidelines-init-variables]
        int j;
            ^
              = 0
src/ae.c:165:13: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
src/ae.c:167:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (j = eventLoop->maxfd-1; j >= 0; j--)
        ^
src/ae.c:167:38: warning: backward branch (for loop) is ID-dependent due to variable reference to 'j' and may cause performance degradation [altera-id-dependent-backward-branch]
        for (j = eventLoop->maxfd-1; j >= 0; j--)
                                     ^
src/ae.c:167:50: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        for (j = eventLoop->maxfd-1; j >= 0; j--)
                                                 ^
                                                  {
src/ae.c:168:54: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
            if (eventLoop->events[j].mask != AE_NONE) break;
                                                     ^
                                                      {
src/ae.c:173:49: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
int aeGetFileEvents(aeEventLoop *eventLoop, int fd) {
                                                ^
src/ae.c:174:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (fd >= eventLoop->setsize) return 0;
                                 ^
                                  {
src/ae.c:175:18: warning: variable name 'fe' is too short, expected at least 3 characters [readability-identifier-length]
    aeFileEvent *fe = &eventLoop->events[fd];
                 ^
src/ae.c:180:23: warning: 2 adjacent parameters of 'aeGetTime' of similar type ('long *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
static void aeGetTime(long *seconds, long *milliseconds)
                      ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ae.c:180:29: note: the first parameter in the range is 'seconds'
static void aeGetTime(long *seconds, long *milliseconds)
                            ^~~~~~~
src/ae.c:180:44: note: the last parameter in the range is 'milliseconds'
static void aeGetTime(long *seconds, long *milliseconds)
                                           ^~~~~~~~~~~~
src/ae.c:182:20: warning: variable name 'tv' is too short, expected at least 3 characters [readability-identifier-length]
    struct timeval tv;
                   ^
src/ae.c:186:32: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    *milliseconds = tv.tv_usec/1000;
                               ^
src/ae.c:189:60: warning: 2 adjacent parameters of 'aeAddMillisecondsToNow' of similar type ('long *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
static void aeAddMillisecondsToNow(long long milliseconds, long *sec, long *ms) {
                                                           ^~~~~~~~~~~~~~~~~~~
src/ae.c:189:66: note: the first parameter in the range is 'sec'
static void aeAddMillisecondsToNow(long long milliseconds, long *sec, long *ms) {
                                                                 ^~~
src/ae.c:189:77: note: the last parameter in the range is 'ms'
static void aeAddMillisecondsToNow(long long milliseconds, long *sec, long *ms) {
                                                                            ^~
src/ae.c:189:77: warning: parameter name 'ms' is too short, expected at least 3 characters [readability-identifier-length]
static void aeAddMillisecondsToNow(long long milliseconds, long *sec, long *ms) {
                                                                            ^
src/ae.c:190:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    long cur_sec, cur_ms, when_sec, when_ms;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ae.c:190:10: warning: variable 'cur_sec' is not initialized [cppcoreguidelines-init-variables]
    long cur_sec, cur_ms, when_sec, when_ms;
         ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:190:19: warning: variable 'cur_ms' is not initialized [cppcoreguidelines-init-variables]
    long cur_sec, cur_ms, when_sec, when_ms;
                  ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:190:27: warning: variable 'when_sec' is not initialized [cppcoreguidelines-init-variables]
    long cur_sec, cur_ms, when_sec, when_ms;
                          ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:190:37: warning: variable 'when_ms' is not initialized [cppcoreguidelines-init-variables]
    long cur_sec, cur_ms, when_sec, when_ms;
                                    ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:193:39: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    when_sec = cur_sec + milliseconds/1000;
                                      ^
src/ae.c:194:37: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    when_ms = cur_ms + milliseconds%1000;
                                    ^
src/ae.c:195:20: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if (when_ms >= 1000) {
                   ^
src/ae.c:197:20: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        when_ms -= 1000;
                   ^
src/ae.c:207:15: warning: variable name 'id' is too short, expected at least 3 characters [readability-identifier-length]
    long long id = eventLoop->timeEventNextId++;
              ^
src/ae.c:208:18: warning: variable 'te' is not initialized [cppcoreguidelines-init-variables]
    aeTimeEvent *te;
                 ^
                    = NULL
src/ae.c:208:18: warning: variable name 'te' is too short, expected at least 3 characters [readability-identifier-length]
src/ae.c:211:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (te == NULL) return AE_ERR;
                   ^
                    {
src/ae.c:222:57: warning: parameter name 'id' is too short, expected at least 3 characters [readability-identifier-length]
int aeDeleteTimeEvent(aeEventLoop *eventLoop, long long id)
                                                        ^
src/ae.c:224:5: note: inferred assignment of ID-dependent value from ID-dependent member timeEventHead [altera-id-dependent-backward-branch]
    aeTimeEvent *te = eventLoop->timeEventHead;
    ^
src/ae.c:224:18: warning: variable name 'te' is too short, expected at least 3 characters [readability-identifier-length]
    aeTimeEvent *te = eventLoop->timeEventHead;
                 ^
src/ae.c:248:5: note: inferred assignment of ID-dependent value from ID-dependent member timeEventHead [altera-id-dependent-backward-branch]
    aeTimeEvent *te = eventLoop->timeEventHead;
    ^
src/ae.c:225:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    while(te) {
    ^
src/ae.c:225:11: warning: backward branch (while loop) is ID-dependent due to variable reference to 'te' and may cause performance degradation [altera-id-dependent-backward-branch]
    while(te) {
          ^
src/ae.c:248:18: warning: variable name 'te' is too short, expected at least 3 characters [readability-identifier-length]
    aeTimeEvent *te = eventLoop->timeEventHead;
                 ^
src/ae.c:251:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    while(te) {
    ^
src/ae.c:251:11: warning: backward branch (while loop) is ID-dependent due to variable reference to 'te' and may cause performance degradation [altera-id-dependent-backward-branch]
    while(te) {
          ^
src/ae.c:254:50: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
                 te->when_ms < nearest->when_ms))
                                                 ^
                                                  {
src/ae.c:264:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    aeTimeEvent *te, *prev;
    ^~~~~~~~~~~~~~~~~~~~~~~
src/ae.c:264:5: note: inferred assignment of ID-dependent value from ID-dependent member timeEventHead [altera-id-dependent-backward-branch]
src/ae.c:264:18: warning: variable 'te' is not initialized [cppcoreguidelines-init-variables]
    aeTimeEvent *te, *prev;
                 ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:264:18: warning: variable name 'te' is too short, expected at least 3 characters [readability-identifier-length]
src/ae.c:264:23: warning: variable 'prev' is not initialized [cppcoreguidelines-init-variables]
    aeTimeEvent *te, *prev;
                      ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:265:15: warning: variable 'maxId' is not initialized [cppcoreguidelines-init-variables]
    long long maxId;
              ^
                    = 0
src/ae.c:264:5: note: inferred assignment of ID-dependent value from ID-dependent member timeEventHead [altera-id-dependent-backward-branch]
    aeTimeEvent *te, *prev;
    ^
src/ae.c:278:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while(te) {
        ^
src/ae.c:278:15: warning: backward branch (while loop) is ID-dependent due to variable reference to 'te' and may cause performance degradation [altera-id-dependent-backward-branch]
        while(te) {
              ^
src/ae.c:288:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    while(te) {
    ^
src/ae.c:288:11: warning: backward branch (while loop) is ID-dependent due to variable reference to 'te' and may cause performance degradation [altera-id-dependent-backward-branch]
    while(te) {
          ^
src/ae.c:289:9: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        long now_sec, now_ms;
        ^~~~~~~~~~~~~~~~~~~~~
src/ae.c:289:14: warning: variable 'now_sec' is not initialized [cppcoreguidelines-init-variables]
        long now_sec, now_ms;
             ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:289:23: warning: variable 'now_ms' is not initialized [cppcoreguidelines-init-variables]
        long now_sec, now_ms;
                      ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:290:19: warning: variable 'id' is not initialized [cppcoreguidelines-init-variables]
        long long id;
                  ^
                     = 0
src/ae.c:290:19: warning: variable name 'id' is too short, expected at least 3 characters [readability-identifier-length]
src/ae.c:295:30: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (prev == NULL)
                             ^
                              {
src/ae.c:297:17: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            else
                ^
                 {
src/ae.c:299:35: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (te->finalizerProc)
                                  ^
                                   {
src/ae.c:319:17: warning: variable 'retval' is not initialized [cppcoreguidelines-init-variables]
            int retval;
                ^
                       = 0
src/ae.c:349:5: warning: function 'aeProcessEvents' has cognitive complexity of 33 (threshold 25) [readability-function-cognitive-complexity]
int aeProcessEvents(aeEventLoop *eventLoop, int flags)
    ^
src/ae.c:354:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (!(flags & AE_TIME_EVENTS) && !(flags & AE_FILE_EVENTS)) return 0;
    ^
src/ae.c:354:35: note: +1
    if (!(flags & AE_TIME_EVENTS) && !(flags & AE_FILE_EVENTS)) return 0;
                                  ^
src/ae.c:360:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (eventLoop->maxfd != -1 ||
    ^
src/ae.c:360:32: note: +1
    if (eventLoop->maxfd != -1 ||
                               ^
src/ae.c:361:35: note: +1
        ((flags & AE_TIME_EVENTS) && !(flags & AE_DONT_WAIT))) {
                                  ^
src/ae.c:366:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (flags & AE_TIME_EVENTS && !(flags & AE_DONT_WAIT))
        ^
src/ae.c:366:36: note: +1
        if (flags & AE_TIME_EVENTS && !(flags & AE_DONT_WAIT))
                                   ^
src/ae.c:368:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (shortest) {
        ^
src/ae.c:380:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (ms > 0) {
            ^
src/ae.c:383:15: note: +1, nesting level increased to 3
            } else {
              ^
src/ae.c:387:11: note: +1, nesting level increased to 2
        } else {
          ^
src/ae.c:391:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (flags & AE_DONT_WAIT) {
            ^
src/ae.c:394:15: note: +1, nesting level increased to 3
            } else {
              ^
src/ae.c:401:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        for (j = 0; j < numevents; j++) {
        ^
src/ae.c:410:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (fe->mask & mask & AE_READABLE) {
            ^
src/ae.c:414:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (fe->mask & mask & AE_WRITABLE) {
            ^
src/ae.c:415:17: note: +4, including nesting penalty of 3, nesting level increased to 4
                if (!rfired || fe->wfileProc != fe->rfileProc)
                ^
src/ae.c:415:29: note: +1
                if (!rfired || fe->wfileProc != fe->rfileProc)
                            ^
src/ae.c:422:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (flags & AE_TIME_EVENTS)
    ^
src/ae.c:351:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int processed = 0, numevents;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ae.c:351:24: warning: variable 'numevents' is not initialized [cppcoreguidelines-init-variables]
    int processed = 0, numevents;
                       ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:354:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (!(flags & AE_TIME_EVENTS) && !(flags & AE_FILE_EVENTS)) return 0;
          ^~~~~ ~
src/ae.c:354:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (!(flags & AE_TIME_EVENTS) && !(flags & AE_FILE_EVENTS)) return 0;
                                       ^~~~~ ~
src/ae.c:354:64: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!(flags & AE_TIME_EVENTS) && !(flags & AE_FILE_EVENTS)) return 0;
                                                               ^
                                                                {
src/ae.c:361:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        ((flags & AE_TIME_EVENTS) && !(flags & AE_DONT_WAIT))) {
          ^~~~~ ~
src/ae.c:361:40: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        ((flags & AE_TIME_EVENTS) && !(flags & AE_DONT_WAIT))) {
                                       ^~~~~ ~
src/ae.c:362:13: warning: variable 'j' is not initialized [cppcoreguidelines-init-variables]
        int j;
            ^
              = 0
src/ae.c:362:13: warning: variable name 'j' is too short, expected at least 3 characters [readability-identifier-length]
src/ae.c:364:9: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        struct timeval tv, *tvp;
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/ae.c:364:24: warning: variable name 'tv' is too short, expected at least 3 characters [readability-identifier-length]
        struct timeval tv, *tvp;
                       ^
src/ae.c:364:29: warning: variable 'tvp' is not initialized [cppcoreguidelines-init-variables]
        struct timeval tv, *tvp;
                            ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:366:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (flags & AE_TIME_EVENTS && !(flags & AE_DONT_WAIT))
            ^~~~~ ~
src/ae.c:366:41: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (flags & AE_TIME_EVENTS && !(flags & AE_DONT_WAIT))
                                        ^~~~~ ~
src/ae.c:366:63: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (flags & AE_TIME_EVENTS && !(flags & AE_DONT_WAIT))
                                                              ^
                                                               {
src/ae.c:369:13: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
            long now_sec, now_ms;
            ^~~~~~~~~~~~~~~~~~~~~
src/ae.c:369:18: warning: variable 'now_sec' is not initialized [cppcoreguidelines-init-variables]
            long now_sec, now_ms;
                 ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:369:27: warning: variable 'now_ms' is not initialized [cppcoreguidelines-init-variables]
            long now_sec, now_ms;
                          ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:376:23: warning: variable name 'ms' is too short, expected at least 3 characters [readability-identifier-length]
            long long ms =
                      ^
src/ae.c:377:48: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                (shortest->when_sec - now_sec)*1000 +
                                               ^
src/ae.c:381:34: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                tvp->tv_sec = ms/1000;
                                 ^
src/ae.c:382:38: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                tvp->tv_usec = (ms % 1000)*1000;
                                     ^
src/ae.c:382:44: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                tvp->tv_usec = (ms % 1000)*1000;
                                           ^
src/ae.c:391:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            if (flags & AE_DONT_WAIT) {
                ^~~~~ ~
src/ae.c:401:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (j = 0; j < numevents; j++) {
        ^
src/ae.c:401:21: warning: backward branch (for loop) is ID-dependent due to variable reference to 'numevents' and may cause performance degradation [altera-id-dependent-backward-branch]
        for (j = 0; j < numevents; j++) {
                    ^
src/ae.c:402:26: warning: variable name 'fe' is too short, expected at least 3 characters [readability-identifier-length]
            aeFileEvent *fe = &eventLoop->events[eventLoop->fired[j].fd];
                         ^
src/ae.c:404:17: warning: variable name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
            int fd = eventLoop->fired[j].fd;
                ^
src/ae.c:410:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            if (fe->mask & mask & AE_READABLE) {
                ^~~~~~~~~~~~~~~ ~
src/ae.c:414:17: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            if (fe->mask & mask & AE_WRITABLE) {
                ^~~~~~~~~~~~~~~ ~
src/ae.c:415:63: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
                if (!rfired || fe->wfileProc != fe->rfileProc)
                                                              ^
                                                               {
src/ae.c:422:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (flags & AE_TIME_EVENTS)
        ^~~~~ ~
src/ae.c:422:32: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (flags & AE_TIME_EVENTS)
                               ^
                                {
src/ae.c:430:12: warning: 3 adjacent parameters of 'aeWait' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
int aeWait(int fd, int mask, long long milliseconds) {
           ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ae.c:430:16: note: the first parameter in the range is 'fd'
int aeWait(int fd, int mask, long long milliseconds) {
               ^~
src/ae.c:430:40: note: the last parameter in the range is 'milliseconds'
int aeWait(int fd, int mask, long long milliseconds) {
                                       ^~~~~~~~~~~~
src/ae.c:430:30: note: 'int' and 'long long' may be implicitly converted
int aeWait(int fd, int mask, long long milliseconds) {
                             ^
src/ae.c:430:16: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
int aeWait(int fd, int mask, long long milliseconds) {
               ^
src/ae.c:432:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int retmask = 0, retval;
    ^~~~~~~~~~~~~~~~~~~~~~~~
src/ae.c:432:22: warning: variable 'retval' is not initialized [cppcoreguidelines-init-variables]
    int retmask = 0, retval;
                     ^
note: this fix will not be applied because it overlaps with another fix
src/ae.c:434:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(&pfd, 0, sizeof(pfd));
    ^~~~~~
src/ae.c:434:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
    memset(&pfd, 0, sizeof(pfd));
    ^~~~~~
src/ae.c:436:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (mask & AE_READABLE) pfd.events |= POLLIN;
        ^~~~ ~
src/ae.c:436:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_READABLE) pfd.events |= POLLIN;
                           ^
                            {
src/ae.c:436:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (mask & AE_READABLE) pfd.events |= POLLIN;
                            ^~~~~~~~~~ ~~
src/ae.c:437:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (mask & AE_WRITABLE) pfd.events |= POLLOUT;
        ^~~~ ~
src/ae.c:437:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (mask & AE_WRITABLE) pfd.events |= POLLOUT;
                           ^
                            {
src/ae.c:437:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (mask & AE_WRITABLE) pfd.events |= POLLOUT;
                            ^~~~~~~~~~ ~~
src/ae.c:439:17: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((retval = poll(&pfd, 1, milliseconds))== 1) {
         ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ae.c:439:17: note: if it should be an assignment, move it out of the 'if' condition
src/ae.c:439:17: note: if it is meant to be an equality check, change '=' to '=='
src/ae.c:439:33: warning: narrowing conversion from 'long long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    if ((retval = poll(&pfd, 1, milliseconds))== 1) {
                                ^
src/ae.c:440:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (pfd.revents & POLLIN) retmask |= AE_READABLE;
            ^~~~~~~~~~~ ~
src/ae.c:440:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (pfd.revents & POLLIN) retmask |= AE_READABLE;
                                 ^
                                  {
src/ae.c:440:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (pfd.revents & POLLIN) retmask |= AE_READABLE;
                                  ^~~~~~~ ~~
src/ae.c:441:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (pfd.revents & POLLOUT) retmask |= AE_WRITABLE;
            ^~~~~~~~~~~ ~
src/ae.c:441:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (pfd.revents & POLLOUT) retmask |= AE_WRITABLE;
                                  ^
                                   {
src/ae.c:441:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (pfd.revents & POLLOUT) retmask |= AE_WRITABLE;
                                   ^~~~~~~ ~~
src/ae.c:442:6: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (pfd.revents & POLLERR) retmask |= AE_WRITABLE;
            ^~~~~~~~~~~ ~
src/ae.c:442:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (pfd.revents & POLLERR) retmask |= AE_WRITABLE;
                                  ^
                                   {
src/ae.c:442:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (pfd.revents & POLLERR) retmask |= AE_WRITABLE;
                                   ^~~~~~~ ~~
src/ae.c:443:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (pfd.revents & POLLHUP) retmask |= AE_WRITABLE;
            ^~~~~~~~~~~ ~
src/ae.c:443:35: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (pfd.revents & POLLHUP) retmask |= AE_WRITABLE;
                                  ^
                                   {
src/ae.c:443:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (pfd.revents & POLLHUP) retmask |= AE_WRITABLE;
                                   ^~~~~~~ ~~
src/ae.c:445:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
    } else {
      ^~~~~~
src/ae.c:452:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    while (!eventLoop->stop) {
    ^
src/ae.c:453:44: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (eventLoop->beforesleep != NULL)
                                           ^
                                            {
src/ae.c:455:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        aeProcessEvents(eventLoop, AE_ALL_EVENTS);
                                   ^
src/ae.h:47:24: note: expanded from macro 'AE_ALL_EVENTS'
#define AE_ALL_EVENTS (AE_FILE_EVENTS|AE_TIME_EVENTS)
                       ^~~~~~~~~~~~~~~
src/ae.h:45:24: note: expanded from macro 'AE_FILE_EVENTS'
#define AE_FILE_EVENTS 1
                       ^
src/aprintf.c:4:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdlib.h>
^
note: this fix will not be applied because it overlaps with another fix
src/aprintf.c:4:1: warning: system include stdlib.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdlib.h>
^~~~~~~~~~~~~~~~~~~
src/aprintf.c:5:1: warning: system include stdio.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdio.h>
^~~~~~~~~~~~~~~~~~
src/aprintf.c:6:1: warning: system include string.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <string.h>
^~~~~~~~~~~~~~~~~~~
src/aprintf.c:8:22: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
char *aprintf(char **s, const char *fmt, ...) {
                     ^
src/aprintf.c:9:11: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    char *c = NULL;
          ^
src/aprintf.c:10:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int n, len;
    ^~~~~~~~~~~
src/aprintf.c:10:9: warning: variable 'n' is not initialized [cppcoreguidelines-init-variables]
    int n, len;
        ^
note: this fix will not be applied because it overlaps with another fix
src/aprintf.c:10:9: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
src/aprintf.c:10:12: warning: variable 'len' is not initialized [cppcoreguidelines-init-variables]
    int n, len;
           ^
note: this fix will not be applied because it overlaps with another fix
src/aprintf.c:11:13: warning: variable name 'ap' is too short, expected at least 3 characters [readability-identifier-length]
    va_list ap;
            ^
src/aprintf.c:14:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    n = vsnprintf(NULL, 0, fmt, ap) + 1;
        ^~~~~~~~~
src/aprintf.c:14:9: note: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11
    n = vsnprintf(NULL, 0, fmt, ap) + 1;
        ^~~~~~~~~
src/aprintf.c:14:9: warning: Function 'vsnprintf' is called with an uninitialized va_list argument [clang-analyzer-valist.Uninitialized]
    n = vsnprintf(NULL, 0, fmt, ap) + 1;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/aprintf.c:14:9: note: Function 'vsnprintf' is called with an uninitialized va_list argument
    n = vsnprintf(NULL, 0, fmt, ap) + 1;
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/aprintf.c:17:16: warning: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    len = *s ? strlen(*s) : 0;
               ^
src/aprintf.c:19:13: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((*s = realloc(*s, (len + n) * sizeof(char)))) {
         ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/aprintf.c:19:13: note: if it should be an assignment, move it out of the 'if' condition
src/aprintf.c:19:13: note: if it is meant to be an equality check, change '=' to '=='
src/aprintf.c:22:9: warning: the value returned by this function should be used [cert-err33-c]
        vsnprintf(c, n, fmt, ap);
        ^~~~~~~~~~~~~~~~~~~~~~~~
src/aprintf.c:22:9: note: cast the expression to void to silence this warning
src/aprintf.c:22:9: warning: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        vsnprintf(c, n, fmt, ap);
        ^~~~~~~~~
src/aprintf.c:22:9: note: Call to function 'vsnprintf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'vsnprintf_s' in case of C11
        vsnprintf(c, n, fmt, ap);
        ^~~~~~~~~
src/http_parser.c:22:1: warning: system include assert.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <assert.h>
^~~~~~~~~~~~~~~~~~~
src/http_parser.c:23:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stddef.h>
^
note: this fix will not be applied because it overlaps with another fix
src/http_parser.c:24:1: warning: system include ctype.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <ctype.h>
^~~~~~~~~~~~~~~~~~
src/http_parser.c:25:1: warning: system include stdlib.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdlib.h>
^~~~~~~~~~~~~~~~~~~
src/http_parser.c:26:1: warning: system include string.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <string.h>
^~~~~~~~~~~~~~~~~~~
src/http_parser.c:171:20: warning: variable 'method_strings' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static const char *method_strings[] =
                   ^
src/http_parser.c:242:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
src/http_parser.c:244:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        0    | T(2)   |   0    |   0    | T(16)  |   0    |   0    |   0,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
src/http_parser.c:246:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
src/http_parser.c:248:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        0    |   0    |   0    |   0    |   0    |   0    |   0    |   0,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~    ~
src/http_parser.c:250:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        0    |   2    |   4    |   0    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:250:68: warning: operator has equivalent nested operands [misc-redundant-expression]
        0    |   2    |   4    |   0    |   16   |   32   |   64   |  128,
        ~                          ~                               ^
src/http_parser.c:252:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:254:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:256:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |   0,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:258:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:260:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:262:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:264:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:266:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:268:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:270:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |  128,
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:272:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        1    |   2    |   4    |   8    |   16   |   32   |   64   |   0, };
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~   ~
src/http_parser.c:357:32: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define PARSING_HEADER(state) (state <= s_headers_done)
                               ^
                               (    )
src/http_parser.c:409:45: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^
                                            ()
src/http_parser.c:421:52: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define STRICT_TOKEN(c)     (tokens[(unsigned char)c])
                                                   ^
                                                   ()
src/http_parser.c:424:52: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define TOKEN(c)            (tokens[(unsigned char)c])
                                                   ^
                                                   ()
src/http_parser.c:425:69: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
#define IS_URL_CHAR(c)      (BIT_AT(normal_url_char, (unsigned char)c))
                                                                    ^
                                                                    ()
src/http_parser.c:440:4: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
  (ch == CR || ch == LF || ch == 9 || ((unsigned char)ch > 31 && ch != 127))
   ^
   ( )
src/http_parser.c:440:16: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
  (ch == CR || ch == LF || ch == 9 || ((unsigned char)ch > 31 && ch != 127))
               ^
               ( )
src/http_parser.c:440:28: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
  (ch == CR || ch == LF || ch == 9 || ((unsigned char)ch > 31 && ch != 127))
                           ^
                           ( )
src/http_parser.c:440:55: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
  (ch == CR || ch == LF || ch == 9 || ((unsigned char)ch > 31 && ch != 127))
                                                      ^
                                                      ( )
src/http_parser.c:440:66: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
  (ch == CR || ch == LF || ch == 9 || ((unsigned char)ch > 31 && ch != 127))
                                                                 ^
                                                                 ( )
src/http_parser.c:462:8: warning: accessing fields in struct 'struct (unnamed at src/http_parser.c:462:8)' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
static struct {
       ^
src/http_parser.c:462:8: note: use "__attribute__((aligned(16)))" to align struct 'struct (unnamed at src/http_parser.c:462:8)' to 16 bytes
src/http_parser.c:465:3: warning: variable 'http_strerror_tab' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
} http_strerror_tab[] = {
  ^
src/http_parser.c:484:1: warning: function 'parse_url_char' has cognitive complexity of 49 (threshold 25) [readability-function-cognitive-complexity]
parse_url_char(enum state s, const char ch)
^
src/http_parser.c:486:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ch == ' ' || ch == '\r' || ch == '\n') {
  ^
src/http_parser.c:486:31: note: +1
  if (ch == ' ' || ch == '\r' || ch == '\n') {
                              ^
src/http_parser.c:491:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ch == '\t' || ch == '\f') {
  ^
src/http_parser.c:491:18: note: +1
  if (ch == '\t' || ch == '\f') {
                 ^
src/http_parser.c:496:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  switch (s) {
  ^
src/http_parser.c:502:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == '/' || ch == '*') {
      ^
src/http_parser.c:502:21: note: +1
      if (ch == '/' || ch == '*') {
                    ^
src/http_parser.c:506:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_ALPHA(ch)) {
      ^
src/http_parser.c:506:11: note: +1
      if (IS_ALPHA(ch)) {
          ^
src/http_parser.c:410:46: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                                             ^
src/http_parser.c:513:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_ALPHA(ch)) {
      ^
src/http_parser.c:513:11: note: +1
      if (IS_ALPHA(ch)) {
          ^
src/http_parser.c:410:46: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                                             ^
src/http_parser.c:517:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == ':') {
      ^
src/http_parser.c:524:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == '/') {
      ^
src/http_parser.c:531:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == '/') {
      ^
src/http_parser.c:538:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == '@') {
      ^
src/http_parser.c:545:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == '/') {
      ^
src/http_parser.c:549:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == '?') {
      ^
src/http_parser.c:553:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == '@') {
      ^
src/http_parser.c:557:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
      ^
src/http_parser.c:557:45: note: +1
      if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
                                            ^
src/http_parser.c:557:11: note: +1
      if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
          ^
src/http_parser.c:417:30: note: expanded from macro 'IS_USERINFO_CHAR'
#define IS_USERINFO_CHAR(c) (IS_ALPHANUM(c) || IS_MARK(c) || (c) == '%' || \
                             ^
src/http_parser.c:412:30: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ^
src/http_parser.c:410:46: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                                             ^
src/http_parser.c:557:11: note: +1
      if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
          ^
src/http_parser.c:417:30: note: expanded from macro 'IS_USERINFO_CHAR'
#define IS_USERINFO_CHAR(c) (IS_ALPHANUM(c) || IS_MARK(c) || (c) == '%' || \
                             ^
src/http_parser.c:412:45: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                                            ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:564:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_URL_CHAR(ch)) {
      ^
src/http_parser.c:568:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      switch (ch) {
      ^
src/http_parser.c:580:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_URL_CHAR(ch)) {
      ^
src/http_parser.c:584:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      switch (ch) {
      ^
src/http_parser.c:596:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_URL_CHAR(ch)) {
      ^
src/http_parser.c:600:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      switch (ch) {
      ^
src/http_parser.c:611:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_URL_CHAR(ch)) {
      ^
src/http_parser.c:615:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      switch (ch) {
      ^
src/http_parser.c:484:27: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
parse_url_char(enum state s, const char ch)
                          ^
src/http_parser.c:484:41: warning: parameter name 'ch' is too short, expected at least 3 characters [readability-identifier-length]
parse_url_char(enum state s, const char ch)
                                        ^
src/http_parser.c:506:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_ALPHA(ch)) {
                   ^
src/http_parser.c:410:36: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                             ~~~~~~^~
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:513:20: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_ALPHA(ch)) {
                   ^
src/http_parser.c:410:36: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                             ~~~~~~^~
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:557:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_USERINFO_CHAR(ch) || ch == '[' || ch == ']') {
                           ^
src/http_parser.c:417:42: note: expanded from macro 'IS_USERINFO_CHAR'
#define IS_USERINFO_CHAR(c) (IS_ALPHANUM(c) || IS_MARK(c) || (c) == '%' || \
                             ~~~~~~~~~~~~^~
src/http_parser.c:412:39: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ~~~~~~~~~^~
src/http_parser.c:410:36: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                             ~~~~~~^~
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:564:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_URL_CHAR(ch)) {
          ^
src/http_parser.c:425:30: note: expanded from macro 'IS_URL_CHAR'
#define IS_URL_CHAR(c)      (BIT_AT(normal_url_char, (unsigned char)c))
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:44:4: note: expanded from macro 'BIT_AT'
   (1 << ((unsigned int) (i) & 7))))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:568:7: warning: potential uncovered code path; add a default label [hicpp-multiway-paths-covered]
      switch (ch) {
      ^
src/http_parser.c:580:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_URL_CHAR(ch)) {
          ^
src/http_parser.c:425:30: note: expanded from macro 'IS_URL_CHAR'
#define IS_URL_CHAR(c)      (BIT_AT(normal_url_char, (unsigned char)c))
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:44:4: note: expanded from macro 'BIT_AT'
   (1 << ((unsigned int) (i) & 7))))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:584:7: warning: potential uncovered code path; add a default label [hicpp-multiway-paths-covered]
      switch (ch) {
      ^
src/http_parser.c:596:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_URL_CHAR(ch)) {
          ^
src/http_parser.c:425:30: note: expanded from macro 'IS_URL_CHAR'
#define IS_URL_CHAR(c)      (BIT_AT(normal_url_char, (unsigned char)c))
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:44:4: note: expanded from macro 'BIT_AT'
   (1 << ((unsigned int) (i) & 7))))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:600:7: warning: potential uncovered code path; add a default label [hicpp-multiway-paths-covered]
      switch (ch) {
      ^
src/http_parser.c:611:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_URL_CHAR(ch)) {
          ^
src/http_parser.c:425:30: note: expanded from macro 'IS_URL_CHAR'
#define IS_URL_CHAR(c)      (BIT_AT(normal_url_char, (unsigned char)c))
                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:44:4: note: expanded from macro 'BIT_AT'
   (1 << ((unsigned int) (i) & 7))))
   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:615:7: warning: potential uncovered code path; add a default label [hicpp-multiway-paths-covered]
      switch (ch) {
      ^
src/http_parser.c:631:8: warning: function 'http_parser_execute' exceeds recommended size/complexity thresholds [google-readability-function-size,hicpp-function-size,readability-function-size]
size_t http_parser_execute (http_parser *parser,
       ^
src/http_parser.c:631:8: note: 1912 statements (threshold 800)
src/http_parser.c:631:8: warning: function 'http_parser_execute' has cognitive complexity of 2331 (threshold 25) [readability-function-cognitive-complexity]
size_t http_parser_execute (http_parser *parser,
       ^
src/http_parser.c:648:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
  ^
src/http_parser.c:652:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (len == 0) {
  ^
src/http_parser.c:653:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    switch (CURRENT_STATE()) {
    ^
src/http_parser.c:658:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:658:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:658:9: note: nesting level increased to 4
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:658:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:658:9: note: +1, nesting level increased to 5
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:658:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:658:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:658:9: note: +6, including nesting penalty of 5, nesting level increased to 6
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:658:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:668:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        SET_ERRNO(HPE_INVALID_EOF_STATE);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:674:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (CURRENT_STATE() == s_header_field)
  ^
src/http_parser.c:676:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (CURRENT_STATE() == s_header_value)
  ^
src/http_parser.c:678:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  switch (CURRENT_STATE()) {
  ^
src/http_parser.c:699:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  for (p=data; p != data + len; p++) {
  ^
src/http_parser.c:702:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (PARSING_HEADER(CURRENT_STATE()))
    ^
src/http_parser.c:703:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      COUNT_HEADER_SIZE(1);
      ^
src/http_parser.c:154:3: note: expanded from macro 'COUNT_HEADER_SIZE'
  if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {            \
  ^
src/http_parser.c:703:7: note: +4, including nesting penalty of 3, nesting level increased to 4
      COUNT_HEADER_SIZE(1);
      ^
src/http_parser.c:155:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:703:7: note: +1
      COUNT_HEADER_SIZE(1);
      ^
src/http_parser.c:156:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    goto error;                                                      \
    ^
src/http_parser.c:706:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    switch (CURRENT_STATE()) {
    ^
src/http_parser.c:712:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (LIKELY(ch == CR || ch == LF))
        ^
src/http_parser.c:712:29: note: +1
        if (LIKELY(ch == CR || ch == LF))
                            ^
src/http_parser.c:715:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        SET_ERRNO(HPE_CLOSED_CONNECTION);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:716:9: note: +1
        goto error;
        ^
src/http_parser.c:720:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == CR || ch == LF)
        ^
src/http_parser.c:720:22: note: +1
        if (ch == CR || ch == LF)
                     ^
src/http_parser.c:725:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == 'H') {
        ^
src/http_parser.c:728:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:728:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:728:11: note: nesting level increased to 5
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:728:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:728:11: note: +1, nesting level increased to 6
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:728:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:728:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:728:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:728:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:729:11: note: +1, nesting level increased to 3
        } else {
          ^
src/http_parser.c:732:11: note: +1
          REEXECUTE();
          ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:739:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == 'T') {
        ^
src/http_parser.c:742:11: note: +1, nesting level increased to 3
        } else {
          ^
src/http_parser.c:743:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (UNLIKELY(ch != 'E')) {
          ^
src/http_parser.c:744:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            SET_ERRNO(HPE_INVALID_CONSTANT);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:745:13: note: +1
            goto error;
            ^
src/http_parser.c:760:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        switch (ch) {
        ^
src/http_parser.c:770:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            SET_ERRNO(HPE_INVALID_CONSTANT);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:771:13: note: +1
            goto error;
            ^
src/http_parser.c:774:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:774:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:774:9: note: nesting level increased to 4
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:774:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:774:9: note: +1, nesting level increased to 5
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:774:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:774:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:774:9: note: +6, including nesting penalty of 5, nesting level increased to 6
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:774:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:779:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:779:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:779:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:779:9: note: +1
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:784:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:784:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:784:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:784:9: note: +1
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:789:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:789:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:789:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:789:9: note: +1
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:794:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:794:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:794:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:794:9: note: +1
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:799:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(!IS_NUM(ch))) {
        ^
src/http_parser.c:799:23: note: +1
        if (UNLIKELY(!IS_NUM(ch))) {
                      ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:800:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:801:11: note: +1
          goto error;
          ^
src/http_parser.c:810:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(ch != '.')) {
        ^
src/http_parser.c:811:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:812:11: note: +1
          goto error;
          ^
src/http_parser.c:820:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(!IS_NUM(ch))) {
        ^
src/http_parser.c:820:23: note: +1
        if (UNLIKELY(!IS_NUM(ch))) {
                      ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:821:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:822:11: note: +1
          goto error;
          ^
src/http_parser.c:831:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(ch != ' ')) {
        ^
src/http_parser.c:832:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:833:11: note: +1
          goto error;
          ^
src/http_parser.c:842:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (!IS_NUM(ch)) {
        ^
src/http_parser.c:842:14: note: +1
        if (!IS_NUM(ch)) {
             ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:843:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (ch == ' ') {
          ^
src/http_parser.c:847:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_STATUS);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:848:11: note: +1
          goto error;
          ^
src/http_parser.c:857:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (!IS_NUM(ch)) {
        ^
src/http_parser.c:857:14: note: +1
        if (!IS_NUM(ch)) {
             ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:858:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          switch (ch) {
          ^
src/http_parser.c:865:15: note: +1
              REEXECUTE();
              ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:868:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              SET_ERRNO(HPE_INVALID_STATUS);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:869:15: note: +1
              goto error;
              ^
src/http_parser.c:877:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(parser->status_code > 999)) {
        ^
src/http_parser.c:878:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_STATUS);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:879:11: note: +1
          goto error;
          ^
src/http_parser.c:887:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        MARK(status);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:887:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        MARK(status);
        ^
src/http_parser.c:135:3: note: expanded from macro 'MARK'
  if (!FOR##_mark) {                                                 \
  ^
src/http_parser.c:891:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == CR || ch == LF)
        ^
src/http_parser.c:891:22: note: +1
        if (ch == CR || ch == LF)
                     ^
src/http_parser.c:898:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == CR) {
        ^
src/http_parser.c:900:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:900:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:900:11: note: nesting level increased to 5
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:900:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:900:11: note: +1, nesting level increased to 6
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:900:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:900:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:900:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:900:11: note: +8, including nesting penalty of 7, nesting level increased to 8
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:900:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:904:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == LF) {
        ^
src/http_parser.c:906:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:906:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:906:11: note: nesting level increased to 5
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:906:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:906:11: note: +1, nesting level increased to 6
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:906:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:906:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:906:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:906:11: note: +8, including nesting penalty of 7, nesting level increased to 8
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:906:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:913:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:913:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:913:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:913:9: note: +1
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:919:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == CR || ch == LF)
        ^
src/http_parser.c:919:22: note: +1
        if (ch == CR || ch == LF)
                     ^
src/http_parser.c:924:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(!IS_ALPHA(ch))) {
        ^
src/http_parser.c:924:23: note: +1
        if (UNLIKELY(!IS_ALPHA(ch))) {
                      ^
src/http_parser.c:410:46: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                                             ^
src/http_parser.c:925:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_METHOD);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:926:11: note: +1
          goto error;
          ^
src/http_parser.c:931:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        switch (ch) {
        ^
src/http_parser.c:950:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            SET_ERRNO(HPE_INVALID_METHOD);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:951:13: note: +1
            goto error;
            ^
src/http_parser.c:955:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:955:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:955:9: note: nesting level increased to 4
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:955:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:955:9: note: +1, nesting level increased to 5
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:955:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:955:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:955:9: note: +6, including nesting penalty of 5, nesting level increased to 6
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:955:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:963:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(ch == '\0')) {
        ^
src/http_parser.c:964:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_METHOD);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:965:11: note: +1
          goto error;
          ^
src/http_parser.c:969:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == ' ' && matcher[parser->index] == '\0') {
        ^
src/http_parser.c:969:23: note: +1
        if (ch == ' ' && matcher[parser->index] == '\0') {
                      ^
src/http_parser.c:971:16: note: +1, nesting level increased to 3
        } else if (ch == matcher[parser->index]) {
               ^
src/http_parser.c:973:16: note: +1, nesting level increased to 3
        } else if ((ch >= 'A' && ch <= 'Z') || ch == '-') {
               ^
src/http_parser.c:973:45: note: +1
        } else if ((ch >= 'A' && ch <= 'Z') || ch == '-') {
                                            ^
src/http_parser.c:973:31: note: +1
        } else if ((ch >= 'A' && ch <= 'Z') || ch == '-') {
                              ^
src/http_parser.c:975:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          switch (parser->method << 16 | parser->index << 8 | ch) {
          ^
src/http_parser.c:1000:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              SET_ERRNO(HPE_INVALID_METHOD);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1001:15: note: +1
              goto error;
              ^
src/http_parser.c:1003:11: note: +1, nesting level increased to 3
        } else {
          ^
src/http_parser.c:1004:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_METHOD);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1005:11: note: +1
          goto error;
          ^
src/http_parser.c:1014:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == ' ') break;
        ^
src/http_parser.c:1016:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        MARK(url);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1016:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        MARK(url);
        ^
src/http_parser.c:135:3: note: expanded from macro 'MARK'
  if (!FOR##_mark) {                                                 \
  ^
src/http_parser.c:1017:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (parser->method == HTTP_CONNECT) {
        ^
src/http_parser.c:1022:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(CURRENT_STATE() == s_dead)) {
        ^
src/http_parser.c:1023:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_URL);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1024:11: note: +1
          goto error;
          ^
src/http_parser.c:1035:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        switch (ch) {
        ^
src/http_parser.c:1040:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            SET_ERRNO(HPE_INVALID_URL);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1041:13: note: +1
            goto error;
            ^
src/http_parser.c:1044:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (UNLIKELY(CURRENT_STATE() == s_dead)) {
            ^
src/http_parser.c:1045:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              SET_ERRNO(HPE_INVALID_URL);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1046:15: note: +1
              goto error;
              ^
src/http_parser.c:1061:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        switch (ch) {
        ^
src/http_parser.c:1064:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:1064:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1064:13: note: nesting level increased to 5
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1064:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1064:13: note: +1, nesting level increased to 6
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1064:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:1064:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:1064:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:1064:13: note: +8, including nesting penalty of 7, nesting level increased to 8
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1064:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:1070:37: note: +4, including nesting penalty of 3, nesting level increased to 4
            UPDATE_STATE((ch == CR) ?
                                    ^
src/http_parser.c:1073:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:1073:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1073:13: note: nesting level increased to 5
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1073:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1073:13: note: +1, nesting level increased to 6
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1073:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:1073:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:1073:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:1073:13: note: +8, including nesting penalty of 7, nesting level increased to 8
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1073:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:1077:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (UNLIKELY(CURRENT_STATE() == s_dead)) {
            ^
src/http_parser.c:1078:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              SET_ERRNO(HPE_INVALID_URL);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1079:15: note: +1
              goto error;
              ^
src/http_parser.c:1086:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        switch (ch) {
        ^
src/http_parser.c:1093:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            SET_ERRNO(HPE_INVALID_CONSTANT);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1094:13: note: +1
            goto error;
            ^
src/http_parser.c:1099:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1099:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1099:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1099:9: note: +1
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1104:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1104:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1104:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1104:9: note: +1
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1109:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1109:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1109:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1109:9: note: +1
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1114:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1114:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1114:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1114:9: note: +1
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1119:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(!IS_NUM(ch))) {
        ^
src/http_parser.c:1119:23: note: +1
        if (UNLIKELY(!IS_NUM(ch))) {
                      ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:1120:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1121:11: note: +1
          goto error;
          ^
src/http_parser.c:1130:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(ch != '.')) {
        ^
src/http_parser.c:1131:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1132:11: note: +1
          goto error;
          ^
src/http_parser.c:1140:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(!IS_NUM(ch))) {
        ^
src/http_parser.c:1140:23: note: +1
        if (UNLIKELY(!IS_NUM(ch))) {
                      ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:1141:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1142:11: note: +1
          goto error;
          ^
src/http_parser.c:1151:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == CR) {
        ^
src/http_parser.c:1156:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == LF) {
        ^
src/http_parser.c:1161:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        SET_ERRNO(HPE_INVALID_VERSION);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1162:9: note: +1
        goto error;
        ^
src/http_parser.c:1169:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(ch != LF)) {
        ^
src/http_parser.c:1170:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_LF_EXPECTED);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1171:11: note: +1
          goto error;
          ^
src/http_parser.c:1180:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == CR) {
        ^
src/http_parser.c:1185:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == LF) {
        ^
src/http_parser.c:1189:11: note: +1
          REEXECUTE();
          ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:1194:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(!c)) {
        ^
src/http_parser.c:1195:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1196:11: note: +1
          goto error;
          ^
src/http_parser.c:1199:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        MARK(header_field);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1199:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        MARK(header_field);
        ^
src/http_parser.c:135:3: note: expanded from macro 'MARK'
  if (!FOR##_mark) {                                                 \
  ^
src/http_parser.c:1204:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        switch (c) {
        ^
src/http_parser.c:1231:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        for (; p != data + len; p++) {
        ^
src/http_parser.c:1235:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (!c)
          ^
src/http_parser.c:1238:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          switch (parser->header_state) {
          ^
src/http_parser.c:1244:48: note: +5, including nesting penalty of 4, nesting level increased to 5
              parser->header_state = (c == 'o' ? h_CO : h_general);
                                               ^
src/http_parser.c:1249:48: note: +5, including nesting penalty of 4, nesting level increased to 5
              parser->header_state = (c == 'n' ? h_CON : h_general);
                                               ^
src/http_parser.c:1254:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              switch (c) {
              ^
src/http_parser.c:1271:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (parser->index > sizeof(CONNECTION)-1
              ^
src/http_parser.c:1272:19: note: +1
                  || c != CONNECTION[parser->index]) {
                  ^
src/http_parser.c:1274:22: note: +1, nesting level increased to 5
              } else if (parser->index == sizeof(CONNECTION)-2) {
                     ^
src/http_parser.c:1283:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (parser->index > sizeof(PROXY_CONNECTION)-1
              ^
src/http_parser.c:1284:19: note: +1
                  || c != PROXY_CONNECTION[parser->index]) {
                  ^
src/http_parser.c:1286:22: note: +1, nesting level increased to 5
              } else if (parser->index == sizeof(PROXY_CONNECTION)-2) {
                     ^
src/http_parser.c:1295:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (parser->index > sizeof(CONTENT_LENGTH)-1
              ^
src/http_parser.c:1296:19: note: +1
                  || c != CONTENT_LENGTH[parser->index]) {
                  ^
src/http_parser.c:1298:22: note: +1, nesting level increased to 5
              } else if (parser->index == sizeof(CONTENT_LENGTH)-2) {
                     ^
src/http_parser.c:1307:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (parser->index > sizeof(TRANSFER_ENCODING)-1
              ^
src/http_parser.c:1308:19: note: +1
                  || c != TRANSFER_ENCODING[parser->index]) {
                  ^
src/http_parser.c:1310:22: note: +1, nesting level increased to 5
              } else if (parser->index == sizeof(TRANSFER_ENCODING)-2) {
                     ^
src/http_parser.c:1319:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (parser->index > sizeof(UPGRADE)-1
              ^
src/http_parser.c:1320:19: note: +1
                  || c != UPGRADE[parser->index]) {
                  ^
src/http_parser.c:1322:22: note: +1, nesting level increased to 5
              } else if (parser->index == sizeof(UPGRADE)-2) {
                     ^
src/http_parser.c:1331:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (ch != ' ') parser->header_state = h_general;
              ^
src/http_parser.c:1335:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              assert(0 && "Unknown header_state");
              ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1335:24: note: +1
              assert(0 && "Unknown header_state");
                       ^
src/http_parser.c:1335:15: note: nesting level increased to 5
              assert(0 && "Unknown header_state");
              ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1335:15: note: +6, including nesting penalty of 5, nesting level increased to 6
              assert(0 && "Unknown header_state");
              ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1335:24: note: +1
              assert(0 && "Unknown header_state");
                       ^
src/http_parser.c:1335:15: note: +1, nesting level increased to 6
              assert(0 && "Unknown header_state");
              ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1340:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:151:70: note: expanded from macro 'COUNT_HEADER_SIZE'
#define COUNT_HEADER_SIZE(V)                                         \
                                                                     ^
src/http_parser.c:1340:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:154:3: note: expanded from macro 'COUNT_HEADER_SIZE'
  if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {            \
  ^
src/http_parser.c:1340:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:155:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1340:9: note: +1
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:156:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    goto error;                                                      \
    ^
src/http_parser.c:1342:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (p == data + len) {
        ^
src/http_parser.c:1347:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == ':') {
        ^
src/http_parser.c:1349:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:1349:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1349:11: note: nesting level increased to 5
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1349:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1349:11: note: +1, nesting level increased to 6
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1349:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:1349:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:1349:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:1349:11: note: +8, including nesting penalty of 7, nesting level increased to 8
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1349:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:1353:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1354:9: note: +1
        goto error;
        ^
src/http_parser.c:1358:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == ' ' || ch == '\t') break;
        ^
src/http_parser.c:1358:23: note: +1
        if (ch == ' ' || ch == '\t') break;
                      ^
src/http_parser.c:1360:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == CR) {
        ^
src/http_parser.c:1365:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == LF) {
        ^
src/http_parser.c:1374:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        MARK(header_value);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1374:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        MARK(header_value);
        ^
src/http_parser.c:135:3: note: expanded from macro 'MARK'
  if (!FOR##_mark) {                                                 \
  ^
src/http_parser.c:1381:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        switch (parser->header_state) {
        ^
src/http_parser.c:1389:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if ('c' == c) {
            ^
src/http_parser.c:1391:15: note: +1, nesting level increased to 4
            } else {
              ^
src/http_parser.c:1397:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (UNLIKELY(!IS_NUM(ch))) {
            ^
src/http_parser.c:1397:27: note: +1
            if (UNLIKELY(!IS_NUM(ch))) {
                          ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:1398:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1399:15: note: +1
              goto error;
              ^
src/http_parser.c:1402:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (parser->flags & F_CONTENTLENGTH) {
            ^
src/http_parser.c:1403:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1404:15: note: +1
              goto error;
              ^
src/http_parser.c:1413:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (c == 'k') {
            ^
src/http_parser.c:1416:20: note: +1, nesting level increased to 4
            } else if (c == 'c') {
                   ^
src/http_parser.c:1418:20: note: +1, nesting level increased to 4
            } else if (c == 'u') {
                   ^
src/http_parser.c:1420:15: note: +1, nesting level increased to 4
            } else {
              ^
src/http_parser.c:1440:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        for (; p != data + len; p++) {
        ^
src/http_parser.c:1442:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (ch == CR) {
          ^
src/http_parser.c:1445:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:1445:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1445:13: note: nesting level increased to 6
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1445:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1445:13: note: +1, nesting level increased to 7
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1445:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:1445:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:1445:13: note: +8, including nesting penalty of 7, nesting level increased to 8
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:1445:13: note: +9, including nesting penalty of 8, nesting level increased to 9
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1445:13: note: +8, including nesting penalty of 7, nesting level increased to 8
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:1449:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (ch == LF) {
          ^
src/http_parser.c:1451:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            COUNT_HEADER_SIZE(p - start);
            ^
src/http_parser.c:151:70: note: expanded from macro 'COUNT_HEADER_SIZE'
#define COUNT_HEADER_SIZE(V)                                         \
                                                                     ^
src/http_parser.c:1451:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            COUNT_HEADER_SIZE(p - start);
            ^
src/http_parser.c:154:3: note: expanded from macro 'COUNT_HEADER_SIZE'
  if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {            \
  ^
src/http_parser.c:1451:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            COUNT_HEADER_SIZE(p - start);
            ^
src/http_parser.c:155:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1451:13: note: +1
            COUNT_HEADER_SIZE(p - start);
            ^
src/http_parser.c:156:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    goto error;                                                      \
    ^
src/http_parser.c:1453:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:1453:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1453:13: note: nesting level increased to 6
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1453:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1453:13: note: +1, nesting level increased to 7
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1453:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:1453:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:1453:13: note: +8, including nesting penalty of 7, nesting level increased to 8
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:1453:13: note: +9, including nesting penalty of 8, nesting level increased to 9
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1453:13: note: +8, including nesting penalty of 7, nesting level increased to 8
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:1454:13: note: +1
            REEXECUTE();
            ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:1457:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (!lenient && !IS_HEADER_CHAR(ch)) {
          ^
src/http_parser.c:1457:24: note: +1
          if (!lenient && !IS_HEADER_CHAR(ch)) {
                       ^
src/http_parser.c:1457:28: note: +1
          if (!lenient && !IS_HEADER_CHAR(ch)) {
                           ^
src/http_parser.c:440:36: note: expanded from macro 'IS_HEADER_CHAR'
  (ch == CR || ch == LF || ch == 9 || ((unsigned char)ch > 31 && ch != 127))
                                   ^
src/http_parser.c:1457:28: note: +1
          if (!lenient && !IS_HEADER_CHAR(ch)) {
                           ^
src/http_parser.c:440:63: note: expanded from macro 'IS_HEADER_CHAR'
  (ch == CR || ch == LF || ch == 9 || ((unsigned char)ch > 31 && ch != 127))
                                                              ^
src/http_parser.c:1458:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1459:13: note: +1
            goto error;
            ^
src/http_parser.c:1464:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          switch (h_state) {
          ^
src/http_parser.c:1471:23: note: +5, including nesting penalty of 4, nesting level increased to 5
              limit = MIN(limit, HTTP_MAX_HEADER_SIZE);
                      ^
src/http_parser.c:34:30: note: expanded from macro 'MIN'
# define MIN(a,b) ((a) < (b) ? (a) : (b))
                             ^
src/http_parser.c:1475:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (p_cr != NULL) {
              ^
src/http_parser.c:1476:17: note: +6, including nesting penalty of 5, nesting level increased to 6
                if (p_lf != NULL && p_cr >= p_lf)
                ^
src/http_parser.c:1476:34: note: +1
                if (p_lf != NULL && p_cr >= p_lf)
                                 ^
src/http_parser.c:1478:17: note: +1, nesting level increased to 6
                else
                ^
src/http_parser.c:1480:22: note: +1, nesting level increased to 5
              } else if (UNLIKELY(p_lf != NULL)) {
                     ^
src/http_parser.c:1482:17: note: +1, nesting level increased to 5
              } else {
                ^
src/http_parser.c:1492:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              assert(0 && "Shouldn't get here.");
              ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1492:24: note: +1
              assert(0 && "Shouldn't get here.");
                       ^
src/http_parser.c:1492:15: note: nesting level increased to 5
              assert(0 && "Shouldn't get here.");
              ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1492:15: note: +6, including nesting penalty of 5, nesting level increased to 6
              assert(0 && "Shouldn't get here.");
              ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1492:24: note: +1
              assert(0 && "Shouldn't get here.");
                       ^
src/http_parser.c:1492:15: note: +1, nesting level increased to 6
              assert(0 && "Shouldn't get here.");
              ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1499:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (ch == ' ') break;
              ^
src/http_parser.c:1501:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (UNLIKELY(!IS_NUM(ch))) {
              ^
src/http_parser.c:1501:29: note: +1
              if (UNLIKELY(!IS_NUM(ch))) {
                            ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:1502:17: note: +6, including nesting penalty of 5, nesting level increased to 6
                SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
                ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1504:17: note: +1
                goto error;
                ^
src/http_parser.c:1512:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (UNLIKELY((ULLONG_MAX - 10) / 10 < parser->content_length)) {
              ^
src/http_parser.c:1513:17: note: +6, including nesting penalty of 5, nesting level increased to 6
                SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
                ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1515:17: note: +1
                goto error;
                ^
src/http_parser.c:1525:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (parser->index > sizeof(CHUNKED)-1
              ^
src/http_parser.c:1526:19: note: +1
                  || c != CHUNKED[parser->index]) {
                  ^
src/http_parser.c:1528:22: note: +1, nesting level increased to 5
              } else if (parser->index == sizeof(CHUNKED)-2) {
                     ^
src/http_parser.c:1535:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (c == 'k') {
              ^
src/http_parser.c:1538:22: note: +1, nesting level increased to 5
              } else if (c == 'c') {
                     ^
src/http_parser.c:1540:22: note: +1, nesting level increased to 5
              } else if (c == 'u') {
                     ^
src/http_parser.c:1542:22: note: +1, nesting level increased to 5
              } else if (STRICT_TOKEN(c)) {
                     ^
src/http_parser.c:1544:22: note: +1, nesting level increased to 5
              } else if (c == ' ' || c == '\t') {
                     ^
src/http_parser.c:1544:35: note: +1
              } else if (c == ' ' || c == '\t') {
                                  ^
src/http_parser.c:1546:17: note: +1, nesting level increased to 5
              } else {
                ^
src/http_parser.c:1554:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (parser->index > sizeof(KEEP_ALIVE)-1
              ^
src/http_parser.c:1555:19: note: +1
                  || c != KEEP_ALIVE[parser->index]) {
                  ^
src/http_parser.c:1557:22: note: +1, nesting level increased to 5
              } else if (parser->index == sizeof(KEEP_ALIVE)-2) {
                     ^
src/http_parser.c:1565:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (parser->index > sizeof(CLOSE)-1 || c != CLOSE[parser->index]) {
              ^
src/http_parser.c:1565:51: note: +1
              if (parser->index > sizeof(CLOSE)-1 || c != CLOSE[parser->index]) {
                                                  ^
src/http_parser.c:1567:22: note: +1, nesting level increased to 5
              } else if (parser->index == sizeof(CLOSE)-2) {
                     ^
src/http_parser.c:1575:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (parser->index > sizeof(UPGRADE) - 1 ||
              ^
src/http_parser.c:1575:55: note: +1
              if (parser->index > sizeof(UPGRADE) - 1 ||
                                                      ^
src/http_parser.c:1578:22: note: +1, nesting level increased to 5
              } else if (parser->index == sizeof(UPGRADE)-2) {
                     ^
src/http_parser.c:1584:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (ch == ',') {
              ^
src/http_parser.c:1591:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (ch != ' ') h_state = h_general;
              ^
src/http_parser.c:1597:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (ch == ',') {
              ^
src/http_parser.c:1598:17: note: +6, including nesting penalty of 5, nesting level increased to 6
                if (h_state == h_connection_keep_alive) {
                ^
src/http_parser.c:1600:24: note: +1, nesting level increased to 6
                } else if (h_state == h_connection_close) {
                       ^
src/http_parser.c:1602:24: note: +1, nesting level increased to 6
                } else if (h_state == h_connection_upgrade) {
                       ^
src/http_parser.c:1607:22: note: +1, nesting level increased to 5
              } else if (ch != ' ') {
                     ^
src/http_parser.c:1620:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:151:70: note: expanded from macro 'COUNT_HEADER_SIZE'
#define COUNT_HEADER_SIZE(V)                                         \
                                                                     ^
src/http_parser.c:1620:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:154:3: note: expanded from macro 'COUNT_HEADER_SIZE'
  if (UNLIKELY(parser->nread > (HTTP_MAX_HEADER_SIZE))) {            \
  ^
src/http_parser.c:1620:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:155:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1620:9: note: +1
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:156:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    goto error;                                                      \
    ^
src/http_parser.c:1622:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (p == data + len)
        ^
src/http_parser.c:1629:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(ch != LF)) {
        ^
src/http_parser.c:1630:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_LF_EXPECTED);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1631:11: note: +1
          goto error;
          ^
src/http_parser.c:1640:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == ' ' || ch == '\t') {
        ^
src/http_parser.c:1640:23: note: +1
        if (ch == ' ' || ch == '\t') {
                      ^
src/http_parser.c:1642:11: note: +1
          REEXECUTE();
          ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:1646:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        switch (parser->header_state) {
        ^
src/http_parser.c:1664:9: note: +1
        REEXECUTE();
        ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:1669:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1669:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1669:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1669:9: note: +1
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1676:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == ' ' || ch == '\t') {
        ^
src/http_parser.c:1676:23: note: +1
        if (ch == ' ' || ch == '\t') {
                      ^
src/http_parser.c:1679:11: note: +1, nesting level increased to 3
        } else {
          ^
src/http_parser.c:1680:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          switch (parser->header_state) {
          ^
src/http_parser.c:1698:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          MARK(header_value);
          ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1698:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          MARK(header_value);
          ^
src/http_parser.c:135:3: note: expanded from macro 'MARK'
  if (!FOR##_mark) {                                                 \
  ^
src/http_parser.c:1700:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:1700:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1700:11: note: nesting level increased to 5
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1700:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1700:11: note: +1, nesting level increased to 6
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1700:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:1700:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:1700:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:1700:11: note: +8, including nesting penalty of 7, nesting level increased to 8
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1700:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:1701:11: note: +1
          REEXECUTE();
          ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:1707:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1707:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1707:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1707:9: note: +1
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1709:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (parser->flags & F_TRAILING) {
        ^
src/http_parser.c:1712:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:1712:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1712:11: note: nesting level increased to 5
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1712:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1712:11: note: +1, nesting level increased to 6
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1712:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:1712:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:1712:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1712:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:1713:11: note: +1
          REEXECUTE();
          ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:1718:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if ((parser->flags & F_CHUNKED) &&
        ^
src/http_parser.c:1718:41: note: +1
        if ((parser->flags & F_CHUNKED) &&
                                        ^
src/http_parser.c:1720:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1721:11: note: +1
          goto error;
          ^
src/http_parser.c:1727:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if ((parser->flags & F_UPGRADE) &&
        ^
src/http_parser.c:1727:41: note: +1
        if ((parser->flags & F_UPGRADE) &&
                                        ^
src/http_parser.c:1734:45: note: +1
              (parser->type == HTTP_REQUEST || parser->status_code == 101);
                                            ^
src/http_parser.c:1735:11: note: +1, nesting level increased to 3
        } else {
          ^
src/http_parser.c:1748:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (settings->on_headers_complete) {
        ^
src/http_parser.c:1749:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          switch (settings->on_headers_complete(parser)) {
          ^
src/http_parser.c:1762:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              SET_ERRNO(HPE_CB_headers_complete);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1763:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              RETURN(p - data); /* Error */
              ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:1767:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (HTTP_PARSER_ERRNO(parser) != HPE_OK) {
        ^
src/http_parser.c:1768:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          RETURN(p - data);
          ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:1771:9: note: +1
        REEXECUTE();
        ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:1777:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1777:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1777:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1777:9: note: +1
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1781:45: note: +1
        hasBody = parser->flags & F_CHUNKED ||
                                            ^
src/http_parser.c:1782:39: note: +1
          (parser->content_length > 0 && parser->content_length != ULLONG_MAX);
                                      ^
src/http_parser.c:1783:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (parser->upgrade && (parser->method == HTTP_CONNECT ||
        ^
src/http_parser.c:1783:29: note: +1
        if (parser->upgrade && (parser->method == HTTP_CONNECT ||
                            ^
src/http_parser.c:1784:62: note: +1
                                (parser->flags & F_SKIPBODY) || !hasBody)) {
                                                             ^
src/http_parser.c:1786:24: note: +4, including nesting penalty of 3, nesting level increased to 4
          UPDATE_STATE(NEW_MESSAGE());
                       ^
src/http_parser.c:453:56: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                       ^
src/http_parser.c:1786:24: note: +5, including nesting penalty of 4, nesting level increased to 5
          UPDATE_STATE(NEW_MESSAGE());
                       ^
src/http_parser.c:453:58: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                         ^
src/http_parser.c:442:51: note: expanded from macro 'start_state'
#define start_state (parser->type == HTTP_REQUEST ? s_start_req : s_start_res)
                                                  ^
src/http_parser.c:1787:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:1787:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1787:11: note: nesting level increased to 5
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1787:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1787:11: note: +1, nesting level increased to 6
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1787:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:1787:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:1787:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1787:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:1788:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          RETURN((p - data) + 1);
          ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:1791:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (parser->flags & F_SKIPBODY) {
        ^
src/http_parser.c:1792:24: note: +4, including nesting penalty of 3, nesting level increased to 4
          UPDATE_STATE(NEW_MESSAGE());
                       ^
src/http_parser.c:453:56: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                       ^
src/http_parser.c:1792:24: note: +5, including nesting penalty of 4, nesting level increased to 5
          UPDATE_STATE(NEW_MESSAGE());
                       ^
src/http_parser.c:453:58: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                         ^
src/http_parser.c:442:51: note: expanded from macro 'start_state'
#define start_state (parser->type == HTTP_REQUEST ? s_start_req : s_start_res)
                                                  ^
src/http_parser.c:1793:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:1793:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1793:11: note: nesting level increased to 5
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1793:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1793:11: note: +1, nesting level increased to 6
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1793:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:1793:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:1793:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1793:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:1794:16: note: +1, nesting level increased to 3
        } else if (parser->flags & F_CHUNKED) {
               ^
src/http_parser.c:1797:11: note: +1, nesting level increased to 3
        } else {
          ^
src/http_parser.c:1798:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (parser->content_length == 0) {
          ^
src/http_parser.c:1800:26: note: +5, including nesting penalty of 4, nesting level increased to 5
            UPDATE_STATE(NEW_MESSAGE());
                         ^
src/http_parser.c:453:56: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                       ^
src/http_parser.c:1800:26: note: +6, including nesting penalty of 5, nesting level increased to 6
            UPDATE_STATE(NEW_MESSAGE());
                         ^
src/http_parser.c:453:58: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                         ^
src/http_parser.c:442:51: note: expanded from macro 'start_state'
#define start_state (parser->type == HTTP_REQUEST ? s_start_req : s_start_res)
                                                  ^
src/http_parser.c:1801:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:1801:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1801:13: note: nesting level increased to 6
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1801:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1801:13: note: +1, nesting level increased to 7
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1801:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:1801:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:1801:13: note: +8, including nesting penalty of 7, nesting level increased to 8
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1801:13: note: +7, including nesting penalty of 6, nesting level increased to 7
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:1802:18: note: +1, nesting level increased to 4
          } else if (parser->content_length != ULLONG_MAX) {
                 ^
src/http_parser.c:1805:13: note: +1, nesting level increased to 4
          } else {
            ^
src/http_parser.c:1806:13: note: +5, including nesting penalty of 4, nesting level increased to 5
            if (!http_message_needs_eof(parser)) {
            ^
src/http_parser.c:1808:28: note: +6, including nesting penalty of 5, nesting level increased to 6
              UPDATE_STATE(NEW_MESSAGE());
                           ^
src/http_parser.c:453:56: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                       ^
src/http_parser.c:1808:28: note: +7, including nesting penalty of 6, nesting level increased to 7
              UPDATE_STATE(NEW_MESSAGE());
                           ^
src/http_parser.c:453:58: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                         ^
src/http_parser.c:442:51: note: expanded from macro 'start_state'
#define start_state (parser->type == HTTP_REQUEST ? s_start_req : s_start_res)
                                                  ^
src/http_parser.c:1809:15: note: +6, including nesting penalty of 5, nesting level increased to 6
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:1809:15: note: +7, including nesting penalty of 6, nesting level increased to 7
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1809:15: note: nesting level increased to 7
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1809:15: note: +8, including nesting penalty of 7, nesting level increased to 8
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1809:15: note: +1, nesting level increased to 8
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1809:15: note: +7, including nesting penalty of 6, nesting level increased to 7
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:1809:15: note: +8, including nesting penalty of 7, nesting level increased to 8
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:1809:15: note: +9, including nesting penalty of 8, nesting level increased to 9
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1809:15: note: +8, including nesting penalty of 7, nesting level increased to 8
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:1810:15: note: +1, nesting level increased to 5
            } else {
              ^
src/http_parser.c:1822:28: note: +3, including nesting penalty of 2, nesting level increased to 3
        uint64_t to_read = MIN(parser->content_length,
                           ^
src/http_parser.c:34:30: note: expanded from macro 'MIN'
# define MIN(a,b) ((a) < (b) ? (a) : (b))
                             ^
src/http_parser.c:1825:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->content_length != 0
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1826:13: note: +1
            && parser->content_length != ULLONG_MAX);
            ^
src/http_parser.c:1825:9: note: nesting level increased to 3
        assert(parser->content_length != 0
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1825:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->content_length != 0
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1826:13: note: +1
            && parser->content_length != ULLONG_MAX);
            ^
src/http_parser.c:1825:9: note: +1, nesting level increased to 4
        assert(parser->content_length != 0
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1833:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        MARK(body);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1833:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        MARK(body);
        ^
src/http_parser.c:135:3: note: expanded from macro 'MARK'
  if (!FOR##_mark) {                                                 \
  ^
src/http_parser.c:1837:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (parser->content_length == 0) {
        ^
src/http_parser.c:1849:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:1849:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1849:11: note: nesting level increased to 5
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1849:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1849:11: note: +1, nesting level increased to 6
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1849:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:1849:11: note: +6, including nesting penalty of 5, nesting level increased to 6
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:1849:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:1849:11: note: +8, including nesting penalty of 7, nesting level increased to 8
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1849:11: note: +7, including nesting penalty of 6, nesting level increased to 7
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:1850:11: note: +1
          REEXECUTE();
          ^
src/http_parser.c:64:3: note: expanded from macro 'REEXECUTE'
  goto reexecute;                                                    \
  ^
src/http_parser.c:1858:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        MARK(body);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1858:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        MARK(body);
        ^
src/http_parser.c:135:3: note: expanded from macro 'MARK'
  if (!FOR##_mark) {                                                 \
  ^
src/http_parser.c:1864:22: note: +3, including nesting penalty of 2, nesting level increased to 3
        UPDATE_STATE(NEW_MESSAGE());
                     ^
src/http_parser.c:453:56: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                       ^
src/http_parser.c:1864:22: note: +4, including nesting penalty of 3, nesting level increased to 4
        UPDATE_STATE(NEW_MESSAGE());
                     ^
src/http_parser.c:453:58: note: expanded from macro 'NEW_MESSAGE'
# define NEW_MESSAGE() (http_should_keep_alive(parser) ? start_state : s_dead)
                                                         ^
src/http_parser.c:442:51: note: expanded from macro 'start_state'
#define start_state (parser->type == HTTP_REQUEST ? s_start_req : s_start_res)
                                                  ^
src/http_parser.c:1865:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:1865:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1865:9: note: nesting level increased to 4
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1865:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1865:9: note: +1, nesting level increased to 5
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1865:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:1865:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:1865:9: note: +6, including nesting penalty of 5, nesting level increased to 6
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1865:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:1866:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (parser->upgrade) {
        ^
src/http_parser.c:1868:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          RETURN((p - data) + 1);
          ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:1874:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->nread == 1);
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1874:9: note: nesting level increased to 3
        assert(parser->nread == 1);
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1874:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->nread == 1);
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1874:9: note: +1, nesting level increased to 4
        assert(parser->nread == 1);
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1875:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1875:9: note: nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1875:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1875:9: note: +1, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1878:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY(unhex_val == -1)) {
        ^
src/http_parser.c:1879:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1880:11: note: +1
          goto error;
          ^
src/http_parser.c:1892:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1892:9: note: nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1892:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1892:9: note: +1, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1894:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == CR) {
        ^
src/http_parser.c:1901:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (unhex_val == -1) {
        ^
src/http_parser.c:1902:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (ch == ';' || ch == ' ') {
          ^
src/http_parser.c:1902:25: note: +1
          if (ch == ';' || ch == ' ') {
                        ^
src/http_parser.c:1907:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1908:11: note: +1
          goto error;
          ^
src/http_parser.c:1916:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (UNLIKELY((ULLONG_MAX - 16) / 16 < parser->content_length)) {
        ^
src/http_parser.c:1917:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1918:11: note: +1
          goto error;
          ^
src/http_parser.c:1927:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1927:9: note: nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1927:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1927:9: note: +1, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1929:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ch == CR) {
        ^
src/http_parser.c:1938:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1938:9: note: nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1938:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1938:9: note: +1, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1939:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1939:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1939:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1939:9: note: +1
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1943:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (parser->content_length == 0) {
        ^
src/http_parser.c:1946:11: note: +1, nesting level increased to 3
        } else {
          ^
src/http_parser.c:1949:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:1949:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1949:9: note: nesting level increased to 4
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1949:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1949:9: note: +1, nesting level increased to 5
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1949:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:1949:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:1949:9: note: +6, including nesting penalty of 5, nesting level increased to 6
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1949:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:1955:28: note: +3, including nesting penalty of 2, nesting level increased to 3
        uint64_t to_read = MIN(parser->content_length,
                           ^
src/http_parser.c:34:30: note: expanded from macro 'MIN'
# define MIN(a,b) ((a) < (b) ? (a) : (b))
                             ^
src/http_parser.c:1958:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1958:9: note: nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1958:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1958:9: note: +1, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1959:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->content_length != 0
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1960:13: note: +1
            && parser->content_length != ULLONG_MAX);
            ^
src/http_parser.c:1959:9: note: nesting level increased to 3
        assert(parser->content_length != 0
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1959:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->content_length != 0
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1960:13: note: +1
            && parser->content_length != ULLONG_MAX);
            ^
src/http_parser.c:1959:9: note: +1, nesting level increased to 4
        assert(parser->content_length != 0
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1965:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        MARK(body);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1965:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        MARK(body);
        ^
src/http_parser.c:135:3: note: expanded from macro 'MARK'
  if (!FOR##_mark) {                                                 \
  ^
src/http_parser.c:1969:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (parser->content_length == 0) {
        ^
src/http_parser.c:1977:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1977:9: note: nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1977:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1977:9: note: +1, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1978:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->content_length == 0);
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1978:9: note: nesting level increased to 3
        assert(parser->content_length == 0);
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1978:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->content_length == 0);
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1978:9: note: +1, nesting level increased to 4
        assert(parser->content_length == 0);
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1979:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != CR);
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1979:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != CR);
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1979:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != CR);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1979:9: note: +1
        STRICT_CHECK(ch != CR);
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1981:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:1981:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1981:9: note: nesting level increased to 4
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1981:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1981:9: note: +1, nesting level increased to 5
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1981:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:1981:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:1981:9: note: +6, including nesting penalty of 5, nesting level increased to 6
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:1981:9: note: +7, including nesting penalty of 6, nesting level increased to 7
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1981:9: note: +6, including nesting penalty of 5, nesting level increased to 6
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:1985:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1985:9: note: nesting level increased to 3
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1985:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1985:9: note: +1, nesting level increased to 4
        assert(parser->flags & F_CHUNKED);
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1986:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:446:70: note: expanded from macro 'STRICT_CHECK'
# define STRICT_CHECK(cond)                                          \
                                                                     ^
src/http_parser.c:1986:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:448:3: note: expanded from macro 'STRICT_CHECK'
  if (cond) {                                                        \
  ^
src/http_parser.c:1986:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1986:9: note: +1
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:450:5: note: expanded from macro 'STRICT_CHECK'
    goto error;                                                      \
    ^
src/http_parser.c:1989:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:77:70: note: expanded from macro 'CALLBACK_NOTIFY_'
#define CALLBACK_NOTIFY_(FOR, ER)                                    \
                                                                     ^
src/http_parser.c:1989:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1989:9: note: nesting level increased to 4
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1989:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1989:9: note: +1, nesting level increased to 5
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:79:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1989:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:81:3: note: expanded from macro 'CALLBACK_NOTIFY_'
  if (LIKELY(settings->on_##FOR)) {                                  \
  ^
src/http_parser.c:1989:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:83:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(0 != settings->on_##FOR(parser))) {                 \
    ^
src/http_parser.c:1989:9: note: +6, including nesting penalty of 5, nesting level increased to 6
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1989:9: note: +5, including nesting penalty of 4, nesting level increased to 5
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:89:5: note: expanded from macro 'CALLBACK_NOTIFY_'
    if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {             \
    ^
src/http_parser.c:1993:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        assert(0 && "unhandled state");
        ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:1993:18: note: +1
        assert(0 && "unhandled state");
                 ^
src/http_parser.c:1993:9: note: nesting level increased to 3
        assert(0 && "unhandled state");
        ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:1993:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        assert(0 && "unhandled state");
        ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:1993:18: note: +1
        assert(0 && "unhandled state");
                 ^
src/http_parser.c:1993:9: note: +1, nesting level increased to 4
        assert(0 && "unhandled state");
        ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:1994:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1995:9: note: +1
        goto error;
        ^
src/http_parser.c:2009:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  assert(((header_field_mark ? 1 : 0) +
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:2009:30: note: +2, including nesting penalty of 1, nesting level increased to 2
  assert(((header_field_mark ? 1 : 0) +
                             ^
src/http_parser.c:2010:30: note: +2, including nesting penalty of 1, nesting level increased to 2
          (header_value_mark ? 1 : 0) +
                             ^
src/http_parser.c:2011:21: note: +2, including nesting penalty of 1, nesting level increased to 2
          (url_mark ? 1 : 0)  +
                    ^
src/http_parser.c:2012:22: note: +2, including nesting penalty of 1, nesting level increased to 2
          (body_mark ? 1 : 0) +
                     ^
src/http_parser.c:2013:24: note: +2, including nesting penalty of 1, nesting level increased to 2
          (status_mark ? 1 : 0)) <= 1);
                       ^
src/http_parser.c:2009:3: note: nesting level increased to 1
  assert(((header_field_mark ? 1 : 0) +
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:2009:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  assert(((header_field_mark ? 1 : 0) +
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:2009:30: note: +2, including nesting penalty of 1, nesting level increased to 2
  assert(((header_field_mark ? 1 : 0) +
                             ^
src/http_parser.c:2010:30: note: +2, including nesting penalty of 1, nesting level increased to 2
          (header_value_mark ? 1 : 0) +
                             ^
src/http_parser.c:2011:21: note: +2, including nesting penalty of 1, nesting level increased to 2
          (url_mark ? 1 : 0)  +
                    ^
src/http_parser.c:2012:22: note: +2, including nesting penalty of 1, nesting level increased to 2
          (body_mark ? 1 : 0) +
                     ^
src/http_parser.c:2013:24: note: +2, including nesting penalty of 1, nesting level increased to 2
          (status_mark ? 1 : 0)) <= 1);
                       ^
src/http_parser.c:2009:3: note: +1, nesting level increased to 2
  assert(((header_field_mark ? 1 : 0) +
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:2015:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:2015:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:2015:3: note: nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:2015:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:2015:3: note: +1, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:2015:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:2015:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:2015:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:2015:3: note: +5, including nesting penalty of 4, nesting level increased to 5
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2015:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:2016:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:2016:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:2016:3: note: nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:2016:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:2016:3: note: +1, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:2016:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:2016:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:2016:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:2016:3: note: +5, including nesting penalty of 4, nesting level increased to 5
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2016:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:2017:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:2017:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:2017:3: note: nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:2017:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:2017:3: note: +1, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:2017:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:2017:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:2017:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:2017:3: note: +5, including nesting penalty of 4, nesting level increased to 5
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2017:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:2018:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:2018:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:2018:3: note: nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:2018:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:2018:3: note: +1, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:2018:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:2018:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:2018:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:2018:3: note: +5, including nesting penalty of 4, nesting level increased to 5
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2018:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:2019:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:102:70: note: expanded from macro 'CALLBACK_DATA_'
#define CALLBACK_DATA_(FOR, LEN, ER)                                 \
                                                                     ^
src/http_parser.c:2019:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:26: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                         ^
src/http_parser.c:2019:3: note: nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:119:50: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                                                 ^
src/http_parser.c:2019:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:120:7: note: expanded from macro 'assert'
      if (expr)                                                         \
      ^
src/http_parser.c:2019:3: note: +1, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:104:3: note: expanded from macro 'CALLBACK_DATA_'
  assert(HTTP_PARSER_ERRNO(parser) == HPE_OK);                       \
  ^
/usr/include/assert.h:122:7: note: expanded from macro 'assert'
      else                                                              \
      ^
src/http_parser.c:2019:3: note: +2, including nesting penalty of 1, nesting level increased to 2
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:106:3: note: expanded from macro 'CALLBACK_DATA_'
  if (FOR##_mark) {                                                  \
  ^
src/http_parser.c:2019:3: note: +3, including nesting penalty of 2, nesting level increased to 3
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:107:5: note: expanded from macro 'CALLBACK_DATA_'
    if (LIKELY(settings->on_##FOR)) {                                \
    ^
src/http_parser.c:2019:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:109:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(0 !=                                              \
      ^
src/http_parser.c:2019:3: note: +5, including nesting penalty of 4, nesting level increased to 5
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2019:3: note: +4, including nesting penalty of 3, nesting level increased to 4
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:116:7: note: expanded from macro 'CALLBACK_DATA_'
      if (UNLIKELY(HTTP_PARSER_ERRNO(parser) != HPE_OK)) {           \
      ^
src/http_parser.c:2021:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  RETURN(len);
  ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:2024:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (HTTP_PARSER_ERRNO(parser) == HPE_OK) {
  ^
src/http_parser.c:2025:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    SET_ERRNO(HPE_UNKNOWN);
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2028:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  RETURN(p - data);
  ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:636:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  char c, ch;
  ^~~~~~~~~~~
src/http_parser.c:636:8: warning: variable 'c' is not initialized [cppcoreguidelines-init-variables]
  char c, ch;
       ^
note: this fix will not be applied because it overlaps with another fix
src/http_parser.c:636:8: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
src/http_parser.c:636:11: warning: variable 'ch' is not initialized [cppcoreguidelines-init-variables]
  char c, ch;
          ^
note: this fix will not be applied because it overlaps with another fix
src/http_parser.c:636:11: warning: variable name 'ch' is too short, expected at least 3 characters [readability-identifier-length]
src/http_parser.c:637:10: warning: variable 'unhex_val' is not initialized [cppcoreguidelines-init-variables]
  int8_t unhex_val;
         ^
                   = 0
src/http_parser.c:638:15: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
  const char *p = data;
              ^
src/http_parser.c:658:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        CALLBACK_NOTIFY_NOADVANCE(message_complete);
        ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:668:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        SET_ERRNO(HPE_INVALID_EOF_STATE);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:674:41: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (CURRENT_STATE() == s_header_field)
                                        ^
                                         {
src/http_parser.c:676:41: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (CURRENT_STATE() == s_header_value)
                                        ^
                                         {
src/http_parser.c:699:16: warning: backward branch (for loop) is ID-dependent due to variable reference to 'p' and may cause performance degradation [altera-id-dependent-backward-branch]
  for (p=data; p != data + len; p++) {
               ^
src/http_parser.c:702:41: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (PARSING_HEADER(CURRENT_STATE()))
                                        ^
                                         {
src/http_parser.c:703:7: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
      COUNT_HEADER_SIZE(1);
      ^
src/http_parser.c:155:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:712:42: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (LIKELY(ch == CR || ch == LF))
                                         ^
                                          {
src/http_parser.c:715:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        SET_ERRNO(HPE_CLOSED_CONNECTION);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:720:34: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (ch == CR || ch == LF)
                                 ^
                                  {
src/http_parser.c:728:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          CALLBACK_NOTIFY(message_begin);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:744:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            SET_ERRNO(HPE_INVALID_CONSTANT);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:770:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            SET_ERRNO(HPE_INVALID_CONSTANT);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:774:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:779:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:784:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:789:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:794:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:800:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:811:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:821:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:832:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:847:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_STATUS);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:868:15: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
              SET_ERRNO(HPE_INVALID_STATUS);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:874:32: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        parser->status_code *= 10;
                               ^
src/http_parser.c:878:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_STATUS);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:887:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        MARK(status);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:891:34: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (ch == CR || ch == LF)
                                 ^
src/http_parser.c:900:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:906:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          CALLBACK_DATA(status);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:913:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:919:34: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (ch == CR || ch == LF)
                                 ^
                                  {
src/http_parser.c:924:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (UNLIKELY(!IS_ALPHA(ch))) {
                               ^
src/http_parser.c:410:36: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                             ~~~~~~^~
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:69:42: note: expanded from macro 'UNLIKELY'
# define UNLIKELY(X) __builtin_expect(!!(X), 0)
                                         ^
src/http_parser.c:925:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_METHOD);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:950:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            SET_ERRNO(HPE_INVALID_METHOD);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:955:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        CALLBACK_NOTIFY(message_begin);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:962:21: warning: variable 'matcher' is not initialized [cppcoreguidelines-init-variables]
        const char *matcher;
                    ^
                            = NULL
src/http_parser.c:964:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_METHOD);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:975:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          switch (parser->method << 16 | parser->index << 8 | ch) {
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
src/http_parser.c:975:37: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
          switch (parser->method << 16 | parser->index << 8 | ch) {
                                    ^
src/http_parser.c:975:37: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          switch (parser->method << 16 | parser->index << 8 | ch) {
                                 ~~ ^~
src/http_parser.c:975:59: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
          switch (parser->method << 16 | parser->index << 8 | ch) {
                                                          ^
src/http_parser.c:975:59: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          switch (parser->method << 16 | parser->index << 8 | ch) {
                                                       ~~ ^
src/http_parser.c:977:39: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^
                                      (  )
src/http_parser.c:977:50: warning: macro argument should be enclosed in parentheses [bugprone-macro-parentheses]
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                                 ^
                                                 ( )
src/http_parser.c:980:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(POST,      1, 'U', PUT)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:980:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(POST,      1, 'U', PUT)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:981:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(POST,      1, 'A', PATCH)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:981:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(POST,      1, 'A', PATCH)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:982:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(POST,      1, 'R', PROPFIND)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:982:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(POST,      1, 'R', PROPFIND)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:983:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(PUT,       2, 'R', PURGE)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:983:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(PUT,       2, 'R', PURGE)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:984:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(CONNECT,   1, 'H', CHECKOUT)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:984:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(CONNECT,   1, 'H', CHECKOUT)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:985:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(CONNECT,   2, 'P', COPY)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:985:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(CONNECT,   2, 'P', COPY)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:986:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     1, 'O', MOVE)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:986:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     1, 'O', MOVE)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:987:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     1, 'E', MERGE)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:987:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     1, 'E', MERGE)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:988:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     1, '-', MSEARCH)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:988:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     1, '-', MSEARCH)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:989:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     2, 'A', MKACTIVITY)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:989:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     2, 'A', MKACTIVITY)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:990:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     3, 'A', MKCALENDAR)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:990:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(MKCOL,     3, 'A', MKCALENDAR)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:991:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(SUBSCRIBE, 1, 'E', SEARCH)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:991:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(SUBSCRIBE, 1, 'E', SEARCH)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:992:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(REPORT,    2, 'B', REBIND)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:992:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(REPORT,    2, 'B', REBIND)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:993:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(PROPFIND,  4, 'P', PROPPATCH)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:993:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(PROPFIND,  4, 'P', PROPPATCH)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:994:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(LOCK,      1, 'I', LINK)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:994:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(LOCK,      1, 'I', LINK)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:995:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(UNLOCK,    2, 'S', UNSUBSCRIBE)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:995:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(UNLOCK,    2, 'S', UNSUBSCRIBE)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:996:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(UNLOCK,    2, 'B', UNBIND)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:996:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(UNLOCK,    2, 'B', UNBIND)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:997:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(UNLOCK,    3, 'I', UNLINK)
            ^
src/http_parser.c:977:19: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~
note: expanded from here
src/http_parser.c:997:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            XX(UNLOCK,    3, 'I', UNLINK)
                          ^
src/http_parser.c:977:39: note: expanded from macro 'XX'
            case (HTTP_##meth << 16 | pos << 8 | ch): \
                                      ^~~ ~~
src/http_parser.c:1000:15: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
              SET_ERRNO(HPE_INVALID_METHOD);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1004:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_METHOD);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1014:23: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (ch == ' ') break;
                      ^
                       {
src/http_parser.c:1016:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        MARK(url);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1023:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_URL);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1040:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            SET_ERRNO(HPE_INVALID_URL);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1045:15: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
              SET_ERRNO(HPE_INVALID_URL);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1064:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1069:34: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            parser->http_minor = 9;
                                 ^
src/http_parser.c:1073:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            CALLBACK_DATA(url);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1078:15: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
              SET_ERRNO(HPE_INVALID_URL);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1093:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            SET_ERRNO(HPE_INVALID_CONSTANT);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1099:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1104:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != 'T');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1109:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != 'P');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1114:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != '/');
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1120:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1131:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1141:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_VERSION);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1161:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        SET_ERRNO(HPE_INVALID_VERSION);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1170:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_LF_EXPECTED);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1195:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:638:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  const char *p = data;
  ^
src/http_parser.c:1199:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        MARK(header_field);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1231:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (; p != data + len; p++) {
        ^
src/http_parser.c:1231:16: warning: backward branch (for loop) is ID-dependent due to variable reference to 'p' and may cause performance degradation [altera-id-dependent-backward-branch]
        for (; p != data + len; p++) {
               ^
src/http_parser.c:1235:18: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          if (!c)
                 ^
                  {
src/http_parser.c:1331:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if (ch != ' ') parser->header_state = h_general;
                            ^
                             {
src/http_parser.c:1340:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:155:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1349:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          CALLBACK_DATA(header_field);
          ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1353:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1358:37: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (ch == ' ' || ch == '\t') break;
                                    ^
                                     {
src/http_parser.c:1374:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        MARK(header_value);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1379:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        c = LOWER(ch);
                  ^
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:1383:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            parser->flags |= F_UPGRADE;
                          ~~ ^~~~~~~~~
src/http_parser.c:1398:15: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
              SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1402:33: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            if (parser->flags & F_CONTENTLENGTH) {
                              ~ ^~~~~~~~~~~~~~~
src/http_parser.c:1403:15: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
              SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:638:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  const char *p = data;
  ^
src/http_parser.c:1407:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            parser->flags |= F_CONTENTLENGTH;
                          ~~ ^~~~~~~~~~~~~~~
src/http_parser.c:1440:16: warning: backward branch (for loop) is ID-dependent due to variable reference to 'p' and may cause performance degradation [altera-id-dependent-backward-branch]
        for (; p != data + len; p++) {
               ^
src/http_parser.c:1445:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            CALLBACK_DATA(header_value);
            ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1451:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            COUNT_HEADER_SIZE(p - start);
            ^
src/http_parser.c:155:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1453:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            CALLBACK_DATA_NOADVANCE(header_value);
            ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1458:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            SET_ERRNO(HPE_INVALID_HEADER_TOKEN);
            ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1462:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          c = LOWER(ch);
                    ^
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:1467:27: warning: variable 'p_cr' is not initialized [cppcoreguidelines-init-variables]
              const char* p_cr;
                          ^
                               = NULL
src/http_parser.c:1468:27: warning: variable 'p_lf' is not initialized [cppcoreguidelines-init-variables]
              const char* p_lf;
                          ^
                               = NULL
src/http_parser.c:1471:34: warning: performing an implicit widening conversion to type 'size_t' (aka 'unsigned long') of a multiplication performed in type 'int' [bugprone-implicit-widening-of-multiplication-result]
              limit = MIN(limit, HTTP_MAX_HEADER_SIZE);
                                 ^
src/http_parser.h:63:32: note: expanded from macro 'HTTP_MAX_HEADER_SIZE'
# define HTTP_MAX_HEADER_SIZE (80*1024)
                               ^
src/http_parser.c:1471:34: note: make conversion explicit to silence this warning
              limit = MIN(limit, HTTP_MAX_HEADER_SIZE);
                                 ^
src/http_parser.h:63:32: note: expanded from macro 'HTTP_MAX_HEADER_SIZE'
# define HTTP_MAX_HEADER_SIZE (80*1024)
                               ^~~~~~~
src/http_parser.c:34:39: note: expanded from macro 'MIN'
# define MIN(a,b) ((a) < (b) ? (a) : (b))
                                      ^
src/http_parser.c:1471:34: note: perform multiplication in a wider type
              limit = MIN(limit, HTTP_MAX_HEADER_SIZE);
                                 ^
src/http_parser.h:63:32: note: expanded from macro 'HTTP_MAX_HEADER_SIZE'
# define HTTP_MAX_HEADER_SIZE (80*1024)
                               ^~
src/http_parser.c:34:39: note: expanded from macro 'MIN'
# define MIN(a,b) ((a) < (b) ? (a) : (b))
                                      ^
src/http_parser.c:1476:50: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
                if (p_lf != NULL && p_cr >= p_lf)
                                                 ^
                                                  {
src/http_parser.c:1478:21: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
                else
                    ^
                     {
src/http_parser.c:1497:24: warning: variable 't' is not initialized [cppcoreguidelines-init-variables]
              uint64_t t;
                       ^
                         = 0
src/http_parser.c:1497:24: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
src/http_parser.c:1499:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if (ch == ' ') break;
                            ^
                             {
src/http_parser.c:1502:17: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
                SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
                ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1508:20: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              t *= 10;
                   ^
src/http_parser.c:1513:17: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
                SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
                ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1591:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if (ch != ' ') h_state = h_general;
                            ^
                             {
src/http_parser.c:1599:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                  parser->flags |= F_CONNECTION_KEEP_ALIVE;
                                ~~ ^~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:1601:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                  parser->flags |= F_CONNECTION_CLOSE;
                                ~~ ^~~~~~~~~~~~~~~~~~
src/http_parser.c:1603:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                  parser->flags |= F_CONNECTION_UPGRADE;
                                ~~ ^~~~~~~~~~~~~~~~~~~~
src/http_parser.c:1620:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        COUNT_HEADER_SIZE(p - start);
        ^
src/http_parser.c:155:5: note: expanded from macro 'COUNT_HEADER_SIZE'
    SET_ERRNO(HPE_HEADER_OVERFLOW);                                  \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1622:29: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (p == data + len)
                            ^
                             {
src/http_parser.c:1630:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_LF_EXPECTED);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1648:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            parser->flags |= F_CONNECTION_KEEP_ALIVE;
                          ~~ ^~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:1651:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            parser->flags |= F_CONNECTION_CLOSE;
                          ~~ ^~~~~~~~~~~~~~~~~~
src/http_parser.c:1654:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            parser->flags |= F_CHUNKED;
                          ~~ ^~~~~~~~~
src/http_parser.c:1657:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            parser->flags |= F_CONNECTION_UPGRADE;
                          ~~ ^~~~~~~~~~~~~~~~~~~~
src/http_parser.c:1669:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1679:11: warning: do not use 'else' after 'break' [llvm-else-after-return,readability-else-after-return]
        } else {
          ^~~~~~
src/http_parser.c:1682:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
              parser->flags |= F_CONNECTION_KEEP_ALIVE;
                            ~~ ^~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:1685:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
              parser->flags |= F_CONNECTION_CLOSE;
                            ~~ ^~~~~~~~~~~~~~~~~~
src/http_parser.c:1688:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
              parser->flags |= F_CONNECTION_UPGRADE;
                            ~~ ^~~~~~~~~~~~~~~~~~~~
src/http_parser.c:1691:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
              parser->flags |= F_CHUNKED;
                            ~~ ^~~~~~~~~
src/http_parser.c:1698:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          MARK(header_value);
          ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1700:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          CALLBACK_DATA_NOADVANCE(header_value);
          ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1707:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1709:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (parser->flags & F_TRAILING) {
                          ~ ^~~~~~~~~~
src/http_parser.c:1712:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          CALLBACK_NOTIFY_NOADVANCE(chunk_complete);
          ^
src/http_parser.c:99:41: note: expanded from macro 'CALLBACK_NOTIFY_NOADVANCE'
#define CALLBACK_NOTIFY_NOADVANCE(FOR)  CALLBACK_NOTIFY_(FOR, p - data)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1718:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if ((parser->flags & F_CHUNKED) &&
                           ~ ^~~~~~~~~
src/http_parser.c:1719:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            (parser->flags & F_CONTENTLENGTH)) {
                           ~ ^~~~~~~~~~~~~~~
src/http_parser.c:1720:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_UNEXPECTED_CONTENT_LENGTH);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1727:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if ((parser->flags & F_UPGRADE) &&
                           ~ ^~~~~~~~~
src/http_parser.c:1728:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            (parser->flags & F_CONNECTION_UPGRADE)) {
                           ~ ^~~~~~~~~~~~~~~~~~~~
src/http_parser.c:1734:71: warning: 101 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (parser->type == HTTP_REQUEST || parser->status_code == 101);
                                                                      ^
src/http_parser.c:1758:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
              parser->flags |= F_SKIPBODY;
                            ~~ ^~~~~~~~~~
src/http_parser.c:1762:15: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
              SET_ERRNO(HPE_CB_headers_complete);
              ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1763:15: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
              RETURN(p - data); /* Error */
              ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:1768:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          RETURN(p - data);
          ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:1776:13: warning: variable 'hasBody' is not initialized [cppcoreguidelines-init-variables]
        int hasBody;
            ^
                    = 0
src/http_parser.c:1777:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1781:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        hasBody = parser->flags & F_CHUNKED ||
                                ~ ^~~~~~~~~
src/http_parser.c:1784:50: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
                                (parser->flags & F_SKIPBODY) || !hasBody)) {
                                               ~ ^~~~~~~~~~
src/http_parser.c:1787:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1788:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          RETURN((p - data) + 1);
          ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:1791:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (parser->flags & F_SKIPBODY) {
                          ~ ^~~~~~~~~~
src/http_parser.c:1793:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          CALLBACK_NOTIFY(message_complete);
          ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1794:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        } else if (parser->flags & F_CHUNKED) {
                                 ~ ^~~~~~~~~
src/http_parser.c:1801:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            CALLBACK_NOTIFY(message_complete);
            ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1809:15: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
              CALLBACK_NOTIFY(message_complete);
              ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1833:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        MARK(body);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1849:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          CALLBACK_DATA_(body, p - body_mark + 1, p - data);
          ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1858:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        MARK(body);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1865:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        CALLBACK_NOTIFY(message_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1868:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          RETURN((p - data) + 1);
          ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:1875:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        assert(parser->flags & F_CHUNKED);
                               ^
/usr/include/assert.h:119:20: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                   ^~~~
src/http_parser.c:1879:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1883:34: warning: 'signed char' to 'uint64_t' (aka 'unsigned long') conversion; consider casting to 'unsigned char' first. [bugprone-signed-char-misuse,cert-str34-c]
        parser->content_length = unhex_val;
                                 ^
src/http_parser.c:1890:18: warning: variable 't' is not initialized [cppcoreguidelines-init-variables]
        uint64_t t;
                 ^
                   = 0
src/http_parser.c:1890:18: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
src/http_parser.c:1892:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        assert(parser->flags & F_CHUNKED);
                               ^
/usr/include/assert.h:119:20: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                   ^~~~
src/http_parser.c:1907:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_CHUNK_SIZE);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1912:14: warning: 16 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        t *= 16;
             ^
src/http_parser.c:1917:11: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
          SET_ERRNO(HPE_INVALID_CONTENT_LENGTH);
          ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1927:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        assert(parser->flags & F_CHUNKED);
                               ^
/usr/include/assert.h:119:20: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                   ^~~~
src/http_parser.c:1938:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        assert(parser->flags & F_CHUNKED);
                               ^
/usr/include/assert.h:119:20: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                   ^~~~
src/http_parser.c:1939:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1944:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          parser->flags |= F_TRAILING;
                        ~~ ^~~~~~~~~~
src/http_parser.c:1949:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        CALLBACK_NOTIFY(chunk_header);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1958:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        assert(parser->flags & F_CHUNKED);
                               ^
/usr/include/assert.h:119:20: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                   ^~~~
src/http_parser.c:1965:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        MARK(body);
        ^
src/http_parser.c:133:70: note: expanded from macro 'MARK'
#define MARK(FOR)                                                    \
                                                                     ^
src/http_parser.c:1977:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        assert(parser->flags & F_CHUNKED);
                               ^
/usr/include/assert.h:119:20: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                   ^~~~
src/http_parser.c:1979:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != CR);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1981:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        CALLBACK_DATA(body);
        ^
src/http_parser.c:126:5: note: expanded from macro 'CALLBACK_DATA'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data + 1)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1985:32: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        assert(parser->flags & F_CHUNKED);
                               ^
/usr/include/assert.h:119:20: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                   ^~~~
src/http_parser.c:1986:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        STRICT_CHECK(ch != LF);
        ^
src/http_parser.c:449:5: note: expanded from macro 'STRICT_CHECK'
    SET_ERRNO(HPE_STRICT);                                           \
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1989:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        CALLBACK_NOTIFY(chunk_complete);
        ^
src/http_parser.c:96:41: note: expanded from macro 'CALLBACK_NOTIFY'
#define CALLBACK_NOTIFY(FOR)            CALLBACK_NOTIFY_(FOR, p - data + 1)
                                        ^
src/http_parser.c:84:7: note: expanded from macro 'CALLBACK_NOTIFY_'
      SET_ERRNO(HPE_CB_##FOR);                                       \
      ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:1994:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        SET_ERRNO(HPE_INVALID_INTERNAL_STATE);
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2015:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  CALLBACK_DATA_NOADVANCE(header_field);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2016:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  CALLBACK_DATA_NOADVANCE(header_value);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2017:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  CALLBACK_DATA_NOADVANCE(url);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2018:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  CALLBACK_DATA_NOADVANCE(body);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2019:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  CALLBACK_DATA_NOADVANCE(status);
  ^
src/http_parser.c:130:5: note: expanded from macro 'CALLBACK_DATA_NOADVANCE'
    CALLBACK_DATA_(FOR, p - FOR##_mark, p - data)
    ^
src/http_parser.c:111:9: note: expanded from macro 'CALLBACK_DATA_'
        SET_ERRNO(HPE_CB_##FOR);                                     \
        ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2021:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  RETURN(len);
  ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:2025:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    SET_ERRNO(HPE_UNKNOWN);
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2028:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  RETURN(p - data);
  ^
src/http_parser.c:58:70: note: expanded from macro 'RETURN'
#define RETURN(V)                                                    \
                                                                     ^
src/http_parser.c:2041:29: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  if (parser->status_code / 100 == 1 || /* 1xx e.g. Continue */
                            ^
src/http_parser.c:2042:30: warning: 204 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      parser->status_code == 204 ||     /* No Content */
                             ^
src/http_parser.c:2043:30: warning: 304 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      parser->status_code == 304 ||     /* Not Modified */
                             ^
src/http_parser.c:2044:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      parser->flags & F_SKIPBODY) {     /* response to a HEAD request */
                    ~ ^~~~~~~~~~
src/http_parser.c:2048:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((parser->flags & F_CHUNKED) || parser->content_length != ULLONG_MAX) {
                     ~ ^~~~~~~~~
src/http_parser.c:2061:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (parser->flags & F_CONNECTION_CLOSE) {
                      ~ ^~~~~~~~~~~~~~~~~~
src/http_parser.c:2066:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (!(parser->flags & F_CONNECTION_KEEP_ALIVE)) {
                        ~ ^~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:2076:35: warning: parameter name 'm' is too short, expected at least 3 characters [readability-identifier-length]
http_method_str (enum http_method m)
                                  ^
src/http_parser.c:2083:62: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
http_parser_init (http_parser *parser, enum http_parser_type t)
                                                             ^
src/http_parser.c:2086:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memset(parser, 0, sizeof(*parser));
  ^~~~~~
src/http_parser.c:2086:3: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  memset(parser, 0, sizeof(*parser));
  ^~~~~~
src/http_parser.c:2096:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memset(settings, 0, sizeof(*settings));
  ^~~~~~
src/http_parser.c:2096:3: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  memset(settings, 0, sizeof(*settings));
  ^~~~~~
src/http_parser.c:2112:1: warning: function 'http_parse_host_char' has cognitive complexity of 42 (threshold 25) [readability-function-cognitive-complexity]
http_parse_host_char(enum http_host_state s, const char ch) {
^
src/http_parser.c:2113:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  switch(s) {
  ^
src/http_parser.c:2116:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == '@') {
      ^
src/http_parser.c:2120:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_USERINFO_CHAR(ch)) {
      ^
src/http_parser.c:2120:11: note: +1
      if (IS_USERINFO_CHAR(ch)) {
          ^
src/http_parser.c:419:14: note: expanded from macro 'IS_USERINFO_CHAR'
  (c) == '$' || (c) == ',')
             ^
src/http_parser.c:2120:11: note: +1
      if (IS_USERINFO_CHAR(ch)) {
          ^
src/http_parser.c:417:30: note: expanded from macro 'IS_USERINFO_CHAR'
#define IS_USERINFO_CHAR(c) (IS_ALPHANUM(c) || IS_MARK(c) || (c) == '%' || \
                             ^
src/http_parser.c:412:30: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ^
src/http_parser.c:410:46: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                                             ^
src/http_parser.c:2120:11: note: +1
      if (IS_USERINFO_CHAR(ch)) {
          ^
src/http_parser.c:417:30: note: expanded from macro 'IS_USERINFO_CHAR'
#define IS_USERINFO_CHAR(c) (IS_ALPHANUM(c) || IS_MARK(c) || (c) == '%' || \
                             ^
src/http_parser.c:412:45: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                                            ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:2126:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == '[') {
      ^
src/http_parser.c:2130:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_HOST_CHAR(ch)) {
      ^
src/http_parser.c:2130:11: note: +1
      if (IS_HOST_CHAR(ch)) {
          ^
src/http_parser.c:426:59: note: expanded from macro 'IS_HOST_CHAR'
#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')
                                                          ^
src/http_parser.c:2130:11: note: +1
      if (IS_HOST_CHAR(ch)) {
          ^
src/http_parser.c:426:30: note: expanded from macro 'IS_HOST_CHAR'
#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')
                             ^
src/http_parser.c:412:30: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ^
src/http_parser.c:410:46: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                                             ^
src/http_parser.c:2130:11: note: +1
      if (IS_HOST_CHAR(ch)) {
          ^
src/http_parser.c:426:30: note: expanded from macro 'IS_HOST_CHAR'
#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')
                             ^
src/http_parser.c:412:45: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                                            ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:2137:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_HOST_CHAR(ch)) {
      ^
src/http_parser.c:2137:11: note: +1
      if (IS_HOST_CHAR(ch)) {
          ^
src/http_parser.c:426:59: note: expanded from macro 'IS_HOST_CHAR'
#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')
                                                          ^
src/http_parser.c:2137:11: note: +1
      if (IS_HOST_CHAR(ch)) {
          ^
src/http_parser.c:426:30: note: expanded from macro 'IS_HOST_CHAR'
#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')
                             ^
src/http_parser.c:412:30: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ^
src/http_parser.c:410:46: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                                             ^
src/http_parser.c:2137:11: note: +1
      if (IS_HOST_CHAR(ch)) {
          ^
src/http_parser.c:426:30: note: expanded from macro 'IS_HOST_CHAR'
#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')
                             ^
src/http_parser.c:412:45: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                                            ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:2143:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == ':') {
      ^
src/http_parser.c:2150:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == ']') {
      ^
src/http_parser.c:2156:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_HEX(ch) || ch == ':' || ch == '.') {
      ^
src/http_parser.c:2156:35: note: +1
      if (IS_HEX(ch) || ch == ':' || ch == '.') {
                                  ^
src/http_parser.c:2156:11: note: +1
      if (IS_HEX(ch) || ch == ':' || ch == '.') {
          ^
src/http_parser.c:413:30: note: expanded from macro 'IS_HEX'
#define IS_HEX(c)           (IS_NUM(c) || (LOWER(c) >= 'a' && LOWER(c) <= 'f'))
                             ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:2156:11: note: +1
      if (IS_HEX(ch) || ch == ':' || ch == '.') {
          ^
src/http_parser.c:413:60: note: expanded from macro 'IS_HEX'
#define IS_HEX(c)           (IS_NUM(c) || (LOWER(c) >= 'a' && LOWER(c) <= 'f'))
                                                           ^
src/http_parser.c:2160:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (s == s_http_host_v6 && ch == '%') {
      ^
src/http_parser.c:2160:31: note: +1
      if (s == s_http_host_v6 && ch == '%') {
                              ^
src/http_parser.c:2166:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ch == ']') {
      ^
src/http_parser.c:2173:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' || ch == '_' ||
      ^
src/http_parser.c:2173:79: note: +1
      if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' || ch == '_' ||
                                                                              ^
src/http_parser.c:2173:11: note: +1
      if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' || ch == '_' ||
          ^
src/http_parser.c:412:30: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ^
src/http_parser.c:410:46: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                                             ^
src/http_parser.c:2173:11: note: +1
      if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' || ch == '_' ||
          ^
src/http_parser.c:412:45: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                                            ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:2181:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (IS_NUM(ch)) {
      ^
src/http_parser.c:2181:11: note: +1
      if (IS_NUM(ch)) {
          ^
src/http_parser.c:411:41: note: expanded from macro 'IS_NUM'
#define IS_NUM(c)           ((c) >= '0' && (c) <= '9')
                                        ^
src/http_parser.c:2112:43: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
http_parse_host_char(enum http_host_state s, const char ch) {
                                          ^
src/http_parser.c:2112:57: warning: parameter name 'ch' is too short, expected at least 3 characters [readability-identifier-length]
http_parse_host_char(enum http_host_state s, const char ch) {
                                                        ^
src/http_parser.c:2120:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_USERINFO_CHAR(ch)) {
                           ^
src/http_parser.c:417:42: note: expanded from macro 'IS_USERINFO_CHAR'
#define IS_USERINFO_CHAR(c) (IS_ALPHANUM(c) || IS_MARK(c) || (c) == '%' || \
                             ~~~~~~~~~~~~^~
src/http_parser.c:412:39: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ~~~~~~~~~^~
src/http_parser.c:410:36: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                             ~~~~~~^~
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:2130:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_HOST_CHAR(ch)) {
                       ^
src/http_parser.c:426:42: note: expanded from macro 'IS_HOST_CHAR'
#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')
                             ~~~~~~~~~~~~^~
src/http_parser.c:412:39: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ~~~~~~~~~^~
src/http_parser.c:410:36: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                             ~~~~~~^~
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:2137:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_HOST_CHAR(ch)) {
                       ^
src/http_parser.c:426:42: note: expanded from macro 'IS_HOST_CHAR'
#define IS_HOST_CHAR(c)     (IS_ALPHANUM(c) || (c) == '.' || (c) == '-')
                             ~~~~~~~~~~~~^~
src/http_parser.c:412:39: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ~~~~~~~~~^~
src/http_parser.c:410:36: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                             ~~~~~~^~
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:2156:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_HEX(ch) || ch == ':' || ch == '.') {
                 ^
src/http_parser.c:413:50: note: expanded from macro 'IS_HEX'
#define IS_HEX(c)           (IS_NUM(c) || (LOWER(c) >= 'a' && LOWER(c) <= 'f'))
                                           ~~~~~~^~
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:2173:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if (IS_ALPHANUM(ch) || ch == '%' || ch == '.' || ch == '-' || ch == '_' ||
                      ^
src/http_parser.c:412:39: note: expanded from macro 'IS_ALPHANUM'
#define IS_ALPHANUM(c)      (IS_ALPHA(c) || IS_NUM(c))
                             ~~~~~~~~~^~
src/http_parser.c:410:36: note: expanded from macro 'IS_ALPHA'
#define IS_ALPHA(c)         (LOWER(c) >= 'a' && LOWER(c) <= 'z')
                             ~~~~~~^~
src/http_parser.c:409:45: note: expanded from macro 'LOWER'
#define LOWER(c)            (unsigned char)(c | 0x20)
                                            ^ ~
src/http_parser.c:2194:59: warning: parameter name 'u' is too short, expected at least 3 characters [readability-identifier-length]
http_parse_host(const char * buf, struct http_parser_url *u, int found_at) {
                                                          ^
src/http_parser.c:2197:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  const char *p;
  ^
src/http_parser.c:2195:24: warning: variable 's' is not initialized [cppcoreguidelines-init-variables]
  enum http_host_state s;
                       ^
src/http_parser.c:2195:24: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
src/http_parser.c:2197:15: warning: variable 'p' is not initialized [cppcoreguidelines-init-variables]
  const char *p;
              ^
                = NULL
src/http_parser.c:2197:15: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
src/http_parser.c:2200:25: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  assert(u->field_set & (1 << UF_HOST));
                        ^
/usr/include/assert.h:119:20: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                   ^~~~
src/http_parser.c:2200:26: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  assert(u->field_set & (1 << UF_HOST));
                         ^
/usr/include/assert.h:119:20: note: expanded from macro 'assert'
  ((void) sizeof ((expr) ? 1 : 0), __extension__ ({                     \
                   ^~~~
src/http_parser.c:2206:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  for (p = buf + u->field_data[UF_HOST].off; p < buf + buflen; p++) {
  ^
src/http_parser.c:2206:46: warning: backward branch (for loop) is ID-dependent due to variable reference to 'p' and may cause performance degradation [altera-id-dependent-backward-branch]
  for (p = buf + u->field_data[UF_HOST].off; p < buf + buflen; p++) {
                                             ^
src/http_parser.c:2237:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          u->field_set |= (1 << UF_PORT);
                       ~~ ^~~~~~~~~~~~~~
src/http_parser.c:2237:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          u->field_set |= (1 << UF_PORT);
                           ^ ~~
src/http_parser.c:2246:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          u->field_set |= (1 << UF_USERINFO);
                       ~~ ^~~~~~~~~~~~~~~~~~
src/http_parser.c:2246:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
          u->field_set |= (1 << UF_USERINFO);
                           ^ ~~
src/http_parser.c:2276:46: warning: parameter name 'u' is too short, expected at least 3 characters [readability-identifier-length]
http_parser_url_init(struct http_parser_url *u) {
                                             ^
src/http_parser.c:2277:3: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  memset(u, 0, sizeof(*u));
  ^~~~~~
src/http_parser.c:2277:3: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
  memset(u, 0, sizeof(*u));
  ^~~~~~
src/http_parser.c:2281:40: warning: 2 adjacent parameters of 'http_parser_parse_url' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
http_parser_parse_url(const char *buf, size_t buflen, int is_connect,
                                       ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:2281:47: note: the first parameter in the range is 'buflen'
http_parser_parse_url(const char *buf, size_t buflen, int is_connect,
                                              ^~~~~~
src/http_parser.c:2281:59: note: the last parameter in the range is 'is_connect'
http_parser_parse_url(const char *buf, size_t buflen, int is_connect,
                                                          ^~~~~~~~~~
src/http_parser.c:2281:40: note: 
http_parser_parse_url(const char *buf, size_t buflen, int is_connect,
                                       ^
src/http_parser.c:2281:55: note: 'size_t' and 'int' may be implicitly converted: 'size_t' (as 'unsigned long') -> 'int', 'int' -> 'size_t' (as 'unsigned long')
http_parser_parse_url(const char *buf, size_t buflen, int is_connect,
                                                      ^
src/http_parser.c:2282:47: warning: parameter name 'u' is too short, expected at least 3 characters [readability-identifier-length]
                      struct http_parser_url *u)
                                              ^
src/http_parser.c:2284:14: warning: variable 's' is not initialized [cppcoreguidelines-init-variables]
  enum state s;
             ^
src/http_parser.c:2284:14: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
src/http_parser.c:2285:15: warning: variable 'p' is not initialized [cppcoreguidelines-init-variables]
  const char *p;
              ^
                = NULL
src/http_parser.c:2285:15: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
src/http_parser.c:2286:3: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
  enum http_parser_url_fields uf, old_uf;
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/http_parser.c:2285:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  const char *p;
  ^
src/http_parser.c:2286:31: warning: variable 'uf' is not initialized [cppcoreguidelines-init-variables]
  enum http_parser_url_fields uf, old_uf;
                              ^
src/http_parser.c:2286:31: warning: variable name 'uf' is too short, expected at least 3 characters [readability-identifier-length]
src/http_parser.c:2286:35: warning: variable 'old_uf' is not initialized [cppcoreguidelines-init-variables]
  enum http_parser_url_fields uf, old_uf;
                                  ^
src/http_parser.c:2293:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  for (p = buf; p < buf + buflen; p++) {
  ^
src/http_parser.c:2293:17: warning: backward branch (for loop) is ID-dependent due to variable reference to 'p' and may cause performance degradation [altera-id-dependent-backward-branch]
  for (p = buf; p < buf + buflen; p++) {
                ^
src/http_parser.c:2347:21: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    u->field_set |= (1 << uf);
                 ~~ ^~~~~~~~~
src/http_parser.c:2347:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    u->field_set |= (1 << uf);
                     ^ ~~
src/http_parser.c:2353:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((u->field_set & (1 << UF_SCHEMA)) &&
                    ~ ^~~~~~~~~~~~~~~~
src/http_parser.c:2353:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((u->field_set & (1 << UF_SCHEMA)) &&
                       ^ ~~
src/http_parser.c:2354:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      (u->field_set & (1 << UF_HOST)) == 0) {
                    ~ ^~~~~~~~~~~~~~
src/http_parser.c:2354:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      (u->field_set & (1 << UF_HOST)) == 0) {
                       ^ ~~
src/http_parser.c:2358:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (u->field_set & (1 << UF_HOST)) {
                   ~ ^~~~~~~~~~~~~~
src/http_parser.c:2358:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (u->field_set & (1 << UF_HOST)) {
                      ^ ~~
src/http_parser.c:2365:38: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {
                                     ^~~~~~~~~~~~~~~
src/http_parser.c:2365:39: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {
                                      ^ ~~
src/http_parser.c:2365:54: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (is_connect && u->field_set != ((1 << UF_HOST)|(1 << UF_PORT))) {
                                                     ^ ~~
src/http_parser.c:2369:22: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (u->field_set & (1 << UF_PORT)) {
                   ~ ^~~~~~~~~~~~~~
src/http_parser.c:2369:23: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (u->field_set & (1 << UF_PORT)) {
                      ^ ~~
src/http_parser.c:2371:19: warning: variable name 'v' is too short, expected at least 3 characters [readability-identifier-length]
    unsigned long v = strtoul(buf + u->field_data[UF_PORT].off, NULL, 10);
                  ^
src/http_parser.c:2371:71: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    unsigned long v = strtoul(buf + u->field_data[UF_PORT].off, NULL, 10);
                                                                      ^
src/http_parser.c:2374:13: warning: 0xffff is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if (v > 0xffff) {
            ^
src/http_parser.c:2392:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    SET_ERRNO((paused) ? HPE_PAUSED : HPE_OK);
    ^
src/http_parser.c:51:70: note: expanded from macro 'SET_ERRNO'
#define SET_ERRNO(e)                                                 \
                                                                     ^
src/http_parser.c:2405:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  return HTTP_PARSER_VERSION_MAJOR * 0x10000 |
         ^
src/http_parser.h:28:35: note: expanded from macro 'HTTP_PARSER_VERSION_MAJOR'
#define HTTP_PARSER_VERSION_MAJOR 2
                                  ^
src/http_parser.c:2405:38: warning: 0x10000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  return HTTP_PARSER_VERSION_MAJOR * 0x10000 |
                                     ^
src/http_parser.c:2406:38: warning: 0x00100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
         HTTP_PARSER_VERSION_MINOR * 0x00100 |
                                     ^
src/net.c:3:1: warning: system include errno.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <errno.h>
^~~~~~~~~~~~~~~~~~
src/net.c:4:1: warning: #includes are not sorted properly [llvm-include-order]
#include <unistd.h>
^
note: this fix will not be applied because it overlaps with another fix
src/net.c:4:1: warning: system include unistd.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <unistd.h>
^~~~~~~~~~~~~~~~~~~
src/net.c:5:1: warning: system include sys/ioctl.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <sys/ioctl.h>
^~~~~~~~~~~~~~~~~~~~~~
src/net.c:9:33: warning: parameter 'c' is unused [misc-unused-parameters]
status sock_connect(connection *c, char *host) {
                                ^
src/net.c:9:33: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
src/net.c:9:42: warning: parameter 'host' is unused [misc-unused-parameters]
status sock_connect(connection *c, char *host) {
                                         ^
src/net.c:13:31: warning: parameter 'c' is unused [misc-unused-parameters]
status sock_close(connection *c) {
                              ^
src/net.c:13:31: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
src/net.c:17:30: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
status sock_read(connection *c, size_t *n) {
                             ^
src/net.c:18:13: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
    ssize_t r = read(c->fd, c->buf, sizeof(c->buf));
            ^
src/net.c:23:31: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
status sock_write(connection *c, char *buf, size_t len, size_t *n) {
                              ^
src/net.c:24:13: warning: variable 'r' is not initialized [cppcoreguidelines-init-variables]
    ssize_t r;
            ^
              = 0
src/net.c:24:13: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
src/net.c:25:12: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((r = write(c->fd, buf, len)) == -1) {
         ~~^~~~~~~~~~~~~~~~~~~~~~~~
src/net.c:25:12: note: if it should be an assignment, move it out of the 'if' condition
src/net.c:25:12: note: if it is meant to be an equality check, change '=' to '=='
src/net.c:35:34: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
size_t sock_readable(connection *c) {
                                 ^
src/net.c:36:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int n, rc;
    ^~~~~~~~~~
src/net.c:36:9: warning: variable 'n' is not initialized [cppcoreguidelines-init-variables]
    int n, rc;
        ^
note: this fix will not be applied because it overlaps with another fix
src/net.c:36:9: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
src/net.c:36:12: warning: variable 'rc' is not initialized [cppcoreguidelines-init-variables]
    int n, rc;
           ^
note: this fix will not be applied because it overlaps with another fix
src/net.c:36:12: warning: variable name 'rc' is too short, expected at least 3 characters [readability-identifier-length]
src/script.c:3:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdlib.h>
^
note: this fix will not be applied because it overlaps with another fix
src/script.c:3:1: warning: system include stdlib.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdlib.h>
^~~~~~~~~~~~~~~~~~~
src/script.c:4:1: warning: system include string.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <string.h>
^~~~~~~~~~~~~~~~~~~
src/script.c:9:9: warning: accessing fields in struct 'table_field' is inefficient due to padding; only needs 20 bytes but is using 24 bytes [altera-struct-pack-align]
typedef struct {
        ^
src/script.c:9:9: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'table_field'
src/script.c:9:9: warning: accessing fields in struct 'table_field' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 32 bytes [altera-struct-pack-align]
typedef struct {
        ^
src/script.c:9:9: note: use "__attribute__((aligned(32)))" to align struct 'table_field' to 32 bytes
src/script.c:15:44: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int script_addr_tostring(lua_State *);
                                           ^
                                            /*L*/
src/script.c:16:38: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int script_addr_gc(lua_State *);
                                     ^
                                      /*L*/
src/script.c:17:41: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int script_stats_call(lua_State *);
                                        ^
                                         /*L*/
src/script.c:18:40: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int script_stats_len(lua_State *);
                                       ^
                                        /*L*/
src/script.c:19:42: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int script_stats_index(lua_State *);
                                         ^
                                          /*L*/
src/script.c:20:43: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int script_thread_index(lua_State *);
                                          ^
                                           /*L*/
src/script.c:21:46: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int script_thread_newindex(lua_State *);
                                             ^
                                              /*L*/
src/script.c:22:41: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int script_wrk_lookup(lua_State *);
                                        ^
                                         /*L*/
src/script.c:23:42: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int script_wrk_connect(lua_State *);
                                         ^
                                          /*L*/
src/script.c:25:35: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static void set_fields(lua_State *, int, const table_field *);
                                  ^
                                   /*L*/  /*index*/          /*fields*/
src/script.c:26:34: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static void set_field(lua_State *, int, char *, int);
                                 ^
                                  /*L*/  /*index*/  /*field*/  /*type*/
src/script.c:27:37: warning: all parameters should be named in a function [hicpp-named-parameter,readability-named-parameter]
static int push_url_part(lua_State *, char *, struct http_parser_url *, enum http_parser_url_fields);
                                    ^
                                     /*L*/   /*url*/                   /*parts*/                    /*field*/
src/script.c:48:26: warning: 2 adjacent parameters of 'script_create' of similar type ('char *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
lua_State *script_create(char *file, char *url, char **headers) {
                         ^~~~~~~~~~~~~~~~~~~~~
src/script.c:48:32: note: the first parameter in the range is 'file'
lua_State *script_create(char *file, char *url, char **headers) {
                               ^~~~
src/script.c:48:44: note: the last parameter in the range is 'url'
lua_State *script_create(char *file, char *url, char **headers) {
                                           ^~~
src/script.c:83:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (char **h = headers; *h; h++) {
         ^
src/script.c:49:16: warning: variable name 'L' is too short, expected at least 3 characters [readability-identifier-length]
    lua_State *L = luaL_newstate();
               ^
src/script.c:64:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (parts.field_set & (1 << UF_PATH)) {
                        ~ ^~~~~~~~~~~~~~
src/script.c:64:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (parts.field_set & (1 << UF_PATH)) {
                           ^ ~~
src/script.c:83:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (char **h = headers; *h; h++) {
    ^
src/script.c:83:17: warning: loop variable name 'h' is too short, expected at least 2 characters [readability-identifier-length]
    for (char **h = headers; *h; h++) {
                ^
src/script.c:83:30: warning: backward branch (for loop) is ID-dependent due to variable reference to 'h' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (char **h = headers; *h; h++) {
                             ^
src/script.c:84:15: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
        char *p = strchr(*h, ':');
              ^
src/script.c:88:29: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            lua_settable(L, 5);
                            ^
src/script.c:95:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "%s: %s\n", file, cause);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/script.c:95:9: note: cast the expression to void to silence this warning
src/script.c:101:32: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
bool script_resolve(lua_State *L, char *host, char *service) {
                               ^
src/script.c:115:36: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
void script_push_thread(lua_State *L, thread *t) {
                                   ^
src/script.c:115:47: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
void script_push_thread(lua_State *L, thread *t) {
                                              ^
src/script.c:122:29: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
void script_init(lua_State *L, thread *t, int argc, char **argv) {
                            ^
src/script.c:122:40: warning: parameter name 't' is too short, expected at least 3 characters [readability-identifier-length]
void script_init(lua_State *L, thread *t, int argc, char **argv) {
                                       ^
src/script.c:136:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (int i = 0; i < argc; i++) {
    ^
src/script.c:144:34: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
uint64_t script_delay(lua_State *L) {
                                 ^
src/script.c:147:22: warning: narrowing conversion from 'lua_Number' (aka 'double') to 'uint64_t' (aka 'unsigned long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    uint64_t delay = lua_tonumber(L, -1);
                     ^
src/script.c:152:32: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
void script_request(lua_State *L, char **buf, size_t *len) {
                               ^
src/script.c:163:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(*buf, str, *len);
    ^~~~~~
src/script.c:163:5: note: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11
    memcpy(*buf, str, *len);
    ^~~~~~
src/script.c:167:33: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
void script_response(lua_State *L, int status, buffer *headers, buffer *body) {
                                ^
src/script.c:172:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (char *c = headers->buffer; c < headers->cursor; ) {
         ^
src/script.c:172:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (char *c = headers->buffer; c < headers->cursor; ) {
    ^
src/script.c:172:16: warning: loop variable name 'c' is too short, expected at least 2 characters [readability-identifier-length]
    for (char *c = headers->buffer; c < headers->cursor; ) {
               ^
src/script.c:172:37: warning: backward branch (for loop) is ID-dependent due to variable reference to 'c' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (char *c = headers->buffer; c < headers->cursor; ) {
                                    ^
src/script.c:185:36: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
bool script_is_function(lua_State *L, char *name) {
                                   ^
src/script.c:192:34: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
bool script_is_static(lua_State *L) {
                                 ^
src/script.c:196:38: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
bool script_want_response(lua_State *L) {
                                     ^
src/script.c:200:34: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
bool script_has_delay(lua_State *L) {
                                 ^
src/script.c:204:33: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
bool script_has_done(lua_State *L) {
                                ^
src/script.c:208:36: warning: parameter 'L' is unused [misc-unused-parameters]
void script_header_done(lua_State *L, luaL_Buffer *buffer) {
                                   ^
src/script.c:208:36: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
src/script.c:212:32: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
void script_summary(lua_State *L, uint64_t duration, uint64_t requests, uint64_t bytes) {
                               ^
src/script.c:223:31: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
void script_errors(lua_State *L, errors *errors) {
                              ^
src/script.c:224:14: warning: variable name 'e' is too short, expected at least 3 characters [readability-identifier-length]
    uint64_t e[] = {
             ^
src/script.c:244:35: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
void script_push_stats(lua_State *L, stats *s) {
                                  ^
src/script.c:244:45: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
void script_push_stats(lua_State *L, stats *s) {
                                            ^
src/script.c:251:29: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
void script_done(lua_State *L, stats *latency, stats *requests) {
                            ^
src/script.c:268:41: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
size_t script_verify_request(lua_State *L) {
                                        ^
src/script.c:274:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    size_t len, count = 0;
    ^~~~~~~~~~~~~~~~~~~~~~
src/script.c:274:12: warning: variable 'len' is not initialized [cppcoreguidelines-init-variables]
    size_t len, count = 0;
           ^
note: this fix will not be applied because it overlaps with another fix
src/script.c:286:9: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
        int line = 1, column = 1;
        ^~~~~~~~~~~~~~~~~~~~~~~~~
src/script.c:288:14: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
        for (char *c = request; c < request + parsed; c++) {
             ^
src/script.c:288:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (char *c = request; c < request + parsed; c++) {
        ^
src/script.c:288:20: warning: loop variable name 'c' is too short, expected at least 2 characters [readability-identifier-length]
        for (char *c = request; c < request + parsed; c++) {
                   ^
src/script.c:288:33: warning: backward branch (for loop) is ID-dependent due to variable reference to 'c' and may cause performance degradation [altera-id-dependent-backward-branch]
        for (char *c = request; c < request + parsed; c++) {
                                ^
src/script.c:296:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "%s at %d:%d\n", msg, line, column);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/script.c:296:9: note: cast the expression to void to silence this warning
src/script.c:297:9: warning: function is not thread safe [concurrency-mt-unsafe]
        exit(1);
        ^
src/script.c:303:46: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static struct addrinfo *checkaddr(lua_State *L) {
                                             ^
src/script.c:312:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(dst->ai_addr, src->ai_addr, src->ai_addrlen);
    ^~~~~~
src/script.c:312:5: note: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11
    memcpy(dst->ai_addr, src->ai_addr, src->ai_addrlen);
    ^~~~~~
src/script.c:315:47: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
struct addrinfo *script_addr_clone(lua_State *L, struct addrinfo *addr) {
                                              ^
src/script.c:323:44: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_addr_tostring(lua_State *L) {
                                           ^
src/script.c:329:9: warning: variable name 'rc' is too short, expected at least 3 characters [readability-identifier-length]
    int rc = getnameinfo(addr->ai_addr, addr->ai_addrlen, host, NI_MAXHOST, service, NI_MAXSERV, flags);
        ^
src/script.c:339:38: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_addr_gc(lua_State *L) {
                                     ^
src/script.c:345:37: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static stats *checkstats(lua_State *L) {
                                    ^
src/script.c:346:13: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
    stats **s = luaL_checkudata(L, 1, "wrk.stats");
            ^
src/script.c:351:47: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_stats_percentile(lua_State *L) {
                                              ^
src/script.c:352:12: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
    stats *s = checkstats(L);
           ^
src/script.c:353:16: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
    lua_Number p = luaL_checknumber(L, 2);
               ^
src/script.c:354:23: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'lua_Number' (aka 'double') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    lua_pushnumber(L, stats_percentile(s, p));
                      ^
src/script.c:358:41: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_stats_call(lua_State *L) {
                                        ^
src/script.c:359:12: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
    stats *s = checkstats(L);
           ^
src/script.c:360:22: warning: narrowing conversion from 'lua_Number' (aka 'double') to 'uint64_t' (aka 'unsigned long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    uint64_t index = lua_tonumber(L, 2);
                     ^
src/script.c:361:14: warning: variable 'count' is not initialized [cppcoreguidelines-init-variables]
    uint64_t count;
             ^
                   = 0
src/script.c:362:23: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'lua_Number' (aka 'double') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    lua_pushnumber(L, stats_value_at(s, index - 1, &count));
                      ^
src/script.c:363:23: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'lua_Number' (aka 'double') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    lua_pushnumber(L, count);
                      ^
src/script.c:367:42: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_stats_index(lua_State *L) {
                                         ^
src/script.c:368:12: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
    stats *s = checkstats(L);
           ^
src/script.c:370:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!strcmp("min",   method)) lua_pushnumber(L, s->min);
                                 ^
                                  {
src/script.c:370:53: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'lua_Number' (aka 'double') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    if (!strcmp("min",   method)) lua_pushnumber(L, s->min);
                                                    ^
src/script.c:371:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!strcmp("max",   method)) lua_pushnumber(L, s->max);
                                 ^
                                  {
src/script.c:371:53: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'lua_Number' (aka 'double') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    if (!strcmp("max",   method)) lua_pushnumber(L, s->max);
                                                    ^
src/script.c:372:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!strcmp("mean",  method)) lua_pushnumber(L, stats_mean(s));
                                 ^
                                  {
src/script.c:372:53: warning: narrowing conversion from 'long double' to 'lua_Number' (aka 'double') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    if (!strcmp("mean",  method)) lua_pushnumber(L, stats_mean(s));
                                                    ^
src/script.c:373:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!strcmp("stdev", method)) lua_pushnumber(L, stats_stdev(s, stats_mean(s)));
                                 ^
                                  {
src/script.c:373:53: warning: narrowing conversion from 'long double' to 'lua_Number' (aka 'double') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    if (!strcmp("stdev", method)) lua_pushnumber(L, stats_stdev(s, stats_mean(s)));
                                                    ^
src/script.c:380:40: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_stats_len(lua_State *L) {
                                       ^
src/script.c:381:12: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
    stats *s = checkstats(L);
           ^
src/script.c:382:24: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to signed type 'lua_Integer' (aka 'long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    lua_pushinteger(L, stats_popcount(s));
                       ^
src/script.c:386:39: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static thread *checkthread(lua_State *L) {
                                      ^
src/script.c:387:14: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
    thread **t = luaL_checkudata(L, 1, "wrk.thread");
             ^
src/script.c:392:41: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_thread_get(lua_State *L) {
                                        ^
src/script.c:393:13: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
    thread *t = checkthread(L);
            ^
src/script.c:401:41: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_thread_set(lua_State *L) {
                                        ^
src/script.c:402:13: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
    thread *t = checkthread(L);
            ^
src/script.c:409:42: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_thread_stop(lua_State *L) {
                                         ^
src/script.c:410:13: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
    thread *t = checkthread(L);
            ^
src/script.c:415:43: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_thread_index(lua_State *L) {
                                          ^
src/script.c:416:13: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
    thread *t = checkthread(L);
            ^
src/script.c:418:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!strcmp("get",  key)) lua_pushcfunction(L, script_thread_get);
                             ^
                              {
src/script.c:419:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!strcmp("set",  key)) lua_pushcfunction(L, script_thread_set);
                             ^
                              {
src/script.c:420:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!strcmp("stop", key)) lua_pushcfunction(L, script_thread_stop);
                             ^
                              {
src/script.c:421:30: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!strcmp("addr", key)) script_addr_clone(L, t->addr);
                             ^
                              {
src/script.c:425:46: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_thread_newindex(lua_State *L) {
                                             ^
src/script.c:426:13: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
    thread *t = checkthread(L);
            ^
src/script.c:430:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (t->addr) zfree(t->addr->ai_addr);
                    ^
                     {
src/script.c:439:41: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_wrk_lookup(lua_State *L) {
                                        ^
src/script.c:440:22: warning: variable 'addrs' is not initialized [cppcoreguidelines-init-variables]
    struct addrinfo *addrs;
                     ^
                           = NULL
src/script.c:445:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int rc, index = 1;
    ^~~~~~~~~~~~~~~~~~
src/script.c:457:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (struct addrinfo *addr = addrs; addr != NULL; addr = addr->ai_next) {
         ^
src/script.c:445:9: warning: variable 'rc' is not initialized [cppcoreguidelines-init-variables]
    int rc, index = 1;
        ^
note: this fix will not be applied because it overlaps with another fix
src/script.c:445:9: warning: variable name 'rc' is too short, expected at least 3 characters [readability-identifier-length]
src/script.c:450:13: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((rc = getaddrinfo(host, service, &hints, &addrs)) != 0) {
         ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/script.c:450:13: note: if it should be an assignment, move it out of the 'if' condition
src/script.c:450:13: note: if it is meant to be an equality check, change '=' to '=='
src/script.c:452:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "unable to resolve %s:%s %s\n", host, service, msg);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/script.c:452:9: note: cast the expression to void to silence this warning
src/script.c:453:9: warning: function is not thread safe [concurrency-mt-unsafe]
        exit(1);
        ^
src/script.c:457:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (struct addrinfo *addr = addrs; addr != NULL; addr = addr->ai_next) {
    ^
src/script.c:457:41: warning: backward branch (for loop) is ID-dependent due to variable reference to 'addr' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (struct addrinfo *addr = addrs; addr != NULL; addr = addr->ai_next) {
                                        ^
src/script.c:466:42: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int script_wrk_connect(lua_State *L) {
                                         ^
src/script.c:468:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int fd, connected = 0;
    ^~~~~~~~~~~~~~~~~~~~~~
src/script.c:468:9: warning: variable 'fd' is not initialized [cppcoreguidelines-init-variables]
    int fd, connected = 0;
        ^
note: this fix will not be applied because it overlaps with another fix
src/script.c:468:9: warning: variable name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
src/script.c:469:13: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((fd = socket(addr->ai_family, addr->ai_socktype, addr->ai_protocol)) != -1) {
         ~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/script.c:469:13: note: if it should be an assignment, move it out of the 'if' condition
src/script.c:469:13: note: if it is meant to be an equality check, change '=' to '=='
src/script.c:477:6: warning: function 'script_copy_value' is within a recursive call chain [misc-no-recursion]
void script_copy_value(lua_State *src, lua_State *dst, int index) {
     ^
src/script.c:477:6: note: example recursive call chain, starting from function 'script_copy_value'
src/script.c:495:17: note: Frame #1: function 'script_copy_value' calls function 'script_copy_value' here:
                script_copy_value(src, dst, -2);
                ^
src/script.c:495:17: note: ... which was the starting point of the recursive call chain; there may be other cycles
src/script.c:494:13: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
            while (lua_next(src, index - 1)) {
            ^
src/script.c:509:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (!(parts->field_set & (1 << UF_SCHEMA))) return 0;
                               ~ ^~~~~~~~~~~~~~~~
src/script.c:509:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (!(parts->field_set & (1 << UF_SCHEMA))) return 0;
                                  ^ ~~
src/script.c:509:52: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (!(parts->field_set & (1 << UF_SCHEMA))) return 0;
                                                   ^
                                                    {
src/script.c:510:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (!(parts->field_set & (1 << UF_HOST)))   return 0;
                               ~ ^~~~~~~~~~~~~~
src/script.c:510:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        if (!(parts->field_set & (1 << UF_HOST)))   return 0;
                                  ^ ~~
src/script.c:510:50: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (!(parts->field_set & (1 << UF_HOST)))   return 0;
                                                 ^
                                                  {
src/script.c:516:37: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static int push_url_part(lua_State *L, char *url, struct http_parser_url *parts, enum http_parser_url_fields field) {
                                    ^
src/script.c:517:35: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    int type = parts->field_set & (1 << field) ? LUA_TSTRING : LUA_TNIL;
                                ~ ^~~~~~~~~~~~
src/script.c:517:36: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    int type = parts->field_set & (1 << field) ? LUA_TSTRING : LUA_TNIL;
                                   ^ ~~
src/script.c:518:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    uint16_t off, len;
    ^~~~~~~~~~~~~~~~~~
src/script.c:518:14: warning: variable 'off' is not initialized [cppcoreguidelines-init-variables]
    uint16_t off, len;
             ^
note: this fix will not be applied because it overlaps with another fix
src/script.c:518:19: warning: variable 'len' is not initialized [cppcoreguidelines-init-variables]
    uint16_t off, len;
                  ^
note: this fix will not be applied because it overlaps with another fix
src/script.c:519:5: warning: potential uncovered code path; add a default label [hicpp-multiway-paths-covered]
    switch (type) {
    ^
src/script.c:531:34: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static void set_field(lua_State *L, int index, char *field, int type) {
                                 ^
src/script.c:536:35: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
static void set_fields(lua_State *L, int index, const table_field *fields) {
                                  ^
src/script.c:537:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (int i = 0; fields[i].name; i++) {
    ^
src/script.c:538:21: warning: variable name 'f' is too short, expected at least 3 characters [readability-identifier-length]
        table_field f = fields[i];
                    ^
src/script.c:557:28: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
void buffer_append(buffer *b, const char *data, size_t len) {
                           ^
src/script.c:558:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    size_t used = b->cursor - b->buffer;
    ^
src/script.c:559:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    while (used + len + 1 >= b->length) {
    ^
src/script.c:559:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'used' and may cause performance degradation [altera-id-dependent-backward-branch]
    while (used + len + 1 >= b->length) {
           ^
src/script.c:560:22: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        b->length += 1024;
                     ^
src/script.c:561:22: warning: 'b->buffer' may be set to null if 'realloc' fails, which may result in a leak of the original buffer [bugprone-suspicious-realloc-usage]
        b->buffer  = realloc(b->buffer, b->length);
        ~~~~~~~~~    ^       ~~~~~~~~~
src/script.c:564:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(b->cursor, data, len);
    ^~~~~~
src/script.c:564:5: note: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11
    memcpy(b->cursor, data, len);
    ^~~~~~
src/script.c:568:27: warning: parameter name 'b' is too short, expected at least 3 characters [readability-identifier-length]
void buffer_reset(buffer *b) {
                          ^
src/script.c:572:37: warning: parameter name 'L' is too short, expected at least 3 characters [readability-identifier-length]
char *buffer_pushlstring(lua_State *L, char *start) {
                                    ^
src/ssl.c:3:1: warning: system include pthread.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <pthread.h>
^~~~~~~~~~~~~~~~~~~~
src/ssl.c:5:1: warning: #includes are not sorted properly [llvm-include-order]
#include <openssl/evp.h>
^
note: this fix will not be applied because it overlaps with another fix
src/ssl.c:5:1: warning: system include openssl/evp.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <openssl/evp.h>
^~~~~~~~~~~~~~~~~~~~~~~~
src/ssl.c:6:1: warning: system include openssl/err.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <openssl/err.h>
^~~~~~~~~~~~~~~~~~~~~~~~
src/ssl.c:7:1: warning: system include openssl/ssl.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <openssl/ssl.h>
^~~~~~~~~~~~~~~~~~~~~~~~
src/ssl.c:18:14: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((ctx = SSL_CTX_new(SSLv23_client_method()))) {
         ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ssl.c:18:14: note: if it should be an assignment, move it out of the 'if' condition
src/ssl.c:18:14: note: if it is meant to be an equality check, change '=' to '=='
src/ssl.c:28:32: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
status ssl_connect(connection *c, char *host) {
                               ^
src/ssl.c:29:9: warning: variable 'r' is not initialized [cppcoreguidelines-init-variables]
    int r;
        ^
          = 0
src/ssl.c:29:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
src/ssl.c:32:12: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((r = SSL_connect(c->ssl)) != 1) {
         ~~^~~~~~~~~~~~~~~~~~~~~
src/ssl.c:32:12: note: if it should be an assignment, move it out of the 'if' condition
src/ssl.c:32:12: note: if it is meant to be an equality check, change '=' to '=='
src/ssl.c:34:13: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]
            case SSL_ERROR_WANT_READ:  return RETRY;
            ^
src/ssl.c:35:52: note: last of these clones ends here
            case SSL_ERROR_WANT_WRITE: return RETRY;
                                                   ^
src/ssl.c:42:30: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
status ssl_close(connection *c) {
                             ^
src/ssl.c:48:29: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
status ssl_read(connection *c, size_t *n) {
                            ^
src/ssl.c:49:9: warning: variable 'r' is not initialized [cppcoreguidelines-init-variables]
    int r;
        ^
          = 0
src/ssl.c:49:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
src/ssl.c:50:12: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((r = SSL_read(c->ssl, c->buf, sizeof(c->buf))) <= 0) {
         ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ssl.c:50:12: note: if it should be an assignment, move it out of the 'if' condition
src/ssl.c:50:12: note: if it is meant to be an equality check, change '=' to '=='
src/ssl.c:52:13: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]
            case SSL_ERROR_WANT_READ:  return RETRY;
            ^
src/ssl.c:53:52: note: last of these clones ends here
            case SSL_ERROR_WANT_WRITE: return RETRY;
                                                   ^
src/ssl.c:61:30: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
status ssl_write(connection *c, char *buf, size_t len, size_t *n) {
                             ^
src/ssl.c:62:9: warning: variable 'r' is not initialized [cppcoreguidelines-init-variables]
    int r;
        ^
          = 0
src/ssl.c:62:9: warning: variable name 'r' is too short, expected at least 3 characters [readability-identifier-length]
src/ssl.c:63:12: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((r = SSL_write(c->ssl, buf, len)) <= 0) {
         ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/ssl.c:63:12: note: if it should be an assignment, move it out of the 'if' condition
src/ssl.c:63:12: note: if it is meant to be an equality check, change '=' to '=='
src/ssl.c:63:37: warning: narrowing conversion from 'size_t' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    if ((r = SSL_write(c->ssl, buf, len)) <= 0) {
                                    ^
src/ssl.c:65:13: warning: switch has 2 consecutive identical branches [bugprone-branch-clone]
            case SSL_ERROR_WANT_READ:  return RETRY;
            ^
src/ssl.c:66:52: note: last of these clones ends here
            case SSL_ERROR_WANT_WRITE: return RETRY;
                                                   ^
src/ssl.c:74:33: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
size_t ssl_readable(connection *c) {
                                ^
src/stats.c:4:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdlib.h>
^
note: this fix will not be applied because it overlaps with another fix
src/stats.c:4:1: warning: system include stdlib.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdlib.h>
^~~~~~~~~~~~~~~~~~~
src/stats.c:5:1: warning: system include math.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <math.h>
^~~~~~~~~~~~~~~~~
src/stats.c:12:12: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
    stats *s = zcalloc(sizeof(stats) + sizeof(uint64_t) * limit);
           ^
src/stats.c:23:27: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (n >= stats->limit) return 0;
                          ^
                           {
src/stats.c:28:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    while (n < min) min = __sync_val_compare_and_swap(&stats->min, min, n);
    ^
src/stats.c:28:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'min' and may cause performance degradation [altera-id-dependent-backward-branch]
    while (n < min) min = __sync_val_compare_and_swap(&stats->min, min, n);
           ^
src/stats.c:28:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    while (n < min) min = __sync_val_compare_and_swap(&stats->min, min, n);
                   ^
                    {
src/stats.c:26:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    uint64_t min = stats->min;
    ^
src/stats.c:29:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    while (n > max) max = __sync_val_compare_and_swap(&stats->max, max, n);
    ^
src/stats.c:34:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (uint64_t n = expected * 2; n <= stats->max; n++) {
         ^
src/stats.c:29:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'max' and may cause performance degradation [altera-id-dependent-backward-branch]
    while (n > max) max = __sync_val_compare_and_swap(&stats->max, max, n);
           ^
src/stats.c:29:20: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    while (n > max) max = __sync_val_compare_and_swap(&stats->max, max, n);
                   ^
                    {
src/stats.c:27:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    uint64_t max = stats->max;
    ^
src/stats.c:34:19: warning: loop variable name 'n' is too short, expected at least 2 characters [readability-identifier-length]
    for (uint64_t n = expected * 2; n <= stats->max; n++) {
                  ^
src/stats.c:35:9: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
        uint64_t count = stats->data[n];
        ^
src/stats.c:34:37: warning: backward branch (for loop) is ID-dependent due to variable reference to 'n' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (uint64_t n = expected * 2; n <= stats->max; n++) {
                                    ^
src/stats.c:36:17: warning: variable name 'm' is too short, expected at least 3 characters [readability-identifier-length]
        int64_t m = (int64_t) n - expected;
                ^
src/stats.c:37:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while (count && m > expected) {
        ^
src/stats.c:37:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'count' and may cause performance degradation [altera-id-dependent-backward-branch]
        while (count && m > expected) {
               ^
src/stats.c:46:27: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (stats->count == 0) return 0.0;
                          ^
                           {
src/stats.c:49:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
         ^
src/stats.c:49:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
    ^
src/stats.c:49:35: warning: backward branch (for loop) is ID-dependent due to variable reference to 'i' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
                                  ^
src/stats.c:57:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (stats->count < 2) return 0.0;
                         ^
                          {
src/stats.c:58:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
         ^
src/stats.c:58:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
    ^
src/stats.c:71:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
         ^
src/stats.c:58:35: warning: backward branch (for loop) is ID-dependent due to variable reference to 'i' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
                                  ^
src/stats.c:71:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
    ^
src/stats.c:71:35: warning: backward branch (for loop) is ID-dependent due to variable reference to 'i' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
                                  ^
src/stats.c:77:49: warning: 100 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    return (sum / (long double) stats->count) * 100;
                                                ^
src/stats.c:80:53: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
uint64_t stats_percentile(stats *stats, long double p) {
                                                    ^
src/stats.c:83:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
         ^
src/stats.c:81:21: warning: narrowing conversion from 'double' to 'uint64_t' (aka 'unsigned long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    uint64_t rank = round((p / 100.0) * stats->count + 0.5);
                    ^
src/stats.c:81:27: warning: narrowing conversion from 'long double' to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    uint64_t rank = round((p / 100.0) * stats->count + 0.5);
                          ^
src/stats.c:81:56: warning: 0.5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    uint64_t rank = round((p / 100.0) * stats->count + 0.5);
                                                       ^
src/stats.c:83:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
    ^
src/stats.c:83:35: warning: backward branch (for loop) is ID-dependent due to variable reference to 'i' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
                                  ^
src/stats.c:85:27: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (total >= rank) return i;
                          ^
                           {
src/stats.c:92:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
         ^
src/stats.c:92:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
    ^
src/stats.c:92:35: warning: backward branch (for loop) is ID-dependent due to variable reference to 'i' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
                                  ^
src/stats.c:93:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (stats->data[i]) count++;
                           ^
                            {
src/stats.c:100:10: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
         ^
src/stats.c:100:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
    ^
src/stats.c:100:35: warning: backward branch (for loop) is ID-dependent due to variable reference to 'i' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (uint64_t i = stats->min; i <= stats->max; i++) {
                                  ^
src/units.c:3:1: warning: #includes are not sorted properly [llvm-include-order]
#include <stdlib.h>
^
note: this fix will not be applied because it overlaps with another fix
src/units.c:3:1: warning: system include stdlib.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdlib.h>
^~~~~~~~~~~~~~~~~~~
src/units.c:4:1: warning: system include stdio.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdio.h>
^~~~~~~~~~~~~~~~~~
src/units.c:5:1: warning: system include strings.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <strings.h>
^~~~~~~~~~~~~~~~~~~~
src/units.c:17:7: warning: variable 'time_units_us' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
units time_units_us = {
      ^
src/units.c:18:14: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    .scale = 1000,
             ^
src/units.c:23:7: warning: variable 'time_units_s' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
units time_units_s = {
      ^
src/units.c:24:14: warning: 60 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    .scale = 60,
             ^
src/units.c:29:7: warning: variable 'binary_units' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
units binary_units = {
      ^
src/units.c:30:14: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    .scale = 1024,
             ^
src/units.c:35:7: warning: variable 'metric_units' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
units metric_units = {
      ^
src/units.c:36:14: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    .scale = 1000,
             ^
src/units.c:41:49: warning: parameter name 'm' is too short, expected at least 3 characters [readability-identifier-length]
static char *format_units(long double n, units *m, int p) {
                                                ^
src/units.c:41:56: warning: parameter name 'p' is too short, expected at least 3 characters [readability-identifier-length]
static char *format_units(long double n, units *m, int p) {
                                                       ^
src/units.c:42:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    long double amt = n, scale;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~
src/units.c:42:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
src/units.c:42:26: warning: variable 'scale' is not initialized [cppcoreguidelines-init-variables]
    long double amt = n, scale;
                         ^
note: this fix will not be applied because it overlaps with another fix
src/units.c:46:24: warning: 0.85 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    scale = m->scale * 0.85;
                       ^
src/units.c:48:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (int i = 0; m->units[i+1] && amt >= scale; i++) {
    ^
src/units.c:48:21: warning: backward branch (for loop) is ID-dependent due to variable reference to 'amt' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (int i = 0; m->units[i+1] && amt >= scale; i++) {
                    ^
src/units.c:58:29: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
static int scan_units(char *s, uint64_t *n, units *m) {
                            ^
src/units.c:58:52: warning: parameter name 'm' is too short, expected at least 3 characters [readability-identifier-length]
static int scan_units(char *s, uint64_t *n, units *m) {
                                                   ^
src/units.c:59:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    uint64_t base, scale = 1;
    ^~~~~~~~~~~~~~~~~~~~~~~~~
src/units.c:59:14: warning: variable 'base' is not initialized [cppcoreguidelines-init-variables]
    uint64_t base, scale = 1;
             ^
note: this fix will not be applied because it overlaps with another fix
src/units.c:61:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int i, c;
    ^~~~~~~~~
src/units.c:61:9: warning: variable 'i' is not initialized [cppcoreguidelines-init-variables]
    int i, c;
        ^
note: this fix will not be applied because it overlaps with another fix
src/units.c:61:9: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
src/units.c:61:12: warning: variable 'c' is not initialized [cppcoreguidelines-init-variables]
    int i, c;
           ^
note: this fix will not be applied because it overlaps with another fix
src/units.c:61:12: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
src/units.c:63:12: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((c = sscanf(s, "%"SCNu64"%2s", &base, unit)) < 1) return -1;
         ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/units.c:63:12: note: if it should be an assignment, move it out of the 'if' condition
src/units.c:63:12: note: if it is meant to be an equality check, change '=' to '=='
src/units.c:63:14: warning: 'sscanf' used to convert a string to an unsigned integer value, but function will not report conversion errors; consider using 'strtoul' instead [cert-err34-c]
    if ((c = sscanf(s, "%"SCNu64"%2s", &base, unit)) < 1) return -1;
             ^
src/units.c:63:14: warning: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    if ((c = sscanf(s, "%"SCNu64"%2s", &base, unit)) < 1) return -1;
             ^~~~~~
src/units.c:63:14: note: Call to function 'sscanf' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sscanf_s' in case of C11
    if ((c = sscanf(s, "%"SCNu64"%2s", &base, unit)) < 1) return -1;
             ^~~~~~
src/units.c:63:58: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if ((c = sscanf(s, "%"SCNu64"%2s", &base, unit)) < 1) return -1;
                                                         ^
                                                          {
src/units.c:65:19: warning: function 'strncasecmp' is called without explicitly comparing result [bugprone-suspicious-string-compare]
    if (c == 2 && strncasecmp(unit, m->base, 3)) {
                  ^
                                                != 0
src/units.c:66:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        for (i = 0; m->units[i] != NULL; i++) {
        ^
src/units.c:68:52: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
            if (!strncasecmp(unit, m->units[i], 3)) break;
                                                   ^
                                                    {
src/units.c:70:33: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (m->units[i] == NULL) return -1;
                                ^
                                 {
src/units.c:87:14: warning: 1000000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if (n >= 1000000.0) {
             ^
src/units.c:88:14: warning: 1000000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        n /= 1000000.0;
             ^
src/units.c:98:23: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
int scan_metric(char *s, uint64_t *n) {
                      ^
src/units.c:102:21: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
int scan_time(char *s, uint64_t *n) {
                    ^
src/wrk.c:4:1: warning: #includes are not sorted properly [llvm-include-order]
#include "script.h"
^        ~~~~~~~~~~
         "main.h"
src/wrk.c:7:15: warning: accessing fields in struct 'config' is inefficient due to padding; only needs 67 bytes but is using 72 bytes [altera-struct-pack-align]
static struct config {
              ^
src/wrk.c:7:15: note: use "__attribute__((packed))" to reduce the amount of padding applied to struct 'config'
src/wrk.c:7:15: warning: accessing fields in struct 'config' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 128 bytes [altera-struct-pack-align]
static struct config {
              ^
src/wrk.c:7:15: note: use "__attribute__((aligned(128)))" to align struct 'config' to 128 bytes
src/wrk.c:19:3: warning: variable 'cfg' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
} cfg;
  ^
src/wrk.c:21:8: warning: accessing fields in struct 'struct (unnamed at src/wrk.c:21:8)' is inefficient due to poor alignment; currently aligned to 8 bytes, but recommended alignment is 16 bytes [altera-struct-pack-align]
static struct {
       ^
src/wrk.c:21:8: note: use "__attribute__((aligned(16)))" to align struct 'struct (unnamed at src/wrk.c:21:8)' to 16 bytes
src/wrk.c:24:3: warning: variable 'statistics' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
} statistics;
  ^
src/wrk.c:26:20: warning: variable 'sock' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static struct sock sock = {
                   ^
src/wrk.c:34:36: warning: variable 'parser_settings' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static struct http_parser_settings parser_settings = {
                                   ^
src/wrk.c:38:30: warning: variable 'stop' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static volatile sig_atomic_t stop = 0;
                             ^
src/wrk.c:40:25: warning: parameter 'sig' is unused [misc-unused-parameters]
static void handler(int sig) {
                        ^
src/wrk.c:62:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    char *url, **headers = zmalloc(argc * sizeof(char *));
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/wrk.c:62:11: warning: variable 'url' is not initialized [cppcoreguidelines-init-variables]
    char *url, **headers = zmalloc(argc * sizeof(char *));
          ^
note: this fix will not be applied because it overlaps with another fix
src/wrk.c:67:9: warning: function is not thread safe [concurrency-mt-unsafe]
        exit(1);
        ^
src/wrk.c:75:35: warning: 5 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if (!strncmp("https", schema, 5)) {
                                  ^
src/wrk.c:76:22: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
        if ((cfg.ctx = ssl_init()) == NULL) {
             ~~~~~~~~^~~~~~~~~~~~
src/wrk.c:76:22: note: if it should be an assignment, move it out of the 'if' condition
src/wrk.c:76:22: note: if it is meant to be an equality check, change '=' to '=='
src/wrk.c:77:13: warning: the value returned by this function should be used [cert-err33-c]
            fprintf(stderr, "unable to initialize SSL\n");
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/wrk.c:77:13: note: cast the expression to void to silence this warning
src/wrk.c:79:13: warning: function is not thread safe [concurrency-mt-unsafe]
            exit(1);
            ^
src/wrk.c:88:5: warning: the value returned by this function should be used [cert-err33-c]
    signal(SIGPIPE, SIG_IGN);
    ^~~~~~~~~~~~~~~~~~~~~~~~
src/wrk.c:88:5: note: cast the expression to void to silence this warning
src/wrk.c:89:5: warning: the value returned by this function should be used [cert-err33-c]
    signal(SIGINT,  SIG_IGN);
    ^~~~~~~~~~~~~~~~~~~~~~~~
src/wrk.c:89:5: note: cast the expression to void to silence this warning
src/wrk.c:91:53: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    statistics.latency  = stats_alloc(cfg.timeout * 1000);
                                                    ^
src/wrk.c:95:16: warning: variable name 'L' is too short, expected at least 3 characters [readability-identifier-length]
    lua_State *L = script_create(cfg.script, url, headers);
               ^
src/wrk.c:97:21: warning: function is not thread safe [concurrency-mt-unsafe]
        char *msg = strerror(errno);
                    ^
src/wrk.c:98:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "unable to connect to %s:%s %s\n", host, service, msg);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/wrk.c:98:9: note: cast the expression to void to silence this warning
src/wrk.c:99:9: warning: function is not thread safe [concurrency-mt-unsafe]
        exit(1);
        ^
src/wrk.c:104:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (uint64_t i = 0; i < cfg.threads; i++) {
    ^
src/wrk.c:105:17: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
        thread *t      = &threads[i];
                ^
src/wrk.c:106:44: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        t->loop        = aeCreateEventLoop(10 + cfg.connections * 3);
                                           ^
src/wrk.c:106:44: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
src/wrk.c:124:25: warning: function is not thread safe [concurrency-mt-unsafe]
            char *msg = strerror(errno);
                        ^
src/wrk.c:125:13: warning: the value returned by this function should be used [cert-err33-c]
            fprintf(stderr, "unable to create thread %"PRIu64": %s\n", i, msg);
            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/wrk.c:125:13: note: cast the expression to void to silence this warning
src/wrk.c:126:13: warning: function is not thread safe [concurrency-mt-unsafe]
            exit(2);
            ^
src/wrk.c:130:22: warning: variable name 'sa' is too short, expected at least 3 characters [readability-identifier-length]
    struct sigaction sa = {
                     ^
src/wrk.c:146:5: warning: function is not thread safe [concurrency-mt-unsafe]
    sleep(cfg.duration);
    ^
src/wrk.c:149:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (uint64_t i = 0; i < cfg.threads; i++) {
    ^
src/wrk.c:150:17: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
        thread *t = &threads[i];
                ^
src/wrk.c:164:31: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    long double runtime_s   = runtime_us / 1000000.0;
                              ^
src/wrk.c:164:44: warning: 1000000.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    long double runtime_s   = runtime_us / 1000000.0;
                                           ^
src/wrk.c:169:28: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to signed type 'int64_t' (aka 'long') is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        int64_t interval = runtime_us / (complete / cfg.connections);
                           ^
src/wrk.c:176:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (cfg.latency) print_stats_latency(statistics.latency);
                    ^
                     {
src/wrk.c:213:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    connection *c = thread->cs;
                ^
src/wrk.c:215:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (uint64_t i = 0; i < thread->connections; i++, c++) {
    ^
src/wrk.c:215:26: warning: backward branch (for loop) is ID-dependent due to variable reference to 'thread' and may cause performance degradation [altera-id-dependent-backward-branch]
    for (uint64_t i = 0; i < thread->connections; i++, c++) {
                         ^
src/wrk.c:236:55: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
static int connect_socket(thread *thread, connection *c) {
                                                      ^
src/wrk.c:239:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int fd, flags;
    ^~~~~~~~~~~~~~
src/wrk.c:239:9: warning: variable 'fd' is not initialized [cppcoreguidelines-init-variables]
    int fd, flags;
        ^
note: this fix will not be applied because it overlaps with another fix
src/wrk.c:239:9: warning: variable name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
src/wrk.c:239:13: warning: variable 'flags' is not initialized [cppcoreguidelines-init-variables]
    int fd, flags;
            ^
note: this fix will not be applied because it overlaps with another fix
src/wrk.c:244:24: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    fcntl(fd, F_SETFL, flags | O_NONBLOCK);
                       ^~~~~ ~
src/wrk.c:247:34: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (errno != EINPROGRESS) goto error;
                                 ^
                                  {
src/wrk.c:253:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    flags = AE_READABLE | AE_WRITABLE;
            ^           ~
src/ae.h:42:21: note: expanded from macro 'AE_READABLE'
#define AE_READABLE 1
                    ^
src/wrk.c:266:57: warning: parameter name 'c' is too short, expected at least 3 characters [readability-identifier-length]
static int reconnect_socket(thread *thread, connection *c) {
                                                        ^
src/wrk.c:267:44: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    aeDeleteFileEvent(thread->loop, c->fd, AE_WRITABLE | AE_READABLE);
                                           ^           ~
src/ae.h:43:21: note: expanded from macro 'AE_WRITABLE'
#define AE_WRITABLE 2
                    ^
src/wrk.c:273:53: warning: parameter 'id' is unused [misc-unused-parameters]
static int record_rate(aeEventLoop *loop, long long id, void *data) {
                                                    ^
src/wrk.c:273:53: warning: parameter name 'id' is too short, expected at least 3 characters [readability-identifier-length]
src/wrk.c:277:61: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        uint64_t elapsed_ms = (time_us() - thread->start) / 1000;
                                                            ^
src/wrk.c:278:29: warning: narrowing conversion from 'double' to 'uint64_t' (aka 'unsigned long') [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        uint64_t requests = (thread->requests / (double) elapsed_ms) * 1000;
                            ^
src/wrk.c:278:30: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to 'double' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        uint64_t requests = (thread->requests / (double) elapsed_ms) * 1000;
                             ^
src/wrk.c:278:72: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        uint64_t requests = (thread->requests / (double) elapsed_ms) * 1000;
                                                                       ^
src/wrk.c:286:14: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (stop) aeStop(loop);
             ^
              {
src/wrk.c:291:55: warning: parameter 'id' is unused [misc-unused-parameters]
static int delay_request(aeEventLoop *loop, long long id, void *data) {
                                                      ^
src/wrk.c:291:55: warning: parameter name 'id' is too short, expected at least 3 characters [readability-identifier-length]
src/wrk.c:292:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    connection *c = data;
                ^
src/wrk.c:298:58: warning: parameter name 'at' is too short, expected at least 3 characters [readability-identifier-length]
static int header_field(http_parser *parser, const char *at, size_t len) {
                                                         ^
src/wrk.c:299:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    connection *c = parser->data;
                ^
src/wrk.c:308:58: warning: parameter name 'at' is too short, expected at least 3 characters [readability-identifier-length]
static int header_value(http_parser *parser, const char *at, size_t len) {
                                                         ^
src/wrk.c:309:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    connection *c = parser->data;
                ^
src/wrk.c:318:59: warning: parameter name 'at' is too short, expected at least 3 characters [readability-identifier-length]
static int response_body(http_parser *parser, const char *at, size_t len) {
                                                          ^
src/wrk.c:319:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    connection *c = parser->data;
                ^
src/wrk.c:325:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    connection *c = parser->data;
                ^
src/wrk.c:333:18: warning: 399 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if (status > 399) {
                 ^
src/wrk.c:362:43: warning: parameter 'loop' is unused [misc-unused-parameters]
static void socket_connected(aeEventLoop *loop, int fd, void *data, int mask) {
                                          ^
src/wrk.c:362:53: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static void socket_connected(aeEventLoop *loop, int fd, void *data, int mask) {
                                                    ^
src/wrk.c:362:73: warning: parameter 'mask' is unused [misc-unused-parameters]
static void socket_connected(aeEventLoop *loop, int fd, void *data, int mask) {
                                                                        ^
src/wrk.c:363:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    connection *c = data;
                ^
src/wrk.c:384:53: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
static void socket_writeable(aeEventLoop *loop, int fd, void *data, int mask) {
                                                    ^
src/wrk.c:384:73: warning: parameter 'mask' is unused [misc-unused-parameters]
static void socket_writeable(aeEventLoop *loop, int fd, void *data, int mask) {
                                                                        ^
src/wrk.c:385:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    connection *c = data;
                ^
src/wrk.c:391:33: warning: narrowing conversion from 'uint64_t' (aka 'unsigned long') to signed type 'long long' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
        aeCreateTimeEvent(loop, delay, delay_request, c, NULL);
                                ^
src/wrk.c:405:12: warning: variable 'n' is not initialized [cppcoreguidelines-init-variables]
    size_t n;
           ^
             = 0
src/wrk.c:405:12: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
src/wrk.c:426:42: warning: parameter 'loop' is unused [misc-unused-parameters]
static void socket_readable(aeEventLoop *loop, int fd, void *data, int mask) {
                                         ^
src/wrk.c:426:52: warning: parameter 'fd' is unused [misc-unused-parameters]
static void socket_readable(aeEventLoop *loop, int fd, void *data, int mask) {
                                                   ^
src/wrk.c:426:52: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
src/wrk.c:427:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    connection *c = data;
    ^
src/wrk.c:426:72: warning: parameter 'mask' is unused [misc-unused-parameters]
static void socket_readable(aeEventLoop *loop, int fd, void *data, int mask) {
                                                                       ^
src/wrk.c:427:17: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
    connection *c = data;
                ^
src/wrk.c:428:12: warning: variable 'n' is not initialized [cppcoreguidelines-init-variables]
    size_t n;
           ^
             = 0
src/wrk.c:428:12: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
src/wrk.c:430:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    do {
    ^
src/wrk.c:437:79: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (http_parser_execute(&c->parser, &parser_settings, c->buf, n) != n) goto error;
                                                                              ^
                                                                               {
src/wrk.c:438:55: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (n == 0 && !http_body_is_final(&c->parser)) goto error;
                                                      ^
                                                       {
src/wrk.c:441:14: warning: backward branch (do loop) is ID-dependent due to variable reference to 'c' and may cause performance degradation [altera-id-dependent-backward-branch]
    } while (n == RECVBUF && sock.readable(c) > 0);
             ^
src/wrk.c:451:20: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
    struct timeval t;
                   ^
src/wrk.c:453:24: warning: 1000000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    return (t.tv_sec * 1000000) + t.tv_usec;
                       ^
src/wrk.c:459:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (parts->field_set & (1 << field)) {
                         ~ ^~~~~~~~~~~~
src/wrk.c:459:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (parts->field_set & (1 << field)) {
                            ^ ~~
src/wrk.c:463:9: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
        memcpy(part, &url[off], len);
        ^~~~~~
src/wrk.c:463:9: note: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11
        memcpy(part, &url[off], len);
        ^~~~~~
src/wrk.c:469:22: warning: variable 'longopts' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static struct option longopts[] = {
                     ^
src/wrk.c:484:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    int c;
    ^
src/wrk.c:484:9: warning: variable 'c' is not initialized [cppcoreguidelines-init-variables]
    int c;
        ^
          = 0
src/wrk.c:484:9: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
src/wrk.c:486:5: warning: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memset(cfg, 0, sizeof(struct config));
    ^~~~~~
src/wrk.c:486:5: note: Call to function 'memset' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memset_s' in case of C11
    memset(cfg, 0, sizeof(struct config));
    ^~~~~~
src/wrk.c:488:24: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    cfg->connections = 10;
                       ^
src/wrk.c:489:24: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    cfg->duration    = 10;
                       ^
src/wrk.c:492:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    while ((c = getopt_long(argc, argv, "t:c:d:s:H:T:Lrv?", longopts, NULL)) != -1) {
    ^
src/wrk.c:492:12: warning: backward branch (while loop) is ID-dependent due to variable reference to 'c' and may cause performance degradation [altera-id-dependent-backward-branch]
    while ((c = getopt_long(argc, argv, "t:c:d:s:H:T:Lrv?", longopts, NULL)) != -1) {
           ^
src/wrk.c:492:17: warning: function is not thread safe [concurrency-mt-unsafe]
    while ((c = getopt_long(argc, argv, "t:c:d:s:H:T:Lrv?", longopts, NULL)) != -1) {
                ^
src/wrk.c:495:56: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
                if (scan_metric(optarg, &cfg->threads)) return -1;
                                                       ^
                                                        {
src/wrk.c:498:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
                if (scan_metric(optarg, &cfg->connections)) return -1;
                                                           ^
                                                            {
src/wrk.c:501:55: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
                if (scan_time(optarg, &cfg->duration)) return -1;
                                                      ^
                                                       {
src/wrk.c:513:54: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
                if (scan_time(optarg, &cfg->timeout)) return -1;
                                                     ^
                                                      {
src/wrk.c:514:33: warning: 1000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                cfg->timeout *= 1000;
                                ^
src/wrk.c:528:59: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (optind == argc || !cfg->threads || !cfg->duration) return -1;
                                                          ^
                                                           {
src/wrk.c:531:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "invalid URL: %s\n", argv[optind]);
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/wrk.c:531:9: note: cast the expression to void to silence this warning
src/wrk.c:536:9: warning: the value returned by this function should be used [cert-err33-c]
        fprintf(stderr, "number of connections must be >= threads\n");
        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/wrk.c:536:9: note: cast the expression to void to silence this warning
src/wrk.c:552:5: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
    int len = strlen(msg), pad = 2;
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/wrk.c:552:15: warning: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int len = strlen(msg), pad = 2;
              ^
src/wrk.c:554:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (isalpha(msg[len-1])) pad--;
                            ^
                             {
src/wrk.c:555:29: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (isalpha(msg[len-2])) pad--;
                            ^
                             {
src/wrk.c:569:29: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    print_units(mean,  fmt, 8);
                            ^
src/wrk.c:570:29: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    print_units(stdev, fmt, 10);
                            ^
src/wrk.c:571:29: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    print_units(max,   fmt, 9);
                            ^
src/wrk.c:576:35: warning: 50.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    long double percentiles[] = { 50.0, 75.0, 90.0, 99.0 };
                                  ^
src/wrk.c:576:41: warning: 75.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    long double percentiles[] = { 50.0, 75.0, 90.0, 99.0 };
                                        ^
src/wrk.c:576:47: warning: 90.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    long double percentiles[] = { 50.0, 75.0, 90.0, 99.0 };
                                              ^
src/wrk.c:576:53: warning: 99.0 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    long double percentiles[] = { 50.0, 75.0, 90.0, 99.0 };
                                                    ^
src/wrk.c:578:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    for (size_t i = 0; i < sizeof(percentiles) / sizeof(long double); i++) {
    ^
src/wrk.c:579:21: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
        long double p = percentiles[i];
                    ^
src/wrk.c:580:18: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
        uint64_t n = stats_percentile(stats, p);
                 ^
src/wrk.c:582:40: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        print_units(n, format_time_us, 10);
                                       ^
src/zmalloc.c:31:1: warning: system include stdio.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdio.h>
^~~~~~~~~~~~~~~~~~
src/zmalloc.c:32:1: warning: system include stdlib.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <stdlib.h>
^~~~~~~~~~~~~~~~~~~
src/zmalloc.c:42:1: warning: #includes are not sorted properly [llvm-include-order]
#include <string.h>
^
note: this fix will not be applied because it overlaps with another fix
src/zmalloc.c:42:1: warning: system include string.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <string.h>
^~~~~~~~~~~~~~~~~~~
src/zmalloc.c:43:1: warning: system include pthread.h not allowed [llvmlibc-restrict-system-libc-headers]
#include <pthread.h>
^~~~~~~~~~~~~~~~~~~~
src/zmalloc.c:85:15: warning: variable 'used_memory' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static size_t used_memory = 0;
              ^
src/zmalloc.c:86:17: warning: variable 'used_memory_mutex' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
pthread_mutex_t used_memory_mutex = PTHREAD_MUTEX_INITIALIZER;
                ^
src/zmalloc.c:89:5: warning: the value returned by this function should be used [cert-err33-c]
    fprintf(stderr, "zmalloc: Out of memory trying to allocate %zu bytes\n",
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/zmalloc.c:89:5: note: cast the expression to void to silence this warning
src/zmalloc.c:91:5: warning: the value returned by this function should be used [cert-err33-c]
    fflush(stderr);
    ^~~~~~~~~~~~~~
src/zmalloc.c:91:5: note: cast the expression to void to silence this warning
src/zmalloc.c:95:15: warning: variable 'zmalloc_oom_handler' is non-const and globally accessible, consider making it const [cppcoreguidelines-avoid-non-const-global-variables]
static void (*zmalloc_oom_handler)(size_t) = zmalloc_default_oom;
              ^
src/zmalloc.c:95:15: warning: variable 'zmalloc_oom_handler' provides global access to a non-const object; consider making the pointed-to data 'const' [cppcoreguidelines-avoid-non-const-global-variables]
src/zmalloc.c:100:14: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!ptr) zmalloc_oom_handler(size);
             ^
              {
src/zmalloc.c:105:21: warning: Dereference of null pointer [clang-analyzer-core.NullDereference]
    *((size_t*)ptr) = size;
                    ^
src/zmalloc.c:206:15: note: Calling 'zmalloc'
    char *p = zmalloc(l);
              ^~~~~~~~~~
src/zmalloc.c:98:5: note: 'ptr' initialized here
    void *ptr = malloc(size+PREFIX_SIZE);
    ^~~~~~~~~
src/zmalloc.c:100:9: note: Assuming 'ptr' is null
    if (!ptr) zmalloc_oom_handler(size);
        ^~~~
src/zmalloc.c:100:9: note: Assuming pointer value is null
    if (!ptr) zmalloc_oom_handler(size);
        ^~~~
src/zmalloc.c:100:5: note: Taking true branch
    if (!ptr) zmalloc_oom_handler(size);
    ^
src/zmalloc.c:105:21: note: Dereference of null pointer
    *((size_t*)ptr) = size;
    ~~~~~~~~~~~~~~~~^~~~~~
src/zmalloc.c:106:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    update_zmalloc_stat_alloc(size+PREFIX_SIZE);
    ^
src/zmalloc.c:73:40: note: expanded from macro 'update_zmalloc_stat_alloc'
#define update_zmalloc_stat_alloc(__n) do { \
                                       ^
src/zmalloc.c:106:5: warning: variable name '_n' is too short, expected at least 3 characters [readability-identifier-length]
    update_zmalloc_stat_alloc(size+PREFIX_SIZE);
    ^
src/zmalloc.c:74:12: note: expanded from macro 'update_zmalloc_stat_alloc'
    size_t _n = (__n); \
           ^
src/zmalloc.c:132:14: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!ptr) zmalloc_oom_handler(size);
             ^
              {
src/zmalloc.c:137:21: warning: Dereference of null pointer [clang-analyzer-core.NullDereference]
    *((size_t*)ptr) = size;
    ~~~~~~~~~~~~~~~~^~~~~~
src/zmalloc.c:130:5: note: 'ptr' initialized here
    void *ptr = calloc(1, size+PREFIX_SIZE);
    ^~~~~~~~~
src/zmalloc.c:132:9: note: Assuming 'ptr' is null
    if (!ptr) zmalloc_oom_handler(size);
        ^~~~
src/zmalloc.c:132:5: note: Taking true branch
    if (!ptr) zmalloc_oom_handler(size);
    ^
src/zmalloc.c:137:21: note: Dereference of null pointer
    *((size_t*)ptr) = size;
    ~~~~~~~~~~~~~~~~^~~~~~
src/zmalloc.c:138:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    update_zmalloc_stat_alloc(size+PREFIX_SIZE);
    ^
src/zmalloc.c:73:40: note: expanded from macro 'update_zmalloc_stat_alloc'
#define update_zmalloc_stat_alloc(__n) do { \
                                       ^
src/zmalloc.c:138:5: warning: variable name '_n' is too short, expected at least 3 characters [readability-identifier-length]
    update_zmalloc_stat_alloc(size+PREFIX_SIZE);
    ^
src/zmalloc.c:74:12: note: expanded from macro 'update_zmalloc_stat_alloc'
    size_t _n = (__n); \
           ^
src/zmalloc.c:145:11: warning: variable 'realptr' is not initialized [cppcoreguidelines-init-variables]
    void *realptr;
          ^
                  = NULL
src/zmalloc.c:147:12: warning: variable 'oldsize' is not initialized [cppcoreguidelines-init-variables]
    size_t oldsize;
           ^
                   = 0
src/zmalloc.c:148:11: warning: variable 'newptr' is not initialized [cppcoreguidelines-init-variables]
    void *newptr;
          ^
                 = NULL
src/zmalloc.c:150:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (ptr == NULL) return zmalloc(size);
                    ^
                     {
src/zmalloc.c:163:17: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!newptr) zmalloc_oom_handler(size);
                ^
                 {
src/zmalloc.c:165:24: warning: Dereference of null pointer [clang-analyzer-core.NullDereference]
    *((size_t*)newptr) = size;
    ~~~~~~~~~~~~~~~~~~~^~~~~~
src/zmalloc.c:150:9: note: Assuming 'ptr' is not equal to NULL
    if (ptr == NULL) return zmalloc(size);
        ^~~~~~~~~~~
src/zmalloc.c:150:5: note: Taking false branch
    if (ptr == NULL) return zmalloc(size);
    ^
src/zmalloc.c:162:5: note: Value assigned to 'newptr'
    newptr = realloc(realptr,size+PREFIX_SIZE);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
src/zmalloc.c:163:9: note: Assuming 'newptr' is null
    if (!newptr) zmalloc_oom_handler(size);
        ^~~~~~~
src/zmalloc.c:163:5: note: Taking true branch
    if (!newptr) zmalloc_oom_handler(size);
    ^
src/zmalloc.c:165:24: note: Dereference of null pointer
    *((size_t*)newptr) = size;
    ~~~~~~~~~~~~~~~~~~~^~~~~~
src/zmalloc.c:166:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    update_zmalloc_stat_free(oldsize);
    ^
src/zmalloc.c:79:39: note: expanded from macro 'update_zmalloc_stat_free'
#define update_zmalloc_stat_free(__n) do { \
                                      ^
src/zmalloc.c:166:5: warning: variable name '_n' is too short, expected at least 3 characters [readability-identifier-length]
    update_zmalloc_stat_free(oldsize);
    ^
src/zmalloc.c:80:12: note: expanded from macro 'update_zmalloc_stat_free'
    size_t _n = (__n); \
           ^
src/zmalloc.c:167:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    update_zmalloc_stat_alloc(size);
    ^
src/zmalloc.c:73:40: note: expanded from macro 'update_zmalloc_stat_alloc'
#define update_zmalloc_stat_alloc(__n) do { \
                                       ^
src/zmalloc.c:167:5: warning: variable name '_n' is too short, expected at least 3 characters [readability-identifier-length]
    update_zmalloc_stat_alloc(size);
    ^
src/zmalloc.c:74:12: note: expanded from macro 'update_zmalloc_stat_alloc'
    size_t _n = (__n); \
           ^
src/zmalloc.c:181:31: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (size&(sizeof(long)-1)) size += sizeof(long)-(size&(sizeof(long)-1));
                              ^
                               {
src/zmalloc.c:188:11: warning: variable 'realptr' is not initialized [cppcoreguidelines-init-variables]
    void *realptr;
          ^
                  = NULL
src/zmalloc.c:189:12: warning: variable 'oldsize' is not initialized [cppcoreguidelines-init-variables]
    size_t oldsize;
           ^
                   = 0
src/zmalloc.c:192:21: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (ptr == NULL) return;
                    ^
                     {
src/zmalloc.c:199:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    update_zmalloc_stat_free(oldsize+PREFIX_SIZE);
    ^
src/zmalloc.c:79:39: note: expanded from macro 'update_zmalloc_stat_free'
#define update_zmalloc_stat_free(__n) do { \
                                      ^
src/zmalloc.c:199:5: warning: variable name '_n' is too short, expected at least 3 characters [readability-identifier-length]
    update_zmalloc_stat_free(oldsize+PREFIX_SIZE);
    ^
src/zmalloc.c:80:12: note: expanded from macro 'update_zmalloc_stat_free'
    size_t _n = (__n); \
           ^
src/zmalloc.c:204:27: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
char *zstrdup(const char *s) {
                          ^
src/zmalloc.c:205:12: warning: variable name 'l' is too short, expected at least 3 characters [readability-identifier-length]
    size_t l = strlen(s)+1;
           ^
src/zmalloc.c:206:11: warning: variable name 'p' is too short, expected at least 3 characters [readability-identifier-length]
    char *p = zmalloc(l);
          ^
src/zmalloc.c:208:5: warning: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    memcpy(p,s,l);
    ^~~~~~
src/zmalloc.c:208:5: note: Call to function 'memcpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'memcpy_s' in case of C11
    memcpy(p,s,l);
    ^~~~~~
src/zmalloc.c:213:12: warning: variable 'um' is not initialized [cppcoreguidelines-init-variables]
    size_t um;
           ^
              = 0
src/zmalloc.c:213:12: warning: variable name 'um' is too short, expected at least 3 characters [readability-identifier-length]
src/zmalloc.c:214:5: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
    atomicGet(used_memory,um);
    ^
src/atomicvar.h:79:31: note: expanded from macro 'atomicGet'
#define atomicGet(var,dstvar) do { \
                              ^
src/zmalloc.c:302:23: warning: narrowing conversion from 'size_t' (aka 'unsigned long') to 'float' [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    return (float)rss/zmalloc_used_memory();
                      ^
src/zmalloc.c:344:46: warning: pointer parameter 'field' can be pointer to const [readability-non-const-parameter]
size_t zmalloc_get_smap_bytes_by_field(char *field, long pid) {
                                             ^
                                       const 
/legacy/wrk/src/zmalloc.h:87:6: warning: redundant 'zlibc_free' declaration [readability-redundant-declaration]
void zlibc_free(void *ptr);
     ^
src/zmalloc.c:38:6: note: previously declared here
void zlibc_free(void *ptr) {
     ^
