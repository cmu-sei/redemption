common.c:38:1: warning: system include langinfo.h not allowed [llvmlibc-restrict-system-libc-headers]
# include <langinfo.h>
^~~~~~~~~~~~~~~~~~~~~~
common.c:64:5: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
    strncpy(dest,src,dest_size);
    ^~~~~~~
common.c:64:5: note: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11
    strncpy(dest,src,dest_size);
    ^~~~~~~
common.c:68:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, "Text %s has been truncated from %d to %d characters in %s to prevent a buffer overflow.\n", src, (int)strlen(src), (int)dest_size, "d2u_strncpy()");
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:68:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, "Text %s has been truncated from %d to %d characters in %s to prevent a buffer overflow.\n", src, (int)strlen(src), (int)dest_size, "d2u_strncpy()");
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:74:23: warning: parameter name 'fp' is too short, expected at least 3 characters [readability-identifier-length]
int d2u_fclose (FILE *fp, const char *filename, CFlag *ipFlag, const char *m, const char *progname)
                      ^
common.c:74:64: warning: 2 adjacent parameters of 'd2u_fclose' of similar type ('const char *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
int d2u_fclose (FILE *fp, const char *filename, CFlag *ipFlag, const char *m, const char *progname)
                                                               ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:74:76: note: the first parameter in the range is 'm'
int d2u_fclose (FILE *fp, const char *filename, CFlag *ipFlag, const char *m, const char *progname)
                                                                           ^
common.c:74:91: note: the last parameter in the range is 'progname'
int d2u_fclose (FILE *fp, const char *filename, CFlag *ipFlag, const char *m, const char *progname)
                                                                                          ^~~~~~~~
common.c:74:76: warning: parameter name 'm' is too short, expected at least 3 characters [readability-identifier-length]
int d2u_fclose (FILE *fp, const char *filename, CFlag *ipFlag, const char *m, const char *progname)
                                                                           ^
common.c:79:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:79:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:80:23: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (m[0] == 'w')
                      ^
                       {
common.c:81:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, _("Failed to write to temporary output file %s:"), filename);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:81:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, _("Failed to write to temporary output file %s:"), filename);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:82:11: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else
          ^
           {
common.c:83:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, _("Failed to close input file %s:"), filename);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:83:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, _("Failed to close input file %s:"), filename);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:84:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, " %s\n", strerror(errno));
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:84:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, " %s\n", strerror(errno));
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:84:41: warning: function is not thread safe [concurrency-mt-unsafe]
      D2U_ANSI_FPRINTF(stderr, " %s\n", strerror(errno));
                                        ^
common.c:379:32: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (S_ISLNK(buf.st_mode))
                               ^
                                {
common.c:443:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
      else
      ^~~~
               return(-1)
common.c:448:29: warning: function is not thread safe [concurrency-mt-unsafe]
       const char *errstr = strerror(errno);
                            ^
common.c:450:8: warning: the value returned by this function should be used [cert-err33-c]
       D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, path);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:450:8: note: cast the expression to void to silence this warning
       D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, path);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:451:8: warning: the value returned by this function should be used [cert-err33-c]
       D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
       ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:451:8: note: cast the expression to void to silence this warning
       D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
       ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:481:32: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (S_ISREG(buf.st_mode))
                               ^
                                {
common.c:483:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
      else
      ^~~~
               return(-1)
common.c:483:11: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else
          ^
note: this fix will not be applied because it overlaps with another fix
common.c:488:29: warning: function is not thread safe [concurrency-mt-unsafe]
       const char *errstr = strerror(errno);
                            ^
common.c:490:8: warning: the value returned by this function should be used [cert-err33-c]
       D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, path);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:490:8: note: cast the expression to void to silence this warning
       D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, path);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:491:8: warning: the value returned by this function should be used [cert-err33-c]
       D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
       ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:491:8: note: cast the expression to void to silence this warning
       D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
       ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:613:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,"%s", _("\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:613:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,"%s", _("\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:623:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,"%s", _("\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:623:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,"%s", _("\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:640:124: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((strncmp(progname, "dos2unix", sizeof("dos2unix")) == 0) || (strncmp(progname, "mac2unix", sizeof("mac2unix")) == 0))
                                                                                                                           ^
                                                                                                                            {
common.c:642:3: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
  else
  ^~~~
      return 0
common.c:642:7: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  else
      ^
note: this fix will not be applied because it overlaps with another fix
common.c:648:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_("Usage: %s [options] [file ...] [-n infile outfile ...]\n"), progname);
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:648:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_("Usage: %s [options] [file ...] [-n infile outfile ...]\n"), progname);
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:650:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" --allow-chown         allow file ownership change\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:650:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" --allow-chown         allow file ownership change\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:652:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -ascii                default conversion mode\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:652:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -ascii                default conversion mode\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:653:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -iso                  conversion between DOS and ISO-8859-1 character set\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:653:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -iso                  conversion between DOS and ISO-8859-1 character set\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:654:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_("   -1252               use Windows code page 1252 (Western European)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:654:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_("   -1252               use Windows code page 1252 (Western European)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:655:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_("   -437                use DOS code page 437 (US) (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:655:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_("   -437                use DOS code page 437 (US) (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:656:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_("   -850                use DOS code page 850 (Western European)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:656:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_("   -850                use DOS code page 850 (Western European)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:657:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_("   -860                use DOS code page 860 (Portuguese)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:657:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_("   -860                use DOS code page 860 (Portuguese)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:658:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_("   -863                use DOS code page 863 (French Canadian)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:658:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_("   -863                use DOS code page 863 (French Canadian)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:659:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_("   -865                use DOS code page 865 (Nordic)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:659:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_("   -865                use DOS code page 865 (Nordic)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:660:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -7                    convert 8 bit characters to 7 bit space\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:660:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -7                    convert 8 bit characters to 7 bit space\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:661:29: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (is_dos2unix(progname))
                            ^
                             {
common.c:662:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_ANSI_FPRINTF(stdout,_(" -b, --keep-bom        keep Byte Order Mark\n"));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:662:5: note: cast the expression to void to silence this warning
    D2U_ANSI_FPRINTF(stdout,_(" -b, --keep-bom        keep Byte Order Mark\n"));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:663:7: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  else
      ^
       {
common.c:664:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_ANSI_FPRINTF(stdout,_(" -b, --keep-bom        keep Byte Order Mark (default)\n"));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:664:5: note: cast the expression to void to silence this warning
    D2U_ANSI_FPRINTF(stdout,_(" -b, --keep-bom        keep Byte Order Mark (default)\n"));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:665:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -c, --convmode        conversion mode\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:665:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -c, --convmode        conversion mode\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:671:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -e, --add-eol         add a line break to the last line if there isn't one\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:671:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -e, --add-eol         add a line break to the last line if there isn't one\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:672:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -f, --force           force conversion of binary files\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:672:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -f, --force           force conversion of binary files\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:678:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -h, --help            display this help text\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:678:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -h, --help            display this help text\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:679:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -i, --info[=FLAGS]    display file information\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:679:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -i, --info[=FLAGS]    display file information\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:681:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -k, --keepdate        keep output file date\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:681:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -k, --keepdate        keep output file date\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:682:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -L, --license         display software license\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:682:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -L, --license         display software license\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:683:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -l, --newline         add additional newline\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:683:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -l, --newline         add additional newline\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:684:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -m, --add-bom         add Byte Order Mark (default UTF-8)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:684:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -m, --add-bom         add Byte Order Mark (default UTF-8)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:685:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -n, --newfile         write to new file\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:685:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -n, --newfile         write to new file\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:689:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" --no-allow-chown      don't allow file ownership change (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:689:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" --no-allow-chown      don't allow file ownership change (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:691:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" --no-add-eol          don't add a line break to the last line if there isn't one (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:691:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" --no-add-eol          don't add a line break to the last line if there isn't one (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:692:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -O, --to-stdout       write to standard output\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:692:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -O, --to-stdout       write to standard output\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:693:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -o, --oldfile         write to old file (default)\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:693:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -o, --oldfile         write to old file (default)\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:695:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -q, --quiet           quiet mode, suppress all warnings\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:695:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -q, --quiet           quiet mode, suppress all warnings\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:696:29: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (is_dos2unix(progname))
                            ^
                             {
common.c:697:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_ANSI_FPRINTF(stdout,_(" -r, --remove-bom      remove Byte Order Mark (default)\n"));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:697:5: note: cast the expression to void to silence this warning
    D2U_ANSI_FPRINTF(stdout,_(" -r, --remove-bom      remove Byte Order Mark (default)\n"));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:698:7: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  else
      ^
       {
common.c:699:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_ANSI_FPRINTF(stdout,_(" -r, --remove-bom      remove Byte Order Mark\n"));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:699:5: note: cast the expression to void to silence this warning
    D2U_ANSI_FPRINTF(stdout,_(" -r, --remove-bom      remove Byte Order Mark\n"));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:700:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -s, --safe            skip binary files (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:700:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -s, --safe            skip binary files (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:702:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -u,  --keep-utf16     keep UTF-16 encoding\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:702:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -u,  --keep-utf16     keep UTF-16 encoding\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:703:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -ul, --assume-utf16le assume that the input format is UTF-16LE\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:703:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -ul, --assume-utf16le assume that the input format is UTF-16LE\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:704:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -ub, --assume-utf16be assume that the input format is UTF-16BE\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:704:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -ub, --assume-utf16be assume that the input format is UTF-16BE\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:706:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -v,  --verbose        verbose operation\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:706:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -v,  --verbose        verbose operation\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:708:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -F, --follow-symlink  follow symbolic links and convert the targets\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:708:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -F, --follow-symlink  follow symbolic links and convert the targets\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:711:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -R, --replace-symlink replace symbolic links with converted files\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:711:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -R, --replace-symlink replace symbolic links with converted files\n\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:713:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -S, --skip-symlink    keep symbolic links and targets unchanged (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:713:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -S, --skip-symlink    keep symbolic links and targets unchanged (default)\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:715:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_(" -V, --version         display version number\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:715:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_(" -V, --version         display version number\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:720:19: warning: 2 adjacent parameters of 'PrintVersion' of similar type ('const char *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
void PrintVersion(const char *progname, const char *localedir)
                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:720:31: note: the first parameter in the range is 'progname'
void PrintVersion(const char *progname, const char *localedir)
                              ^~~~~~~~
common.c:720:53: note: the last parameter in the range is 'localedir'
void PrintVersion(const char *progname, const char *localedir)
                                                    ^~~~~~~~~
common.c:722:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,"%s %s (%s)\n", progname, VER_REVISION, VER_DATE);
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:722:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,"%s %s (%s)\n", progname, VER_REVISION, VER_DATE);
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:761:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,"%s", _("With Unicode UTF-16 support.\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:761:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,"%s", _("With Unicode UTF-16 support.\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:773:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,"%s", _("With native language support.\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:773:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,"%s", _("With native language support.\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:778:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,"%s", _("With support to preserve the user and group ownership of files.\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:778:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,"%s", _("With support to preserve the user and group ownership of files.\n"));
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:783:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,"LOCALEDIR: %s\n", localedir);
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:783:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,"LOCALEDIR: %s\n", localedir);
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:785:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,"https://waterlan.home.xs4all.nl/dos2unix.html\n");
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:785:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,"https://waterlan.home.xs4all.nl/dos2unix.html\n");
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:786:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,"https://dos2unix.sourceforge.io/\n");
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:786:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,"https://dos2unix.sourceforge.io/\n");
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:801:23: warning: use 'fopen' mode 'e' to set O_CLOEXEC [android-cloexec-fopen]
  return (fopen(ipFN, R_CNTRL));
                      ^~~~~~~
                      R_CNTRL "e"
./common.h:164:21: note: expanded from macro 'R_CNTRL'
  #define R_CNTRL   "r"
                    ^
common.c:818:23: warning: use 'fopen' mode 'e' to set O_CLOEXEC [android-cloexec-fopen]
  return (fopen(opFN, W_CNTRL));
                      ^~~~~~~
                      W_CNTRL "e"
./common.h:165:21: note: expanded from macro 'W_CNTRL'
  #define W_CNTRL   "w"
                    ^
common.c:826:24: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
FILE* OpenOutFiled(int fd)
                       ^
common.c:969:9: warning: variable name 'fp' is too short, expected at least 3 characters [readability-identifier-length]
  FILE *fp = NULL;  /* file pointer */
        ^
common.c:973:7: warning: variable name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
  int fd = -1;  /* file descriptor */
      ^
common.c:978:12: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (!cpy)
           ^
            {
common.c:981:9: warning: function is not thread safe [concurrency-mt-unsafe]
  dir = dirname(cpy);
        ^
common.c:984:19: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if (!(fname_str = (char *)malloc(fname_len)))
        ~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:984:19: note: if it should be an assignment, move it out of the 'if' condition
common.c:984:19: note: if it is meant to be an equality check, change '=' to '=='
common.c:984:48: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (!(fname_str = (char *)malloc(fname_len)))
                                               ^
                                                {
common.c:986:3: warning: the value returned by this function should be used [cert-err33-c]
  sprintf(fname_str, "%s%s", dir, "/d2utmpXXXXXX");
  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:986:3: note: cast the expression to void to silence this warning
common.c:986:3: warning: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
  sprintf(fname_str, "%s%s", dir, "/d2utmpXXXXXX");
  ^~~~~~~
common.c:986:3: note: Call to function 'sprintf' is insecure as it does not provide bounding of the memory buffer or security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'sprintf_s' in case of C11
  sprintf(fname_str, "%s%s", dir, "/d2utmpXXXXXX");
  ^~~~~~~
common.c:999:11: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ((fd = mkstemp(fname_str)) == -1)
       ~~~^~~~~~~~~~~~~~~~~~~~
common.c:999:11: note: if it should be an assignment, move it out of the 'if' condition
common.c:999:11: note: if it is meant to be an equality check, change '=' to '=='
common.c:999:39: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((fd = mkstemp(fname_str)) == -1)
                                      ^
                                       {
common.c:1002:10: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ((fp=OpenOutFiled(fd)) == NULL)
       ~~^~~~~~~~~~~~~~~~~
common.c:1002:10: note: if it should be an assignment, move it out of the 'if' condition
common.c:1002:10: note: if it is meant to be an equality check, change '=' to '=='
common.c:1002:37: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((fp=OpenOutFiled(fd)) == NULL)
                                    ^
                                     {
common.c:1037:15: warning: variable 'errstr' is not initialized [cppcoreguidelines-init-variables]
  const char *errstr;
              ^
                     = NULL
common.c:1043:16: warning: function is not thread safe [concurrency-mt-unsafe]
      errstr = strerror(errno);
               ^
common.c:1044:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, lFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1044:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, lFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1045:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1045:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1055:18: warning: function is not thread safe [concurrency-mt-unsafe]
        errstr = strerror(errno);
                 ^
common.c:1056:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, lFN);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1056:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, lFN);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1057:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1057:9: note: cast the expression to void to silence this warning
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1099:7: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  else
      ^
       {
common.c:1110:7: warning: function 'read_bom' has cognitive complexity of 64 (threshold 25) [readability-function-cognitive-complexity]
FILE *read_bom (FILE *f, int *bomtype)
      ^
common.c:1122:4: note: +1, including nesting penalty of 0, nesting level increased to 1
   if  (f != NULL) {
   ^
common.c:1124:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if ((bom[0] = fgetc(f)) == EOF) {
      ^
common.c:1125:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ferror(f)) {
         ^
common.c:1131:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if ((bom[0] != 0xff) && (bom[0] != 0xfe) && (bom[0] != 0xef) && (bom[0] != 0x84)) {
      ^
common.c:1131:68: note: +1
      if ((bom[0] != 0xff) && (bom[0] != 0xfe) && (bom[0] != 0xef) && (bom[0] != 0x84)) {
                                                                   ^
common.c:1132:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ungetc(bom[0], f) == EOF) return NULL;
         ^
common.c:1136:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if ((bom[1] = fgetc(f)) == EOF) {
      ^
common.c:1137:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ferror(f)) {
         ^
common.c:1140:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ungetc(bom[1], f) == EOF) return NULL;
         ^
common.c:1141:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ungetc(bom[0], f) == EOF) return NULL;
         ^
common.c:1145:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if ((bom[0] == 0xff) && (bom[1] == 0xfe)) { /* UTF16-LE */
      ^
common.c:1145:28: note: +1
      if ((bom[0] == 0xff) && (bom[1] == 0xfe)) { /* UTF16-LE */
                           ^
common.c:1149:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if ((bom[0] == 0xfe) && (bom[1] == 0xff)) { /* UTF16-BE */
      ^
common.c:1149:28: note: +1
      if ((bom[0] == 0xfe) && (bom[1] == 0xff)) { /* UTF16-BE */
                           ^
common.c:1153:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if ((bom[2] = fgetc(f)) == EOF) {
      ^
common.c:1154:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ferror(f)) {
         ^
common.c:1157:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ungetc(bom[2], f) == EOF) return NULL;
         ^
common.c:1158:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ungetc(bom[1], f) == EOF) return NULL;
         ^
common.c:1159:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ungetc(bom[0], f) == EOF) return NULL;
         ^
common.c:1163:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if ((bom[0] == 0xef) && (bom[1] == 0xbb) && (bom[2]== 0xbf)) { /* UTF-8 */
      ^
common.c:1163:48: note: +1
      if ((bom[0] == 0xef) && (bom[1] == 0xbb) && (bom[2]== 0xbf)) { /* UTF-8 */
                                               ^
common.c:1167:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if ((bom[0] == 0x84) && (bom[1] == 0x31) && (bom[2]== 0x95)) {
      ^
common.c:1167:48: note: +1
      if ((bom[0] == 0x84) && (bom[1] == 0x31) && (bom[2]== 0x95)) {
                                               ^
common.c:1169:12: note: +3, including nesting penalty of 2, nesting level increased to 3
           if (ferror(f)) {
           ^
common.c:1172:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (bom[3]== 0x33) { /* GB18030 */
         ^
common.c:1176:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (ungetc(bom[3], f) == EOF) return NULL;
         ^
common.c:1178:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ungetc(bom[2], f) == EOF) return NULL;
      ^
common.c:1179:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ungetc(bom[1], f) == EOF) return NULL;
      ^
common.c:1180:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ungetc(bom[0], f) == EOF) return NULL;
      ^
common.c:1110:23: warning: parameter name 'f' is too short, expected at least 3 characters [readability-identifier-length]
FILE *read_bom (FILE *f, int *bomtype)
                      ^
common.c:1124:19: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
      if ((bom[0] = fgetc(f)) == EOF) {
           ~~~~~~~^~~~~~~~~~
common.c:1124:19: note: if it should be an assignment, move it out of the 'if' condition
common.c:1124:19: note: if it is meant to be an equality check, change '=' to '=='
common.c:1131:22: warning: 0xff is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] != 0xff) && (bom[0] != 0xfe) && (bom[0] != 0xef) && (bom[0] != 0x84)) {
                     ^
common.c:1131:42: warning: 0xfe is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] != 0xff) && (bom[0] != 0xfe) && (bom[0] != 0xef) && (bom[0] != 0x84)) {
                                         ^
common.c:1131:62: warning: 0xef is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] != 0xff) && (bom[0] != 0xfe) && (bom[0] != 0xef) && (bom[0] != 0x84)) {
                                                             ^
common.c:1131:82: warning: 0x84 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] != 0xff) && (bom[0] != 0xfe) && (bom[0] != 0xef) && (bom[0] != 0x84)) {
                                                                                 ^
common.c:1132:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         if (ungetc(bom[0], f) == EOF) return NULL;
                                      ^
                                       {
common.c:1136:19: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
      if ((bom[1] = fgetc(f)) == EOF) {
           ~~~~~~~^~~~~~~~~~
common.c:1136:19: note: if it should be an assignment, move it out of the 'if' condition
common.c:1136:19: note: if it is meant to be an equality check, change '=' to '=='
common.c:1140:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         if (ungetc(bom[1], f) == EOF) return NULL;
                                      ^
                                       {
common.c:1141:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         if (ungetc(bom[0], f) == EOF) return NULL;
                                      ^
                                       {
common.c:1145:22: warning: 0xff is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0xff) && (bom[1] == 0xfe)) { /* UTF16-LE */
                     ^
common.c:1145:42: warning: 0xfe is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0xff) && (bom[1] == 0xfe)) { /* UTF16-LE */
                                         ^
common.c:1149:22: warning: 0xfe is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0xfe) && (bom[1] == 0xff)) { /* UTF16-BE */
                     ^
common.c:1149:42: warning: 0xff is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0xfe) && (bom[1] == 0xff)) { /* UTF16-BE */
                                         ^
common.c:1153:19: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
      if ((bom[2] = fgetc(f)) == EOF) {
           ~~~~~~~^~~~~~~~~~
common.c:1153:19: note: if it should be an assignment, move it out of the 'if' condition
common.c:1153:19: note: if it is meant to be an equality check, change '=' to '=='
common.c:1157:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         if (ungetc(bom[2], f) == EOF) return NULL;
                                      ^
                                       {
common.c:1158:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         if (ungetc(bom[1], f) == EOF) return NULL;
                                      ^
                                       {
common.c:1159:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         if (ungetc(bom[0], f) == EOF) return NULL;
                                      ^
                                       {
common.c:1163:22: warning: 0xef is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0xef) && (bom[1] == 0xbb) && (bom[2]== 0xbf)) { /* UTF-8 */
                     ^
common.c:1163:42: warning: 0xbb is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0xef) && (bom[1] == 0xbb) && (bom[2]== 0xbf)) { /* UTF-8 */
                                         ^
common.c:1163:61: warning: 0xbf is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0xef) && (bom[1] == 0xbb) && (bom[2]== 0xbf)) { /* UTF-8 */
                                                            ^
common.c:1167:22: warning: 0x84 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0x84) && (bom[1] == 0x31) && (bom[2]== 0x95)) {
                     ^
common.c:1167:42: warning: 0x31 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0x84) && (bom[1] == 0x31) && (bom[2]== 0x95)) {
                                         ^
common.c:1167:61: warning: 0x95 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((bom[0] == 0x84) && (bom[1] == 0x31) && (bom[2]== 0x95)) {
                                                            ^
common.c:1172:23: warning: 0x33 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
         if (bom[3]== 0x33) { /* GB18030 */
                      ^
common.c:1176:39: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
         if (ungetc(bom[3], f) == EOF) return NULL;
                                      ^
                                       {
common.c:1178:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (ungetc(bom[2], f) == EOF) return NULL;
                                   ^
                                    {
common.c:1179:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (ungetc(bom[1], f) == EOF) return NULL;
                                   ^
                                    {
common.c:1180:36: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (ungetc(bom[0], f) == EOF) return NULL;
                                   ^
                                    {
common.c:1187:7: warning: function 'write_bom' has cognitive complexity of 48 (threshold 25) [readability-function-cognitive-complexity]
FILE *write_bom (FILE *f, CFlag *ipFlag, const char *progname)
      ^
common.c:1191:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if ((bomtype == FILE_MBS)&&(ipFlag->locale_target == TARGET_GB18030))
  ^
common.c:1191:28: note: +1
  if ((bomtype == FILE_MBS)&&(ipFlag->locale_target == TARGET_GB18030))
                           ^
common.c:1194:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ipFlag->keep_utf16)
  ^
common.c:1196:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    switch (bomtype) {
    ^
common.c:1198:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (fprintf(f, "%s", "\xFF\xFE") < 0) return NULL;
        ^
common.c:1199:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ipFlag->verbose > 1) {
        ^
common.c:1205:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (fprintf(f, "%s", "\xFE\xFF") < 0) return NULL;
        ^
common.c:1206:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ipFlag->verbose > 1) {
        ^
common.c:1212:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (fprintf(f, "%s", "\x84\x31\x95\x33") < 0) return NULL;
        ^
common.c:1213:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ipFlag->verbose > 1) {
        ^
common.c:1219:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (fprintf(f, "%s", "\xEF\xBB\xBF") < 0) return NULL;
        ^
common.c:1220:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ipFlag->verbose > 1) {
        ^
common.c:1226:5: note: +1, nesting level increased to 1
  } else {
    ^
common.c:1227:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((bomtype == FILE_GB18030) ||
    ^
common.c:1227:35: note: +1
    if ((bomtype == FILE_GB18030) ||
                                  ^
common.c:1228:64: note: +1
        (((bomtype == FILE_UTF16LE)||(bomtype == FILE_UTF16BE))&&(ipFlag->locale_target == TARGET_GB18030))
                                                               ^
common.c:1228:36: note: +1
        (((bomtype == FILE_UTF16LE)||(bomtype == FILE_UTF16BE))&&(ipFlag->locale_target == TARGET_GB18030))
                                   ^
common.c:1230:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (fprintf(f, "%s", "\x84\x31\x95\x33") < 0) return NULL; /* GB18030 */
        ^
common.c:1231:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ipFlag->verbose > 1)
        ^
common.c:1236:8: note: +1, nesting level increased to 2
     } else {
       ^
common.c:1237:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (fprintf(f, "%s", "\xEF\xBB\xBF") < 0) return NULL; /* UTF-8 */
        ^
common.c:1238:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ipFlag->verbose > 1)
        ^
common.c:1187:24: warning: parameter name 'f' is too short, expected at least 3 characters [readability-identifier-length]
FILE *write_bom (FILE *f, CFlag *ipFlag, const char *progname)
                       ^
common.c:1191:72: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((bomtype == FILE_MBS)&&(ipFlag->locale_target == TARGET_GB18030))
                                                                       ^
                                                                        {
common.c:1198:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fprintf(f, "%s", "\xFF\xFE") < 0) return NULL;
                                             ^
                                              {
common.c:1200:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1200:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1201:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("UTF-16LE"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1201:11: note: cast the expression to void to silence this warning
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("UTF-16LE"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1205:46: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fprintf(f, "%s", "\xFE\xFF") < 0) return NULL;
                                             ^
                                              {
common.c:1207:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1207:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1208:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("UTF-16BE"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1208:11: note: cast the expression to void to silence this warning
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("UTF-16BE"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1212:54: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fprintf(f, "%s", "\x84\x31\x95\x33") < 0) return NULL;
                                                     ^
                                                      {
common.c:1214:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1214:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1215:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("GB18030"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1215:11: note: cast the expression to void to silence this warning
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("GB18030"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1219:50: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fprintf(f, "%s", "\xEF\xBB\xBF") < 0) return NULL;
                                                 ^
                                                  {
common.c:1221:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1221:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1222:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("UTF-8"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1222:11: note: cast the expression to void to silence this warning
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("UTF-8"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1230:54: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fprintf(f, "%s", "\x84\x31\x95\x33") < 0) return NULL; /* GB18030 */
                                                     ^
                                                      {
common.c:1233:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1233:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1234:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("GB18030"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1234:11: note: cast the expression to void to silence this warning
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("GB18030"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1237:50: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (fprintf(f, "%s", "\xEF\xBB\xBF") < 0) return NULL; /* UTF-8 */
                                                 ^
                                                  {
common.c:1240:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1240:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1241:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("UTF-8"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1241:11: note: cast the expression to void to silence this warning
          D2U_ANSI_FPRINTF(stderr, _("Writing %s BOM.\n"), _("UTF-8"));
          ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1248:36: warning: 2 adjacent parameters of 'print_bom' of similar type ('const char *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
void print_bom (const int bomtype, const char *filename, const char *progname)
                                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:1248:48: note: the first parameter in the range is 'filename'
void print_bom (const int bomtype, const char *filename, const char *progname)
                                               ^~~~~~~~
common.c:1248:70: note: the last parameter in the range is 'progname'
void print_bom (const int bomtype, const char *filename, const char *progname)
                                                                     ^~~~~~~~
common.c:1250:19: warning: 64 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    char informat[64];
                  ^
common.c:1285:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1285:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1286:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, _("Input file %s has %s BOM.\n"), filename, informat);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1286:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, _("Input file %s has %s BOM.\n"), filename, informat);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1297:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  UTF-16LE");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1297:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  UTF-16LE");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1300:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  UTF-16BE");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1300:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  UTF-16BE");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1303:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  UTF-8   ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1303:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  UTF-8   ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1306:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  GB18030 ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1306:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  GB18030 ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1309:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  no_bom  ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1309:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  no_bom  ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1326:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1326:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1327:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Assuming UTF-16LE encoding.\n") );
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1327:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Assuming UTF-16LE encoding.\n") );
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1330:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1330:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1331:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Assuming UTF-16BE encoding.\n") );
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1331:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Assuming UTF-16BE encoding.\n") );
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1335:8: warning: Although the value stored to 'InF' is used in the enclosing expression, the value is never actually read from 'InF' [clang-analyzer-deadcode.DeadStores]
  if ((InF = read_bom(InF, &ipFlag->bomtype)) == NULL) {
       ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:1335:8: note: Although the value stored to 'InF' is used in the enclosing expression, the value is never actually read from 'InF'
  if ((InF = read_bom(InF, &ipFlag->bomtype)) == NULL) {
       ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:1335:12: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ((InF = read_bom(InF, &ipFlag->bomtype)) == NULL) {
       ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:1335:12: note: if it should be an assignment, move it out of the 'if' condition
common.c:1335:12: note: if it is meant to be an equality check, change '=' to '=='
common.c:1341:79: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((ipFlag->bomtype == FILE_MBS) && (ipFlag->ConvMode == CONVMODE_UTF16LE))
                                                                              ^
                                                                               {
common.c:1343:79: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((ipFlag->bomtype == FILE_MBS) && (ipFlag->ConvMode == CONVMODE_UTF16BE))
                                                                              ^
                                                                               {
common.c:1351:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ipFlag->status |= WCHAR_T_TOO_SMALL ;
      ^~~~~~~~~~~~~~ ~~
common.c:1352:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (!ipFlag->error) ipFlag->error = 1;
                         ^
                          {
common.c:1362:19: warning: 2 adjacent parameters of 'check_unicode' of similar type ('FILE *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
int check_unicode(FILE *InF, FILE *TempF,  CFlag *ipFlag, const char *ipInFN, const char *progname)
                  ^~~~~~~~~~~~~~~~~~~~~~
common.c:1362:25: note: the first parameter in the range is 'InF'
int check_unicode(FILE *InF, FILE *TempF,  CFlag *ipFlag, const char *ipInFN, const char *progname)
                        ^~~
common.c:1362:36: note: the last parameter in the range is 'TempF'
int check_unicode(FILE *InF, FILE *TempF,  CFlag *ipFlag, const char *ipInFN, const char *progname)
                                   ^~~~~
common.c:1368:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1368:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1369:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Assuming UTF-16LE encoding.\n") );
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1369:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Assuming UTF-16LE encoding.\n") );
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1372:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1372:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1373:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Assuming UTF-16BE encoding.\n") );
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1373:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Assuming UTF-16BE encoding.\n") );
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1377:8: warning: Although the value stored to 'InF' is used in the enclosing expression, the value is never actually read from 'InF' [clang-analyzer-deadcode.DeadStores]
  if ((InF = read_bom(InF, &ipFlag->bomtype)) == NULL) {
       ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:1377:8: note: Although the value stored to 'InF' is used in the enclosing expression, the value is never actually read from 'InF'
  if ((InF = read_bom(InF, &ipFlag->bomtype)) == NULL) {
       ^     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:1377:12: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ((InF = read_bom(InF, &ipFlag->bomtype)) == NULL) {
       ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:1377:12: note: if it should be an assignment, move it out of the 'if' condition
common.c:1377:12: note: if it is meant to be an equality check, change '=' to '=='
common.c:1381:27: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (ipFlag->verbose > 1)
                          ^
                           {
common.c:1394:79: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((ipFlag->bomtype == FILE_MBS) && (ipFlag->ConvMode == CONVMODE_UTF16LE))
                                                                              ^
                                                                               {
common.c:1396:79: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((ipFlag->bomtype == FILE_MBS) && (ipFlag->ConvMode == CONVMODE_UTF16BE))
                                                                              ^
                                                                               {
common.c:1404:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ipFlag->status |= WCHAR_T_TOO_SMALL ;
      ^~~~~~~~~~~~~~ ~~
common.c:1405:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (!ipFlag->error) ipFlag->error = 1;
                         ^
                          {
common.c:1412:14: warning: function is not thread safe [concurrency-mt-unsafe]
  if (strcmp(nl_langinfo(CODESET), "GB18030") == 0)
             ^
common.c:1412:52: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (strcmp(nl_langinfo(CODESET), "GB18030") == 0)
                                                   ^
                                                    {
common.c:1417:74: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((ipFlag->add_bom) || ((ipFlag->keep_bom) && (ipFlag->bomtype > 0)))
                                                                         ^
                                                                          {
common.c:1418:52: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (write_bom(TempF, ipFlag, progname) == NULL) return -1;
                                                   ^
                                                    {
common.c:1427:5: warning: function 'ConvertNewFile' has cognitive complexity of 119 (threshold 25) [readability-function-cognitive-complexity]
int ConvertNewFile(char *ipInFN, char *ipOutFN, CFlag *ipFlag, const char *progname,
    ^
common.c:1455:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (symbolic_link(ipOutFN) && !ipFlag->Follow) {
  ^
common.c:1455:30: note: +1
  if (symbolic_link(ipOutFN) && !ipFlag->Follow) {
                             ^
common.c:1462:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (regfile(ipInFN, 1, ipFlag, progname)) {
  ^
common.c:1469:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (symbolic_link(ipInFN) && regfile_target(ipInFN, ipFlag,progname)) {
  ^
common.c:1469:29: note: +1
  if (symbolic_link(ipInFN) && regfile_target(ipInFN, ipFlag,progname)) {
                            ^
common.c:1476:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (symbolic_link(ipOutFN) && (ipFlag->Follow == SYMLINK_FOLLOW) && regfile_target(ipOutFN, ipFlag,progname)) {
  ^
common.c:1476:68: note: +1
  if (symbolic_link(ipOutFN) && (ipFlag->Follow == SYMLINK_FOLLOW) && regfile_target(ipOutFN, ipFlag,progname)) {
                                                                   ^
common.c:1479:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (!ipFlag->error) ipFlag->error = 1;
    ^
common.c:1488:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (stat(ipInFN, &StatBuf)) {
  ^
common.c:1490:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->verbose) {
    ^
common.c:1501:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (InF == NULL) {
  ^
common.c:1502:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->verbose) {
    ^
common.c:1514:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (symbolic_link(ipOutFN) && !RetVal) {
  ^
common.c:1514:30: note: +1
  if (symbolic_link(ipOutFN) && !RetVal) {
                             ^
common.c:1516:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->Follow == SYMLINK_FOLLOW) {
    ^
common.c:1518:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (ResolveSymlinkResult < 0) {
      ^
common.c:1519:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (ipFlag->verbose) {
        ^
common.c:1533:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if((TempF = MakeTempFileFrom(TargetFN, &TempPath))==NULL) {
  ^
common.c:1534:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->verbose) {
    ^
common.c:1535:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (errno) {
      ^
common.c:1540:9: note: +1, nesting level increased to 3
      } else {
        ^
common.c:1542:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!ipFlag->error) ipFlag->error = 1;
        ^
common.c:1555:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (!RetVal)
  ^
common.c:1556:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (check_unicode(InF, TempF, ipFlag, ipInFN, progname))
    ^
common.c:1561:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if ((ipFlag->bomtype == FILE_UTF16LE) || (ipFlag->bomtype == FILE_UTF16BE)) {
  ^
common.c:1561:41: note: +1
  if ((ipFlag->bomtype == FILE_UTF16LE) || (ipFlag->bomtype == FILE_UTF16BE)) {
                                        ^
common.c:1562:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((!RetVal) && (ConvertW(InF, TempF, ipFlag, progname)))
    ^
common.c:1562:19: note: +1
    if ((!RetVal) && (ConvertW(InF, TempF, ipFlag, progname)))
                  ^
common.c:1564:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->status & UNICODE_CONVERSION_ERROR) {
    ^
common.c:1565:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (!ipFlag->error) ipFlag->error = 1;
      ^
common.c:1568:5: note: +1, nesting level increased to 1
  } else {
    ^
common.c:1569:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((!RetVal) && (Convert(InF, TempF, ipFlag, progname)))
    ^
common.c:1569:19: note: +1
    if ((!RetVal) && (Convert(InF, TempF, ipFlag, progname)))
                  ^
common.c:1578:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (d2u_fclose(InF, ipInFN, ipFlag, "r", progname) == EOF)
  ^
common.c:1582:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (TempF) {
  ^
common.c:1583:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (d2u_fclose(TempF, TempPath, ipFlag, "w", progname) == EOF)
    ^
common.c:1588:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (!RetVal)
  ^
common.c:1590:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->NewFile == 0) { /* old-file mode */
    ^
common.c:1592:7: note: +1, nesting level increased to 2
    } else {
      ^
common.c:1598:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (RetVal) {
    ^
common.c:1599:8: note: +3, including nesting penalty of 2, nesting level increased to 3
       if (ipFlag->verbose) {
       ^
common.c:1611:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (!RetVal && (ipFlag->NewFile == 0)) { /* old-file mode */
  ^
common.c:1611:15: note: +1
  if (!RetVal && (ipFlag->NewFile == 0)) { /* old-file mode */
              ^
common.c:1615:6: note: +2, including nesting penalty of 1, nesting level increased to 2
     if (chown(TempPath, StatBuf.st_uid, StatBuf.st_gid)) {
     ^
common.c:1616:9: note: +3, including nesting penalty of 2, nesting level increased to 3
        if (ipFlag->AllowChown) {
        ^
common.c:1617:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (ipFlag->verbose) {
          ^
common.c:1626:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (RetVal) {
          ^
common.c:1627:14: note: +5, including nesting penalty of 4, nesting level increased to 5
             if (ipFlag->verbose) {
             ^
common.c:1636:11: note: +1, nesting level increased to 3
        } else {
          ^
common.c:1637:11: note: +4, including nesting penalty of 3, nesting level increased to 4
          if (ipFlag->verbose) {
          ^
common.c:1650:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if ((!RetVal) && (ipFlag->KeepDate))
  ^
common.c:1650:17: note: +1
  if ((!RetVal) && (ipFlag->KeepDate))
                ^
common.c:1655:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (utime(TempPath, &UTimeBuf) == -1) {
    ^
common.c:1656:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (ipFlag->verbose) {
      ^
common.c:1667:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (RetVal && (TempPath != NULL)) {
  ^
common.c:1667:14: note: +1
  if (RetVal && (TempPath != NULL)) {
             ^
common.c:1668:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (d2u_unlink(TempPath) && (errno != ENOENT)) {
    ^
common.c:1668:30: note: +1
    if (d2u_unlink(TempPath) && (errno != ENOENT)) {
                             ^
common.c:1669:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (ipFlag->verbose) {
      ^
common.c:1680:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (!RetVal) {
  ^
common.c:1693:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (d2u_rename(TempPath, TargetFN) != 0) {
    ^
common.c:1694:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (ipFlag->verbose) {
      ^
common.c:1701:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (ResolveSymlinkResult > 0)
        ^
common.c:1709:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ResolveSymlinkResult > 0)
    ^
common.c:1437:9: warning: variable 'TempPath' is not initialized [cppcoreguidelines-init-variables]
  char *TempPath;
        ^
                 = NULL
common.c:1438:15: warning: variable 'errstr' is not initialized [cppcoreguidelines-init-variables]
  const char *errstr;
              ^
                     = NULL
common.c:1447:10: warning: variable 'mask' is not initialized [cppcoreguidelines-init-variables]
  mode_t mask;
         ^
              = 0
common.c:1456:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    ipFlag->status |= OUTPUTFILE_SYMLINK ;
    ^~~~~~~~~~~~~~ ~~
common.c:1463:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    ipFlag->status |= NO_REGFILE ;
    ^~~~~~~~~~~~~~ ~~
common.c:1470:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    ipFlag->status |= INPUT_TARGET_NO_REGFILE ;
    ^~~~~~~~~~~~~~ ~~
common.c:1477:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    ipFlag->status |= OUTPUT_TARGET_NO_REGFILE ;
    ^~~~~~~~~~~~~~ ~~
common.c:1479:24: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
    if (!ipFlag->error) ipFlag->error = 1;
                       ^
                        {
common.c:1492:16: warning: function is not thread safe [concurrency-mt-unsafe]
      errstr = strerror(errno);
               ^
common.c:1493:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, ipInFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1493:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, ipInFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1494:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1494:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1504:16: warning: function is not thread safe [concurrency-mt-unsafe]
      errstr = strerror(errno);
               ^
common.c:1505:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, ipInFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1505:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, ipInFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1506:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1506:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1520:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1520:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1521:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, _("problems resolving symbolic link '%s'\n"), ipOutFN);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1521:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, _("problems resolving symbolic link '%s'\n"), ipOutFN);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1533:13: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if((TempF = MakeTempFileFrom(TargetFN, &TempPath))==NULL) {
      ~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:1533:13: note: if it should be an assignment, move it out of the 'if' condition
common.c:1533:13: note: if it is meant to be an equality check, change '=' to '=='
common.c:1537:18: warning: function is not thread safe [concurrency-mt-unsafe]
        errstr = strerror(errno);
                 ^
common.c:1538:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1538:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1539:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_ANSI_FPRINTF(stderr, _("Failed to open temporary output file: %s\n"), errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1539:9: note: cast the expression to void to silence this warning
        D2U_ANSI_FPRINTF(stderr, _("Failed to open temporary output file: %s\n"), errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1542:28: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
        if (!ipFlag->error) ipFlag->error = 1;
                           ^
                            {
common.c:1555:15: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (!RetVal)
              ^
               {
common.c:1556:61: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (check_unicode(InF, TempF, ipFlag, ipInFN, progname))
                                                            ^
                                                             {
common.c:1562:63: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((!RetVal) && (ConvertW(InF, TempF, ipFlag, progname)))
                                                              ^
                                                               {
common.c:1564:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->status & UNICODE_CONVERSION_ERROR) {
        ^~~~~~~~~~~~~~ ~
common.c:1565:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (!ipFlag->error) ipFlag->error = 1;
                         ^
                          {
common.c:1569:62: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((!RetVal) && (Convert(InF, TempF, ipFlag, progname)))
                                                             ^
                                                              {
common.c:1578:61: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (d2u_fclose(InF, ipInFN, ipFlag, "r", progname) == EOF)
                                                            ^
                                                             {
common.c:1583:67: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (d2u_fclose(TempF, TempPath, ipFlag, "w", progname) == EOF)
                                                                  ^
                                                                   {
common.c:1601:19: warning: function is not thread safe [concurrency-mt-unsafe]
         errstr = strerror(errno);
                  ^
common.c:1602:10: warning: the value returned by this function should be used [cert-err33-c]
         D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1602:10: note: cast the expression to void to silence this warning
         D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1603:10: warning: the value returned by this function should be used [cert-err33-c]
         D2U_UTF8_FPRINTF(stderr, _("Failed to change the permissions of temporary output file %s:"), TempPath);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1603:10: note: cast the expression to void to silence this warning
         D2U_UTF8_FPRINTF(stderr, _("Failed to change the permissions of temporary output file %s:"), TempPath);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1604:10: warning: the value returned by this function should be used [cert-err33-c]
         D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
         ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1604:10: note: cast the expression to void to silence this warning
         D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
         ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1618:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1618:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1619:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr, _("The user and/or group ownership of file %s is not preserved.\n"), ipOutFN);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1619:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr, _("The user and/or group ownership of file %s is not preserved.\n"), ipOutFN);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1629:25: warning: function is not thread safe [concurrency-mt-unsafe]
               errstr = strerror(errno);
                        ^
common.c:1630:16: warning: the value returned by this function should be used [cert-err33-c]
               D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
               ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1630:16: note: cast the expression to void to silence this warning
               D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
               ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1631:16: warning: the value returned by this function should be used [cert-err33-c]
               D2U_UTF8_FPRINTF(stderr, _("Failed to change the permissions of temporary output file %s:"), TempPath);
               ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1631:16: note: cast the expression to void to silence this warning
               D2U_UTF8_FPRINTF(stderr, _("Failed to change the permissions of temporary output file %s:"), TempPath);
               ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1632:16: warning: the value returned by this function should be used [cert-err33-c]
               D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
               ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1632:16: note: cast the expression to void to silence this warning
               D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
               ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1639:22: warning: function is not thread safe [concurrency-mt-unsafe]
            errstr = strerror(errno);
                     ^
common.c:1640:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1640:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1641:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr, _("Failed to change the owner and group of temporary output file %s:"), TempPath);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1641:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr, _("Failed to change the owner and group of temporary output file %s:"), TempPath);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1642:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
            ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1642:13: note: cast the expression to void to silence this warning
            D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
            ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1658:18: warning: function is not thread safe [concurrency-mt-unsafe]
        errstr = strerror(errno);
                 ^
common.c:1659:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, TempPath);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1659:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, TempPath);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1660:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1660:9: note: cast the expression to void to silence this warning
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1671:18: warning: function is not thread safe [concurrency-mt-unsafe]
        errstr = strerror(errno);
                 ^
common.c:1672:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, TempPath);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1672:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, TempPath);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1673:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1673:9: note: cast the expression to void to silence this warning
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1696:18: warning: function is not thread safe [concurrency-mt-unsafe]
        errstr = strerror(errno);
                 ^
common.c:1697:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1697:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1698:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, _("problems renaming '%s' to '%s':"), TempPath, TargetFN);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1698:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, _("problems renaming '%s' to '%s':"), TempPath, TargetFN);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1699:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1699:9: note: cast the expression to void to silence this warning
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1701:38: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (ResolveSymlinkResult > 0)
                                     ^
                                      {
common.c:1702:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, _("          which is the target of symbolic link '%s'\n"), ipOutFN);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1702:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, _("          which is the target of symbolic link '%s'\n"), ipOutFN);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1704:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, _("          output file remains in '%s'\n"), TempPath);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1704:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, _("          output file remains in '%s'\n"), TempPath);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1709:34: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ResolveSymlinkResult > 0)
                                 ^
                                  {
common.c:1729:15: warning: variable 'errstr' is not initialized [cppcoreguidelines-init-variables]
  const char *errstr;
              ^
                     = NULL
common.c:1735:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    ipFlag->status |= NO_REGFILE ;
    ^~~~~~~~~~~~~~ ~~
common.c:1742:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    ipFlag->status |= INPUT_TARGET_NO_REGFILE ;
    ^~~~~~~~~~~~~~ ~~
common.c:1752:16: warning: function is not thread safe [concurrency-mt-unsafe]
      errstr = strerror(errno);
               ^
common.c:1753:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, ipInFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1753:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: %s:", progname, ipInFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1754:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1754:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:1774:15: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (!RetVal)
              ^
               {
common.c:1775:62: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (check_unicode(InF, stdout, ipFlag, ipInFN, progname))
                                                             ^
                                                              {
common.c:1781:64: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((!RetVal) && (ConvertW(InF, stdout, ipFlag, progname)))
                                                               ^
                                                                {
common.c:1783:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->status & UNICODE_CONVERSION_ERROR) {
        ^~~~~~~~~~~~~~ ~
common.c:1784:26: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
      if (!ipFlag->error) ipFlag->error = 1;
                         ^
                          {
common.c:1788:63: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((!RetVal) && (Convert(InF, stdout, ipFlag, progname)))
                                                              ^
                                                               {
common.c:1797:61: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (d2u_fclose(InF, ipInFN, ipFlag, "r", progname) == EOF)
                                                            ^
                                                             {
common.c:1834:65: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (check_unicode(stdin, stdout, ipFlag, "stdin", progname))
                                                                ^
                                                                 {
common.c:1840:7: warning: do not use 'else' after 'return' [llvm-else-after-return,readability-else-after-return]
    } else {
      ^~~~~~
common.c:1850:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (pFlag->status & BINARY_FILE) {
        ^~~~~~~~~~~~~ ~
common.c:1851:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1851:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1852:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Skipping binary file %s\n"), "stdin");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1852:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Skipping binary file %s\n"), "stdin");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1853:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    } else if (pFlag->status & WRONG_CODEPAGE) {
               ^~~~~~~~~~~~~ ~
common.c:1854:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1854:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1855:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("code page %d is not supported.\n"), pFlag->ConvMode);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1855:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("code page %d is not supported.\n"), pFlag->ConvMode);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1857:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    } else if (pFlag->status & WCHAR_T_TOO_SMALL) {
               ^~~~~~~~~~~~~ ~
common.c:1858:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1858:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1859:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, the size of wchar_t is %d bytes.\n"), "stdin", (int)sizeof(wchar_t));
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1859:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, the size of wchar_t is %d bytes.\n"), "stdin", (int)sizeof(wchar_t));
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1860:16: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    } else if (pFlag->status & UNICODE_CONVERSION_ERROR) {
               ^~~~~~~~~~~~~ ~
common.c:1861:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1861:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1862:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, an UTF-16 conversion error occurred on line %u.\n"), "stdin", pFlag->line_nr);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1862:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, an UTF-16 conversion error occurred on line %u.\n"), "stdin", pFlag->line_nr);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1876:38: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (pFlag->bomtype == FILE_UTF16LE)
                                     ^
                                      {
common.c:1878:38: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (pFlag->bomtype == FILE_UTF16BE)
                                     ^
                                      {
common.c:1885:27: warning: function is not thread safe [concurrency-mt-unsafe]
    d2u_strncpy(outformat,nl_langinfo(CODESET),lout);
                          ^
common.c:1897:42: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (pFlag->bomtype == FILE_UTF16LE)
                                         ^
                                          {
common.c:1899:42: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (pFlag->bomtype == FILE_UTF16BE)
                                         ^
                                          {
common.c:1907:6: warning: function 'print_messages' has cognitive complexity of 86 (threshold 25) [readability-function-cognitive-complexity]
void print_messages(const CFlag *pFlag, const char *infile, const char *outfile, const char *progname, const int conversion_error)
     ^
common.c:1930:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (pFlag->status & NO_REGFILE) {
  ^
common.c:1933:10: note: +1, nesting level increased to 1
  } else if (pFlag->status & OUTPUTFILE_SYMLINK) {
         ^
common.c:1935:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (outfile)
    ^
common.c:1937:5: note: +1, nesting level increased to 2
    else
    ^
common.c:1939:10: note: +1, nesting level increased to 1
  } else if (pFlag->status & INPUT_TARGET_NO_REGFILE) {
         ^
common.c:1942:10: note: +1, nesting level increased to 1
  } else if ((pFlag->status & OUTPUT_TARGET_NO_REGFILE) && outfile) {
         ^
common.c:1942:57: note: +1
  } else if ((pFlag->status & OUTPUT_TARGET_NO_REGFILE) && outfile) {
                                                        ^
common.c:1945:10: note: +1, nesting level increased to 1
  } else if (pFlag->status & BINARY_FILE) {
         ^
common.c:1948:10: note: +1, nesting level increased to 1
  } else if (pFlag->status & WRONG_CODEPAGE) {
         ^
common.c:1952:10: note: +1, nesting level increased to 1
  } else if (pFlag->status & WCHAR_T_TOO_SMALL) {
         ^
common.c:1955:10: note: +1, nesting level increased to 1
  } else if (pFlag->status & UNICODE_CONVERSION_ERROR) {
         ^
common.c:1963:5: note: +1, nesting level increased to 1
  } else {
    ^
common.c:1964:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (!conversion_error) {
    ^
common.c:1966:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (informat[0] == '\0') {
      ^
common.c:1967:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (is_dos2unix(progname)) {
        ^
common.c:1968:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          if (outfile)
          ^
common.c:1970:11: note: +1, nesting level increased to 5
          else
          ^
common.c:1972:11: note: +1, nesting level increased to 4
        } else {
          ^
common.c:1973:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          if (pFlag->FromToMode == FROMTO_UNIX2MAC) {
          ^
common.c:1974:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            if (outfile)
            ^
common.c:1976:13: note: +1, nesting level increased to 6
            else
            ^
common.c:1978:13: note: +1, nesting level increased to 5
          } else {
            ^
common.c:1979:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            if (outfile)
            ^
common.c:1981:13: note: +1, nesting level increased to 6
            else
            ^
common.c:1985:9: note: +1, nesting level increased to 3
      } else {
        ^
common.c:1986:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (is_dos2unix(progname)) {
        ^
common.c:1987:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          if (outfile)
          ^
common.c:1995:11: note: +1, nesting level increased to 5
          else
          ^
common.c:2002:11: note: +1, nesting level increased to 4
        } else {
          ^
common.c:2003:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          if (pFlag->FromToMode == FROMTO_UNIX2MAC) {
          ^
common.c:2004:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            if (outfile)
            ^
common.c:2006:13: note: +1, nesting level increased to 6
            else
            ^
common.c:2008:13: note: +1, nesting level increased to 5
          } else {
            ^
common.c:2009:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            if (outfile)
            ^
common.c:2011:13: note: +1, nesting level increased to 6
            else
            ^
common.c:2016:7: note: +1, nesting level increased to 2
    } else {
      ^
common.c:2018:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (outfile)
      ^
common.c:2020:7: note: +1, nesting level increased to 3
      else
      ^
common.c:1907:61: warning: 2 adjacent parameters of 'print_messages' of similar type ('const char *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
void print_messages(const CFlag *pFlag, const char *infile, const char *outfile, const char *progname, const int conversion_error)
                                                            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:1907:73: note: the first parameter in the range is 'outfile'
void print_messages(const CFlag *pFlag, const char *infile, const char *outfile, const char *progname, const int conversion_error)
                                                                        ^~~~~~~
common.c:1907:94: note: the last parameter in the range is 'progname'
void print_messages(const CFlag *pFlag, const char *infile, const char *outfile, const char *progname, const int conversion_error)
                                                                                             ^~~~~~~~
common.c:1909:17: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  char informat[32];
                ^
common.c:1910:18: warning: 64 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  char outformat[64];
                 ^
common.c:1930:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (pFlag->status & NO_REGFILE) {
      ^~~~~~~~~~~~~ ~
common.c:1931:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1931:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1932:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, _("Skipping %s, not a regular file.\n"), infile);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1932:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, _("Skipping %s, not a regular file.\n"), infile);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1933:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } else if (pFlag->status & OUTPUTFILE_SYMLINK) {
             ^~~~~~~~~~~~~ ~
common.c:1934:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1934:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1935:17: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (outfile)
                ^
                 {
common.c:1936:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Skipping %s, output file %s is a symbolic link.\n"), infile, outfile);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1936:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Skipping %s, output file %s is a symbolic link.\n"), infile, outfile);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1937:9: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    else
        ^
         {
common.c:1938:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Skipping symbolic link %s.\n"), infile);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1938:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Skipping symbolic link %s.\n"), infile);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1939:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } else if (pFlag->status & INPUT_TARGET_NO_REGFILE) {
             ^~~~~~~~~~~~~ ~
common.c:1940:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1940:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1941:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, _("Skipping symbolic link %s, target is not a regular file.\n"), infile);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1941:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, _("Skipping symbolic link %s, target is not a regular file.\n"), infile);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1942:15: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } else if ((pFlag->status & OUTPUT_TARGET_NO_REGFILE) && outfile) {
              ^~~~~~~~~~~~~ ~
common.c:1943:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1943:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1944:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, _("Skipping %s, target of symbolic link %s is not a regular file.\n"), infile, outfile);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1944:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, _("Skipping %s, target of symbolic link %s is not a regular file.\n"), infile, outfile);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1945:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } else if (pFlag->status & BINARY_FILE) {
             ^~~~~~~~~~~~~ ~
common.c:1946:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1946:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1947:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, _("Skipping binary file %s\n"), infile);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1947:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, _("Skipping binary file %s\n"), infile);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1948:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } else if (pFlag->status & WRONG_CODEPAGE) {
             ^~~~~~~~~~~~~ ~
common.c:1949:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1949:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1950:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, _("code page %d is not supported.\n"), pFlag->ConvMode);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1950:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, _("code page %d is not supported.\n"), pFlag->ConvMode);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1952:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } else if (pFlag->status & WCHAR_T_TOO_SMALL) {
             ^~~~~~~~~~~~~ ~
common.c:1953:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1953:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1954:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, the size of wchar_t is %d bytes.\n"), infile, (int)sizeof(wchar_t));
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1954:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, the size of wchar_t is %d bytes.\n"), infile, (int)sizeof(wchar_t));
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1955:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } else if (pFlag->status & UNICODE_CONVERSION_ERROR) {
             ^~~~~~~~~~~~~ ~
common.c:1956:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1956:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1957:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, an UTF-16 conversion error occurred on line %u.\n"), infile, pFlag->line_nr);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1957:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, an UTF-16 conversion error occurred on line %u.\n"), infile, pFlag->line_nr);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1965:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1965:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1968:23: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          if (outfile)
                      ^
                       {
common.c:1969:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr, _("converting file %s to file %s in Unix format...\n"), infile, outfile);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1969:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr, _("converting file %s to file %s in Unix format...\n"), infile, outfile);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1970:15: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          else
              ^
               {
common.c:1971:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr, _("converting file %s to Unix format...\n"), infile);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1971:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr, _("converting file %s to Unix format...\n"), infile);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1974:25: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (outfile)
                        ^
                         {
common.c:1975:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("converting file %s to file %s in Mac format...\n"), infile, outfile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1975:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("converting file %s to file %s in Mac format...\n"), infile, outfile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1976:17: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            else
                ^
                 {
common.c:1977:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("converting file %s to Mac format...\n"), infile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1977:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("converting file %s to Mac format...\n"), infile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1979:25: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (outfile)
                        ^
                         {
common.c:1980:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("converting file %s to file %s in DOS format...\n"), infile, outfile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1980:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("converting file %s to file %s in DOS format...\n"), infile, outfile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1981:17: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            else
                ^
                 {
common.c:1982:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("converting file %s to DOS format...\n"), infile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1982:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("converting file %s to DOS format...\n"), infile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1987:23: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          if (outfile)
                      ^
                       {
common.c:1994:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s file %s in Unix format...\n"), informat, infile, outformat, outfile);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1994:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s file %s in Unix format...\n"), informat, infile, outformat, outfile);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:1995:15: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          else
              ^
               {
common.c:2001:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s Unix format...\n"), informat, infile, outformat);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2001:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s Unix format...\n"), informat, infile, outformat);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2004:25: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (outfile)
                        ^
                         {
common.c:2005:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s file %s in Mac format...\n"), informat, infile, outformat, outfile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2005:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s file %s in Mac format...\n"), informat, infile, outformat, outfile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2006:17: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            else
                ^
                 {
common.c:2007:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s Mac format...\n"), informat, infile, outformat);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2007:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s Mac format...\n"), informat, infile, outformat);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2009:25: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (outfile)
                        ^
                         {
common.c:2010:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s file %s in DOS format...\n"), informat, infile, outformat, outfile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2010:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s file %s in DOS format...\n"), informat, infile, outformat, outfile);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2011:17: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            else
                ^
                 {
common.c:2012:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s DOS format...\n"), informat, infile, outformat);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2012:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("converting %s file %s to %s DOS format...\n"), informat, infile, outformat);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2017:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2017:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2018:19: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (outfile)
                  ^
                   {
common.c:2019:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, _("problems converting file %s to file %s\n"), infile, outfile);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2019:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, _("problems converting file %s to file %s\n"), infile, outfile);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2020:11: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else
          ^
           {
common.c:2021:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, _("problems converting file %s\n"), infile);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2021:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, _("problems converting file %s\n"), infile);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2026:46: warning: 2 adjacent parameters of 'print_messages_info' of similar type ('const char *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
void print_messages_info(const CFlag *pFlag, const char *infile, const char *progname)
                                             ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:2026:58: note: the first parameter in the range is 'infile'
void print_messages_info(const CFlag *pFlag, const char *infile, const char *progname)
                                                         ^~~~~~
common.c:2026:78: note: the last parameter in the range is 'progname'
void print_messages_info(const CFlag *pFlag, const char *infile, const char *progname)
                                                                             ^~~~~~~~
common.c:2028:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (pFlag->status & NO_REGFILE) {
      ^~~~~~~~~~~~~ ~
common.c:2030:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2030:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2031:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Skipping %s, not a regular file.\n"), infile);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2031:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Skipping %s, not a regular file.\n"), infile);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2033:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } else if (pFlag->status & INPUT_TARGET_NO_REGFILE) {
             ^~~~~~~~~~~~~ ~
common.c:2035:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2035:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2036:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Skipping symbolic link %s, target is not a regular file.\n"), infile);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2036:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Skipping symbolic link %s, target is not a regular file.\n"), infile);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2039:14: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  } else if (pFlag->status & WCHAR_T_TOO_SMALL) {
             ^~~~~~~~~~~~~ ~
common.c:2041:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2041:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2042:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, the size of wchar_t is %d bytes.\n"), infile, (int)sizeof(wchar_t));
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2042:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Skipping UTF-16 file %s, the size of wchar_t is %d bytes.\n"), infile, (int)sizeof(wchar_t));
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2048:6: warning: function 'printInfo' has cognitive complexity of 68 (threshold 25) [readability-function-cognitive-complexity]
void printInfo(CFlag *ipFlag, const char *filename, int bomtype, unsigned int lb_dos, unsigned int lb_unix, unsigned int lb_mac, int last_eol)
     ^
common.c:2053:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ipFlag->file_info & INFO_CONVERT) {
  ^
common.c:2054:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((ipFlag->FromToMode == FROMTO_DOS2UNIX) && (lb_dos == 0) && (! ipFlag->add_eol || last_eol == INFO_UNIX ))
    ^
common.c:2054:66: note: +1
    if ((ipFlag->FromToMode == FROMTO_DOS2UNIX) && (lb_dos == 0) && (! ipFlag->add_eol || last_eol == INFO_UNIX ))
                                                                 ^
common.c:2054:88: note: +1
    if ((ipFlag->FromToMode == FROMTO_DOS2UNIX) && (lb_dos == 0) && (! ipFlag->add_eol || last_eol == INFO_UNIX ))
                                                                                       ^
common.c:2056:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((ipFlag->FromToMode == FROMTO_UNIX2DOS) && (lb_unix == 0) && (! ipFlag->add_eol || last_eol == INFO_DOS ))
    ^
common.c:2056:67: note: +1
    if ((ipFlag->FromToMode == FROMTO_UNIX2DOS) && (lb_unix == 0) && (! ipFlag->add_eol || last_eol == INFO_DOS ))
                                                                  ^
common.c:2056:89: note: +1
    if ((ipFlag->FromToMode == FROMTO_UNIX2DOS) && (lb_unix == 0) && (! ipFlag->add_eol || last_eol == INFO_DOS ))
                                                                                        ^
common.c:2058:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((ipFlag->FromToMode == FROMTO_UNIX2MAC) && (lb_unix == 0) && (! ipFlag->add_eol || last_eol == INFO_MAC ))
    ^
common.c:2058:67: note: +1
    if ((ipFlag->FromToMode == FROMTO_UNIX2MAC) && (lb_unix == 0) && (! ipFlag->add_eol || last_eol == INFO_MAC ))
                                                                  ^
common.c:2058:89: note: +1
    if ((ipFlag->FromToMode == FROMTO_UNIX2MAC) && (lb_unix == 0) && (! ipFlag->add_eol || last_eol == INFO_MAC ))
                                                                                        ^
common.c:2060:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((ipFlag->FromToMode == FROMTO_MAC2UNIX) && (lb_mac == 0) && (! ipFlag->add_eol || last_eol == INFO_UNIX ))
    ^
common.c:2060:66: note: +1
    if ((ipFlag->FromToMode == FROMTO_MAC2UNIX) && (lb_mac == 0) && (! ipFlag->add_eol || last_eol == INFO_UNIX ))
                                                                 ^
common.c:2060:88: note: +1
    if ((ipFlag->FromToMode == FROMTO_MAC2UNIX) && (lb_mac == 0) && (! ipFlag->add_eol || last_eol == INFO_UNIX ))
                                                                                       ^
common.c:2062:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((ipFlag->Force == 0) && (ipFlag->status & BINARY_FILE))
    ^
common.c:2062:30: note: +1
    if ((ipFlag->Force == 0) && (ipFlag->status & BINARY_FILE))
                             ^
common.c:2066:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if ((ipFlag->file_info & INFO_HEADER) && (! header_done)) {
  ^
common.c:2066:41: note: +1
  if ((ipFlag->file_info & INFO_HEADER) && (! header_done)) {
                                        ^
common.c:2067:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->file_info & INFO_DOS)
    ^
common.c:2069:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->file_info & INFO_UNIX)
    ^
common.c:2071:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->file_info & INFO_MAC)
    ^
common.c:2073:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->file_info & INFO_BOM)
    ^
common.c:2075:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->file_info & INFO_TEXT)
    ^
common.c:2077:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
    ^
common.c:2077:66: note: +1
    if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                                                                 ^
common.c:2077:26: note: +1
    if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                         ^
common.c:2079:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (*filename != '\0') {
    ^
common.c:2080:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
      ^
common.c:2080:46: note: +1
      if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
                                             ^
common.c:2084:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->file_info & INFO_PRINT0)
    ^
common.c:2086:5: note: +1, nesting level increased to 2
    else
    ^
common.c:2091:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  switch (last_eol) {
  ^
common.c:2105:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ipFlag->file_info & INFO_DOS)
  ^
common.c:2107:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ipFlag->file_info & INFO_UNIX)
  ^
common.c:2109:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ipFlag->file_info & INFO_MAC)
  ^
common.c:2111:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ipFlag->file_info & INFO_BOM)
  ^
common.c:2113:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ipFlag->file_info & INFO_TEXT) {
  ^
common.c:2114:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (ipFlag->status & BINARY_FILE)
    ^
common.c:2116:5: note: +1, nesting level increased to 2
    else
    ^
common.c:2119:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
  ^
common.c:2119:64: note: +1
  if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                                                               ^
common.c:2119:24: note: +1
  if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                       ^
common.c:2121:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (*filename != '\0') {
  ^
common.c:2123:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((ipFlag->file_info & INFO_NOPATH) && (((ptr=strrchr(filename,'/')) != NULL) || ((ptr=strrchr(filename,'\\')) != NULL)) )
    ^
common.c:2123:43: note: +1
    if ((ipFlag->file_info & INFO_NOPATH) && (((ptr=strrchr(filename,'/')) != NULL) || ((ptr=strrchr(filename,'\\')) != NULL)) )
                                          ^
common.c:2123:85: note: +1
    if ((ipFlag->file_info & INFO_NOPATH) && (((ptr=strrchr(filename,'/')) != NULL) || ((ptr=strrchr(filename,'\\')) != NULL)) )
                                                                                    ^
common.c:2125:5: note: +1, nesting level increased to 2
    else
    ^
common.c:2127:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
    ^
common.c:2127:44: note: +1
    if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
                                           ^
common.c:2131:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if (ipFlag->file_info & INFO_PRINT0)
  ^
common.c:2133:3: note: +1, nesting level increased to 1
  else
  ^
common.c:2048:53: warning: 4 adjacent parameters of 'printInfo' of convertible types are easily swapped by mistake [bugprone-easily-swappable-parameters]
void printInfo(CFlag *ipFlag, const char *filename, int bomtype, unsigned int lb_dos, unsigned int lb_unix, unsigned int lb_mac, int last_eol)
                                                    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:2048:57: note: the first parameter in the range is 'bomtype'
void printInfo(CFlag *ipFlag, const char *filename, int bomtype, unsigned int lb_dos, unsigned int lb_unix, unsigned int lb_mac, int last_eol)
                                                        ^~~~~~~
common.c:2048:122: note: the last parameter in the range is 'lb_mac'
void printInfo(CFlag *ipFlag, const char *filename, int bomtype, unsigned int lb_dos, unsigned int lb_unix, unsigned int lb_mac, int last_eol)
                                                                                                                         ^~~~~~
common.c:2048:66: note: 'int' and 'unsigned int' may be implicitly converted
void printInfo(CFlag *ipFlag, const char *filename, int bomtype, unsigned int lb_dos, unsigned int lb_unix, unsigned int lb_mac, int last_eol)
                                                                 ^
common.c:2051:12: warning: 6 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  char eol[6];
           ^
common.c:2053:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (ipFlag->file_info & INFO_CONVERT) {
      ^~~~~~~~~~~~~~~~~ ~
common.c:2054:115: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((ipFlag->FromToMode == FROMTO_DOS2UNIX) && (lb_dos == 0) && (! ipFlag->add_eol || last_eol == INFO_UNIX ))
                                                                                                                  ^
                                                                                                                   {
common.c:2056:115: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((ipFlag->FromToMode == FROMTO_UNIX2DOS) && (lb_unix == 0) && (! ipFlag->add_eol || last_eol == INFO_DOS ))
                                                                                                                  ^
                                                                                                                   {
common.c:2058:115: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((ipFlag->FromToMode == FROMTO_UNIX2MAC) && (lb_unix == 0) && (! ipFlag->add_eol || last_eol == INFO_MAC ))
                                                                                                                  ^
                                                                                                                   {
common.c:2060:115: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((ipFlag->FromToMode == FROMTO_MAC2UNIX) && (lb_mac == 0) && (! ipFlag->add_eol || last_eol == INFO_UNIX ))
                                                                                                                  ^
                                                                                                                   {
common.c:2062:34: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if ((ipFlag->Force == 0) && (ipFlag->status & BINARY_FILE))
                                 ^~~~~~~~~~~~~~ ~
common.c:2062:64: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((ipFlag->Force == 0) && (ipFlag->status & BINARY_FILE))
                                                               ^
                                                                {
common.c:2066:8: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ipFlag->file_info & INFO_HEADER) && (! header_done)) {
       ^~~~~~~~~~~~~~~~~ ~
common.c:2067:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->file_info & INFO_DOS)
        ^~~~~~~~~~~~~~~~~ ~
common.c:2067:38: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->file_info & INFO_DOS)
                                     ^
                                      {
common.c:2068:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "     DOS");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2068:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "     DOS");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2069:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->file_info & INFO_UNIX)
        ^~~~~~~~~~~~~~~~~ ~
common.c:2069:39: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->file_info & INFO_UNIX)
                                      ^
                                       {
common.c:2070:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "    UNIX");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2070:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "    UNIX");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2071:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->file_info & INFO_MAC)
        ^~~~~~~~~~~~~~~~~ ~
common.c:2071:38: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->file_info & INFO_MAC)
                                     ^
                                      {
common.c:2072:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "     MAC");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2072:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "     MAC");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2073:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->file_info & INFO_BOM)
        ^~~~~~~~~~~~~~~~~ ~
common.c:2073:38: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->file_info & INFO_BOM)
                                     ^
                                      {
common.c:2074:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  BOM     ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2074:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  BOM     ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2075:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->file_info & INFO_TEXT)
        ^~~~~~~~~~~~~~~~~ ~
common.c:2075:39: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->file_info & INFO_TEXT)
                                      ^
                                       {
common.c:2076:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  TXTBIN");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2076:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  TXTBIN");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2077:31: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                              ^~~~~~~~~~~~~~~~~ ~
common.c:2077:69: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                                                                    ^~~~~~~~~~~~~~~~~ ~
common.c:2077:98: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                                                                                                 ^
                                                                                                  {
common.c:2078:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, " LASTLN");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2078:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, " LASTLN");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2080:12: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
           ^~~~~~~~~~~~~~~~~ ~
common.c:2080:50: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
                                                 ^~~~~~~~~~~~~~~~~ ~
common.c:2080:80: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
                                                                               ^
                                                                                {
common.c:2081:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stdout, "  ");
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2081:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stdout, "  ");
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2082:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "FILE");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2082:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "FILE");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2084:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->file_info & INFO_PRINT0)
        ^~~~~~~~~~~~~~~~~ ~
common.c:2084:41: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->file_info & INFO_PRINT0)
                                        ^
                                         {
common.c:2086:9: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    else
        ^
         {
common.c:2087:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "\n");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2087:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "\n");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2093:7: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      strncpy(eol,"dos  ",sizeof(eol));
      ^~~~~~~
common.c:2093:7: note: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11
      strncpy(eol,"dos  ",sizeof(eol));
      ^~~~~~~
common.c:2096:7: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      strncpy(eol,"unix ",sizeof(eol));
      ^~~~~~~
common.c:2096:7: note: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11
      strncpy(eol,"unix ",sizeof(eol));
      ^~~~~~~
common.c:2099:7: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      strncpy(eol,"mac  ",sizeof(eol));
      ^~~~~~~
common.c:2099:7: note: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11
      strncpy(eol,"mac  ",sizeof(eol));
      ^~~~~~~
common.c:2102:7: warning: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11 [clang-analyzer-security.insecureAPI.DeprecatedOrUnsafeBufferHandling]
      strncpy(eol,"noeol",sizeof(eol));
      ^~~~~~~
common.c:2102:7: note: Call to function 'strncpy' is insecure as it does not provide security checks introduced in the C11 standard. Replace with analogous functions that support length arguments or provides boundary checks such as 'strncpy_s' in case of C11
      strncpy(eol,"noeol",sizeof(eol));
      ^~~~~~~
common.c:2105:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (ipFlag->file_info & INFO_DOS)
      ^~~~~~~~~~~~~~~~~ ~
common.c:2105:36: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (ipFlag->file_info & INFO_DOS)
                                   ^
                                    {
common.c:2106:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stdout, "  %6u", lb_dos);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2106:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stdout, "  %6u", lb_dos);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2107:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (ipFlag->file_info & INFO_UNIX)
      ^~~~~~~~~~~~~~~~~ ~
common.c:2107:37: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (ipFlag->file_info & INFO_UNIX)
                                    ^
                                     {
common.c:2108:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stdout, "  %6u", lb_unix);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2108:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stdout, "  %6u", lb_unix);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2109:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (ipFlag->file_info & INFO_MAC)
      ^~~~~~~~~~~~~~~~~ ~
common.c:2109:36: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (ipFlag->file_info & INFO_MAC)
                                   ^
                                    {
common.c:2110:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stdout, "  %6u", lb_mac);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2110:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stdout, "  %6u", lb_mac);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2111:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (ipFlag->file_info & INFO_BOM)
      ^~~~~~~~~~~~~~~~~ ~
common.c:2111:36: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (ipFlag->file_info & INFO_BOM)
                                   ^
                                    {
common.c:2113:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (ipFlag->file_info & INFO_TEXT) {
      ^~~~~~~~~~~~~~~~~ ~
common.c:2114:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->status & BINARY_FILE)
        ^~~~~~~~~~~~~~ ~
common.c:2114:38: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->status & BINARY_FILE)
                                     ^
                                      {
common.c:2115:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  binary");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2115:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  binary");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2116:9: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    else
        ^
         {
common.c:2117:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  text  ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2117:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  text  ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2119:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                            ^~~~~~~~~~~~~~~~~ ~
common.c:2119:67: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                                                                  ^~~~~~~~~~~~~~~~~ ~
common.c:2119:96: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ((ipFlag->add_eol && !(ipFlag->file_info & INFO_CONVERT)) || ipFlag->file_info & INFO_EOL)
                                                                                               ^
                                                                                                {
common.c:2120:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stdout, " %s ", eol);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2120:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stdout, " %s ", eol);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2122:17: warning: variable 'ptr' is not initialized [cppcoreguidelines-init-variables]
    const char *ptr;
                ^
                    = NULL
common.c:2123:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if ((ipFlag->file_info & INFO_NOPATH) && (((ptr=strrchr(filename,'/')) != NULL) || ((ptr=strrchr(filename,'\\')) != NULL)) )
         ^~~~~~~~~~~~~~~~~ ~
common.c:2123:52: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((ipFlag->file_info & INFO_NOPATH) && (((ptr=strrchr(filename,'/')) != NULL) || ((ptr=strrchr(filename,'\\')) != NULL)) )
                                                ~~~^~~~~~~~~~~~~~~~~~~~~~
common.c:2123:52: note: if it should be an assignment, move it out of the 'if' condition
common.c:2123:52: note: if it is meant to be an equality check, change '=' to '=='
common.c:2123:93: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((ipFlag->file_info & INFO_NOPATH) && (((ptr=strrchr(filename,'/')) != NULL) || ((ptr=strrchr(filename,'\\')) != NULL)) )
                                                                                         ~~~^~~~~~~~~~~~~~~~~~~~~~~
common.c:2123:93: note: if it should be an assignment, move it out of the 'if' condition
common.c:2123:93: note: if it is meant to be an equality check, change '=' to '=='
common.c:2123:129: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((ipFlag->file_info & INFO_NOPATH) && (((ptr=strrchr(filename,'/')) != NULL) || ((ptr=strrchr(filename,'\\')) != NULL)) )
                                                                                                                                ^
                                                                                                                                 {
common.c:2125:9: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    else
        ^
         {
common.c:2127:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
         ^~~~~~~~~~~~~~~~~ ~
common.c:2127:48: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
                                               ^~~~~~~~~~~~~~~~~ ~
common.c:2127:78: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if ((ipFlag->file_info & INFO_DEFAULT) || (ipFlag->file_info & INFO_EOL))
                                                                             ^
                                                                              {
common.c:2128:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stdout, "  ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2128:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stdout, "  ");
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2129:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stdout, "%s",ptr);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2129:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stdout, "%s",ptr);
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2131:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
  if (ipFlag->file_info & INFO_PRINT0)
      ^~~~~~~~~~~~~~~~~ ~
common.c:2140:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  wint_t TempChar;
  ^
common.c:2131:39: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (ipFlag->file_info & INFO_PRINT0)
                                      ^
                                       {
common.c:2133:7: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  else
      ^
       {
common.c:2134:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stdout, "\n");
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2134:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stdout, "\n");
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2140:10: warning: variable 'TempChar' is not initialized [cppcoreguidelines-init-variables]
  wint_t TempChar;
         ^
                  = 0
common.c:2149:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
  ^
common.c:2149:10: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
  while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
         ^
common.c:2150:22: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if ( (TempChar < 32) &&
                     ^
common.c:2151:22: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        (TempChar != 0x0a) &&  /* Not an LF */
                     ^
common.c:2152:22: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        (TempChar != 0x0d) &&  /* Not a CR */
                     ^
common.c:2153:22: warning: 0x09 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        (TempChar != 0x09) &&  /* Not a TAB */
                     ^
common.c:2154:22: warning: 0x0c is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        (TempChar != 0x0c)) {  /* Not a form feed */
                     ^
common.c:2155:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ipFlag->status |= BINARY_FILE ;
      ^~~~~~~~~~~~~~ ~~
common.c:2157:21: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if (TempChar != 0x0a) { /* Not an LF */
                    ^
common.c:2159:23: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if (TempChar == 0x0d) { /* CR */
                      ^
common.c:2167:28: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ( PreviousChar == 0x0d ) { /* CR,LF pair. */
                           ^
common.c:2182:28: warning: function is not thread safe [concurrency-mt-unsafe]
      const char *errstr = strerror(errno);
                           ^
common.c:2197:3: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
  int TempChar;
  ^
common.c:2183:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2183:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2184:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("can not read from input file %s:"), filename);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2184:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("can not read from input file %s:"), filename);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2185:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2185:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2197:7: warning: variable 'TempChar' is not initialized [cppcoreguidelines-init-variables]
  int TempChar;
      ^
               = 0
common.c:2206:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  while ((TempChar = fgetc(ipInF)) != EOF) {
  ^
common.c:2206:10: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
  while ((TempChar = fgetc(ipInF)) != EOF) {
         ^
common.c:2207:22: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if ( (TempChar < 32) &&
                     ^
common.c:2212:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ipFlag->status |= BINARY_FILE ;
      ^~~~~~~~~~~~~~ ~~
common.c:2239:28: warning: function is not thread safe [concurrency-mt-unsafe]
      const char *errstr = strerror(errno);
                           ^
common.c:2240:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2240:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2241:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("can not read from input file %s:"), filename);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2241:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("can not read from input file %s:"), filename);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2242:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2242:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2259:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    ipFlag->status |= NO_REGFILE ;
    ^~~~~~~~~~~~~~ ~~
common.c:2266:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    ipFlag->status |= INPUT_TARGET_NO_REGFILE ;
    ^~~~~~~~~~~~~~ ~~
common.c:2276:28: warning: function is not thread safe [concurrency-mt-unsafe]
      const char *errstr = strerror(errno);
                           ^
common.c:2278:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: %s: ", progname, ipInFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2278:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: %s: ", progname, ipInFN);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2279:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, "%s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2279:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, "%s\n", errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2302:61: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (d2u_fclose(InF, ipInFN, ipFlag, "r", progname) == EOF)
                                                            ^
                                                             {
common.c:2329:66: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (check_unicode_info(stdin, ipFlag, progname, &bomtype_orig))
                                                                 ^
                                                                  {
common.c:2348:9: warning: variable 'ptr' is not initialized [cppcoreguidelines-init-variables]
  char *ptr;
        ^
            = NULL
common.c:2354:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    pFlag->file_info |= INFO_DEFAULT;
    ^~~~~~~~~~~~~~~~ ~~
common.c:2358:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  while (*ptr != '\0') {
  ^
common.c:2358:10: warning: backward branch (while loop) is ID-dependent due to variable reference to 'ptr' and may cause performance degradation [altera-id-dependent-backward-branch]
  while (*ptr != '\0') {
         ^
common.c:2361:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_PRINT0;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2364:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_DOS;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2368:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_UNIX;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2372:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_MAC;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2376:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_BOM;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2380:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_TEXT;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2384:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_EOL;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2388:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_CONVERT;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2392:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_HEADER;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2395:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_NOPATH;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2400:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2400:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2401:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr,_("wrong flag '%c' for option -i or --info\n"), *ptr);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2401:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr,_("wrong flag '%c' for option -i or --info\n"), *ptr);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2402:9: warning: function is not thread safe [concurrency-mt-unsafe]
        exit(1);
        ^
common.c:2407:20: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if (default_info)
                   ^
                    {
common.c:2408:5: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    pFlag->file_info |= INFO_DEFAULT;
    ^~~~~~~~~~~~~~~~ ~~
common.c:2411:5: warning: function 'parse_options' has cognitive complexity of 162 (threshold 25) [readability-function-cognitive-complexity]
int parse_options(int argc, char *argv[],
    ^
common.c:2463:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  while ((++ArgIdx < argc) && (!ShouldExit))
  ^
common.c:2463:28: note: +1
  while ((++ArgIdx < argc) && (!ShouldExit))
                           ^
common.c:2466:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if ((argv[ArgIdx][0] == '-') && process_options)
    ^
common.c:2466:34: note: +1
    if ((argv[ArgIdx][0] == '-') && process_options)
                                 ^
common.c:2469:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (strcmp(argv[ArgIdx],"--") == 0)
      ^
common.c:2471:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-h") == 0) || (strcmp(argv[ArgIdx],"--help") == 0))
           ^
common.c:2471:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-h") == 0) || (strcmp(argv[ArgIdx],"--help") == 0))
                                                ^
common.c:2476:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-b") == 0) || (strcmp(argv[ArgIdx],"--keep-bom") == 0))
           ^
common.c:2476:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-b") == 0) || (strcmp(argv[ArgIdx],"--keep-bom") == 0))
                                                ^
common.c:2478:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-k") == 0) || (strcmp(argv[ArgIdx],"--keepdate") == 0))
           ^
common.c:2478:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-k") == 0) || (strcmp(argv[ArgIdx],"--keepdate") == 0))
                                                ^
common.c:2480:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-e") == 0) || (strcmp(argv[ArgIdx],"--add-eol") == 0))
           ^
common.c:2480:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-e") == 0) || (strcmp(argv[ArgIdx],"--add-eol") == 0))
                                                ^
common.c:2482:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"--no-add-eol") == 0)
           ^
common.c:2484:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-f") == 0) || (strcmp(argv[ArgIdx],"--force") == 0))
           ^
common.c:2484:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-f") == 0) || (strcmp(argv[ArgIdx],"--force") == 0))
                                                ^
common.c:2487:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"--allow-chown") == 0)
           ^
common.c:2489:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"--no-allow-chown") == 0)
           ^
common.c:2498:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-s") == 0) || (strcmp(argv[ArgIdx],"--safe") == 0))
           ^
common.c:2498:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-s") == 0) || (strcmp(argv[ArgIdx],"--safe") == 0))
                                                ^
common.c:2500:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-q") == 0) || (strcmp(argv[ArgIdx],"--quiet") == 0))
           ^
common.c:2500:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-q") == 0) || (strcmp(argv[ArgIdx],"--quiet") == 0))
                                                ^
common.c:2502:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-v") == 0) || (strcmp(argv[ArgIdx],"--verbose") == 0))
           ^
common.c:2502:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-v") == 0) || (strcmp(argv[ArgIdx],"--verbose") == 0))
                                                ^
common.c:2504:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-l") == 0) || (strcmp(argv[ArgIdx],"--newline") == 0))
           ^
common.c:2504:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-l") == 0) || (strcmp(argv[ArgIdx],"--newline") == 0))
                                                ^
common.c:2506:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-m") == 0) || (strcmp(argv[ArgIdx],"--add-bom") == 0))
           ^
common.c:2506:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-m") == 0) || (strcmp(argv[ArgIdx],"--add-bom") == 0))
                                                ^
common.c:2508:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-r") == 0) || (strcmp(argv[ArgIdx],"--remove-bom") == 0)) {
           ^
common.c:2508:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-r") == 0) || (strcmp(argv[ArgIdx],"--remove-bom") == 0)) {
                                                ^
common.c:2512:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-S") == 0) || (strcmp(argv[ArgIdx],"--skip-symlink") == 0))
           ^
common.c:2512:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-S") == 0) || (strcmp(argv[ArgIdx],"--skip-symlink") == 0))
                                                ^
common.c:2514:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-F") == 0) || (strcmp(argv[ArgIdx],"--follow-symlink") == 0))
           ^
common.c:2514:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-F") == 0) || (strcmp(argv[ArgIdx],"--follow-symlink") == 0))
                                                ^
common.c:2516:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-R") == 0) || (strcmp(argv[ArgIdx],"--replace-symlink") == 0))
           ^
common.c:2516:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-R") == 0) || (strcmp(argv[ArgIdx],"--replace-symlink") == 0))
                                                ^
common.c:2518:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-V") == 0) || (strcmp(argv[ArgIdx],"--version") == 0)) {
           ^
common.c:2518:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-V") == 0) || (strcmp(argv[ArgIdx],"--version") == 0)) {
                                                ^
common.c:2522:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-L") == 0) || (strcmp(argv[ArgIdx],"--license") == 0)) {
           ^
common.c:2522:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-L") == 0) || (strcmp(argv[ArgIdx],"--license") == 0)) {
                                                ^
common.c:2526:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"-ascii") == 0) { /* SunOS compatible options */
           ^
common.c:2531:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"-7") == 0)
           ^
common.c:2533:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"-iso") == 0) {
           ^
common.c:2535:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (pFlag->verbose) {
        ^
common.c:2539:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (pFlag->ConvMode < 2)
        ^
common.c:2542:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"-437") == 0)
           ^
common.c:2544:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"-850") == 0)
           ^
common.c:2546:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"-860") == 0)
           ^
common.c:2548:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"-863") == 0)
           ^
common.c:2550:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"-865") == 0)
           ^
common.c:2552:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"-1252") == 0)
           ^
common.c:2555:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-u") == 0) || (strcmp(argv[ArgIdx],"--keep-utf16") == 0))
           ^
common.c:2555:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-u") == 0) || (strcmp(argv[ArgIdx],"--keep-utf16") == 0))
                                                ^
common.c:2557:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-ul") == 0) || (strcmp(argv[ArgIdx],"--assume-utf16le") == 0))
           ^
common.c:2557:50: note: +1
      else if ((strcmp(argv[ArgIdx],"-ul") == 0) || (strcmp(argv[ArgIdx],"--assume-utf16le") == 0))
                                                 ^
common.c:2559:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-ub") == 0) || (strcmp(argv[ArgIdx],"--assume-utf16be") == 0))
           ^
common.c:2559:50: note: +1
      else if ((strcmp(argv[ArgIdx],"-ub") == 0) || (strcmp(argv[ArgIdx],"--assume-utf16be") == 0))
                                                 ^
common.c:2562:12: note: +1, nesting level increased to 3
      else if (strcmp(argv[ArgIdx],"--info") == 0)
           ^
common.c:2564:12: note: +1, nesting level increased to 3
      else if (strncmp(argv[ArgIdx],"--info=", (size_t)7) == 0) {
           ^
common.c:2566:14: note: +1, nesting level increased to 3
      } else if (strncmp(argv[ArgIdx],"-i", (size_t)2) == 0) {
             ^
common.c:2568:14: note: +1, nesting level increased to 3
      } else if ((strcmp(argv[ArgIdx],"-c") == 0) || (strcmp(argv[ArgIdx],"--convmode") == 0)) {
             ^
common.c:2568:51: note: +1
      } else if ((strcmp(argv[ArgIdx],"-c") == 0) || (strcmp(argv[ArgIdx],"--convmode") == 0)) {
                                                  ^
common.c:2569:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (++ArgIdx < argc) {
        ^
common.c:2570:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          if (strcmpi(argv[ArgIdx],"ascii") == 0) { /* Benjamin Lin's legacy options */
          ^
common.c:2574:16: note: +1, nesting level increased to 5
          else if (strcmpi(argv[ArgIdx], "7bit") == 0)
               ^
common.c:2576:16: note: +1, nesting level increased to 5
          else if (strcmpi(argv[ArgIdx], "iso") == 0) {
               ^
common.c:2578:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            if (pFlag->verbose) {
            ^
common.c:2582:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            if (pFlag->ConvMode < 2)
            ^
common.c:2585:16: note: +1, nesting level increased to 5
          else if (strcmpi(argv[ArgIdx], "mac") == 0) {
               ^
common.c:2586:13: note: +6, including nesting penalty of 5, nesting level increased to 6
            if (is_dos2unix(progname))
            ^
common.c:2588:13: note: +1, nesting level increased to 6
            else
            ^
common.c:2590:13: note: +1, nesting level increased to 5
          } else {
            ^
common.c:2597:11: note: +1, nesting level increased to 4
        } else {
          ^
common.c:2638:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-o") == 0) || (strcmp(argv[ArgIdx],"--oldfile") == 0)) {
           ^
common.c:2638:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-o") == 0) || (strcmp(argv[ArgIdx],"--oldfile") == 0)) {
                                                ^
common.c:2640:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!CanSwitchFileMode) {
        ^
common.c:2652:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-n") == 0) || (strcmp(argv[ArgIdx],"--newfile") == 0)) {
           ^
common.c:2652:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-n") == 0) || (strcmp(argv[ArgIdx],"--newfile") == 0)) {
                                                ^
common.c:2654:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!CanSwitchFileMode) {
        ^
common.c:2664:12: note: +1, nesting level increased to 3
      else if ((strcmp(argv[ArgIdx],"-O") == 0) || (strcmp(argv[ArgIdx],"--to-stdout") == 0)) {
           ^
common.c:2664:49: note: +1
      else if ((strcmp(argv[ArgIdx],"-O") == 0) || (strcmp(argv[ArgIdx],"--to-stdout") == 0)) {
                                                ^
common.c:2666:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (!CanSwitchFileMode) {
        ^
common.c:2676:7: note: +1, nesting level increased to 3
      else { /* wrong option */
      ^
common.c:2682:7: note: +1, nesting level increased to 2
    } else {
      ^
common.c:2686:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (pFlag->NewFile) {
      ^
common.c:2687:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (CanSwitchFileMode)
        ^
common.c:2689:9: note: +1, nesting level increased to 4
        else {
        ^
common.c:2695:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          if (pFlag->verbose)
          ^
common.c:2699:9: note: +1, nesting level increased to 3
      } else {
        ^
common.c:2700:9: note: +4, including nesting penalty of 3, nesting level increased to 4
        if (pFlag->file_info) {
        ^
common.c:2703:11: note: +1, nesting level increased to 4
        } else {
          ^
common.c:2705:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          if (pFlag->to_stdout) {
          ^
common.c:2711:13: note: +1, nesting level increased to 5
          } else {
            ^
common.c:2718:11: note: +5, including nesting penalty of 4, nesting level increased to 5
          if (pFlag->verbose)
          ^
common.c:2726:3: note: +1, including nesting penalty of 0, nesting level increased to 1
  if ( (argc > 0) && pFlag->stdio_mode) {
  ^
common.c:2726:19: note: +1
  if ( (argc > 0) && pFlag->stdio_mode) {
                  ^
common.c:2727:5: note: +2, including nesting penalty of 1, nesting level increased to 2
    if (pFlag->file_info) {
    ^
common.c:2730:7: note: +1, nesting level increased to 2
    } else {
      ^
common.c:2736:7: note: +3, including nesting penalty of 2, nesting level increased to 3
      if (pFlag->verbose)
      ^
common.c:2463:3: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
  while ((++ArgIdx < argc) && (!ShouldExit))
  ^
common.c:2469:42: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (strcmp(argv[ArgIdx],"--") == 0)
                                         ^
                                          {
common.c:2476:93: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-b") == 0) || (strcmp(argv[ArgIdx],"--keep-bom") == 0))
                                                                                            ^
                                                                                             {
common.c:2478:93: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-k") == 0) || (strcmp(argv[ArgIdx],"--keepdate") == 0))
                                                                                            ^
                                                                                             {
common.c:2480:92: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-e") == 0) || (strcmp(argv[ArgIdx],"--add-eol") == 0))
                                                                                           ^
                                                                                            {
common.c:2482:57: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"--no-add-eol") == 0)
                                                        ^
                                                         {
common.c:2484:90: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-f") == 0) || (strcmp(argv[ArgIdx],"--force") == 0))
                                                                                         ^
                                                                                          {
common.c:2487:58: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"--allow-chown") == 0)
                                                         ^
                                                          {
common.c:2489:61: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"--no-allow-chown") == 0)
                                                            ^
                                                             {
common.c:2498:89: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-s") == 0) || (strcmp(argv[ArgIdx],"--safe") == 0))
                                                                                        ^
                                                                                         {
common.c:2500:90: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-q") == 0) || (strcmp(argv[ArgIdx],"--quiet") == 0))
                                                                                         ^
                                                                                          {
common.c:2502:92: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-v") == 0) || (strcmp(argv[ArgIdx],"--verbose") == 0))
                                                                                           ^
                                                                                            {
common.c:2504:92: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-l") == 0) || (strcmp(argv[ArgIdx],"--newline") == 0))
                                                                                           ^
                                                                                            {
common.c:2506:92: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-m") == 0) || (strcmp(argv[ArgIdx],"--add-bom") == 0))
                                                                                           ^
                                                                                            {
common.c:2512:97: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-S") == 0) || (strcmp(argv[ArgIdx],"--skip-symlink") == 0))
                                                                                                ^
                                                                                                 {
common.c:2514:99: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-F") == 0) || (strcmp(argv[ArgIdx],"--follow-symlink") == 0))
                                                                                                  ^
                                                                                                   {
common.c:2516:100: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-R") == 0) || (strcmp(argv[ArgIdx],"--replace-symlink") == 0))
                                                                                                   ^
                                                                                                    {
common.c:2531:47: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"-7") == 0)
                                              ^
                                               {
common.c:2536:12: warning: the value returned by this function should be used [cert-err33-c]
           D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
           ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2536:12: note: cast the expression to void to silence this warning
           D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
           ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2537:12: warning: the value returned by this function should be used [cert-err33-c]
           D2U_UTF8_FPRINTF(stderr,_("active code page: %d\n"), pFlag->ConvMode);
           ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2537:12: note: cast the expression to void to silence this warning
           D2U_UTF8_FPRINTF(stderr,_("active code page: %d\n"), pFlag->ConvMode);
           ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2539:33: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (pFlag->ConvMode < 2)
                                ^
                                 {
common.c:2542:49: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"-437") == 0)
                                                ^
                                                 {
common.c:2544:49: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"-850") == 0)
                                                ^
                                                 {
common.c:2546:49: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"-860") == 0)
                                                ^
                                                 {
common.c:2548:49: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"-863") == 0)
                                                ^
                                                 {
common.c:2550:49: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"-865") == 0)
                                                ^
                                                 {
common.c:2552:50: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"-1252") == 0)
                                                 ^
                                                  {
common.c:2555:95: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-u") == 0) || (strcmp(argv[ArgIdx],"--keep-utf16") == 0))
                                                                                              ^
                                                                                               {
common.c:2557:100: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-ul") == 0) || (strcmp(argv[ArgIdx],"--assume-utf16le") == 0))
                                                                                                   ^
                                                                                                    {
common.c:2559:100: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if ((strcmp(argv[ArgIdx],"-ub") == 0) || (strcmp(argv[ArgIdx],"--assume-utf16be") == 0))
                                                                                                   ^
                                                                                                    {
common.c:2562:51: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      else if (strcmp(argv[ArgIdx],"--info") == 0)
                                                  ^
                                                   {
common.c:2563:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        pFlag->file_info |= INFO_DEFAULT;
        ^~~~~~~~~~~~~~~~ ~~
common.c:2564:56: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      else if (strncmp(argv[ArgIdx],"--info=", (size_t)7) == 0) {
                                                       ^
common.c:2565:39: warning: 7 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        get_info_options(argv[ArgIdx]+7, pFlag, progname);
                                      ^
common.c:2574:55: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          else if (strcmpi(argv[ArgIdx], "7bit") == 0)
                                                      ^
                                                       {
common.c:2579:16: warning: the value returned by this function should be used [cert-err33-c]
               D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
               ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2579:16: note: cast the expression to void to silence this warning
               D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
               ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2580:16: warning: the value returned by this function should be used [cert-err33-c]
               D2U_UTF8_FPRINTF(stderr,_("active code page: %d\n"), pFlag->ConvMode);
               ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2580:16: note: cast the expression to void to silence this warning
               D2U_UTF8_FPRINTF(stderr,_("active code page: %d\n"), pFlag->ConvMode);
               ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2582:37: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (pFlag->ConvMode < 2)
                                    ^
                                     {
common.c:2586:39: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (is_dos2unix(progname))
                                      ^
                                       {
common.c:2588:17: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            else
                ^
                 {
common.c:2591:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2591:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2592:13: warning: the value returned by this function should be used [cert-err33-c]
            D2U_UTF8_FPRINTF(stderr, _("invalid %s conversion mode specified\n"),argv[ArgIdx]);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2592:13: note: cast the expression to void to silence this warning
            D2U_UTF8_FPRINTF(stderr, _("invalid %s conversion mode specified\n"),argv[ArgIdx]);
            ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2599:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2599:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2600:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr,_("option '%s' requires an argument\n"),argv[ArgIdx]);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2600:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr,_("option '%s' requires an argument\n"),argv[ArgIdx]);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2641:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2641:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2642:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, _("target of file %s not specified in new-file mode\n"), argv[ArgIdx-1]);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2642:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, _("target of file %s not specified in new-file mode\n"), argv[ArgIdx-1]);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2655:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2655:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2656:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, _("target of file %s not specified in new-file mode\n"), argv[ArgIdx-1]);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2656:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, _("target of file %s not specified in new-file mode\n"), argv[ArgIdx-1]);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2667:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2667:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2668:11: warning: the value returned by this function should be used [cert-err33-c]
          D2U_UTF8_FPRINTF(stderr, _("target of file %s not specified in new-file mode\n"), argv[ArgIdx-1]);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2668:11: note: cast the expression to void to silence this warning
          D2U_UTF8_FPRINTF(stderr, _("target of file %s not specified in new-file mode\n"), argv[ArgIdx-1]);
          ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2684:11: warning: variable 'conversion_error' is not initialized [cppcoreguidelines-init-variables]
      int conversion_error;
          ^
                           = 0
common.c:2687:31: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
        if (CanSwitchFileMode)
                              ^
                               {
common.c:2695:30: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          if (pFlag->verbose)
                             ^
                              {
common.c:2701:11: warning: Value stored to 'conversion_error' is never read [clang-analyzer-deadcode.DeadStores]
          conversion_error = GetFileInfo(argv[ArgIdx], pFlag, progname);
          ^                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:2701:11: note: Value stored to 'conversion_error' is never read
          conversion_error = GetFileInfo(argv[ArgIdx], pFlag, progname);
          ^                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
common.c:2718:30: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          if (pFlag->verbose)
                             ^
                              {
common.c:2736:26: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (pFlag->verbose)
                         ^
                          {
common.c:2749:28: warning: function is not thread safe [concurrency-mt-unsafe]
      const char *errstr = strerror(errno);
                           ^
common.c:2750:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2750:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2751:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, _("can not read from input file: %s\n"), errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2751:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, _("can not read from input file: %s\n"), errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2759:28: warning: function is not thread safe [concurrency-mt-unsafe]
      const char *errstr = strerror(errno);
                           ^
common.c:2760:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2760:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2761:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_ANSI_FPRINTF(stderr, _("can not write to output file: %s\n"), errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2761:7: note: cast the expression to void to silence this warning
      D2U_ANSI_FPRINTF(stderr, _("can not write to output file: %s\n"), errstr);
      ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2768:11: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (!(ipFlag->status & UNICODE_CONVERSION_ERROR)) {
          ^~~~~~~~~~~~~~ ~
common.c:2771:30: warning: function is not thread safe [concurrency-mt-unsafe]
        const char *errstr = strerror(errno);
                             ^
common.c:2772:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2772:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2773:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_ANSI_FPRINTF(stderr, _("can not write to output file: %s\n"), errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2773:9: note: cast the expression to void to silence this warning
        D2U_ANSI_FPRINTF(stderr, _("can not write to output file: %s\n"), errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2778:24: warning: parameter name 'f' is too short, expected at least 3 characters [readability-identifier-length]
wint_t d2u_getwc(FILE *f, int bomtype)
                       ^
common.c:2780:4: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   int c_trail, c_lead;
   ^~~~~~~~~~~~~~~~~~~~
common.c:2780:8: warning: variable 'c_trail' is not initialized [cppcoreguidelines-init-variables]
   int c_trail, c_lead;
       ^
note: this fix will not be applied because it overlaps with another fix
common.c:2780:17: warning: variable 'c_lead' is not initialized [cppcoreguidelines-init-variables]
   int c_trail, c_lead;
                ^
note: this fix will not be applied because it overlaps with another fix
common.c:2781:11: warning: variable 'wc' is not initialized [cppcoreguidelines-init-variables]
   wint_t wc;
          ^
             = 0
common.c:2781:11: warning: variable name 'wc' is too short, expected at least 3 characters [readability-identifier-length]
common.c:2783:16: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
   if (((c_lead=fgetc(f)) == EOF)  || ((c_trail=fgetc(f)) == EOF))
         ~~~~~~^~~~~~~~~
common.c:2783:16: note: if it should be an assignment, move it out of the 'if' condition
common.c:2783:16: note: if it is meant to be an equality check, change '=' to '=='
common.c:2783:48: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
   if (((c_lead=fgetc(f)) == EOF)  || ((c_trail=fgetc(f)) == EOF))
                                        ~~~~~~~^~~~~~~~~
common.c:2783:48: note: if it should be an assignment, move it out of the 'if' condition
common.c:2783:48: note: if it is meant to be an equality check, change '=' to '=='
common.c:2783:67: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
   if (((c_lead=fgetc(f)) == EOF)  || ((c_trail=fgetc(f)) == EOF))
                                                                  ^
                                                                   {
common.c:2787:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      c_trail <<=8;
      ^~~~~~~ ~~~
common.c:2787:18: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      c_trail <<=8;
                 ^
common.c:2790:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      c_lead <<=8;
      ^~~~~~ ~~~
common.c:2790:17: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      c_lead <<=8;
                ^
common.c:2796:27: warning: parameter name 'wc' is too short, expected at least 3 characters [readability-identifier-length]
wint_t d2u_ungetwc(wint_t wc, FILE *f, int bomtype)
                          ^
common.c:2796:37: warning: parameter name 'f' is too short, expected at least 3 characters [readability-identifier-length]
wint_t d2u_ungetwc(wint_t wc, FILE *f, int bomtype)
                                    ^
common.c:2798:4: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
   int c_trail, c_lead;
   ^~~~~~~~~~~~~~~~~~~~
common.c:2798:8: warning: variable 'c_trail' is not initialized [cppcoreguidelines-init-variables]
   int c_trail, c_lead;
       ^
note: this fix will not be applied because it overlaps with another fix
common.c:2798:17: warning: variable 'c_lead' is not initialized [cppcoreguidelines-init-variables]
   int c_trail, c_lead;
                ^
note: this fix will not be applied because it overlaps with another fix
common.c:2801:28: warning: 0xff00 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      c_trail = (int)(wc & 0xff00);
                           ^
common.c:2801:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      c_trail = (int)(wc & 0xff00);
                         ~ ^~~~~~
common.c:2802:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      c_trail >>=8;
      ^~~~~~~ ~~~
common.c:2802:18: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      c_trail >>=8;
                 ^
common.c:2803:28: warning: 0xff is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      c_lead  = (int)(wc & 0xff);
                           ^
common.c:2803:28: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      c_lead  = (int)(wc & 0xff);
                         ~ ^~~~
common.c:2805:27: warning: 0xff00 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      c_lead = (int)(wc & 0xff00);
                          ^
common.c:2805:27: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      c_lead = (int)(wc & 0xff00);
                        ~ ^~~~~~
common.c:2806:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      c_lead >>=8;
      ^~~~~~ ~~~
common.c:2806:17: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      c_lead >>=8;
                ^
common.c:2807:29: warning: 0xff is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      c_trail  = (int)(wc & 0xff);
                            ^
common.c:2807:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      c_trail  = (int)(wc & 0xff);
                          ~ ^~~~
common.c:2811:65: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
   if ((ungetc(c_trail,f) == EOF)  || (ungetc(c_lead,f) == EOF))
                                                                ^
                                                                 {
common.c:2817:8: warning: function 'd2u_putwc' has cognitive complexity of 30 (threshold 25) [readability-function-cognitive-complexity]
wint_t d2u_putwc(wint_t wc, FILE *f, CFlag *ipFlag, const char *progname)
       ^
common.c:2827:4: note: +1, including nesting penalty of 0, nesting level increased to 1
   if (ipFlag->keep_utf16) {
   ^
common.c:2829:6: note: +2, including nesting penalty of 1, nesting level increased to 2
     if (ipFlag->bomtype == FILE_UTF16LE) { /* UTF16 little endian */
     ^
common.c:2833:8: note: +1, nesting level increased to 2
     } else {                      /* UTF16 big endian */
       ^
common.c:2838:6: note: +2, including nesting penalty of 1, nesting level increased to 2
     if ((fputc(c_lead,f) == EOF)  || (fputc(c_trail,f) == EOF))
     ^
common.c:2838:36: note: +1
     if ((fputc(c_lead,f) == EOF)  || (fputc(c_trail,f) == EOF))
                                   ^
common.c:2846:4: note: +1, including nesting penalty of 0, nesting level increased to 1
   if ((lead >= 0xd800) && (lead < 0xdc00) && ((wc < 0xdc00) || (wc >= 0xe000))) {
   ^
common.c:2846:44: note: +1
   if ((lead >= 0xd800) && (lead < 0xdc00) && ((wc < 0xdc00) || (wc >= 0xe000))) {
                                           ^
common.c:2846:62: note: +1
   if ((lead >= 0xd800) && (lead < 0xdc00) && ((wc < 0xdc00) || (wc >= 0xe000))) {
                                                             ^
common.c:2853:4: note: +1, including nesting penalty of 0, nesting level increased to 1
   if ((wc >= 0xd800) && (wc < 0xdc00)) {   /* Surrogate lead */
   ^
common.c:2853:23: note: +1
   if ((wc >= 0xd800) && (wc < 0xdc00)) {   /* Surrogate lead */
                      ^
common.c:2858:4: note: +1, including nesting penalty of 0, nesting level increased to 1
   if ((wc >= 0xdc00) && (wc < 0xe000)) {   /* Surrogate trail */
   ^
common.c:2858:23: note: +1
   if ((wc >= 0xdc00) && (wc < 0xe000)) {   /* Surrogate trail */
                      ^
common.c:2862:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if ((lead < 0xd800) || (lead >= 0xdc00)) {
      ^
common.c:2862:27: note: +1
      if ((lead < 0xd800) || (lead >= 0xdc00)) {
                          ^
common.c:2907:6: note: +1, nesting level increased to 1
   } else {
     ^
common.c:2912:4: note: +1, including nesting penalty of 0, nesting level increased to 1
   if (wc == 0x0000) {
   ^
common.c:2913:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (fputc(0, f) == EOF)
      ^
common.c:2938:4: note: +1, including nesting penalty of 0, nesting level increased to 1
   if ( len == (size_t)(-1) ) {
   ^
common.c:2941:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      if (ipFlag->verbose) {
      ^
common.c:2952:6: note: +1, nesting level increased to 1
   } else {
     ^
common.c:2954:7: note: +2, including nesting penalty of 1, nesting level increased to 2
      for (i=0; i<len; i++) {
      ^
common.c:2955:10: note: +3, including nesting penalty of 2, nesting level increased to 3
         if (fputc(mbs[i], f) == EOF)
         ^
common.c:2817:25: warning: parameter name 'wc' is too short, expected at least 3 characters [readability-identifier-length]
wint_t d2u_putwc(wint_t wc, FILE *f, CFlag *ipFlag, const char *progname)
                        ^
common.c:2817:35: warning: parameter name 'f' is too short, expected at least 3 characters [readability-identifier-length]
wint_t d2u_putwc(wint_t wc, FILE *f, CFlag *ipFlag, const char *progname)
                                  ^
common.c:2819:20: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   static char mbs[8];
                   ^
common.c:2822:11: warning: variable 'len' is not initialized [cppcoreguidelines-init-variables]
   size_t len;
          ^
              = 0
common.c:2828:6: warning: multiple declarations in a single statement reduces readability [readability-isolate-declaration]
     int c_trail, c_lead;
     ^~~~~~~~~~~~~~~~~~~~
common.c:2828:10: warning: variable 'c_trail' is not initialized [cppcoreguidelines-init-variables]
     int c_trail, c_lead;
         ^
note: this fix will not be applied because it overlaps with another fix
common.c:2828:19: warning: variable 'c_lead' is not initialized [cppcoreguidelines-init-variables]
     int c_trail, c_lead;
                  ^
note: this fix will not be applied because it overlaps with another fix
common.c:2830:30: warning: 0xff00 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        c_trail = (int)(wc & 0xff00);
                             ^
common.c:2830:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        c_trail = (int)(wc & 0xff00);
                           ~ ^~~~~~
common.c:2831:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        c_trail >>=8;
        ^~~~~~~ ~~~
common.c:2831:20: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        c_trail >>=8;
                   ^
common.c:2832:30: warning: 0xff is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        c_lead  = (int)(wc & 0xff);
                             ^
common.c:2832:30: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        c_lead  = (int)(wc & 0xff);
                           ~ ^~~~
common.c:2834:29: warning: 0xff00 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        c_lead = (int)(wc & 0xff00);
                            ^
common.c:2834:29: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        c_lead = (int)(wc & 0xff00);
                          ~ ^~~~~~
common.c:2835:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        c_lead >>=8;
        ^~~~~~ ~~~
common.c:2835:19: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        c_lead >>=8;
                  ^
common.c:2836:31: warning: 0xff is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        c_trail  = (int)(wc & 0xff);
                              ^
common.c:2836:31: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        c_trail  = (int)(wc & 0xff);
                            ~ ^~~~
common.c:2838:65: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
     if ((fputc(c_lead,f) == EOF)  || (fputc(c_trail,f) == EOF))
                                                                ^
                                                                 {
common.c:2846:17: warning: 0xd800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   if ((lead >= 0xd800) && (lead < 0xdc00) && ((wc < 0xdc00) || (wc >= 0xe000))) {
                ^
common.c:2846:36: warning: 0xdc00 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   if ((lead >= 0xd800) && (lead < 0xdc00) && ((wc < 0xdc00) || (wc >= 0xe000))) {
                                   ^
common.c:2846:54: warning: 0xdc00 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   if ((lead >= 0xd800) && (lead < 0xdc00) && ((wc < 0xdc00) || (wc >= 0xe000))) {
                                                     ^
common.c:2846:72: warning: 0xe000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   if ((lead >= 0xd800) && (lead < 0xdc00) && ((wc < 0xdc00) || (wc >= 0xe000))) {
                                                                       ^
common.c:2847:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2847:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2848:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("error: Invalid surrogate pair. Missing low surrogate.\n"));
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2848:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("error: Invalid surrogate pair. Missing low surrogate.\n"));
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2849:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ipFlag->status |= UNICODE_CONVERSION_ERROR ;
      ^~~~~~~~~~~~~~ ~~
common.c:2853:15: warning: 0xd800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   if ((wc >= 0xd800) && (wc < 0xdc00)) {   /* Surrogate lead */
              ^
common.c:2853:32: warning: 0xdc00 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   if ((wc >= 0xd800) && (wc < 0xdc00)) {   /* Surrogate lead */
                               ^
common.c:2858:15: warning: 0xdc00 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   if ((wc >= 0xdc00) && (wc < 0xe000)) {   /* Surrogate trail */
              ^
common.c:2858:32: warning: 0xe000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
   if ((wc >= 0xdc00) && (wc < 0xe000)) {   /* Surrogate trail */
                               ^
common.c:2862:19: warning: 0xd800 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((lead < 0xd800) || (lead >= 0xdc00)) {
                  ^
common.c:2862:39: warning: 0xdc00 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      if ((lead < 0xd800) || (lead >= 0xdc00)) {
                                      ^
common.c:2863:10: warning: the value returned by this function should be used [cert-err33-c]
         D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2863:10: note: cast the expression to void to silence this warning
         D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2864:10: warning: the value returned by this function should be used [cert-err33-c]
         D2U_UTF8_FPRINTF(stderr, _("error: Invalid surrogate pair. Missing high surrogate.\n"));
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2864:10: note: cast the expression to void to silence this warning
         D2U_UTF8_FPRINTF(stderr, _("error: Invalid surrogate pair. Missing high surrogate.\n"));
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2865:10: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
         ipFlag->status |= UNICODE_CONVERSION_ERROR ;
         ^~~~~~~~~~~~~~ ~~
common.c:2900:17: warning: 0x10000 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      wstr[0] = 0x10000;
                ^
common.c:2901:18: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      wstr[0] += (lead & 0x03FF) << 10;
                 ^~~~~~~~~~~~~~~ ~~
common.c:2901:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      wstr[0] += (lead & 0x03FF) << 10;
                  ^~~~ ~
common.c:2901:26: warning: 0x03FF is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      wstr[0] += (lead & 0x03FF) << 10;
                         ^
common.c:2901:37: warning: 10 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      wstr[0] += (lead & 0x03FF) << 10;
                                    ^
common.c:2902:19: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      wstr[0] += (trail & 0x03FF);
                  ^~~~~ ~
common.c:2902:27: warning: 0x03FF is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
      wstr[0] += (trail & 0x03FF);
                          ^
common.c:2913:30: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (fputc(0, f) == EOF)
                             ^
                              {
common.c:2934:10: warning: function is not thread safe [concurrency-mt-unsafe]
   len = wcstombs(mbs, wstr, sizeof(mbs));
         ^
common.c:2945:30: warning: function is not thread safe [concurrency-mt-unsafe]
        const char *errstr = strerror(errno);
                             ^
common.c:2822:4: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
   size_t len;
   ^
common.c:2946:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_UTF8_FPRINTF(stderr, "%s:", progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2946:9: note: cast the expression to void to silence this warning
        D2U_UTF8_FPRINTF(stderr, "%s:", progname);
        ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
common.c:2947:9: warning: the value returned by this function should be used [cert-err33-c]
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2947:9: note: cast the expression to void to silence this warning
        D2U_ANSI_FPRINTF(stderr, " %s\n", errstr);
        ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
common.c:2950:7: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
      ipFlag->status |= UNICODE_CONVERSION_ERROR ;
      ^~~~~~~~~~~~~~ ~~
common.c:2952:6: warning: do not use 'else' after 'return' [readability-else-after-return]
   } else {
     ^
common.c:2953:14: warning: variable 'i' is not initialized [cppcoreguidelines-init-variables]
      size_t i;
             ^
               = 0
common.c:2953:14: warning: variable name 'i' is too short, expected at least 3 characters [readability-identifier-length]
common.c:2954:7: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
      for (i=0; i<len; i++) {
      ^
common.c:2954:17: warning: backward branch (for loop) is ID-dependent due to variable reference to 'len' and may cause performance degradation [altera-id-dependent-backward-branch]
      for (i=0; i<len; i++) {
                ^
common.c:2955:38: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
         if (fputc(mbs[i], f) == EOF)
                                     ^
                                      {
dos2unix.c:64:9: warning: declaration uses identifier '__DOS2UNIX_C', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
#define __DOS2UNIX_C
        ^~~~~~~~~~~~
        DOS2UNIX_C
dos2unix.c:73:1: warning: system include langinfo.h not allowed [llvmlibc-restrict-system-libc-headers]
# include <langinfo.h>
^~~~~~~~~~~~~~~~~~~~~~
dos2unix.c:79:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_("\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
dos2unix.c:79:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_("\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
dos2unix.c:84:28: warning: 2024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
All rights reserved.\n\n"),2024);
                           ^
dos2unix.c:89:24: warning: 2 adjacent parameters of 'StripDelimiterW' of similar type ('FILE *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
wint_t StripDelimiterW(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, wint_t CurChar, unsigned int *converted, const char *progname)
                       ^~~~~~~~~~~~~~~~~~~~~~~~~
dos2unix.c:89:30: note: the first parameter in the range is 'ipInF'
wint_t StripDelimiterW(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, wint_t CurChar, unsigned int *converted, const char *progname)
                             ^~~~~
dos2unix.c:89:43: note: the last parameter in the range is 'ipOutF'
wint_t StripDelimiterW(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, wint_t CurChar, unsigned int *converted, const char *progname)
                                          ^~~~~~
dos2unix.c:91:10: warning: variable 'TempNextChar' is not initialized [cppcoreguidelines-init-variables]
  wint_t TempNextChar;
         ^
                      = 0
dos2unix.c:95:22: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ( (TempNextChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
        ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dos2unix.c:95:22: note: if it should be an assignment, move it out of the 'if' condition
dos2unix.c:95:22: note: if it is meant to be an equality check, change '=' to '=='
dos2unix.c:100:26: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if ( TempNextChar != 0x0a ) {
                         ^
dos2unix.c:108:23: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) {
                      ^
dos2unix.c:119:21: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
    if ( CurChar == 0x0d ) {  /* EOF: last Mac line delimiter (CR)? */
                    ^
dos2unix.c:135:20: warning: 2 adjacent parameters of 'StripDelimiter' of similar type ('FILE *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
int StripDelimiter(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, int CurChar, unsigned int *converted, const char *progname)
                   ^~~~~~~~~~~~~~~~~~~~~~~~~
dos2unix.c:135:26: note: the first parameter in the range is 'ipInF'
int StripDelimiter(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, int CurChar, unsigned int *converted, const char *progname)
                         ^~~~~
dos2unix.c:135:39: note: the last parameter in the range is 'ipOutF'
int StripDelimiter(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, int CurChar, unsigned int *converted, const char *progname)
                                      ^~~~~~
dos2unix.c:137:7: warning: variable 'TempNextChar' is not initialized [cppcoreguidelines-init-variables]
  int TempNextChar;
      ^
                   = 0
dos2unix.c:141:22: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ( (TempNextChar = fgetc(ipInF)) != EOF) {
        ~~~~~~~~~~~~~^~~~~~~~~~~~~~
dos2unix.c:141:22: note: if it should be an assignment, move it out of the 'if' condition
dos2unix.c:141:22: note: if it is meant to be an equality check, change '=' to '=='
dos2unix.c:180:5: warning: function 'ConvertDosToUnixW' has cognitive complexity of 122 (threshold 25) [readability-function-cognitive-complexity]
int ConvertDosToUnixW(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
    ^
dos2unix.c:198:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    switch (ipFlag->FromToMode)
    ^
dos2unix.c:201:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {  /* get character */
        ^
dos2unix.c:202:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((ipFlag->Force == 0) &&
          ^
dos2unix.c:206:34: note: +1
              (TempChar != 0x09) &&  /* Not a TAB */
                                 ^
dos2unix.c:210:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->verbose) {
            ^
dos2unix.c:211:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
              ^
dos2unix.c:211:40: note: +1
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                       ^
dos2unix.c:217:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (TempChar != 0x0d) {
          ^
dos2unix.c:218:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (TempChar == 0x0a) /* Count all DOS and Unix line breaks */
            ^
dos2unix.c:220:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (d2u_putwc(TempChar, ipOutF, ipFlag, progname) == WEOF) {
            ^
dos2unix.c:225:13: note: +1, nesting level increased to 3
          } else {
            ^
dos2unix.c:226:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (StripDelimiterW( ipInF, ipOutF, ipFlag, TempChar, &converted, progname) == WEOF) {
            ^
dos2unix.c:233:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (TempChar == WEOF && ipFlag->add_eol && PrevChar != WEOF && PrevChar != 0x0a) {
        ^
dos2unix.c:233:69: note: +1
        if (TempChar == WEOF && ipFlag->add_eol && PrevChar != WEOF && PrevChar != 0x0a) {
                                                                    ^
dos2unix.c:235:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (ipFlag->verbose > 1) {
            ^
dos2unix.c:239:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) {
            ^
dos2unix.c:244:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if ((TempChar == WEOF) && ferror(ipInF)) {
        ^
dos2unix.c:244:32: note: +1
        if ((TempChar == WEOF) && ferror(ipInF)) {
                               ^
dos2unix.c:250:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
        ^
dos2unix.c:251:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((ipFlag->Force == 0) &&
          ^
dos2unix.c:255:34: note: +1
              (TempChar != 0x09) &&  /* Not a TAB */
                                 ^
dos2unix.c:259:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->verbose) {
            ^
dos2unix.c:260:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
              ^
dos2unix.c:260:40: note: +1
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                       ^
dos2unix.c:266:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((TempChar != 0x0d)) {
          ^
dos2unix.c:267:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (TempChar == 0x0a) /* Count all DOS and Unix line breaks */
            ^
dos2unix.c:269:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if(d2u_putwc(TempChar, ipOutF, ipFlag, progname) == WEOF) {
            ^
dos2unix.c:274:13: note: +1, nesting level increased to 3
          } else{
            ^
dos2unix.c:276:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if ( (TempNextChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
            ^
dos2unix.c:277:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (d2u_ungetwc( TempNextChar, ipInF, ipFlag->bomtype) == WEOF) {  /* put back peek char */
              ^
dos2unix.c:283:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ( TempNextChar == 0x0a ) {
              ^
dos2unix.c:284:17: note: +6, including nesting penalty of 5, nesting level increased to 6
                if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) { /* put CR, part of DOS CR-LF */
                ^
dos2unix.c:293:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) { /* MAC line end (CR). Put LF */
            ^
dos2unix.c:300:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->NewLine) {  /* add additional LF? */
            ^
dos2unix.c:301:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) {
              ^
dos2unix.c:310:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (TempChar == WEOF && ipFlag->add_eol && PrevChar != WEOF && !(PrevChar == 0x0a || PrevChar == 0x0d)) {
        ^
dos2unix.c:310:69: note: +1
        if (TempChar == WEOF && ipFlag->add_eol && PrevChar != WEOF && !(PrevChar == 0x0a || PrevChar == 0x0d)) {
                                                                    ^
dos2unix.c:310:91: note: +1
        if (TempChar == WEOF && ipFlag->add_eol && PrevChar != WEOF && !(PrevChar == 0x0a || PrevChar == 0x0d)) {
                                                                                          ^
dos2unix.c:312:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (ipFlag->verbose > 1) {
            ^
dos2unix.c:316:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) {
            ^
dos2unix.c:321:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if ((TempChar == WEOF) && ferror(ipInF)) {
        ^
dos2unix.c:321:32: note: +1
        if ((TempChar == WEOF) && ferror(ipInF)) {
                               ^
dos2unix.c:334:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (ipFlag->status & UNICODE_CONVERSION_ERROR)
    ^
dos2unix.c:336:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if ((RetVal == 0) && (ipFlag->verbose > 1)) {
    ^
dos2unix.c:336:23: note: +1
    if ((RetVal == 0) && (ipFlag->verbose > 1)) {
                      ^
dos2unix.c:184:12: warning: variable 'TempChar' is not initialized [cppcoreguidelines-init-variables]
    wint_t TempChar;
           ^
                    = 0
dos2unix.c:185:12: warning: variable 'TempNextChar' is not initialized [cppcoreguidelines-init-variables]
    wint_t TempNextChar;
           ^
                        = 0
dos2unix.c:184:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    wint_t TempChar;
    ^
dos2unix.c:201:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {  /* get character */
        ^
dos2unix.c:201:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {  /* get character */
               ^
dos2unix.c:203:27: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar < 32) &&
                          ^
dos2unix.c:204:28: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0a) &&  /* Not an LF */
                           ^
dos2unix.c:205:28: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0d) &&  /* Not a CR */
                           ^
dos2unix.c:206:28: warning: 0x09 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x09) &&  /* Not a TAB */
                           ^
dos2unix.c:207:28: warning: 0x0c is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0c)) {  /* Not a form feed */
                           ^
dos2unix.c:209:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            ipFlag->status |= BINARY_FILE ;
            ^~~~~~~~~~~~~~ ~~
dos2unix.c:211:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                                           ^
                                                            {
dos2unix.c:212:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:212:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:213:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x00%02X found at line %u\n"),TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:213:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x00%02X found at line %u\n"),TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:217:27: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
          if (TempChar != 0x0d) {
                          ^
dos2unix.c:218:29: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (TempChar == 0x0a) /* Count all DOS and Unix line breaks */
                            ^
dos2unix.c:218:34: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (TempChar == 0x0a) /* Count all DOS and Unix line breaks */
                                 ^
                                  {
dos2unix.c:233:84: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        if (TempChar == WEOF && ipFlag->add_eol && PrevChar != WEOF && PrevChar != 0x0a) {
                                                                                   ^
dos2unix.c:236:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:236:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:237:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:237:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:239:27: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) {
                          ^
dos2unix.c:250:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
        ^
dos2unix.c:250:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
               ^
dos2unix.c:252:27: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar < 32) &&
                          ^
dos2unix.c:253:28: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0a) &&  /* Not an LF */
                           ^
dos2unix.c:254:28: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0d) &&  /* Not a CR */
                           ^
dos2unix.c:255:28: warning: 0x09 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x09) &&  /* Not a TAB */
                           ^
dos2unix.c:256:28: warning: 0x0c is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0c)) {  /* Not a form feed */
                           ^
dos2unix.c:258:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            ipFlag->status |= BINARY_FILE ;
            ^~~~~~~~~~~~~~ ~~
dos2unix.c:260:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                                           ^
                                                            {
dos2unix.c:261:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:261:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:262:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x00%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:262:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x00%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:266:28: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
          if ((TempChar != 0x0d)) {
                           ^
dos2unix.c:267:29: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (TempChar == 0x0a) /* Count all DOS and Unix line breaks */
                            ^
dos2unix.c:267:34: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (TempChar == 0x0a) /* Count all DOS and Unix line breaks */
                                 ^
                                  {
dos2unix.c:276:32: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
            if ( (TempNextChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
                  ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dos2unix.c:276:32: note: if it should be an assignment, move it out of the 'if' condition
dos2unix.c:276:32: note: if it is meant to be an equality check, change '=' to '=='
dos2unix.c:283:36: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              if ( TempNextChar == 0x0a ) {
                                   ^
dos2unix.c:284:31: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) { /* put CR, part of DOS CR-LF */
                              ^
dos2unix.c:293:27: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) { /* MAC line end (CR). Put LF */
                          ^
dos2unix.c:301:29: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) {
                            ^
dos2unix.c:310:86: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        if (TempChar == WEOF && ipFlag->add_eol && PrevChar != WEOF && !(PrevChar == 0x0a || PrevChar == 0x0d)) {
                                                                                     ^
dos2unix.c:310:106: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        if (TempChar == WEOF && ipFlag->add_eol && PrevChar != WEOF && !(PrevChar == 0x0a || PrevChar == 0x0d)) {
                                                                                                         ^
dos2unix.c:313:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:313:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:314:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:314:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:316:27: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) {
                          ^
dos2unix.c:334:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->status & UNICODE_CONVERSION_ERROR)
        ^~~~~~~~~~~~~~ ~
dos2unix.c:334:51: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->status & UNICODE_CONVERSION_ERROR)
                                                  ^
                                                   {
dos2unix.c:337:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:337:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:338:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Converted %u out of %u line breaks.\n"), converted, line_nr -1);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:338:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Converted %u out of %u line breaks.\n"), converted, line_nr -1);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:348:5: warning: function 'ConvertDosToUnix' has cognitive complexity of 125 (threshold 25) [readability-function-cognitive-complexity]
int ConvertDosToUnix(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
    ^
dos2unix.c:360:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    switch (ipFlag->ConvMode) {
    ^
dos2unix.c:392:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (ipFlag->bomtype > 0)
    ^
dos2unix.c:395:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if ((ipFlag->ConvMode > CONVMODE_7BIT) && (ipFlag->verbose)) { /* not ascii or 7bit */
    ^
dos2unix.c:395:44: note: +1
    if ((ipFlag->ConvMode > CONVMODE_7BIT) && (ipFlag->verbose)) { /* not ascii or 7bit */
                                           ^
dos2unix.c:407:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    switch (ipFlag->FromToMode) {
    ^
dos2unix.c:409:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        while ((TempChar = fgetc(ipInF)) != EOF) {  /* get character */
        ^
dos2unix.c:410:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((ipFlag->Force == 0) &&
          ^
dos2unix.c:414:36: note: +1
              (TempChar != '\x09') &&  /* Not a TAB */
                                   ^
dos2unix.c:418:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->verbose) {
            ^
dos2unix.c:419:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
              ^
dos2unix.c:419:40: note: +1
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                       ^
dos2unix.c:425:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (TempChar != '\x0d') {
          ^
dos2unix.c:426:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (TempChar == '\x0a') /* Count all DOS and Unix line breaks */
            ^
dos2unix.c:428:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (fputc(ConvTable[TempChar], ipOutF) == EOF) {
            ^
dos2unix.c:433:13: note: +1, nesting level increased to 3
          } else {
            ^
dos2unix.c:434:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (StripDelimiter( ipInF, ipOutF, ipFlag, TempChar, &converted, progname) == EOF) {
            ^
dos2unix.c:441:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (TempChar == EOF && ipFlag->add_eol && PrevChar != EOF && PrevChar != '\x0a') {
        ^
dos2unix.c:441:67: note: +1
        if (TempChar == EOF && ipFlag->add_eol && PrevChar != EOF && PrevChar != '\x0a') {
                                                                  ^
dos2unix.c:443:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (ipFlag->verbose > 1) {
            ^
dos2unix.c:447:12: note: +3, including nesting penalty of 2, nesting level increased to 3
           if (fputc('\x0a', ipOutF) == EOF) {
           ^
dos2unix.c:452:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if ((TempChar == EOF) && ferror(ipInF)) {
        ^
dos2unix.c:452:31: note: +1
        if ((TempChar == EOF) && ferror(ipInF)) {
                              ^
dos2unix.c:458:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        while ((TempChar = fgetc(ipInF)) != EOF) {
        ^
dos2unix.c:459:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((ipFlag->Force == 0) &&
          ^
dos2unix.c:463:36: note: +1
              (TempChar != '\x09') &&  /* Not a TAB */
                                   ^
dos2unix.c:467:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->verbose) {
            ^
dos2unix.c:468:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
              ^
dos2unix.c:468:40: note: +1
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                       ^
dos2unix.c:474:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((TempChar != '\x0d')) {
          ^
dos2unix.c:475:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (TempChar == '\x0a') /* Count all DOS and Unix line breaks */
            ^
dos2unix.c:477:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if(fputc(ConvTable[TempChar], ipOutF) == EOF) {
            ^
dos2unix.c:482:13: note: +1, nesting level increased to 3
          } else{
            ^
dos2unix.c:484:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if ( (TempNextChar = fgetc(ipInF)) != EOF) {
            ^
dos2unix.c:485:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (ungetc( TempNextChar, ipInF ) == EOF) {  /* put back peek char */
              ^
dos2unix.c:491:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ( TempNextChar == '\x0a' ) {
              ^
dos2unix.c:492:17: note: +6, including nesting penalty of 5, nesting level increased to 6
                if (fputc('\x0d', ipOutF) == EOF) { /* put CR, part of DOS CR-LF */
                ^
dos2unix.c:501:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (fputc('\x0a', ipOutF) == EOF) { /* MAC line end (CR). Put LF */
            ^
dos2unix.c:508:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->NewLine) {  /* add additional LF? */
            ^
dos2unix.c:509:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (fputc('\x0a', ipOutF) == EOF) {
              ^
dos2unix.c:518:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (TempChar == EOF && ipFlag->add_eol && PrevChar != EOF && !(PrevChar == '\x0a' || PrevChar == '\x0d')) {
        ^
dos2unix.c:518:67: note: +1
        if (TempChar == EOF && ipFlag->add_eol && PrevChar != EOF && !(PrevChar == '\x0a' || PrevChar == '\x0d')) {
                                                                  ^
dos2unix.c:518:91: note: +1
        if (TempChar == EOF && ipFlag->add_eol && PrevChar != EOF && !(PrevChar == '\x0a' || PrevChar == '\x0d')) {
                                                                                          ^
dos2unix.c:520:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (ipFlag->verbose > 1) {
            ^
dos2unix.c:524:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (fputc('\x0a', ipOutF) == EOF) {
            ^
dos2unix.c:529:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if ((TempChar == EOF) && ferror(ipInF)) {
        ^
dos2unix.c:529:31: note: +1
        if ((TempChar == EOF) && ferror(ipInF)) {
                              ^
dos2unix.c:542:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if ((RetVal == 0) && (ipFlag->verbose > 1)) {
    ^
dos2unix.c:542:23: note: +1
    if ((RetVal == 0) && (ipFlag->verbose > 1)) {
                      ^
dos2unix.c:352:9: warning: variable 'TempChar' is not initialized [cppcoreguidelines-init-variables]
    int TempChar;
        ^
                 = 0
dos2unix.c:353:9: warning: variable 'TempNextChar' is not initialized [cppcoreguidelines-init-variables]
    int TempNextChar;
        ^
                     = 0
dos2unix.c:354:10: warning: variable 'ConvTable' is not initialized [cppcoreguidelines-init-variables]
    int *ConvTable;
         ^
                   = NULL
dos2unix.c:388:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        ipFlag->status |= WRONG_CODEPAGE ;
        ^~~~~~~~~~~~~~ ~~
dos2unix.c:392:29: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->bomtype > 0)
                            ^
                             {
dos2unix.c:396:8: warning: the value returned by this function should be used [cert-err33-c]
       D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:396:8: note: cast the expression to void to silence this warning
       D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:397:8: warning: the value returned by this function should be used [cert-err33-c]
       D2U_UTF8_FPRINTF(stderr, _("using code page %d.\n"), ipFlag->ConvMode);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:397:8: note: cast the expression to void to silence this warning
       D2U_UTF8_FPRINTF(stderr, _("using code page %d.\n"), ipFlag->ConvMode);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:352:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    int TempChar;
    ^
dos2unix.c:409:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while ((TempChar = fgetc(ipInF)) != EOF) {  /* get character */
        ^
dos2unix.c:409:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
        while ((TempChar = fgetc(ipInF)) != EOF) {  /* get character */
               ^
dos2unix.c:411:27: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar < 32) &&
                          ^
dos2unix.c:417:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            ipFlag->status |= BINARY_FILE ;
            ^~~~~~~~~~~~~~ ~~
dos2unix.c:419:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                                           ^
                                                            {
dos2unix.c:420:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:420:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:421:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x%02X found at line %u\n"),TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:421:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x%02X found at line %u\n"),TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:426:36: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (TempChar == '\x0a') /* Count all DOS and Unix line breaks */
                                   ^
                                    {
dos2unix.c:444:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:444:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:445:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:445:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:352:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    int TempChar;
    ^
dos2unix.c:458:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while ((TempChar = fgetc(ipInF)) != EOF) {
        ^
dos2unix.c:458:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
        while ((TempChar = fgetc(ipInF)) != EOF) {
               ^
dos2unix.c:460:27: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar < 32) &&
                          ^
dos2unix.c:466:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            ipFlag->status |= BINARY_FILE ;
            ^~~~~~~~~~~~~~ ~~
dos2unix.c:468:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                                           ^
                                                            {
dos2unix.c:469:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:469:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:470:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x%02X found at line %u\n"),TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:470:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x%02X found at line %u\n"),TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:475:36: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (TempChar == '\x0a') /* Count all DOS and Unix line breaks */
                                   ^
                                    {
dos2unix.c:484:32: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
            if ( (TempNextChar = fgetc(ipInF)) != EOF) {
                  ~~~~~~~~~~~~~^~~~~~~~~~~~~~
dos2unix.c:484:32: note: if it should be an assignment, move it out of the 'if' condition
dos2unix.c:484:32: note: if it is meant to be an equality check, change '=' to '=='
dos2unix.c:521:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:521:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:522:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:522:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:543:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:543:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:544:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Converted %u out of %u line breaks.\n"),converted, line_nr -1);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:544:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Converted %u out of %u line breaks.\n"),converted, line_nr -1);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:553:17: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  char progname[9];
                ^
dos2unix.c:554:10: warning: variable 'pFlag' is not initialized [cppcoreguidelines-init-variables]
  CFlag *pFlag;
         ^
               = NULL
dos2unix.c:555:9: warning: variable 'ptr' is not initialized [cppcoreguidelines-init-variables]
  char *ptr;
        ^
            = NULL
dos2unix.c:556:18: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  char localedir[1024];
                 ^
dos2unix.c:557:7: warning: variable 'ret' is not initialized [cppcoreguidelines-init-variables]
  int ret;
      ^
          = 0
dos2unix.c:561:8: warning: variable 'argc_new' is not initialized [cppcoreguidelines-init-variables]
  int  argc_new;
       ^
                = 0
dos2unix.c:562:10: warning: variable 'argv_new' is not initialized [cppcoreguidelines-init-variables]
  char **argv_new;
         ^
                  = NULL
dos2unix.c:568:12: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  progname[8] = '\0';
           ^
dos2unix.c:572:10: warning: function is not thread safe [concurrency-mt-unsafe]
   ptr = getenv("DOS2UNIX_LOCALEDIR");
         ^
dos2unix.c:573:20: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
   if (ptr == NULL)
                   ^
                    {
dos2unix.c:576:43: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (strlen(ptr) < sizeof(localedir))
                                          ^
                                           {
dos2unix.c:579:10: warning: the value returned by this function should be used [cert-err33-c]
         D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:579:10: note: cast the expression to void to silence this warning
         D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:580:10: warning: the value returned by this function should be used [cert-err33-c]
         D2U_ANSI_FPRINTF(stderr, "%s", _("error: Value of environment variable DOS2UNIX_LOCALEDIR is too long.\n"));
         ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
dos2unix.c:580:10: note: cast the expression to void to silence this warning
         D2U_ANSI_FPRINTF(stderr, "%s", _("error: Value of environment variable DOS2UNIX_LOCALEDIR is too long.\n"));
         ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
dos2unix.c:595:4: warning: the value returned by this function should be used [cert-err33-c]
   setlocale (LC_ALL, "");
   ^~~~~~~~~~~~~~~~~~~~~~
dos2unix.c:595:4: note: cast the expression to void to silence this warning
dos2unix.c:595:4: warning: function is not thread safe [concurrency-mt-unsafe]
   setlocale (LC_ALL, "");
   ^
dos2unix.c:608:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, "dos2unix:");
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:608:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, "dos2unix:");
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
dos2unix.c:609:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_ANSI_FPRINTF(stderr, " %s\n", strerror(errno));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
dos2unix.c:609:5: note: cast the expression to void to silence this warning
    D2U_ANSI_FPRINTF(stderr, " %s\n", strerror(errno));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
dos2unix.c:609:39: warning: function is not thread safe [concurrency-mt-unsafe]
    D2U_ANSI_FPRINTF(stderr, " %s\n", strerror(errno));
                                      ^
dos2unix.c:615:13: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ( ((ptr=strrchr(argv[0],'/')) == NULL) && ((ptr=strrchr(argv[0],'\\')) == NULL) )
         ~~~^~~~~~~~~~~~~~~~~~~~~
dos2unix.c:615:13: note: if it should be an assignment, move it out of the 'if' condition
dos2unix.c:615:13: note: if it is meant to be an equality check, change '=' to '=='
dos2unix.c:615:53: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ( ((ptr=strrchr(argv[0],'/')) == NULL) && ((ptr=strrchr(argv[0],'\\')) == NULL) )
                                                 ~~~^~~~~~~~~~~~~~~~~~~~~~
dos2unix.c:615:53: note: if it should be an assignment, move it out of the 'if' condition
dos2unix.c:615:53: note: if it is meant to be an equality check, change '=' to '=='
dos2unix.c:615:87: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ( ((ptr=strrchr(argv[0],'/')) == NULL) && ((ptr=strrchr(argv[0],'\\')) == NULL) )
                                                                                      ^
                                                                                       {
dos2unix.c:617:7: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  else
      ^
       {
unix2dos.c:54:9: warning: declaration uses identifier '__UNIX2DOS_C', which is a reserved identifier [bugprone-reserved-identifier,cert-dcl37-c,cert-dcl51-cpp]
#define __UNIX2DOS_C
        ^~~~~~~~~~~~
        UNIX2DOS_C
unix2dos.c:63:1: warning: system include langinfo.h not allowed [llvmlibc-restrict-system-libc-headers]
# include <langinfo.h>
^~~~~~~~~~~~~~~~~~~~~~
unix2dos.c:69:3: warning: the value returned by this function should be used [cert-err33-c]
  D2U_ANSI_FPRINTF(stdout,_("\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
unix2dos.c:69:3: note: cast the expression to void to silence this warning
  D2U_ANSI_FPRINTF(stdout,_("\
  ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
unix2dos.c:72:28: warning: 2024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
All rights reserved.\n\n"),2024);
                           ^
unix2dos.c:79:17: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) {
                ^
unix2dos.c:83:17: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) {
                ^
unix2dos.c:87:10: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  return 0x0a;
         ^
unix2dos.c:92:10: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  wint_t c = CurChar;
         ^
unix2dos.c:94:19: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  if ((CurChar == 0x0a) && (PrevChar != 0x0d)) {
                  ^
unix2dos.c:94:41: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  if ((CurChar == 0x0a) && (PrevChar != 0x0d)) {
                                        ^
unix2dos.c:95:12: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((c = PutDOSNewLineW(ipOutF, ipFlag, progname)) == WEOF) {
         ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
unix2dos.c:95:12: note: if it should be an assignment, move it out of the 'if' condition
unix2dos.c:95:12: note: if it is meant to be an equality check, change '=' to '=='
unix2dos.c:118:7: warning: variable name 'c' is too short, expected at least 3 characters [readability-identifier-length]
  int c = CurChar;
      ^
unix2dos.c:121:12: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
    if ((c = PutDOSNewLine(ipOutF, ipFlag, progname)) == EOF) {
         ~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
unix2dos.c:121:12: note: if it should be an assignment, move it out of the 'if' condition
unix2dos.c:121:12: note: if it is meant to be an equality check, change '=' to '=='
unix2dos.c:133:5: warning: function 'ConvertUnixToDosW' has cognitive complexity of 142 (threshold 25) [readability-function-cognitive-complexity]
int ConvertUnixToDosW(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
    ^
unix2dos.c:148:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    switch (ipFlag->FromToMode)
    ^
unix2dos.c:151:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {  /* get character */
        ^
unix2dos.c:152:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((ipFlag->Force == 0) &&
          ^
unix2dos.c:156:34: note: +1
              (TempChar != 0x09) &&  /* Not a TAB */
                                 ^
unix2dos.c:160:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->verbose) {
            ^
unix2dos.c:161:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
              ^
unix2dos.c:161:40: note: +1
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                       ^
unix2dos.c:167:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (TempChar == 0x0a) {
          ^
unix2dos.c:168:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) { /* got LF, put extra CR */
            ^
unix2dos.c:174:13: note: +1, nesting level increased to 3
          } else {
            ^
unix2dos.c:175:14: note: +4, including nesting penalty of 3, nesting level increased to 4
             if (TempChar == 0x0d) { /* got CR */
             ^
unix2dos.c:176:16: note: +5, including nesting penalty of 4, nesting level increased to 5
               if ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) == WEOF) { /* get next char (possibly LF) */
               ^
unix2dos.c:177:18: note: +6, including nesting penalty of 5, nesting level increased to 6
                 if (ferror(ipInF))  /* Read error */
                 ^
unix2dos.c:180:18: note: +1, nesting level increased to 5
               } else {
                 ^
unix2dos.c:181:18: note: +6, including nesting penalty of 5, nesting level increased to 6
                 if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) { /* put CR */
                 ^
unix2dos.c:190:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (TempChar == 0x0a) /* Count all DOS and Unix line breaks */
          ^
unix2dos.c:192:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (d2u_putwc(TempChar, ipOutF, ipFlag, progname) == WEOF)
          ^
unix2dos.c:198:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (ipFlag->NewLine) {  /* add additional CR-LF? */
          ^
unix2dos.c:199:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (AddExtraDOSNewLineW( ipOutF, ipFlag, TempChar, PreviousChar, progname) == WEOF) {
            ^
unix2dos.c:206:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (TempChar == WEOF && ipFlag->add_eol && PreviousChar != WEOF && PreviousChar != '\x0a') {
        ^
unix2dos.c:206:73: note: +1
        if (TempChar == WEOF && ipFlag->add_eol && PreviousChar != WEOF && PreviousChar != '\x0a') {
                                                                        ^
unix2dos.c:208:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (ipFlag->verbose > 1) {
            ^
unix2dos.c:212:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (PutDOSNewLineW(ipOutF, ipFlag, progname) == WEOF) {
            ^
unix2dos.c:216:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if ((TempChar == WEOF) && ferror(ipInF)) {
        ^
unix2dos.c:216:32: note: +1
        if ((TempChar == WEOF) && ferror(ipInF)) {
                               ^
unix2dos.c:222:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
        ^
unix2dos.c:223:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((ipFlag->Force == 0) &&
          ^
unix2dos.c:227:34: note: +1
              (TempChar != 0x09) &&  /* Not a TAB */
                                 ^
unix2dos.c:231:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->verbose) {
            ^
unix2dos.c:232:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
              ^
unix2dos.c:232:40: note: +1
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                       ^
unix2dos.c:238:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (TempChar != 0x0a) { /* Not an LF */
          ^
unix2dos.c:239:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if(d2u_putwc(TempChar, ipOutF, ipFlag, progname) == WEOF) {
            ^
unix2dos.c:245:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (TempChar == 0x0d) /* CR */
            ^
unix2dos.c:247:13: note: +1, nesting level increased to 3
          } else{
            ^
unix2dos.c:249:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (PreviousChar != 0x0d) /* CR already counted */
            ^
unix2dos.c:252:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if ( PreviousChar == 0x0d ) {
            ^
unix2dos.c:253:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) { /* CR,LF pair. Put LF */
              ^
unix2dos.c:262:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) { /* Unix line end (LF). Put CR */
            ^
unix2dos.c:268:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->NewLine) {  /* add additional CR? */
            ^
unix2dos.c:269:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) {
              ^
unix2dos.c:277:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (TempChar == WEOF && ipFlag->add_eol && PreviousChar != WEOF && !(PreviousChar == 0x0a || PreviousChar == 0x0d)) {
        ^
unix2dos.c:277:73: note: +1
        if (TempChar == WEOF && ipFlag->add_eol && PreviousChar != WEOF && !(PreviousChar == 0x0a || PreviousChar == 0x0d)) {
                                                                        ^
unix2dos.c:277:99: note: +1
        if (TempChar == WEOF && ipFlag->add_eol && PreviousChar != WEOF && !(PreviousChar == 0x0a || PreviousChar == 0x0d)) {
                                                                                                  ^
unix2dos.c:279:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (ipFlag->verbose > 1) {
            ^
unix2dos.c:283:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) {
            ^
unix2dos.c:288:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if ((TempChar == WEOF) && ferror(ipInF)) {
        ^
unix2dos.c:288:32: note: +1
        if ((TempChar == WEOF) && ferror(ipInF)) {
                               ^
unix2dos.c:301:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (ipFlag->status & UNICODE_CONVERSION_ERROR)
    ^
unix2dos.c:303:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if ((RetVal == 0) && (ipFlag->verbose > 1)) {
    ^
unix2dos.c:303:23: note: +1
    if ((RetVal == 0) && (ipFlag->verbose > 1)) {
                      ^
unix2dos.c:133:23: warning: 2 adjacent parameters of 'ConvertUnixToDosW' of similar type ('FILE *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
int ConvertUnixToDosW(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
                      ^~~~~~~~~~~~~~~~~~~~~~~~~
unix2dos.c:133:29: note: the first parameter in the range is 'ipInF'
int ConvertUnixToDosW(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
                            ^~~~~
unix2dos.c:133:42: note: the last parameter in the range is 'ipOutF'
int ConvertUnixToDosW(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
                                         ^~~~~~
unix2dos.c:136:12: warning: variable 'TempChar' is not initialized [cppcoreguidelines-init-variables]
    wint_t TempChar;
           ^
                    = 0
unix2dos.c:136:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    wint_t TempChar;
    ^
unix2dos.c:151:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {  /* get character */
        ^
unix2dos.c:151:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {  /* get character */
               ^
unix2dos.c:153:27: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar < 32) &&
                          ^
unix2dos.c:154:28: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0a) &&  /* Not an LF */
                           ^
unix2dos.c:155:28: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0d) &&  /* Not a CR */
                           ^
unix2dos.c:156:28: warning: 0x09 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x09) &&  /* Not a TAB */
                           ^
unix2dos.c:157:28: warning: 0x0c is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0c)) {  /* Not a form feed */
                           ^
unix2dos.c:159:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            ipFlag->status |= BINARY_FILE ;
            ^~~~~~~~~~~~~~ ~~
unix2dos.c:161:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                                           ^
                                                            {
unix2dos.c:162:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:162:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:163:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x00%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:163:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x00%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:167:27: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
          if (TempChar == 0x0a) {
                          ^
unix2dos.c:168:27: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) { /* got LF, put extra CR */
                          ^
unix2dos.c:175:30: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
             if (TempChar == 0x0d) { /* got CR */
                             ^
unix2dos.c:176:30: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
               if ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) == WEOF) { /* get next char (possibly LF) */
                    ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
unix2dos.c:176:30: note: if it should be an assignment, move it out of the 'if' condition
unix2dos.c:176:30: note: if it is meant to be an equality check, change '=' to '=='
unix2dos.c:177:36: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
                 if (ferror(ipInF))  /* Read error */
                                   ^
                                    {
unix2dos.c:179:29: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                 TempChar = 0x0d;  /* end of file. */
                            ^
unix2dos.c:181:32: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                 if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) { /* put CR */
                               ^
unix2dos.c:186:33: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
                 PreviousChar = 0x0d;
                                ^
unix2dos.c:190:27: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
          if (TempChar == 0x0a) /* Count all DOS and Unix line breaks */
                          ^
unix2dos.c:190:32: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          if (TempChar == 0x0a) /* Count all DOS and Unix line breaks */
                               ^
                                {
unix2dos.c:209:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:209:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:210:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:210:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:136:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    wint_t TempChar;
    ^
unix2dos.c:222:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
        ^
unix2dos.c:222:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
        while ((TempChar = d2u_getwc(ipInF, ipFlag->bomtype)) != WEOF) {
               ^
unix2dos.c:224:27: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar < 32) &&
                          ^
unix2dos.c:225:28: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0a) &&  /* Not an LF */
                           ^
unix2dos.c:226:28: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0d) &&  /* Not a CR */
                           ^
unix2dos.c:227:28: warning: 0x09 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x09) &&  /* Not a TAB */
                           ^
unix2dos.c:228:28: warning: 0x0c is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar != 0x0c)) {  /* Not a form feed */
                           ^
unix2dos.c:230:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            ipFlag->status |= BINARY_FILE ;
            ^~~~~~~~~~~~~~ ~~
unix2dos.c:232:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                                           ^
                                                            {
unix2dos.c:233:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:233:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:234:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x00%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:234:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x00%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:238:27: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
          if (TempChar != 0x0a) { /* Not an LF */
                          ^
unix2dos.c:245:29: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (TempChar == 0x0d) /* CR */
                            ^
unix2dos.c:245:34: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (TempChar == 0x0d) /* CR */
                                 ^
                                  {
unix2dos.c:249:33: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (PreviousChar != 0x0d) /* CR already counted */
                                ^
unix2dos.c:249:38: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (PreviousChar != 0x0d) /* CR already counted */
                                     ^
                                      {
unix2dos.c:252:34: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if ( PreviousChar == 0x0d ) {
                                 ^
unix2dos.c:253:29: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              if (d2u_putwc(0x0a, ipOutF, ipFlag, progname) == WEOF) { /* CR,LF pair. Put LF */
                            ^
unix2dos.c:262:27: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) { /* Unix line end (LF). Put CR */
                          ^
unix2dos.c:269:29: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) {
                            ^
unix2dos.c:277:94: warning: 0x0a is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        if (TempChar == WEOF && ipFlag->add_eol && PreviousChar != WEOF && !(PreviousChar == 0x0a || PreviousChar == 0x0d)) {
                                                                                             ^
unix2dos.c:277:118: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
        if (TempChar == WEOF && ipFlag->add_eol && PreviousChar != WEOF && !(PreviousChar == 0x0a || PreviousChar == 0x0d)) {
                                                                                                                     ^
unix2dos.c:280:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:280:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:281:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:281:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:283:27: warning: 0x0d is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
            if (d2u_putwc(0x0d, ipOutF, ipFlag, progname) == WEOF) {
                          ^
unix2dos.c:301:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
    if (ipFlag->status & UNICODE_CONVERSION_ERROR)
        ^~~~~~~~~~~~~~ ~
unix2dos.c:301:51: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->status & UNICODE_CONVERSION_ERROR)
                                                  ^
                                                   {
unix2dos.c:304:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:304:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:305:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Converted %u out of %u line breaks.\n"), converted, line_nr -1);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:305:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Converted %u out of %u line breaks.\n"), converted, line_nr -1);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:315:5: warning: function 'ConvertUnixToDos' has cognitive complexity of 145 (threshold 25) [readability-function-cognitive-complexity]
int ConvertUnixToDos(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
    ^
unix2dos.c:326:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    switch (ipFlag->ConvMode) {
    ^
unix2dos.c:358:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if (ipFlag->bomtype > 0)
    ^
unix2dos.c:361:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if ((ipFlag->ConvMode > CONVMODE_7BIT) && (ipFlag->verbose)) { /* not ascii or 7bit */
    ^
unix2dos.c:361:44: note: +1
    if ((ipFlag->ConvMode > CONVMODE_7BIT) && (ipFlag->verbose)) { /* not ascii or 7bit */
                                           ^
unix2dos.c:371:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    switch (ipFlag->FromToMode) {
    ^
unix2dos.c:373:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        while ((TempChar = fgetc(ipInF)) != EOF) {  /* get character */
        ^
unix2dos.c:374:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((ipFlag->Force == 0) &&
          ^
unix2dos.c:378:36: note: +1
              (TempChar != '\x09') &&  /* Not a TAB */
                                   ^
unix2dos.c:382:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->verbose) {
            ^
unix2dos.c:383:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
              ^
unix2dos.c:383:40: note: +1
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                       ^
unix2dos.c:389:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (TempChar == '\x0a')
          ^
unix2dos.c:391:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (fputc('\x0d', ipOutF) == EOF) { /* got LF, put extra CR */
            ^
unix2dos.c:397:13: note: +1, nesting level increased to 3
          } else {
            ^
unix2dos.c:398:14: note: +4, including nesting penalty of 3, nesting level increased to 4
             if (TempChar == '\x0d') { /* got CR */
             ^
unix2dos.c:399:16: note: +5, including nesting penalty of 4, nesting level increased to 5
               if ((TempChar = fgetc(ipInF)) == EOF) { /* get next char (possibly LF) */
               ^
unix2dos.c:400:18: note: +6, including nesting penalty of 5, nesting level increased to 6
                 if (ferror(ipInF))  /* Read error */
                 ^
unix2dos.c:403:18: note: +1, nesting level increased to 5
               } else {
                 ^
unix2dos.c:404:18: note: +6, including nesting penalty of 5, nesting level increased to 6
                 if (fputc('\x0d', ipOutF) == EOF) { /* put CR */
                 ^
unix2dos.c:413:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (TempChar == '\x0a') /* Count all DOS and Unix line breaks */
          ^
unix2dos.c:415:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (fputc(ConvTable[TempChar], ipOutF) == EOF) { /* put LF or other char */
          ^
unix2dos.c:420:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (ipFlag->NewLine) {  /* add additional CR-LF? */
          ^
unix2dos.c:421:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (AddExtraDOSNewLine( ipOutF, ipFlag, TempChar, PreviousChar, progname) == EOF) {
            ^
unix2dos.c:428:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (TempChar == EOF && ipFlag->add_eol && PreviousChar != EOF && PreviousChar != '\x0a') {
        ^
unix2dos.c:428:71: note: +1
        if (TempChar == EOF && ipFlag->add_eol && PreviousChar != EOF && PreviousChar != '\x0a') {
                                                                      ^
unix2dos.c:430:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (ipFlag->verbose > 1) {
            ^
unix2dos.c:434:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (PutDOSNewLine(ipOutF, ipFlag, progname) == EOF) {
            ^
unix2dos.c:438:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if ((TempChar == EOF) && ferror(ipInF)) {
        ^
unix2dos.c:438:31: note: +1
        if ((TempChar == EOF) && ferror(ipInF)) {
                              ^
unix2dos.c:444:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        while ((TempChar = fgetc(ipInF)) != EOF) {
        ^
unix2dos.c:445:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if ((ipFlag->Force == 0) &&
          ^
unix2dos.c:449:36: note: +1
              (TempChar != '\x09') &&  /* Not a TAB */
                                   ^
unix2dos.c:453:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->verbose) {
            ^
unix2dos.c:454:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
              ^
unix2dos.c:454:40: note: +1
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                       ^
unix2dos.c:460:11: note: +3, including nesting penalty of 2, nesting level increased to 3
          if (TempChar != '\x0a') { /* Not an LF */
          ^
unix2dos.c:461:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if(fputc(ConvTable[TempChar], ipOutF) == EOF) {
            ^
unix2dos.c:467:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (TempChar == '\x0d') /* CR */
            ^
unix2dos.c:469:13: note: +1, nesting level increased to 3
          } else {
            ^
unix2dos.c:471:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (PreviousChar != '\x0d') /* CR already counted */
            ^
unix2dos.c:474:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if ( PreviousChar == '\x0d' ) {
            ^
unix2dos.c:475:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (fputc('\x0a', ipOutF) == EOF) { /* CR,LF pair. Put LF */
              ^
unix2dos.c:484:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (fputc('\x0d', ipOutF) == EOF) { /* Unix line end (LF). Put CR */
            ^
unix2dos.c:490:13: note: +4, including nesting penalty of 3, nesting level increased to 4
            if (ipFlag->NewLine) {  /* add additional CR? */
            ^
unix2dos.c:491:15: note: +5, including nesting penalty of 4, nesting level increased to 5
              if (fputc('\x0d', ipOutF) == EOF) {
              ^
unix2dos.c:499:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if (TempChar == EOF && ipFlag->add_eol && PreviousChar != EOF && !(PreviousChar == '\x0a' || PreviousChar == '\x0d')) {
        ^
unix2dos.c:499:71: note: +1
        if (TempChar == EOF && ipFlag->add_eol && PreviousChar != EOF && !(PreviousChar == '\x0a' || PreviousChar == '\x0d')) {
                                                                      ^
unix2dos.c:499:99: note: +1
        if (TempChar == EOF && ipFlag->add_eol && PreviousChar != EOF && !(PreviousChar == '\x0a' || PreviousChar == '\x0d')) {
                                                                                                  ^
unix2dos.c:501:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (ipFlag->verbose > 1) {
            ^
unix2dos.c:505:13: note: +3, including nesting penalty of 2, nesting level increased to 3
            if (fputc('\x0d', ipOutF) == EOF) {
            ^
unix2dos.c:510:9: note: +2, including nesting penalty of 1, nesting level increased to 2
        if ((TempChar == EOF) && ferror(ipInF)) {
        ^
unix2dos.c:510:31: note: +1
        if ((TempChar == EOF) && ferror(ipInF)) {
                              ^
unix2dos.c:523:5: note: +1, including nesting penalty of 0, nesting level increased to 1
    if ((RetVal == 0) && (ipFlag->verbose > 1)) {
    ^
unix2dos.c:523:23: note: +1
    if ((RetVal == 0) && (ipFlag->verbose > 1)) {
                      ^
unix2dos.c:315:22: warning: 2 adjacent parameters of 'ConvertUnixToDos' of similar type ('FILE *') are easily swapped by mistake [bugprone-easily-swappable-parameters]
int ConvertUnixToDos(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
                     ^~~~~~~~~~~~~~~~~~~~~~~~~
unix2dos.c:315:28: note: the first parameter in the range is 'ipInF'
int ConvertUnixToDos(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
                           ^~~~~
unix2dos.c:315:41: note: the last parameter in the range is 'ipOutF'
int ConvertUnixToDos(FILE* ipInF, FILE* ipOutF, CFlag *ipFlag, const char *progname)
                                        ^~~~~~
unix2dos.c:318:9: warning: variable 'TempChar' is not initialized [cppcoreguidelines-init-variables]
    int TempChar;
        ^
                 = 0
unix2dos.c:320:10: warning: variable 'ConvTable' is not initialized [cppcoreguidelines-init-variables]
    int *ConvTable;
         ^
                   = NULL
unix2dos.c:354:9: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
        ipFlag->status |= WRONG_CODEPAGE ;
        ^~~~~~~~~~~~~~ ~~
unix2dos.c:358:29: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
    if (ipFlag->bomtype > 0)
                            ^
                             {
unix2dos.c:362:8: warning: the value returned by this function should be used [cert-err33-c]
       D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:362:8: note: cast the expression to void to silence this warning
       D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:363:8: warning: the value returned by this function should be used [cert-err33-c]
       D2U_UTF8_FPRINTF(stderr, _("using code page %d.\n"), ipFlag->ConvMode);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:363:8: note: cast the expression to void to silence this warning
       D2U_UTF8_FPRINTF(stderr, _("using code page %d.\n"), ipFlag->ConvMode);
       ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:318:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    int TempChar;
    ^
unix2dos.c:373:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while ((TempChar = fgetc(ipInF)) != EOF) {  /* get character */
        ^
unix2dos.c:373:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
        while ((TempChar = fgetc(ipInF)) != EOF) {  /* get character */
               ^
unix2dos.c:375:27: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar < 32) &&
                          ^
unix2dos.c:381:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            ipFlag->status |= BINARY_FILE ;
            ^~~~~~~~~~~~~~ ~~
unix2dos.c:383:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                                           ^
                                                            {
unix2dos.c:384:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:384:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:385:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:385:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:399:30: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
               if ((TempChar = fgetc(ipInF)) == EOF) { /* get next char (possibly LF) */
                    ~~~~~~~~~^~~~~~~~~~~~~~
unix2dos.c:399:30: note: if it should be an assignment, move it out of the 'if' condition
unix2dos.c:399:30: note: if it is meant to be an equality check, change '=' to '=='
unix2dos.c:400:36: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
                 if (ferror(ipInF))  /* Read error */
                                   ^
                                    {
unix2dos.c:413:34: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
          if (TempChar == '\x0a') /* Count all DOS and Unix line breaks */
                                 ^
                                  {
unix2dos.c:431:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:431:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:432:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:432:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:318:5: note: inferred assignment of ID-dependent value from ID-dependent  [altera-id-dependent-backward-branch]
    int TempChar;
    ^
unix2dos.c:444:9: warning: kernel performance could be improved by unrolling this loop with a '#pragma unroll' directive [altera-unroll-loops]
        while ((TempChar = fgetc(ipInF)) != EOF) {
        ^
unix2dos.c:444:16: warning: backward branch (while loop) is ID-dependent due to variable reference to 'TempChar' and may cause performance degradation [altera-id-dependent-backward-branch]
        while ((TempChar = fgetc(ipInF)) != EOF) {
               ^
unix2dos.c:446:27: warning: 32 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
              (TempChar < 32) &&
                          ^
unix2dos.c:452:13: warning: use of a signed integer operand with a binary bitwise operator [hicpp-signed-bitwise]
            ipFlag->status |= BINARY_FILE ;
            ^~~~~~~~~~~~~~ ~~
unix2dos.c:454:60: warning: statement should be inside braces [hicpp-braces-around-statements,readability-braces-around-statements]
              if ((ipFlag->stdio_mode) && (!ipFlag->error)) ipFlag->error = 1;
                                                           ^
                                                            {
unix2dos.c:455:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:455:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:456:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:456:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Binary symbol 0x%02X found at line %u\n"), TempChar, line_nr);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:467:36: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (TempChar == '\x0d') /* CR */
                                   ^
                                    {
unix2dos.c:471:40: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
            if (PreviousChar != '\x0d') /* CR already counted */
                                       ^
                                        {
unix2dos.c:502:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:502:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:503:15: warning: the value returned by this function should be used [cert-err33-c]
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:503:15: note: cast the expression to void to silence this warning
              D2U_UTF8_FPRINTF(stderr, _("Added line break to last line.\n"));
              ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:524:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:524:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, "%s: ", progname);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:525:7: warning: the value returned by this function should be used [cert-err33-c]
      D2U_UTF8_FPRINTF(stderr, _("Converted %u out of %u line breaks.\n"), converted, line_nr -1);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:525:7: note: cast the expression to void to silence this warning
      D2U_UTF8_FPRINTF(stderr, _("Converted %u out of %u line breaks.\n"), converted, line_nr -1);
      ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:534:17: warning: 9 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  char progname[9];
                ^
unix2dos.c:535:10: warning: variable 'pFlag' is not initialized [cppcoreguidelines-init-variables]
  CFlag *pFlag;
         ^
               = NULL
unix2dos.c:536:9: warning: variable 'ptr' is not initialized [cppcoreguidelines-init-variables]
  char *ptr;
        ^
            = NULL
unix2dos.c:537:18: warning: 1024 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  char localedir[1024];
                 ^
unix2dos.c:538:7: warning: variable 'ret' is not initialized [cppcoreguidelines-init-variables]
  int ret;
      ^
          = 0
unix2dos.c:542:8: warning: variable 'argc_new' is not initialized [cppcoreguidelines-init-variables]
  int  argc_new;
       ^
                = 0
unix2dos.c:543:10: warning: variable 'argv_new' is not initialized [cppcoreguidelines-init-variables]
  char **argv_new;
         ^
                  = NULL
unix2dos.c:549:12: warning: 8 is a magic number; consider replacing it with a named constant [cppcoreguidelines-avoid-magic-numbers,readability-magic-numbers]
  progname[8] = '\0';
           ^
unix2dos.c:553:10: warning: function is not thread safe [concurrency-mt-unsafe]
   ptr = getenv("DOS2UNIX_LOCALEDIR");
         ^
unix2dos.c:554:20: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
   if (ptr == NULL)
                   ^
                    {
unix2dos.c:557:43: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
      if (strlen(ptr) < sizeof(localedir))
                                          ^
                                           {
unix2dos.c:560:10: warning: the value returned by this function should be used [cert-err33-c]
         D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:560:10: note: cast the expression to void to silence this warning
         D2U_UTF8_FPRINTF(stderr,"%s: ",progname);
         ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:561:10: warning: the value returned by this function should be used [cert-err33-c]
         D2U_ANSI_FPRINTF(stderr, "%s", _("error: Value of environment variable DOS2UNIX_LOCALEDIR is too long.\n"));
         ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
unix2dos.c:561:10: note: cast the expression to void to silence this warning
         D2U_ANSI_FPRINTF(stderr, "%s", _("error: Value of environment variable DOS2UNIX_LOCALEDIR is too long.\n"));
         ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
unix2dos.c:576:4: warning: the value returned by this function should be used [cert-err33-c]
   setlocale (LC_ALL, "");
   ^~~~~~~~~~~~~~~~~~~~~~
unix2dos.c:576:4: note: cast the expression to void to silence this warning
unix2dos.c:576:4: warning: function is not thread safe [concurrency-mt-unsafe]
   setlocale (LC_ALL, "");
   ^
unix2dos.c:589:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_UTF8_FPRINTF(stderr, "unix2dos:");
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:589:5: note: cast the expression to void to silence this warning
    D2U_UTF8_FPRINTF(stderr, "unix2dos:");
    ^
./common.h:319:26: note: expanded from macro 'D2U_UTF8_FPRINTF'
#define D2U_UTF8_FPRINTF fprintf
                         ^
unix2dos.c:590:5: warning: the value returned by this function should be used [cert-err33-c]
    D2U_ANSI_FPRINTF(stderr, " %s\n", strerror(errno));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
unix2dos.c:590:5: note: cast the expression to void to silence this warning
    D2U_ANSI_FPRINTF(stderr, " %s\n", strerror(errno));
    ^
./common.h:320:26: note: expanded from macro 'D2U_ANSI_FPRINTF'
#define D2U_ANSI_FPRINTF fprintf
                         ^
unix2dos.c:590:39: warning: function is not thread safe [concurrency-mt-unsafe]
    D2U_ANSI_FPRINTF(stderr, " %s\n", strerror(errno));
                                      ^
unix2dos.c:596:13: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ( ((ptr=strrchr(argv[0],'/')) == NULL) && ((ptr=strrchr(argv[0],'\\')) == NULL) )
         ~~~^~~~~~~~~~~~~~~~~~~~~
unix2dos.c:596:13: note: if it should be an assignment, move it out of the 'if' condition
unix2dos.c:596:13: note: if it is meant to be an equality check, change '=' to '=='
unix2dos.c:596:53: warning: an assignment within an 'if' condition is bug-prone [bugprone-assignment-in-if-condition]
  if ( ((ptr=strrchr(argv[0],'/')) == NULL) && ((ptr=strrchr(argv[0],'\\')) == NULL) )
                                                 ~~~^~~~~~~~~~~~~~~~~~~~~~
unix2dos.c:596:53: note: if it should be an assignment, move it out of the 'if' condition
unix2dos.c:596:53: note: if it is meant to be an equality check, change '=' to '=='
unix2dos.c:596:87: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  if ( ((ptr=strrchr(argv[0],'/')) == NULL) && ((ptr=strrchr(argv[0],'\\')) == NULL) )
                                                                                      ^
                                                                                       {
unix2dos.c:598:7: warning: statement should be inside braces [google-readability-braces-around-statements,hicpp-braces-around-statements,readability-braces-around-statements]
  else
      ^
       {
