Active	ID	Title	Severity	Liklihood	Remediation	Priority	Level
1	ENV01-C	Do not make assumptions about the size of an environment variable	High	Likely	Medium	18	1
1	ENV02-C	Beware of multiple environment variables with the same effective name	Low	Unlikely	Medium	2	3
1	ENV03-C	Sanitize the environment when invoking external programs	High	Likely	High	9	2
1	ENV30-C	Do not modify the object referenced by the return value of certain functions	Low	Probable	Medium	4	3
1	ENV31-C	Do not rely on an environment pointer following an operation that may invalidate it	Low	Probable	Medium	4	3
1	ENV32-C	All exit handlers must return normally	Medium	Likely	Medium	12	1
1	ENV33-C	Do not call system()	High	Probable	Medium	12	1
1	ENV34-C	Do not store pointers returned by certain functions	Low	Probable	Medium	4	3
1	FIO01-C	Be careful using functions that use file names for identification	Medium	Likely	Medium	12	1
1	FIO02-C	Canonicalize path names originating from tainted sources	Medium	Probable	Medium	8	2
1	FIO03-C	Do not make assumptions about fopen() and file creation	Medium	Probable	High	4	3
1	FIO05-C	Identify files using multiple file attributes	Medium	Probable	Medium	8	2
1	FIO06-C	Create files with appropriate access permissions	Medium	Probable	High	4	3
1	FIO08-C	Take care when calling remove() on an open file	Medium	Probable	High	4	3
1	FIO09-C	Be careful with binary data when transferring data across systems	Medium	Probable	High	4	3
1	FIO10-C	Take care when using the rename() function	Medium	Probable	Medium	8	2
1	FIO11-C	Take care when specifying the mode parameter of fopen()	Medium	Probable	Medium	8	2
1	FIO13-C	Never push back anything other than one read character	Medium	Probable	High	4	3
1	FIO14-C	Understand the difference between text mode and binary mode with file streams	Low	Probable	High	2	3
1	FIO15-C	Ensure that file operations are performed in a secure directory	Medium	Probable	High	4	3
1	FIO17-C	Do not rely on an ending null character when using fread()	Low	Likely	Medium	6	2
1	FIO18-C	Never expect fwrite() to terminate the writing process at a null character	Medium	Probable	Medium	8	2
1	FIO19-C	Do not use fseek() and ftell() to compute the size of a regular file	Low	Unlikely	Medium	2	3
1	FIO20-C	Avoid unintentional truncation when using fgets() or fgetws()	Medium	Likely	Medium	12	1
1	FIO21-C	Do not create temporary files in shared directories	High	Probable	Medium	12	1
1	FIO22-C	Close files before spawning processes	Medium	Unlikely	Medium	4	3
1	FIO23-C	Do not exit with unflushed data in stdout or stderr	Medium	Unlikely	Medium	4	3
1	FIO30-C	Exclude user input from format strings	High	Likely	Medium	18	1
1	FIO31-C	Do not open a file that is already open	Medium	Probable	High	4	3
1	FIO32-C	Do not perform operations on devices that are only appropriate for files	Medium	Unlikely	Medium	4	3
1	FIO34-C	Distinguish between characters read from a file and EOF or WEOF	High	Probable	Medium	12	1
1	FIO37-C	Do not assume that fgets() or fgetws() returns a nonempty string when successful	High	Probable	Medium	12	1
1	FIO38-C	Do not copy a FILE object	Low	Probable	Medium	4	3
1	FIO39-C	Do not alternately input and output from a stream without an intervening flush or positioning call	Low	Likely	Medium	6	2
1	FIO40-C	Reset strings on fgets() or fgetws() failure	Low	Probable	Medium	4	3
1	FIO41-C	Do not call getc(), putc(), getwc(), or putwc() with a stream argument that has side effects	Low	Unlikely	Medium	2	3
1	FIO42-C	Close files when they are no longer needed	Medium	Unlikely	Medium	4	3
1	FIO44-C	Only use values for fsetpos() that are returned from fgetpos()	Medium	Unlikely	Medium	4	3
1	FIO45-C	Avoid TOCTOU race conditions while accessing files	High	Probable	High	6	2
1	FIO46-C	Do not access a closed file	Medium	Unlikely	Medium	4	3
1	FIO47-C	Use valid format strings	High	Unlikely	Medium	6	2
1	WIN00-C	Be specific when dynamically loading libraries	High	Unlikely	Low	9	2
1	WIN01-C	Do not forcibly terminate execution	High	Likely	High	9	2
1	WIN02-C	Restrict privileges when spawning child processes	High	Likely	High	9	2
1	WIN03-C	Understand HANDLE inheritance	High	Unlikely	Low	9	2
1	WIN04-C	Consider encrypting function pointers	High	Unlikely	Low	9	2
1	WIN30-C	Properly pair allocation and deallocation functions	Low	Probable	Low	6	2
1	POS01-C	Check for the existence of links when dealing with files	Medium	Likely	High	6	2
1	POS02-C	Follow the principle of least privilege	High	Likely	High	9	2
1	POS04-C	Avoid using PTHREAD_MUTEX_NORMAL type mutex locks	Low	Unlikely	Medium	2	3
1	POS05-C	Limit access to files by creating a jail	Medium	Probable	High	4	3
1	POS30-C	Use the readlink() function properly	High	Probable	Medium	12	1
1	POS33-C	Do not use vfork()	Low	Probable	Low	6	2
1	POS34-C	Do not call putenv() with a pointer to an automatic variable as the argument	High	Unlikely	Medium	6	2
1	POS35-C	Avoid race conditions while checking for the existence of a symbolic link	High	Likely	Medium	18	1
1	POS36-C	Observe correct revocation order while relinquishing privileges	High	Probable	Medium	12	1
1	POS37-C	Ensure that privilege relinquishment is successful	High	Probable	Low	18	1
1	POS38-C	Beware of race conditions when using fork and file descriptors	Medium	Unlikely	Medium	4	3
1	POS39-C	Use the correct byte ordering when transferring data between systems	Medium	Likely	Low	18	1
1	POS44-C	Do not use signals to terminate threads	Low	Probable	Low	6	2
1	POS47-C	Do not use threads that can be canceled asynchronously	Medium	Probable	Low	12	1
1	POS48-C	Do not unlock or destroy another POSIX thread&#39;s mutex	Medium	Probable	High	4	3
1	POS49-C	When data must be accessed by multiple threads, provide a mutex and guarantee no adjacent data is also accessed	Medium	Probable	Medium	8	2
1	POS50-C	Declare objects shared between POSIX threads with appropriate storage durations	Medium	Probable	High	4	3
1	POS51-C	Avoid deadlock with POSIX threads by locking in predefined order	Low	Probable	Medium	4	3
1	POS52-C	Do not perform operations that can block while holding a POSIX lock	Low	Probable	High	2	3
1	POS54-C	Detect and handle POSIX library errors	High	Likely	Medium	18	1
1	POS53-C	Do not use more than one mutex for concurrent waiting operations on a condition variable	Medium	Probable	High	4	3
0	MSC00-C	Compile cleanly at High warning levels	Medium	Probable	Medium	8	2
1	MSC01-C	Strive for logical completeness	Medium	Probable	Medium	8	2
0	MSC04-C	Use comments consistently and in a readable fashion	Medium	Unlikely	Medium	4	3
1	MSC05-C	Do not manipulate time_t typed values directly	Low	Unlikely	Medium	2	3
1	MSC06-C	Beware of compiler optimizations	Medium	Probable	Medium	8	2
0	MSC07-C	Detect and remove dead code	Low	Unlikely	Medium	2	3
1	MSC09-C	Character encoding: Use subset of ASCII for safety	Medium	Unlikely	Medium	4	3
1	MSC10-C	Character encoding: UTF8-related issues	Medium	Unlikely	High	2	3
1	MSC11-C	Incorporate diagnostic tests using assertions	Low	Unlikely	High	1	3
0	MSC12-C	Detect and remove code that has no effect	Low	Unlikely	Medium	2	3
0	MSC13-C	Detect and remove unused values	Low	Unlikely	Medium	2	3
1	MSC14-C	Do not introduce unnecessary platform dependencies	Low	Unlikely	Medium	2	3
1	MSC15-C	Do not depend on undefined behavior	High	Likely	Medium	18	1
0	MSC17-C	Finish every set of statements associated with a case label with a break statement	Medium	Likely	Low	18	1
1	MSC18-C	Be careful while handling sensitive data, such as passwords, in program code	Medium	Probable	Medium	8	2
1	MSC19-C	For functions that return an array, prefer returning an empty array over a null value	Low	Unlikely	High	1	3
1	MSC20-C	Do not use a switch statement to transfer control into a complex block	Medium	Probable	Medium	8	2
1	MSC21-C	Use robust loop termination conditions	Low	Unlikely	Low	3	3
1	MSC22-C	Use the setjmp(), longjmp() facility securely	Low	Probable	Medium	4	3
1	MSC24-C	Do not use deprecated or obsolescent functions	High	Probable	Medium	12	1
1	MSC30-C	Do not use the rand() function for generating pseudorandom numbers	Medium	Unlikely	Low	6	2
1	MSC32-C	Properly seed pseudorandom number generators	Medium	Likely	Low	18	1
1	MSC33-C	Do not pass invalid data to the asctime() function	High	Likely	Low	27	1
1	MSC37-C	Ensure that control never reaches the end of a non-void function	High	Unlikely	Low	9	2
1	MSC38-C	Do not treat a predefined identifier as an object if it might only be implemented as a macro	Low	Unlikely	Medium	2	3
1	MSC39-C	Do not call va_arg() on a va_list that has an indeterminate value	Low	Unlikely	Low	3	3
1	MSC40-C	Do not violate constraints	Low	Unlikely	Medium	2	3
1	CON00-C	Avoid race conditions with multiple threads	Medium	Probable	High	4	3
1	CON01-C	Acquire and release synchronization primitives in the same module, at the same level of abstraction	Low	Probable	Medium	4	3
1	CON02-C	Do not use volatile as a synchronization primitive	Medium	Probable	Medium	8	2
1	CON04-C	Join or detach threads even if their exit status is unimportant	Low	Unlikely	High	1	3
1	CON05-C	Do not perform operations that can block while holding a lock	Low	Probable	High	2	3
1	CON07-C	Ensure that compound operations on shared variables are atomic	Medium	Probable	Medium	8	2
1	CON08-C	Do not assume that a group of calls to independently atomic methods is atomic	Low	Probable	Medium	4	3
1	CON09-C	Avoid the ABA problem when using lock-free algorithms	Medium	Unlikely	High	2	3
1	CON30-C	Clean up thread-specific storage	Medium	Unlikely	Medium	4	3
1	CON31-C	Do not destroy a mutex while it is locked	Medium	Probable	High	4	3
1	CON32-C	Prevent data races when accessing bit-fields from multiple threads	Medium	Probable	Medium	8	2
1	CON33-C	Avoid race conditions when using library functions	Medium	Probable	High	4	3
1	CON34-C	Declare objects shared between threads with appropriate storage durations	Medium	Probable	High	4	3
1	CON35-C	Avoid deadlock by locking in a predefined order	Low	Probable	Medium	4	3
1	CON36-C	Wrap functions that can spuriously wake up in a loop	Low	Unlikely	Medium	2	3
1	CON37-C	Do not call signal() in a multithreaded program	Low	Probable	Low	6	2
1	CON38-C	Notify all threads waiting on a condition variable	Low	Unlikely	Medium	2	3
1	CON39-C	Do not join or detach a thread that was previously joined or detached	Low	Likely	Medium	6	2
1	CON40-C	Do not refer to an atomic variable twice in an expression	Medium	Probable	Medium	8	2
1	CON41-C	Wrap functions that can fail spuriously in a loop	Low	Unlikely	Medium	2	3
1	CON43-C	Do not allow data races in multithreaded code	Medium	Probable	High	4	3
1	API00-C	Functions should validate their parameters	Medium	Unlikely	High	2	3
1	API02-C	Functions that read or write to or from an array should take an argument to specify the source or target size	High	Likely	High	9	2
1	API03-C	Create consistent interfaces and capabilities across related functions	Medium	Unlikely	Medium	4	3
1	API04-C	Provide a consistent and usable error-checking mechanism	Medium	Unlikely	Medium	4	3
1	API07-C	Enforce type safety	Medium	Unlikely	Medium	4	3
1	API08-C	Avoid parameter names in a function prototype	Medium	Unlikely	Medium	4	3
1	API09-C	Compatible values should have the same type	Low	Unlikely	High	1	3
1	ERR00-C	Adopt and implement a consistent and comprehensive error-handling policy	Medium	Probable	High	4	3
1	ERR01-C	Use ferror() rather than errno to check for FILE stream errors	Low	Probable	Low	6	2
1	ERR02-C	Avoid in-band error indicators	Low	Unlikely	High	1	3
1	ERR03-C	Use runtime-constraint handlers when calling the bounds-checking interfaces	Low	Unlikely	Medium	2	3
1	ERR04-C	Choose an appropriate termination strategy	Medium	Probable	High	4	3
1	ERR05-C	Application-independent code should provide error detection without dictating error handling	Medium	Probable	High	4	3
1	ERR06-C	Understand the termination behavior of assert() and abort()	Medium	Unlikely	Medium	4	3
1	ERR07-C	Prefer functions that support error checking over equivalent functions that don&#39;t	Medium	Probable	Medium	8	2
1	ERR30-C	Set errno to zero before calling a library function known to set errno, and check errno only after the function returns a value indicating failure	Medium	Probable	Medium	8	2
1	ERR32-C	Do not rely on indeterminate values of errno	Low	Unlikely	Low	3	3
1	ERR33-C	Detect and handle standard library errors	High	Likely	Medium	18	1
1	ERR34-C	Detect errors when converting a string to a number	Medium	Unlikely	Medium	4	3
1	SIG00-C	Mask signals handled by noninterruptible signal handlers	High	Likely	High	9	2
1	SIG01-C	Understand implementation-specific details regarding signal handler persistence	Low	Unlikely	Low	3	3
1	SIG02-C	Avoid using signals to implement normal functionality	High	Probable	Medium	12	1
1	SIG30-C	Call only asynchronous-safe functions within signal handlers	High	Likely	Medium	18	1
1	SIG31-C	Do not access shared objects in signal handlers	High	Likely	High	9	2
1	SIG34-C	Do not call signal() from within interruptible signal handlers	Low	Unlikely	Low	3	3
1	SIG35-C	Do not return from a computational exception signal handler	Low	Unlikely	High	1	3
1	MEM00-C	Allocate and free memory in the same module, at the same level of abstraction	High	Probable	Medium	12	1
1	MEM01-C	Store a new value in pointers immediately after free()	High	Unlikely	Low	9	2
1	MEM02-C	Immediately cast the result of a memory allocation function call into a pointer to the allocated type	Low	Unlikely	Low	3	3
1	MEM03-C	Clear sensitive information stored in reusable resources	Medium	Unlikely	High	2	3
1	MEM04-C	Beware of zero-length allocations	Low	Likely	Medium	6	2
1	MEM05-C	Avoid large stack allocations	Medium	Likely	Medium	12	1
1	MEM06-C	Ensure that sensitive data is not written out to disk	Medium	Unlikely	High	2	3
1	MEM07-C	Ensure that the arguments to calloc(), when multiplied, do not wrap	High	Unlikely	Medium	6	2
1	MEM10-C	Define and use a pointer validation function	High	Unlikely	High	3	3
1	MEM11-C	Do not assume infinite heap space	Low	Probable	High	2	3
1	MEM12-C	Consider using a goto chain when leaving a function on error when using and releasing resources	Low	Probable	Medium	4	3
1	MEM30-C	Do not access freed memory	High	Likely	Medium	18	1
1	MEM31-C	Free dynamically allocated memory when no longer needed	Medium	Probable	Medium	8	2
1	MEM33-C	Allocate and copy structures containing a flexible array member dynamically	Low	Unlikely	Low	3	3
1	MEM34-C	Only free memory allocated dynamically	High	Likely	Medium	18	1
1	MEM35-C	Allocate sufficient memory for an object	High	Probable	High	6	2
1	MEM36-C	Do not modify the alignment of objects by calling realloc()	Low	Probable	High	2	3
1	STR00-C	Represent characters using an appropriate type	Medium	Probable	Low	12	1
1	STR01-C	Adopt and implement a consistent plan for managing strings	Low	Unlikely	High	1	3
1	STR02-C	Sanitize data passed to complex subsystems	High	Likely	Medium	18	1
1	STR03-C	Do not inadvertently truncate a string	Medium	Probable	Medium	8	2
1	STR04-C	Use plain char for characters in the basic character set	Low	Unlikely	Low	3	3
0	STR05-C	Use pointers to const when referring to string literals	Low	Unlikely	Low	3	3
1	STR06-C	Do not assume that strtok() leaves the parse string unchanged	Medium	Likely	Medium	12	1
1	STR07-C	Use the bounds-checking interfaces for remediation of existing string manipulation code	High	Probable	Medium	12	1
1	STR08-C	Use managed strings for development of new string manipulation code	High	Probable	High	6	2
1	STR09-C	Don&#39;t assume numeric values for expressions with type plain character	Low	Unlikely	Low	3	3
1	STR10-C	Do not concatenate different type of string literals	Low	Probable	Medium	4	3
1	STR11-C	Do not specify the bound of a character array initialized with a string literal	Low	Probable	Low	6	2
1	STR30-C	Do not attempt to modify string literals	Low	Likely	Low	9	2
1	STR31-C	Guarantee that storage for strings has sufficient space for character data and the null terminator	High	Likely	Medium	18	1
1	STR32-C	Do not pass a non-null-terminated character sequence to a library function that expects a string	High	Probable	Medium	12	1
1	STR34-C	Cast characters to unsigned char before converting to larger integer sizes	Medium	Probable	Medium	8	2
1	STR37-C	Arguments to character-handling functions must be representable as an unsigned char	Low	Unlikely	Low	3	3
1	STR38-C	Do not confuse narrow and wide character strings and functions	High	Likely	Low	27	1
1	ARR00-C	Understand how arrays work	High	Probable	High	6	2
1	ARR01-C	Do not apply the sizeof operator to a pointer when taking the size of an array	High	Probable	Low	18	1
0	ARR02-C	Explicitly specify array bounds, even if implicitly defined by an initializer	Medium	Unlikely	Low	6	2
1	ARR30-C	Do not form or use out-of-bounds pointers or array subscripts	High	Likely	High	9	2
1	ARR32-C	Ensure size arguments for variable length arrays are in a valid range	High	Probable	High	6	2
1	ARR36-C	Do not subtract or compare two pointers that do not refer to the same array	Medium	Probable	Medium	8	2
1	ARR37-C	Do not add or subtract an integer to a pointer to a non-array object	Medium	Probable	Medium	8	2
1	ARR38-C	Guarantee that library functions do not form invalid pointers	High	Likely	Medium	18	1
1	ARR39-C	Do not add or subtract a scaled integer to a pointer	High	Probable	High	6	2
1	FLP00-C	Understand the limitations of floating-point numbers	Medium	Probable	High	4	3
1	FLP01-C	Take care in rearranging floating-point expressions	Low	Probable	High	2	3
1	FLP02-C	Avoid using floating-point numbers when precise computation is needed	Low	Probable	High	2	3
1	FLP03-C	Detect and handle floating-point errors	Low	Probable	High	2	3
1	FLP04-C	Check floating-point inputs for exceptional values	Low	Probable	High	2	3
1	FLP05-C	Don&#39;t use denormalized numbers	Low	Probable	High	2	3
1	FLP06-C	Convert integers to floating point for floating-point operations	Low	Probable	Low	6	2
1	FLP07-C	Cast the return value of a function that returns a floating-point type	Low	Probable	Medium	4	3
1	FLP30-C	Do not use floating-point variables as loop counters	Low	Probable	Low	6	2
1	FLP32-C	Prevent or detect domain and range errors in math functions	Medium	Probable	Medium	8	2
1	FLP34-C	Ensure that floating-point conversions are within range of the new type	Low	Unlikely	Low	3	3
1	FLP36-C	Preserve precision when converting integral values to floating-point type	Low	Unlikely	Medium	2	3
1	INT00-C	Understand the data model used by your implementation(s)	High	Unlikely	High	3	3
1	INT01-C	Use rsize_t or size_t for all integer values representing the size of an object	Medium	Probable	Medium	8	2
1	INT02-C	Understand integer conversion rules	Medium	Probable	Medium	8	2
1	INT04-C	Enforce limits on integer values originating from tainted sources	Low	Probable	High	2	3
1	INT05-C	Do not use input functions to convert character data if they cannot handle all possible inputs	Medium	Probable	High	4	3
1	INT06-C	Use strtol() or a related function to convert a string token to an integer	Medium	Probable	Medium	8	2
0	INT07-C	Use only explicitly signed or unsigned char type for numeric values	Medium	Probable	Medium	8	2
1	INT08-C	Verify that all integer values are in range	Medium	Probable	High	4	3
1	INT09-C	Ensure enumeration constants map to unique values	Low	Probable	Medium	4	3
1	INT10-C	Do not assume a positive remainder when using the % operator	Low	Unlikely	High	1	3
1	INT12-C	Do not make assumptions about the type of a plain int bit-field when used in an expression	Low	Unlikely	Medium	2	3
0	INT13-C	Use bitwise operators only on unsigned operands	High	Unlikely	Medium	6	2
0	INT14-C	Avoid performing bitwise and arithmetic operations on the same data	Medium	Unlikely	Medium	4	3
1	INT15-C	Use intmax_t or uintmax_t for formatted IO on programmer-defined integer types	High	Unlikely	Medium	6	2
1	INT16-C	Do not make assumptions about representation of signed integers	Medium	Unlikely	High	2	3
1	INT17-C	Define integer constants in an implementation-independent manner	High	Probable	Low	18	1
1	INT18-C	Evaluate integer expressions in a larger size before comparing or assigning to that size	High	Likely	Medium	18	1
1	INT30-C	Ensure that unsigned integer operations do not wrap	High	Likely	High	9	2
1	INT31-C	Ensure that integer conversions do not result in lost or misinterpreted data	High	Probable	High	6	2
1	INT32-C	Ensure that operations on signed integers do not result in overflow	High	Likely	High	9	2
1	INT33-C	Ensure that division and remainder operations do not result in divide-by-zero errors	Low	Likely	Medium	6	2
1	INT34-C	Do not shift an expression by a negative number of bits or by greater than or equal to the number of bits that exist in the operand	Low	Unlikely	Medium	2	3
1	INT35-C	Use correct integer precisions	Low	Unlikely	Medium	2	3
1	INT36-C	Converting a pointer to integer or integer to pointer	Low	Probable	High	2	3
0	EXP00-C	Use parentheses for precedence of operation	Low	Probable	Medium	4	3
1	EXP02-C	Be aware of the short-circuit behavior of the logical AND and OR operators	Low	Unlikely	Medium	2	3
1	EXP03-C	Do not assume the size of a structure is the sum of the sizes of its members	Medium	Unlikely	High	2	3
1	EXP05-C	Do not cast away a const qualification	Medium	Probable	Medium	8	2
0	EXP07-C	Do not diminish the benefits of constants by assuming their values in expressions	Low	Unlikely	Medium	2	3
1	EXP08-C	Ensure pointer arithmetic is used correctly	High	Probable	High	6	2
1	EXP09-C	Use sizeof to determine the size of a type or variable	High	Unlikely	Medium	6	2
1	EXP10-C	Do not depend on the order of evaluation of subexpressions or the order in which side effects take place	Medium	Probable	Medium	8	2
1	EXP11-C	Do not make assumptions regarding the layout of structures with bit-fields	Medium	Probable	Medium	8	2
1	EXP12-C	Do not ignore values returned by functions	Medium	Unlikely	Medium	4	3
1	EXP13-C	Treat relational and equality operators as if they were nonassociative	Low	Unlikely	Medium	2	3
1	EXP14-C	Beware of integer promotion when performing bitwise operations on integer types smaller than int	Low	Likely	High	3	3
0	EXP15-C	Do not place a semicolon on the same line as an if, for, or while statement	High	Likely	Low	27	1
1	EXP16-C	Do not compare function pointers to constant values	Low	Likely	Medium	6	2
0	EXP19-C	Use braces for the body of an if, for, or while statement	Medium	Probable	Medium	8	2
0	EXP20-C	Perform explicit tests to determine success, true and false, and equality	Medium	Probable	Low	12	1
1	EXP21-C	Place constants on the left of equality comparisons	Low	Likely	Medium	6	2
1	EXP30-C	Do not depend on the order of evaluation for side effects	Medium	Probable	Medium	8	2
1	EXP32-C	Do not access a volatile object through a nonvolatile reference	Low	Likely	Medium	6	2
1	EXP33-C	Do not read uninitialized memory	High	Probable	Medium	12	1
1	EXP34-C	Do not dereference null pointers	High	Likely	Medium	18	1
1	EXP35-C	Do not modify objects with temporary lifetime	Low	Probable	Medium	4	3
1	EXP36-C	Do not cast pointers into more strictly aligned pointer types	Low	Probable	Medium	4	3
1	EXP37-C	Call functions with the correct number and type of arguments	Medium	Probable	High	4	3
1	EXP39-C	Do not access a variable through a pointer of an incompatible type	Medium	Unlikely	High	2	3
1	EXP40-C	Do not modify constant objects	Low	Unlikely	Medium	2	3
1	EXP42-C	Do not compare padding data	Medium	Probable	Medium	8	2
1	EXP43-C	Avoid undefined behavior when using restrict-qualified pointers	Medium	Probable	High	4	3
1	EXP44-C	Do not rely on side effects in operands to sizeof, _Alignof, or _Generic	Low	Unlikely	Low	3	3
1	EXP45-C	Do not perform assignments in selection statements	Low	Likely	Medium	6	2
0	DCL00-C	Const-qualify immutable objects	Low	Unlikely	High	1	3
0	DCL01-C	Do not reuse variable names in subscopes	Low	Unlikely	Medium	2	3
0	DCL02-C	Use visually distinct identifiers	Low	Unlikely	Medium	2	3
1	DCL03-C	Use a static assertion to test the value of a constant expression	Low	Unlikely	High	1	3
0	DCL04-C	Do not declare more than one variable per declaration	Low	Unlikely	Low	3	3
0	DCL05-C	Use typedefs of non-pointer types only	Low	Unlikely	Medium	2	3
0	DCL06-C	Use meaningful symbolic constants to represent literal values	Low	Unlikely	Medium	2	3
1	DCL07-C	Include the appropriate type information in function declarators	Low	Unlikely	Low	3	3
0	DCL08-C	Properly encode relationships in constant definitions	Low	Unlikely	High	1	3
1	DCL09-C	Declare functions that return errno with a return type of errno_t	Low	Unlikely	Low	3	3
1	DCL10-C	Maintain the contract between the writer and caller of variadic functions	High	Probable	High	6	2
1	DCL11-C	Understand the type issues associated with variadic functions	High	Probable	High	6	2
1	DCL12-C	Implement abstract data types using opaque types	Low	Unlikely	High	1	3
0	DCL13-C	Declare function parameters that are pointers to values not changed by the function as const	Low	Unlikely	Low	3	3
0	DCL15-C	Declare file-scope objects or functions that do not need external linkage as static	Low	Unlikely	Low	3	3
0	DCL16-C	Use &quot;L,&quot; not &quot;l,&quot; to indicate a long value	Low	Unlikely	Low	3	3
1	DCL17-C	Beware of miscompiled volatile-qualified variables	Medium	Probable	High	4	3
1	DCL18-C	Do not begin integer constants with 0 when specifying a decimal value	Low	Unlikely	Low	3	3
0	DCL19-C	Minimize the scope of variables and functions	Low	Unlikely	Medium	2	3
0	DCL20-C	Explicitly specify void when a function accepts no arguments	Medium	Probable	Low	12	1
1	DCL21-C	Understand the storage of compound literals	Low	Unlikely	Medium	2	3
1	DCL22-C	Use volatile for data that cannot be cached	Low	Probable	High	2	3
1	DCL23-C	Guarantee that mutually visible identifiers are unique	Medium	Unlikely	Low	6	2
1	DCL30-C	Declare objects with appropriate storage durations	High	Probable	High	6	2
1	DCL31-C	Declare identifiers before using them	Low	Unlikely	Low	3	3
1	DCL36-C	Do not declare an identifier with conflicting linkage classifications	Medium	Probable	Medium	8	2
1	DCL37-C	Do not declare or define a reserved identifier	Low	Unlikely	Low	3	3
1	DCL38-C	Use the correct syntax when declaring a flexible array member	Low	Unlikely	Low	3	3
1	DCL39-C	Avoid information leakage in structure padding	Low	Unlikely	High	1	3
1	DCL40-C	Do not create incompatible declarations of the same function or object	Low	Unlikely	Medium	2	3
1	DCL41-C	Do not declare variables inside a switch statement before the first case label	Medium	Unlikely	Medium	4	3
1	PRE00-C	Prefer inline or static functions to function-like macros	Medium	Unlikely	Medium	4	3
0	PRE01-C	Use parentheses within macros around parameter names	Medium	Probable	Low	12	1
0	PRE02-C	Macro replacement lists should be parenthesized	Medium	Probable	Low	12	1
0	PRE03-C	Prefer typedefs to defines for encoding types	Low	Unlikely	Medium	2	3
1	PRE04-C	Do not reuse a standard header file name	Low	Unlikely	Medium	2	3
1	PRE05-C	Understand macro replacement when concatenating tokens or performing stringification	Low	Unlikely	Medium	2	3
1	PRE06-C	Enclose header files in an inclusion guard	Low	Unlikely	Low	3	3
1	PRE07-C	Avoid using repeated question marks	Low	Unlikely	Medium	2	3
1	PRE08-C	Guarantee that header file names are unique	Low	Unlikely	Medium	2	3
1	PRE09-C	Do not replace secure functions with deprecated or obsolescent functions	High	Likely	Medium	18	1
1	PRE10-C	Wrap multistatement macros in a do-while loop	Medium	Probable	Low	12	1
1	PRE11-C	Do not conclude macro definitions with a semicolon	Medium	Probable	Low	12	1
1	PRE12-C	Do not define unsafe macros	Low	Probable	Low	6	2
1	PRE13-C	Use the Standard predefined macros to test for versions and features.	Low	Probable	Low	6	2
1	PRE30-C	Do not create a universal character name through concatenation	Low	Unlikely	Medium	2	3
1	PRE31-C	Avoid side effects in arguments to unsafe macros	Low	Unlikely	Low	3	3
1	PRE32-C	Do not use preprocessor directives in invocations of function-like macros	Low	Unlikely	Medium	2	3
1	CON50-CPP	Do not destroy a mutex while it is locked	Medium	Probable	High	4	3
1	CON51-CPP	Ensure actively held locks are released on exceptional conditions	Low	Probable	Low	6	2
1	CON52-CPP	Prevent data races when accessing bit-fields from multiple threads	Medium	Probable	Medium	8	2
1	CON53-CPP	Avoid deadlock by locking in a predefined order	Low	Probable	Medium	4	3
1	CON54-CPP	Wrap functions that can spuriously wake up in a loop	Low	Unlikely	Medium	2	3
1	CON55-CPP	Preserve thread safety and liveness when using condition variables	Low	Unlikely	Medium	2	3
1	CON56-CPP	Do not speculatively lock a non-recursive mutex that is already owned by the calling thread	Low	Unlikely	High	1	3
1	CTR50-CPP	Guarantee that container indices and iterators are within the valid range	High	Likely	High	9	2
1	CTR51-CPP	Use valid references, pointers, and iterators to reference elements of a container	High	Probable	High	6	2
1	CTR52-CPP	Guarantee that library functions do not overflow	High	Likely	Medium	18	1
1	CTR53-CPP	Use valid iterator ranges	High	Probable	High	6	2
1	CTR54-CPP	Do not subtract iterators that do not refer to the same container	Medium	Probable	Medium	8	2
1	CTR55-CPP	Do not use an additive operator on an iterator if the result would overflow	High	Likely	Medium	18	1
1	CTR56-CPP	Do not use pointer arithmetic on polymorphic objects	High	Likely	High	9	2
1	CTR57-CPP	Provide a valid ordering predicate	Low	Probable	High	2	3
1	CTR58-CPP	Predicate function objects should not be mutable	Low	Likely	High	3	3
1	DCL50-CPP	Do not define a C-style variadic function	High	Probable	Medium	12	1
1	DCL51-CPP	Do not declare or define a reserved identifier	Low	Unlikely	Low	3	3
1	DCL52-CPP	Never qualify a reference type with const or volatile	Low	Unlikely	Low	3	3
1	DCL53-CPP	Do not write syntactically ambiguous declarations	Low	Unlikely	Medium	2	3
1	DCL54-CPP	Overload allocation and deallocation functions as a pair in the same scope	Low	Probable	Low	6	2
1	DCL55-CPP	Avoid information leakage when passing a class object across a trust boundary	Low	Unlikely	High	1	3
1	DCL56-CPP	Avoid cycles during initialization of static objects	Low	Unlikely	Medium	2	3
1	DCL57-CPP	Do not let exceptions escape from destructors or deallocation functions	Low	Likely	Medium	6	2
1	DCL58-CPP	Do not modify the standard namespaces	High	Unlikely	Medium	6	2
1	DCL59-CPP	Do not define an unnamed namespace in a header file	Medium	Unlikely	Medium	4	3
1	DCL60-CPP	Obey the one-definition rule	High	Unlikely	High	3	3
1	ERR50-CPP	Do not abruptly terminate the program	Low	Probable	Medium	4	3
1	ERR51-CPP	Handle all exceptions	Low	Probable	Medium	4	3
1	ERR52-CPP	Do not use setjmp() or longjmp()	Low	Probable	Medium	4	3
1	ERR53-CPP	Do not reference base classes or class data members in a constructor or destructor function-try-block handler	Low	Unlikely	Medium	2	3
1	ERR54-CPP	Catch handlers should order their parameter types from most derived to least derived	Medium	Likely	Low	18	1
1	ERR55-CPP	Honor exception specifications	Low	Likely	Low	9	2
1	ERR56-CPP	Guarantee exception safety	High	Likely	High	9	2
1	ERR57-CPP	Do not leak resources when handling exceptions	Low	Probable	High	2	3
1	ERR58-CPP	Handle all exceptions thrown before main() begins executing	Low	Likely	Low	9	2
1	ERR59-CPP	Do not throw an exception across execution boundaries	High	Probable	Medium	12	1
1	ERR60-CPP	Exception objects must be nothrow copy constructible	Low	Probable	Medium	4	3
1	ERR61-CPP	Catch exceptions by lvalue reference	Low	Unlikely	Low	3	3
1	ERR62-CPP	Detect errors when converting a string to a number	Medium	Unlikely	Medium	4	3
1	EXP50-CPP	Do not depend on the order of evaluation for side effects	Medium	Probable	Medium	8	2
1	EXP51-CPP	Do not delete an array through a pointer of the incorrect type	Low	Unlikely	Medium	2	3
1	EXP52-CPP	Do not rely on side effects in unevaluated operands	Low	Unlikely	Low	3	3
1	EXP53-CPP	Do not read uninitialized memory	High	Probable	Medium	12	1
1	EXP54-CPP	Do not access an object outside of its lifetime	High	Probable	High	6	2
1	EXP55-CPP	Do not access a cv-qualified object through a cv-unqualified type	Medium	Probable	Medium	8	2
1	EXP56-CPP	Do not call a function with a mismatched language linkage	Low	Unlikely	Medium	2	3
1	EXP57-CPP	Do not cast or delete pointers to incomplete classes	Medium	Unlikely	Medium	4	3
1	EXP58-CPP	Pass an object of the correct type to va_start	Medium	Unlikely	Medium	4	3
1	EXP59-CPP	Use offsetof() on valid types and members	Medium	Unlikely	Medium	4	3
1	EXP60-CPP	Do not pass a nonstandard-layout type object across execution boundaries	High	Probable	Medium	12	1
1	EXP61-CPP	A lambda object must not outlive any of its reference captured objects	High	Probable	High	6	2
1	EXP62-CPP	Do not access the bits of an object representation that are not part of the object's value representation	High	Probable	High	6	2
1	EXP63-CPP	Do not rely on the value of a moved-from object	Medium	Probable	Medium	8	2
1	FIO50-CPP	Do not alternately input and output from a file stream without an intervening positioning call	Low	Likely	Medium	6	2
1	FIO51-CPP	Close files when they are no longer needed	Medium	Unlikely	Medium	4	3
1	INT50-CPP	Do not cast to an out-of-range enumeration value	Medium	Unlikely	Medium	4	3
1	MEM50-CPP	Do not access freed memory	High	Likely	Medium	18	1
1	MEM51-CPP	Properly deallocate dynamically allocated resources	High	Likely	Medium	18	1
1	MEM52-CPP	Detect and handle memory allocation errors	High	Likely	Medium	18	1
1	MEM53-CPP	Explicitly construct and destruct objects when manually managing object lifetime	High	Likely	Medium	18	1
1	MEM54-CPP	Provide placement new with properly aligned pointers to sufficient storage capacity	High	Likely	Medium	18	1
1	MEM55-CPP	Honor replacement dynamic storage management requirements	High	Likely	Medium	18	1
1	MEM56-CPP	Do not store an already-owned pointer value in an unrelated smart pointer	High	Likely	Medium	18	1
1	MEM57-CPP	Avoid using default operator new for over-aligned types	Medium	Unlikely	Low	6	2
1	MSC50-CPP	Do not use std::rand() for generating pseudorandom numbers	Medium	Unlikely	Low	6	2
1	MSC51-CPP	Ensure your random number generator is properly seeded	Medium	Likely	Low	18	1
1	MSC52-CPP	Value-returning functions must return a value from all exit paths	Medium	Probable	Medium	8	2
1	MSC53-CPP	Do not return from a function declared [[noreturn]]	Medium	Unlikely	Low	2	3
1	MSC54-CPP	A signal handler must be a plain old function	High	Probable	High	6	2
1	OOP50-CPP	Do not invoke virtual functions from constructors or destructors	Low	Unlikely	Medium	2	3
1	OOP51-CPP	Do not slice derived objects	Low	Probable	Medium	4	3
1	OOP52-CPP	Do not delete a polymorphic object without a virtual destructor	Low	Likely	Low	9	2
1	OOP53-CPP	Write constructor member initializers in the canonical order	Medium	Unlikely	Medium	4	3
1	OOP54-CPP	Gracefully handle self-copy assignment	Low	Probable	High	2	3
1	OOP55-CPP	Do not use pointer-to-member operators to access nonexistent members	High	Probable	High	6	2
1	OOP56-CPP	Honor replacement handler requirements	Low	Probable	High	2	3
1	OOP57-CPP	Prefer special member functions and overloaded operators to C Standard Library functions	High	Probable	High	6	2
1	OOP58-CPP	Copy operations must not mutate the source object	Low	Likely	Low	9	2
1	STR50-CPP	Guarantee that storage for strings has sufficient space for character data and the null terminator	High	Likely	Medium	18	1
1	STR51-CPP	Do not attempt to create a std::string from a null pointer	High	Likely	Medium	18	1
1	STR52-CPP	Use valid references, pointers, and iterators to reference elements of a basic_string	High	Probable	High	6	2
1	STR53-CPP	Range check element access	High	Unlikely	Medium	6	2
1	DCL00-J	Prevent class initialization cycles	Low	Unlikely	Medium	2	3
1	DCL01-J	Do not reuse public identifiers from the Java Standard Library	Low	Unlikely	Medium	2	3
1	DCL02-J	Declare all enhanced for statement loop variables final	Low	Unlikely	Low	3	3
1	DRD00-J	Do not store sensitive information on external storage (SD card) unless encrypted first	High	Probable	Medium	12	1
1	DRD01-J	Limit the accessibility of an app's sensitive content provider	High	Probable	Low	18	1
1	DRD02-J	Do not allow WebView to access sensitive local resource through file scheme	High	Probable	High	6	2
1	DRD03-J	Do not broadcast sensitive information using an implicit intent	High	Probable	Medium	12	1
1	DRD04-J	Do not log sensitive information	High	Probable	Medium	12	1
1	DRD05-J	Do not grant URI permissions on implicit intents	High	Probable	Medium	12	1
1	DRD06-J	Do not act on malicious intents	High	Probable	Medium	12	1
1	DRD07-J	Protect exported services with strong permissions	High	Probable	Medium	12	1
1	DRD08-J	Always canonicalize a URL received by a content provider	High	Probable	Low	18	1
1	DRD09-J	Restrict access to sensitive activities	High	Probable	Medium	12	1
1	DRD10-J	Do not release apps that are debuggable	High	Probable	Low	18	1
1	DRD11-J	Ensure that sensitive data is kept secure	High	Probable	Medium	12	1
1	DRD12-J	Do not trust data that is world writable	High	Probable	Medium	12	1
1	DRD13-J	Do not provide addJavascriptInterface method access in a WebView which could contain untrusted content. (API level JELLY_BEAN or beLow)	High	Probable	Medium	12	1
1	DRD14-J	Check that a calling app has appropriate permissions before responding	High	Probable	Medium	12	1
1	DRD15-J	Consider privacy concerns when using Geolocation API	Low	Probable	Medium	4	3
1	DRD16-J	Explicitly define the exported attribute for private components	Medium	Probable	Medium	8	2
1	DRD17-J	Do not use the Android cryptographic security provider encryption default for AES	High	Likely	Medium	18	1
1	DRD18-J	Do not use the default behavior in a cryptographic library if it does not use recommended practices	High	Likely	Medium	18	1
1	DRD19-J	Properly verify server certificate on SSL/TLS	High	Probable	Medium	12	1
1	DRD20-J	Specify permissions when creating files via the NDK	High	Probable	Medium	12	1
1	DRD21-J	Always pass explicit intents to a PendingIntent	Medium	Probable	Medium	8	2
1	ENV00-J	Do not sign code that performs only unprivileged operations	High	Probable	Medium	12	1
1	ENV01-J	Place all security-sensitive code in a single JAR and sign and seal it	High	Probable	Medium	12	1
1	ENV02-J	Do not trust the values of environment variables	Low	likely	Low	9	2
1	ENV03-J	Do not grant dangerous combinations of permissions	High	likely	Low	27	1
1	ENV04-J	Do not disable bytecode verification	High	likely	Low	27	1
1	ENV05-J	Do not deploy an application that can be remotely monitored	High	Probable	Low	18	1
1	ENV06-J	Production code must not contain debugging entry points	High	Probable	Low	18	1
1	ERR00-J	Do not suppress or ignore checked exceptions	Low	Probable	Medium	4	3
1	ERR01-J	Do not allow exceptions to expose sensitive information	Medium	Probable	High	4	3
1	ERR02-J	Prevent exceptions while logging data	Medium	likely	High	6	2
1	ERR03-J	Restore prior object state on method failure	Low	Probable	High	2	3
1	ERR04-J	Do not complete abruptly from a finally block	Low	Probable	Medium	4	3
1	ERR05-J	Do not let checked exceptions escape from a finally block	Low	Unlikely	Medium	2	3
1	ERR06-J	Do not throw undeclared checked exceptions	Low	Unlikely	High	1	3
1	ERR07-J	Do not throw RuntimeException, Exception, or Throwable	Low	likely	Medium	6	2
1	ERR08-J	Do not catch NullPointerException or any of its ancestors	Medium	likely	Medium	12	1
1	ERR09-J	Do not allow untrusted code to terminate the JVM	Low	Unlikely	Medium	2	3
1	EXP00-J	Do not ignore values returned by methods	Medium	Probable	Medium	8	2
1	EXP01-J	Never dereference null pointers	Low	Likely	High	3	3
1	EXP02-J	Use the two-argument Arrays.equals() method to compare the contents of arrays	Low	Likely	Low	9	2
1	EXP03-J	Do not use the equality operators when comparing values of boxed primitives	Low	likely	Medium	6	2
1	EXP04-J	Ensure that autoboxed values have the intended type	Low	Probable	Low	6	2
1	EXP05-J	Do not write more than once to the same variable within an expression	Low	Unlikely	Medium	2	3
1	EXP06-J	Do not use side-effecting expressions in assertions	Low	Unlikely	Low	3	3
1	EXP07-J	Prevent loss of useful data due to weak references	Low	Probable	Medium	4	3
1	FIO00-J	Do not operate on files in shared directories	Medium	Unlikely	Medium	4	3
1	FIO01-J	Create files with appropriate access permissions	Medium	Probable	High	4	3
1	FIO02-J	Detect and handle file-related errors	Medium	Probable	Medium	8	2
1	FIO03-J	Remove temporary files before termination	Medium	Probable	Medium	8	2
1	FIO04-J	Release resources when they are no longer needed	Low	Probable	Medium	4	3
1	FIO05-J	Do not expose buffers created using the wrap() or duplicate() methods to untrusted code	Medium	likely	Low	18	1
1	FIO06-J	Do not create multiple buffered wrappers on a single InputStream	Low	Unlikely	Medium	2	3
1	FIO07-J	Do not let external processes block on IO buffers	Low	Probable	Medium	4	3
1	FIO08-J	Use an int to capture the return value of methods that read a character or byte	High	Probable	Medium	12	1
1	FIO09-J	Do not rely on the write() method to output integers outside the range 0 to 255	Low	Unlikely	Medium	2	3
1	FIO10-J	Ensure the array is filled when using read() to fill an array	Low	Unlikely	Medium	2	3
1	FIO11-J	Do not attempt to read raw binary data as character data	Low	Unlikely	Medium	2	3
1	FIO12-J	Provide methods to read and write little-endian data	Low	Unlikely	Low	3	3
1	FIO13-J	Do not log sensitive information outside a trust boundary	Medium	Probable	High	4	3
1	FIO14-J	Perform proper cleanup at program termination	Medium	likely	Medium	12	1
1	FIO15-J	Do not operate on untrusted file links	Medium	Unlikely	Medium	4	3
1	FIO16-J	Do not reset a servlet's output stream after committing it	Low	Probable	Medium	4	3
1	IDS00-J	Prevent SQL Injection	High	Probable	Medium	12	1
1	IDS01-J	Normalize strings before validating them	High	Probable	Medium	12	1
1	IDS02-J	Canonicalize path names before validating them	Medium	Unlikely	Medium	4	3
1	IDS03-J	Do not log unsanitized user input	Medium	Probable	Medium	8	2
1	IDS04-J	Safely extract files from ZipInputStream	Low	Probable	High	2	3
1	IDS05-J	Use a subset of ASCII for file and path names	Medium	Unlikely	Medium	4	3
1	IDS06-J	Exclude unsanitized user input from format strings	Medium	Unlikely	Medium	4	3
1	IDS07-J	Do not pass untrusted, unsanitized data to the Runtime.exec() method	High	Probable	Medium	12	1
1	IDS08-J	Sanitize untrusted data passed to a regex	Medium	Unlikely	Medium	4	3
1	IDS09-J	Specify an appropriate locale when inspecting locale-dependent data	Medium	Probable	Medium	8	2
1	IDS10-J	Do not split characters between two data structures	Low	Unlikely	Medium	2	3
1	IDS11-J	Eliminate noncharacter code points before validation	High	Probable	Medium	12	1
1	IDS12-J	Perform lossless conversion of String data between differing character encodings	Low	Probable	Medium	4	3
1	IDS13-J	Use compatible encodings on both sides of file or network IO	Low	Unlikely	Medium	2	3
1	IDS14-J	Do not trust the contents of hidden form fields	High	Probable	High	6	2
1	IDS15-J	Do not allow sensitive information to leak outside a trust boundary	Medium	Likely	High	6	2
1	IDS16-J	Prevent XML Injection	High	Probable	Medium	12	1
1	JNI00-J	Define wrappers around native methods	Medium	Probable	High	4	3
1	JNI01-J	Safely invoke standard APIs that perform tasks using the immediate caller's class loader instance (loadLibrary)	High	Likely	Low	27	1
1	JNI02-J	Do not assume object references are constant or unique	Low	Probable	High	2	3
1	JNI03-J	Do not use direct pointers to Java objects in JNI code	High	Probable	Low	18	1
1	JNI04-J	Do not assume that Java strings are null-terminated	Low	Probable	Medium	4	3
1	LCK00-J	Use private final lock objects to synchronize classes that may interact with untrusted code	Low	Probable	Medium	4	3
1	LCK01-J	Do not synchronize on objects that may be reused	Medium	Probable	Medium	8	2
1	LCK02-J	Do not synchronize on the class object returned by getClass()	Medium	Probable	Medium	8	2
1	LCK03-J	Do not synchronize on the intrinsic locks of High-level concurrency objects	Medium	Probable	Medium	8	2
1	LCK04-J	Do not synchronize on a collection view if the backing collection is accessible	Low	Probable	Medium	4	3
1	LCK05-J	Synchronize access to static fields that can be modified by untrusted code	Low	Probable	Medium	4	3
1	LCK06-J	Do not use an instance lock to protect shared static data	Medium	Probable	Medium	8	2
1	LCK07-J	Avoid deadlock by requesting and releasing locks in the same order	Low	Likely	High	3	3
1	LCK08-J	Ensure actively held locks are released on exceptional conditions	Low	likely	Low	9	2
1	LCK09-J	Do not perform operations that can block while holding a lock	Low	Probable	High	2	3
1	LCK10-J	Do not use incorrect forms of the double-checked locking idiom	Low	Probable	Medium	4	3
1	LCK11-J	Avoid client-side locking when using classes that do not commit to their locking strategy	Low	Probable	Medium	4	3
1	MET00-J	Validate method arguments	High	likely	High	9	2
1	MET01-J	Never use assertions to validate method arguments	Medium	Probable	Medium	8	2
1	MET02-J	Do not use deprecated or obsolete classes or methods	Low	Unlikely	Medium	2	3
1	MET03-J	Methods that perform a security check must be declared private or final	Medium	Probable	Medium	8	2
1	MET04-J	Do not increase the accessibility of overridden or hidden methods	Medium	Probable	Medium	8	2
1	MET05-J	Ensure that constructors do not call overridable methods	Medium	Probable	Medium	8	2
1	MET06-J	Do not invoke overridable methods in clone()	Medium	Probable	Low	12	1
1	MET07-J	Never declare a class method that hides a method declared in a superclass or superinterface	Low	Unlikely	Medium	2	3
1	MET08-J	Preserve the equality contract when overriding the equals() method	Low	Unlikely	Medium	2	3
1	MET09-J	Classes that define an equals() method must also define a hashCode() method	Low	Unlikely	High	1	3
1	MET10-J	FolLow the general contract when implementing the compareTo() method	Medium	Unlikely	Medium	4	3
1	MET11-J	Ensure that keys used in comparison operations are immutable	Low	Probable	High	2	3
1	MET12-J	Do not use finalizers	Medium	Probable	Medium	8	2
1	MET13-J	Do not assume that reassigning method arguments modifies the calling environment	Medium	Likely	High	6	2
1	MSC00-J	Use SSLSocket rather than Socket for secure data exchange	Medium	likely	High	6	2
1	MSC01-J	Do not use an empty infinite loop	Low	Unlikely	Medium	2	3
1	MSC02-J	Generate strong random numbers	High	Probable	Medium	12	1
1	MSC03-J	Never hard code sensitive information	High	Probable	Medium	12	1
1	MSC04-J	Do not leak memory	Low	Unlikely	High	1	3
1	MSC05-J	Do not exhaust heap space	Low	Probable	Medium	4	3
1	MSC06-J	Do not modify the underlying collection when an iteration is in progress	Low	Probable	Medium	4	3
1	MSC07-J	Prevent multiple instantiations of singleton objects	Low	Unlikely	Medium	2	3
1	MSC08-J	Do not store non-serializable objects as attributes in an HTTP session	Low	Probable	High	2	3
1	NUM00-J	Detect or prevent integer overfLow	Medium	Unlikely	Medium	4	3
1	NUM01-J	Do not perform bitwise and arithmetic operations on the same data	Medium	Unlikely	Medium	4	3
1	NUM02-J	Ensure that division and remainder operations do not result in divide-by-zero errors	Low	likely	Medium	6	2
1	NUM03-J	Use integer types that can fully represent the possible range of unsigned data	Low	Unlikely	Medium	2	3
1	NUM04-J	Do not use floating-point numbers if precise computation is required	Low	Probable	High	2	3
1	NUM05-J	Do not use denormalized numbers	Low	Probable	High	2	3
1	NUM06-J	Use the strictfp modifier for floating-point calculation consistency across platforms	Low	Unlikely	High	1	3
1	NUM07-J	Do not attempt comparisons with NaN	Low	Probable	Medium	4	3
1	NUM08-J	Check floating-point inputs for exceptional values	Low	Probable	Medium	4	3
1	NUM09-J	Do not use floating-point variables as loop counters	Low	Probable	Low	6	2
1	NUM10-J	Do not construct BigDecimal objects from floating-point literals	Low	Probable	Low	6	2
1	NUM11-J	Do not compare or inspect the string representation of floating-point values	Low	likely	Medium	6	2
1	NUM12-J	Ensure conversions of numeric types to narrower types do not result in lost or misinterpreted data	Low	Unlikely	Medium	2	3
1	NUM13-J	Avoid loss of precision when converting primitive integers to floating-point	Low	Unlikely	Medium	2	3
1	NUM14-J	Use shift operators correctly	Low	Probable	Medium	4	3
1	OBJ00-J	Limit extensibility of classes and methods with invariants	Medium	Likely	Medium	12	1
1	OBJ01-J	Declare data members as private and provide accessible wrapper methods	Medium	likely	Medium	12	1
1	OBJ02-J	Preserve dependencies in subclasses when changing superclasses	Medium	Probable	High	4	3
1	OBJ03-J	Prevent heap pollution	Low	Probable	Medium	4	3
1	OBJ04-J	Provide mutable classes with copy functionality to safely allow passing instances to untrusted code	Low	likely	Medium	6	2
1	OBJ05-J	Defensively copy private mutable class members before returning their references	High	Probable	Medium	12	1
1	OBJ06-J	Defensively copy mutable inputs and mutable internal components	Medium	Probable	High	4	3
1	OBJ07-J	Sensitive classes must not let themselves be copied	Medium	Probable	Medium	8	2
1	OBJ08-J	Do not expose private members of an outer class from within a nested class	Medium	Probable	Medium	8	2
1	OBJ09-J	Compare classes and not class names	High	Unlikely	Low	9	2
1	OBJ10-J	Do not use public static nonfinal variables	Medium	Probable	Medium	8	2
1	OBJ11-J	Be wary of letting constructors throw exceptions	High	Probable	Medium	12	1
1	OBJ12-J	Respect object-based annotations	Low	Probable	Medium	4	3
1	OBJ13-J	Ensure that references to mutable objects are not exposed	Medium	Likely	Low	18	1
1	OBJ14-J	Do not use an object that has been freed.	Medium	Likely	High	6	2
1	SEC00-J	Do not allow privileged blocks to leak sensitive information across a trust boundary	Medium	likely	High	6	2
1	SEC01-J	Do not allow tainted variables in privileged blocks	High	likely	Low	27	1
1	SEC02-J	Do not base security checks on untrusted sources	High	Probable	Medium	12	1
1	SEC03-J	Do not load trusted classes after allowing untrusted code to load arbitrary classes	High	Probable	Medium	12	1
1	SEC04-J	Protect sensitive operations with security manager checks	High	Probable	Medium	12	1
1	SEC05-J	Do not use reflection to increase accessibility of classes, methods, or fields	High	Probable	Medium	12	1
1	SEC06-J	Do not rely on the default automatic signature verification provided by URLClassLoader and java.util.jar	High	Probable	Medium	12	1
1	SEC07-J	Call the superclass's getPermissions() method when writing a custom class loader	High	Probable	Low	18	1
1	SER00-J	Enable serialization compatibility during class evolution	Low	Probable	High	2	3
1	SER01-J	Do not deviate from the proper signatures of serialization methods	High	likely	Low	27	1
1	SER02-J	Sign then seal sensitive objects before sending them outside a trust boundary	Medium	Probable	High	4	3
1	SER03-J	Do not serialize unencrypted, sensitive data	Medium	likely	High	6	2
1	SER04-J	Do not allow serialization and deserialization to bypass the security manager	High	Probable	High	6	2
1	SER05-J	Do not serialize instances of inner classes	Medium	likely	Medium	12	1
1	SER06-J	Make defensive copies of private mutable components during deserialization	Low	Probable	Medium	4	3
1	SER07-J	Do not use the default serialized form for classes with implementation-defined invariants	Medium	Probable	High	4	3
1	SER08-J	Minimize privileges before deserializing from a privileged context	High	likely	Medium	18	1
1	SER09-J	Do not invoke overridable methods from the readObject() method	Low	Probable	Medium	4	3
1	SER10-J	Avoid memory and resource leaks during serialization	Low	Unlikely	Low	3	3
1	SER11-J	Prevent overwriting of externalizable objects	Low	Probable	Low	6	2
1	THI00-J	Do not invoke Thread.run()	Low	Probable	Medium	4	3
1	THI01-J	Do not invoke ThreadGroup methods	Low	Probable	Medium	4	3
1	THI02-J	Notify all waiting threads rather than a single thread	Low	Unlikely	Medium	2	3
1	THI03-J	Always invoke wait() and await() methods inside a loop	Low	Unlikely	Medium	2	3
1	THI04-J	Ensure that threads performing blocking operations can be terminated	Low	Probable	Medium	4	3
1	THI05-J	Do not use Thread.stop() to terminate threads	Low	Probable	Medium	4	3
1	TPS00-J	Use thread pools to enable graceful degradation of service during traffic bursts	Low	Probable	High	2	3
1	TPS01-J	Do not execute interdependent tasks in a bounded thread pool	Low	Probable	Medium	4	3
1	TPS02-J	Ensure that tasks submitted to a thread pool are interruptible	Low	Probable	Medium	4	3
1	TPS03-J	Ensure that tasks executing in a thread pool do not fail silently	Low	Probable	Medium	4	3
1	TPS04-J	Ensure ThreadLocal variables are reinitialized when using thread pools	Medium	Probable	High	4	3
1	TSM00-J	Do not override thread-safe methods with methods that are not thread-safe	Low	Probable	Medium	4	3
1	TSM01-J	Do not let the this reference escape during object construction	Medium	Probable	High	4	3
1	TSM02-J	Do not use background threads during class initialization	Low	Probable	High	2	3
1	TSM03-J	Do not publish partially initialized objects	Medium	Probable	Medium	8	2
1	VNA00-J	Ensure visibility when accessing shared primitive variables	Medium	Probable	Medium	8	2
1	VNA01-J	Ensure visibility of shared references to immutable objects	Low	Probable	Medium	4	3
1	VNA02-J	Ensure that compound operations on shared variables are atomic	Medium	Probable	Medium	8	2
1	VNA03-J	Do not assume that a group of calls to independently atomic methods is atomic	Low	Probable	Medium	4	3
1	VNA04-J	Ensure that calls to chained methods are atomic	Low	Probable	Medium	4	3
1	VNA05-J	Ensure atomicity when reading and writing 64-bit values	Low	Unlikely	Medium	2	3
1	VNA06-J	Do not use non-static member fields in a servlet	Medium	Likely	High	6	3
1	IDS30-PL	Exclude user input from format strings	High	Probable	Low	18	1
1	IDS31-PL	Do not use the two-argument form of open()	High	Likely	Low	27	1
1	IDS32-PL	Validate any integer that is used as an array index	Low	Likely	High	3	3
1	IDS33-PL	Sanitize untrusted data passed across a trust boundary	High	Likely	High	9	2
1	IDS34-PL	Do not pass untrusted, unsanitized data to a command interpreter	High	Probable	Medium	12	1
1	IDS35-PL	Do not invoke the eval form with a string argument	High	Likely	Medium	18	1
1	DCL30-PL	Do not import deprecated modules	Medium	Likely	Low	18	1
1	DCL31-PL	Do not overload reserved keywords or subroutines	Low	Probable	Medium	4	3
1	DCL33-PL	Declare identifiers before using them	Low	Probable	High	2	3
1	EXP30-PL	Do not use deprecated or obsolete functions or modules	Medium	Probable	Low	12	1
1	EXP31-PL	Do not suppress or ignore exceptions	Low	Probable	Medium	4	3
1	EXP32-PL	Do not ignore function return values	Medium	Probable	Low	12	1
1	EXP33-PL	Do not invoke a function in a context for which it is not defined	Medium	Unlikely	Low	6	2
1	EXP34-PL	Do not modify $_ in list or sorting functions	Medium	Likely	Low	18	1
1	EXP35-PL	Use the correct operator type for comparing values	Low	Likely	Low	9	2
1	EXP37-PL	Do not use the one-argument form of select()	Medium	Unlikely	Medium	4	3
1	STR30-PL	Capture variables should be read only immediately after a successful regex match	Medium	Probable	Medium	8	2
1	STR31-PL	Do not pass string literals to functions expecting regexes	Low	Likely	Low	9	2
1	OOP31-PL	Do not access private variables or subroutines in other packages	Medium	Probable	Medium	8	2
1	OOP32-PL	Prohibit indirect object call syntax	Low	Probable	Medium	4	3
1	FIO30-PL	Use compatible character encodings when performing network or file I/O	Low	Unlikely	Medium	2	3
1	MSC30-PL	Do not use comma to separate statements	Low	Probable	Medium	4	3
1	MSC31-PL	Do not embed global statements	Low	Unlikely	Low	3	3
1	MSC32-PL	Do not provide a module's version value from outside the module	Low	Unlikely	Medium	2	3
1	DCL00-PL	Do not use subroutine prototypes	Low	Likely	Low	9	2
1	DCL01-PL	Do not reuse variable names in subscopes	Low	Probable	Medium	4	3
1	DCL02-PL	Any modified punctuation variable should be declared local	Low	Probable	Medium	4	3
1	DCL03-PL	Do not read a foreach iterator variable after the loop has completed	Low	Unlikely	Low	3	3
1	DCL04-PL	Always initialize local variables	Low	Probable	Medium	4	3
1	DCL05-PL	Prohibit Perl4 package names	Low	Improbable	Low	6	2
1	EXP00-PL	Do not return undef	Low	Unlikely	Low	3	3
1	EXP01-PL	Do not depend on the return value of functions that lack a return statement	Medium	Likely	Low	18	1
1	EXP03-PL	Do not diminish the benefits of constants by assuming their values in expressions	Low	Unlikely	Medium	2	3
1	EXP04-PL	Do not mix the early-precedence logical operators with late-precedence logical operators	Low	Unlikely	Low	3	3
1	EXP06-PL	Do not use an array in an implicit scalar context	Low	Unlikely	Medium	2	3
1	FIO00-PL	Do not use bareword file handles	Medium	Probable	Low	12	1
1	FIO01-PL	Do not operate on files that can be modified by untrusted users	Medium	Unlikely	Medium	4	3
1	IDS00-PL	Canonicalize path names before validating them	Medium	Unlikely	Medium	4	3
1	IDS01-PL	Use taint mode while being aware of its limitations	Medium	Probable	Medium	8	2
1	INT00-PL	Do not prepend leading zeroes to integer literals	Low	Probable	Medium	4	3
1	INT01-PL	Use small integers when precise computation is required	Medium	Probable	High	4	3
1	MSC00-PL	Detect and remove dead code	Low	Unlikely	High	1	3
1	MSC01-PL	Detect and remove unused variables	Low	Unlikely	High	1	3
1	MSC02-PL	Run programs with full warnings and strict checking	Low	Unlikely	Medium	2	3
1	OOP00-PL	Do not signify inheritence at runtime	Low	Unlikely	Low	3	3
